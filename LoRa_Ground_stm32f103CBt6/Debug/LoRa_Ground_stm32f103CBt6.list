
LoRa_Ground_stm32f103CBt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cdc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08008de8  08008de8  00018de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009088  08009088  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009088  08009088  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009088  08009088  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800908c  0800908c  0001908c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b8  200001e0  08009270  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001498  08009270  00021498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151b8  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003463  00000000  00000000  000353c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00038828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00039558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a039  00000000  00000000  0003a140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e79  00000000  00000000  00054179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008796e  00000000  00000000  00064ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec960  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b00  00000000  00000000  000ec9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008dd0 	.word	0x08008dd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08008dd0 	.word	0x08008dd0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4a05      	ldr	r2, [pc, #20]	; (800017c <HAL_UART_RxCpltCallback+0x20>)
 8000168:	4293      	cmp	r3, r2
 800016a:	d103      	bne.n	8000174 <HAL_UART_RxCpltCallback+0x18>
		 memcpy(lora_rec_string, uart_buff, buff_counter + 1);
		 CDC_Transmit_FS(lora_rec_string, buff_counter + 1);
		 buff_counter = 0;
		 }*/

		CDC_Transmit_FS(uart_buff, 32);
 800016c:	2120      	movs	r1, #32
 800016e:	4804      	ldr	r0, [pc, #16]	; (8000180 <HAL_UART_RxCpltCallback+0x24>)
 8000170:	f007 fc3c 	bl	80079ec <CDC_Transmit_FS>

	}
}
 8000174:	bf00      	nop
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	20000470 	.word	0x20000470
 8000180:	200001fc 	.word	0x200001fc

08000184 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4a06      	ldr	r2, [pc, #24]	; (80001a8 <HAL_UART_TxCpltCallback+0x24>)
 8000190:	4293      	cmp	r3, r2
 8000192:	d104      	bne.n	800019e <HAL_UART_TxCpltCallback+0x1a>
		HAL_UART_Receive_IT(&huart1, uart_buff, 32);
 8000194:	2220      	movs	r2, #32
 8000196:	4905      	ldr	r1, [pc, #20]	; (80001ac <HAL_UART_TxCpltCallback+0x28>)
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <HAL_UART_TxCpltCallback+0x24>)
 800019a:	f003 f946 	bl	800342a <HAL_UART_Receive_IT>
	}
}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000470 	.word	0x20000470
 80001ac:	200001fc 	.word	0x200001fc

080001b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b08e      	sub	sp, #56	; 0x38
 80001b4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001b6:	f000 fb55 	bl	8000864 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001ba:	f000 f94d 	bl	8000458 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001be:	f000 f9cf 	bl	8000560 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80001c2:	f000 f9a3 	bl	800050c <MX_USART1_UART_Init>
	MX_USB_DEVICE_Init();
 80001c6:	f007 fb33 	bl	8007830 <MX_USB_DEVICE_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (COMdataAvailable) {
 80001ca:	4b8f      	ldr	r3, [pc, #572]	; (8000408 <main+0x258>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d0fb      	beq.n	80001ca <main+0x1a>
			COMdataAvailable = 0;
 80001d2:	4b8d      	ldr	r3, [pc, #564]	; (8000408 <main+0x258>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	701a      	strb	r2, [r3, #0]

			if (!strncmp(buffer, "PID_R", 5)) {
 80001d8:	2205      	movs	r2, #5
 80001da:	498c      	ldr	r1, [pc, #560]	; (800040c <main+0x25c>)
 80001dc:	488c      	ldr	r0, [pc, #560]	; (8000410 <main+0x260>)
 80001de:	f008 f84f 	bl	8008280 <strncmp>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d125      	bne.n	8000234 <main+0x84>
				pid_transmit_struct.command = 2;
 80001e8:	4b8a      	ldr	r3, [pc, #552]	; (8000414 <main+0x264>)
 80001ea:	2202      	movs	r2, #2
 80001ec:	701a      	strb	r2, [r3, #0]
				int P, I, D;
				sscanf(buffer, "PID_R %d %d %d", &P, &I, &D);
 80001ee:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80001f2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80001f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001fa:	9300      	str	r3, [sp, #0]
 80001fc:	460b      	mov	r3, r1
 80001fe:	4986      	ldr	r1, [pc, #536]	; (8000418 <main+0x268>)
 8000200:	4883      	ldr	r0, [pc, #524]	; (8000410 <main+0x260>)
 8000202:	f008 f811 	bl	8008228 <siscanf>

				pid_transmit_struct.P = (uint16_t) P;
 8000206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000208:	b29a      	uxth	r2, r3
 800020a:	4b82      	ldr	r3, [pc, #520]	; (8000414 <main+0x264>)
 800020c:	805a      	strh	r2, [r3, #2]
				pid_transmit_struct.I = (uint16_t) I;
 800020e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000210:	b29a      	uxth	r2, r3
 8000212:	4b80      	ldr	r3, [pc, #512]	; (8000414 <main+0x264>)
 8000214:	809a      	strh	r2, [r3, #4]
				pid_transmit_struct.D = (uint16_t) D;
 8000216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000218:	b29a      	uxth	r2, r3
 800021a:	4b7e      	ldr	r3, [pc, #504]	; (8000414 <main+0x264>)
 800021c:	80da      	strh	r2, [r3, #6]

				memcpy(lora_tx_buff, &pid_transmit_struct,
 800021e:	4b7f      	ldr	r3, [pc, #508]	; (800041c <main+0x26c>)
 8000220:	4a7c      	ldr	r2, [pc, #496]	; (8000414 <main+0x264>)
 8000222:	6810      	ldr	r0, [r2, #0]
 8000224:	6851      	ldr	r1, [r2, #4]
 8000226:	c303      	stmia	r3!, {r0, r1}
						sizeof(pid_transmit_struct));

				HAL_UART_Transmit_IT(&huart1, lora_tx_buff,
 8000228:	2220      	movs	r2, #32
 800022a:	497c      	ldr	r1, [pc, #496]	; (800041c <main+0x26c>)
 800022c:	487c      	ldr	r0, [pc, #496]	; (8000420 <main+0x270>)
 800022e:	f003 f8b8 	bl	80033a2 <HAL_UART_Transmit_IT>
 8000232:	e7ca      	b.n	80001ca <main+0x1a>
						sizeof(lora_tx_buff));

			} else if (!strncmp(buffer, "PID_P", 5)) {
 8000234:	2205      	movs	r2, #5
 8000236:	497b      	ldr	r1, [pc, #492]	; (8000424 <main+0x274>)
 8000238:	4875      	ldr	r0, [pc, #468]	; (8000410 <main+0x260>)
 800023a:	f008 f821 	bl	8008280 <strncmp>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d125      	bne.n	8000290 <main+0xe0>
				pid_transmit_struct.command = 3;
 8000244:	4b73      	ldr	r3, [pc, #460]	; (8000414 <main+0x264>)
 8000246:	2203      	movs	r2, #3
 8000248:	701a      	strb	r2, [r3, #0]
				int P, I, D;
				sscanf(buffer, "PID_P %d %d %d", &P, &I, &D);
 800024a:	f107 011c 	add.w	r1, r7, #28
 800024e:	f107 0220 	add.w	r2, r7, #32
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	9300      	str	r3, [sp, #0]
 8000258:	460b      	mov	r3, r1
 800025a:	4973      	ldr	r1, [pc, #460]	; (8000428 <main+0x278>)
 800025c:	486c      	ldr	r0, [pc, #432]	; (8000410 <main+0x260>)
 800025e:	f007 ffe3 	bl	8008228 <siscanf>

				pid_transmit_struct.P = (uint16_t) P;
 8000262:	6a3b      	ldr	r3, [r7, #32]
 8000264:	b29a      	uxth	r2, r3
 8000266:	4b6b      	ldr	r3, [pc, #428]	; (8000414 <main+0x264>)
 8000268:	805a      	strh	r2, [r3, #2]
				pid_transmit_struct.I = (uint16_t) I;
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	b29a      	uxth	r2, r3
 800026e:	4b69      	ldr	r3, [pc, #420]	; (8000414 <main+0x264>)
 8000270:	809a      	strh	r2, [r3, #4]
				pid_transmit_struct.D = (uint16_t) D;
 8000272:	69bb      	ldr	r3, [r7, #24]
 8000274:	b29a      	uxth	r2, r3
 8000276:	4b67      	ldr	r3, [pc, #412]	; (8000414 <main+0x264>)
 8000278:	80da      	strh	r2, [r3, #6]

				memcpy(lora_tx_buff, &pid_transmit_struct,
 800027a:	4b68      	ldr	r3, [pc, #416]	; (800041c <main+0x26c>)
 800027c:	4a65      	ldr	r2, [pc, #404]	; (8000414 <main+0x264>)
 800027e:	6810      	ldr	r0, [r2, #0]
 8000280:	6851      	ldr	r1, [r2, #4]
 8000282:	c303      	stmia	r3!, {r0, r1}
						sizeof(pid_transmit_struct));

				HAL_UART_Transmit_IT(&huart1, lora_tx_buff,
 8000284:	2220      	movs	r2, #32
 8000286:	4965      	ldr	r1, [pc, #404]	; (800041c <main+0x26c>)
 8000288:	4865      	ldr	r0, [pc, #404]	; (8000420 <main+0x270>)
 800028a:	f003 f88a 	bl	80033a2 <HAL_UART_Transmit_IT>
 800028e:	e79c      	b.n	80001ca <main+0x1a>
						sizeof(lora_tx_buff));

			} else if (!strncmp(buffer, "OFFSET", 6)) {
 8000290:	2206      	movs	r2, #6
 8000292:	4966      	ldr	r1, [pc, #408]	; (800042c <main+0x27c>)
 8000294:	485e      	ldr	r0, [pc, #376]	; (8000410 <main+0x260>)
 8000296:	f007 fff3 	bl	8008280 <strncmp>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d11e      	bne.n	80002de <main+0x12e>
				offset_transmit_struct.command = 5;
 80002a0:	4b63      	ldr	r3, [pc, #396]	; (8000430 <main+0x280>)
 80002a2:	2205      	movs	r2, #5
 80002a4:	701a      	strb	r2, [r3, #0]

				int Pitch, Roll;
				sscanf(buffer, "OFFSET %d %d", &Pitch, &Roll);
 80002a6:	f107 0310 	add.w	r3, r7, #16
 80002aa:	f107 0214 	add.w	r2, r7, #20
 80002ae:	4961      	ldr	r1, [pc, #388]	; (8000434 <main+0x284>)
 80002b0:	4857      	ldr	r0, [pc, #348]	; (8000410 <main+0x260>)
 80002b2:	f007 ffb9 	bl	8008228 <siscanf>

				offset_transmit_struct.offsetP = Pitch;
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	b21a      	sxth	r2, r3
 80002ba:	4b5d      	ldr	r3, [pc, #372]	; (8000430 <main+0x280>)
 80002bc:	809a      	strh	r2, [r3, #4]
				offset_transmit_struct.offsetR = Roll;
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	b21a      	sxth	r2, r3
 80002c2:	4b5b      	ldr	r3, [pc, #364]	; (8000430 <main+0x280>)
 80002c4:	805a      	strh	r2, [r3, #2]

				memcpy(lora_tx_buff, &offset_transmit_struct,
 80002c6:	4b55      	ldr	r3, [pc, #340]	; (800041c <main+0x26c>)
 80002c8:	4a59      	ldr	r2, [pc, #356]	; (8000430 <main+0x280>)
 80002ca:	6810      	ldr	r0, [r2, #0]
 80002cc:	6018      	str	r0, [r3, #0]
 80002ce:	8892      	ldrh	r2, [r2, #4]
 80002d0:	809a      	strh	r2, [r3, #4]
						sizeof(offset_transmit_struct));
				HAL_UART_Transmit_IT(&huart1, lora_tx_buff,
 80002d2:	2220      	movs	r2, #32
 80002d4:	4951      	ldr	r1, [pc, #324]	; (800041c <main+0x26c>)
 80002d6:	4852      	ldr	r0, [pc, #328]	; (8000420 <main+0x270>)
 80002d8:	f003 f863 	bl	80033a2 <HAL_UART_Transmit_IT>
 80002dc:	e775      	b.n	80001ca <main+0x1a>
						sizeof(lora_tx_buff));

			} else if (!strncmp(buffer, "PID_ALT", 7)) {
 80002de:	2207      	movs	r2, #7
 80002e0:	4955      	ldr	r1, [pc, #340]	; (8000438 <main+0x288>)
 80002e2:	484b      	ldr	r0, [pc, #300]	; (8000410 <main+0x260>)
 80002e4:	f007 ffcc 	bl	8008280 <strncmp>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d124      	bne.n	8000338 <main+0x188>

				pid_transmit_struct.command = 6;
 80002ee:	4b49      	ldr	r3, [pc, #292]	; (8000414 <main+0x264>)
 80002f0:	2206      	movs	r2, #6
 80002f2:	701a      	strb	r2, [r3, #0]
				int P, I, D;
				sscanf(buffer, "PID_ALT %d %d %d", &P, &I, &D);
 80002f4:	f107 0108 	add.w	r1, r7, #8
 80002f8:	f107 020c 	add.w	r2, r7, #12
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	460b      	mov	r3, r1
 8000302:	494e      	ldr	r1, [pc, #312]	; (800043c <main+0x28c>)
 8000304:	4842      	ldr	r0, [pc, #264]	; (8000410 <main+0x260>)
 8000306:	f007 ff8f 	bl	8008228 <siscanf>

				pid_transmit_struct.P = (uint16_t) P;
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	b29a      	uxth	r2, r3
 800030e:	4b41      	ldr	r3, [pc, #260]	; (8000414 <main+0x264>)
 8000310:	805a      	strh	r2, [r3, #2]
				pid_transmit_struct.I = (uint16_t) I;
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	b29a      	uxth	r2, r3
 8000316:	4b3f      	ldr	r3, [pc, #252]	; (8000414 <main+0x264>)
 8000318:	809a      	strh	r2, [r3, #4]
				pid_transmit_struct.D = (uint16_t) D;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	b29a      	uxth	r2, r3
 800031e:	4b3d      	ldr	r3, [pc, #244]	; (8000414 <main+0x264>)
 8000320:	80da      	strh	r2, [r3, #6]

				memcpy(lora_tx_buff, &pid_transmit_struct,
 8000322:	4b3e      	ldr	r3, [pc, #248]	; (800041c <main+0x26c>)
 8000324:	4a3b      	ldr	r2, [pc, #236]	; (8000414 <main+0x264>)
 8000326:	6810      	ldr	r0, [r2, #0]
 8000328:	6851      	ldr	r1, [r2, #4]
 800032a:	c303      	stmia	r3!, {r0, r1}
						sizeof(pid_transmit_struct));

				HAL_UART_Transmit_IT(&huart1, lora_tx_buff,
 800032c:	2220      	movs	r2, #32
 800032e:	493b      	ldr	r1, [pc, #236]	; (800041c <main+0x26c>)
 8000330:	483b      	ldr	r0, [pc, #236]	; (8000420 <main+0x270>)
 8000332:	f003 f836 	bl	80033a2 <HAL_UART_Transmit_IT>
 8000336:	e748      	b.n	80001ca <main+0x1a>
						sizeof(lora_tx_buff));

			} else if(!strncmp(buffer, "GPS_POS", 7)){
 8000338:	2207      	movs	r2, #7
 800033a:	4941      	ldr	r1, [pc, #260]	; (8000440 <main+0x290>)
 800033c:	4834      	ldr	r0, [pc, #208]	; (8000410 <main+0x260>)
 800033e:	f007 ff9f 	bl	8008280 <strncmp>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d108      	bne.n	800035a <main+0x1aa>

				lora_tx_buff[0] = 7;
 8000348:	4b34      	ldr	r3, [pc, #208]	; (800041c <main+0x26c>)
 800034a:	2207      	movs	r2, #7
 800034c:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit_IT(&huart1, lora_tx_buff,
 800034e:	2220      	movs	r2, #32
 8000350:	4932      	ldr	r1, [pc, #200]	; (800041c <main+0x26c>)
 8000352:	4833      	ldr	r0, [pc, #204]	; (8000420 <main+0x270>)
 8000354:	f003 f825 	bl	80033a2 <HAL_UART_Transmit_IT>
 8000358:	e737      	b.n	80001ca <main+0x1a>
										sizeof(lora_tx_buff));
			}
			else if(!strncmp(buffer, "GPS_SPEED", 9)){
 800035a:	2209      	movs	r2, #9
 800035c:	4939      	ldr	r1, [pc, #228]	; (8000444 <main+0x294>)
 800035e:	482c      	ldr	r0, [pc, #176]	; (8000410 <main+0x260>)
 8000360:	f007 ff8e 	bl	8008280 <strncmp>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d108      	bne.n	800037c <main+0x1cc>
				lora_tx_buff[0] = 8;
 800036a:	4b2c      	ldr	r3, [pc, #176]	; (800041c <main+0x26c>)
 800036c:	2208      	movs	r2, #8
 800036e:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit_IT(&huart1, lora_tx_buff,
 8000370:	2220      	movs	r2, #32
 8000372:	492a      	ldr	r1, [pc, #168]	; (800041c <main+0x26c>)
 8000374:	482a      	ldr	r0, [pc, #168]	; (8000420 <main+0x270>)
 8000376:	f003 f814 	bl	80033a2 <HAL_UART_Transmit_IT>
 800037a:	e726      	b.n	80001ca <main+0x1a>
										sizeof(lora_tx_buff));
			}
			else if(!strncmp(buffer, "GET_COMPASS", 11)){
 800037c:	220b      	movs	r2, #11
 800037e:	4932      	ldr	r1, [pc, #200]	; (8000448 <main+0x298>)
 8000380:	4823      	ldr	r0, [pc, #140]	; (8000410 <main+0x260>)
 8000382:	f007 ff7d 	bl	8008280 <strncmp>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d108      	bne.n	800039e <main+0x1ee>
				lora_tx_buff[0] = 9;
 800038c:	4b23      	ldr	r3, [pc, #140]	; (800041c <main+0x26c>)
 800038e:	2209      	movs	r2, #9
 8000390:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit_IT(&huart1, lora_tx_buff,
 8000392:	2220      	movs	r2, #32
 8000394:	4921      	ldr	r1, [pc, #132]	; (800041c <main+0x26c>)
 8000396:	4822      	ldr	r0, [pc, #136]	; (8000420 <main+0x270>)
 8000398:	f003 f803 	bl	80033a2 <HAL_UART_Transmit_IT>
 800039c:	e715      	b.n	80001ca <main+0x1a>
										sizeof(lora_tx_buff));
			}
			else if(!strncmp(buffer, "GET_IMU", 7)){
 800039e:	2207      	movs	r2, #7
 80003a0:	492a      	ldr	r1, [pc, #168]	; (800044c <main+0x29c>)
 80003a2:	481b      	ldr	r0, [pc, #108]	; (8000410 <main+0x260>)
 80003a4:	f007 ff6c 	bl	8008280 <strncmp>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d108      	bne.n	80003c0 <main+0x210>
				lora_tx_buff[0] = 10;
 80003ae:	4b1b      	ldr	r3, [pc, #108]	; (800041c <main+0x26c>)
 80003b0:	220a      	movs	r2, #10
 80003b2:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit_IT(&huart1, lora_tx_buff,
 80003b4:	2220      	movs	r2, #32
 80003b6:	4919      	ldr	r1, [pc, #100]	; (800041c <main+0x26c>)
 80003b8:	4819      	ldr	r0, [pc, #100]	; (8000420 <main+0x270>)
 80003ba:	f002 fff2 	bl	80033a2 <HAL_UART_Transmit_IT>
 80003be:	e704      	b.n	80001ca <main+0x1a>
										sizeof(lora_tx_buff));
			}
			else if(!strncmp(buffer, "GYRO_RAW", 8)){
 80003c0:	2208      	movs	r2, #8
 80003c2:	4923      	ldr	r1, [pc, #140]	; (8000450 <main+0x2a0>)
 80003c4:	4812      	ldr	r0, [pc, #72]	; (8000410 <main+0x260>)
 80003c6:	f007 ff5b 	bl	8008280 <strncmp>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d108      	bne.n	80003e2 <main+0x232>
				lora_tx_buff[0] = 11;
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <main+0x26c>)
 80003d2:	220b      	movs	r2, #11
 80003d4:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit_IT(&huart1, lora_tx_buff,
 80003d6:	2220      	movs	r2, #32
 80003d8:	4910      	ldr	r1, [pc, #64]	; (800041c <main+0x26c>)
 80003da:	4811      	ldr	r0, [pc, #68]	; (8000420 <main+0x270>)
 80003dc:	f002 ffe1 	bl	80033a2 <HAL_UART_Transmit_IT>
 80003e0:	e6f3      	b.n	80001ca <main+0x1a>
										sizeof(lora_tx_buff));
			}
			else if(!strncmp(buffer, "ACCEL_RAW", 9)){
 80003e2:	2209      	movs	r2, #9
 80003e4:	491b      	ldr	r1, [pc, #108]	; (8000454 <main+0x2a4>)
 80003e6:	480a      	ldr	r0, [pc, #40]	; (8000410 <main+0x260>)
 80003e8:	f007 ff4a 	bl	8008280 <strncmp>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	f47f aeeb 	bne.w	80001ca <main+0x1a>
				lora_tx_buff[0] = 12;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <main+0x26c>)
 80003f6:	220c      	movs	r2, #12
 80003f8:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit_IT(&huart1, lora_tx_buff,
 80003fa:	2220      	movs	r2, #32
 80003fc:	4907      	ldr	r1, [pc, #28]	; (800041c <main+0x26c>)
 80003fe:	4808      	ldr	r0, [pc, #32]	; (8000420 <main+0x270>)
 8000400:	f002 ffcf 	bl	80033a2 <HAL_UART_Transmit_IT>
		if (COMdataAvailable) {
 8000404:	e6e1      	b.n	80001ca <main+0x1a>
 8000406:	bf00      	nop
 8000408:	2000023d 	.word	0x2000023d
 800040c:	08008de8 	.word	0x08008de8
 8000410:	200004b4 	.word	0x200004b4
 8000414:	200004fc 	.word	0x200004fc
 8000418:	08008df0 	.word	0x08008df0
 800041c:	2000021c 	.word	0x2000021c
 8000420:	20000470 	.word	0x20000470
 8000424:	08008e00 	.word	0x08008e00
 8000428:	08008e08 	.word	0x08008e08
 800042c:	08008e18 	.word	0x08008e18
 8000430:	200004f4 	.word	0x200004f4
 8000434:	08008e20 	.word	0x08008e20
 8000438:	08008e30 	.word	0x08008e30
 800043c:	08008e38 	.word	0x08008e38
 8000440:	08008e4c 	.word	0x08008e4c
 8000444:	08008e54 	.word	0x08008e54
 8000448:	08008e60 	.word	0x08008e60
 800044c:	08008e6c 	.word	0x08008e6c
 8000450:	08008e74 	.word	0x08008e74
 8000454:	08008e80 	.word	0x08008e80

08000458 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b094      	sub	sp, #80	; 0x50
 800045c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800045e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000462:	2228      	movs	r2, #40	; 0x28
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f007 fed6 	bl	8008218 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
 800047a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000488:	2301      	movs	r3, #1
 800048a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800048c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000490:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000496:	2301      	movs	r3, #1
 8000498:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049a:	2302      	movs	r3, #2
 800049c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004a2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fa5a 	bl	8002968 <HAL_RCC_OscConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x66>
		Error_Handler();
 80004ba:	f000 f8a9 	bl	8000610 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004be:	230f      	movs	r3, #15
 80004c0:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ce:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	2102      	movs	r1, #2
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fcc4 	bl	8002e68 <HAL_RCC_ClockConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x92>
		Error_Handler();
 80004e6:	f000 f893 	bl	8000610 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004ea:	2310      	movs	r3, #16
 80004ec:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	4618      	mov	r0, r3
 80004f6:	f002 fe51 	bl	800319c <HAL_RCCEx_PeriphCLKConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0xac>
		Error_Handler();
 8000500:	f000 f886 	bl	8000610 <Error_Handler>
	}
}
 8000504:	bf00      	nop
 8000506:	3750      	adds	r7, #80	; 0x50
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 8000512:	4a12      	ldr	r2, [pc, #72]	; (800055c <MX_USART1_UART_Init+0x50>)
 8000514:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 8000518:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800051c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 8000532:	220c      	movs	r2, #12
 8000534:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 8000544:	f002 fee0 	bl	8003308 <HAL_UART_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800054e:	f000 f85f 	bl	8000610 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000470 	.word	0x20000470
 800055c:	40013800 	.word	0x40013800

08000560 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000574:	4b24      	ldr	r3, [pc, #144]	; (8000608 <MX_GPIO_Init+0xa8>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a23      	ldr	r2, [pc, #140]	; (8000608 <MX_GPIO_Init+0xa8>)
 800057a:	f043 0320 	orr.w	r3, r3, #32
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b21      	ldr	r3, [pc, #132]	; (8000608 <MX_GPIO_Init+0xa8>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0320 	and.w	r3, r3, #32
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <MX_GPIO_Init+0xa8>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a1d      	ldr	r2, [pc, #116]	; (8000608 <MX_GPIO_Init+0xa8>)
 8000592:	f043 0308 	orr.w	r3, r3, #8
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <MX_GPIO_Init+0xa8>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0308 	and.w	r3, r3, #8
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_GPIO_Init+0xa8>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a17      	ldr	r2, [pc, #92]	; (8000608 <MX_GPIO_Init+0xa8>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_GPIO_Init+0xa8>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80005c2:	4812      	ldr	r0, [pc, #72]	; (800060c <MX_GPIO_Init+0xac>)
 80005c4:	f000 fcf2 	bl	8000fac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	480c      	ldr	r0, [pc, #48]	; (800060c <MX_GPIO_Init+0xac>)
 80005dc:	f000 fb62 	bl	8000ca4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 80005e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005ea:	2302      	movs	r3, #2
 80005ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2302      	movs	r3, #2
 80005f0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	4619      	mov	r1, r3
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <MX_GPIO_Init+0xac>)
 80005fa:	f000 fb53 	bl	8000ca4 <HAL_GPIO_Init>

}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	40010c00 	.word	0x40010c00

08000610 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>
	...

0800061c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <HAL_MspInit+0x5c>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a14      	ldr	r2, [pc, #80]	; (8000678 <HAL_MspInit+0x5c>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_MspInit+0x5c>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <HAL_MspInit+0x5c>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <HAL_MspInit+0x5c>)
 8000640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <HAL_MspInit+0x5c>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <HAL_MspInit+0x60>)
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	4a04      	ldr	r2, [pc, #16]	; (800067c <HAL_MspInit+0x60>)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	40021000 	.word	0x40021000
 800067c:	40010000 	.word	0x40010000

08000680 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a20      	ldr	r2, [pc, #128]	; (800071c <HAL_UART_MspInit+0x9c>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d139      	bne.n	8000714 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <HAL_UART_MspInit+0xa0>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <HAL_UART_MspInit+0xa0>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <HAL_UART_MspInit+0xa0>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <HAL_UART_MspInit+0xa0>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a18      	ldr	r2, [pc, #96]	; (8000720 <HAL_UART_MspInit+0xa0>)
 80006be:	f043 0304 	orr.w	r3, r3, #4
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <HAL_UART_MspInit+0xa0>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006da:	2303      	movs	r3, #3
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	4619      	mov	r1, r3
 80006e4:	480f      	ldr	r0, [pc, #60]	; (8000724 <HAL_UART_MspInit+0xa4>)
 80006e6:	f000 fadd 	bl	8000ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	4619      	mov	r1, r3
 80006fe:	4809      	ldr	r0, [pc, #36]	; (8000724 <HAL_UART_MspInit+0xa4>)
 8000700:	f000 fad0 	bl	8000ca4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	2025      	movs	r0, #37	; 0x25
 800070a:	f000 f9e4 	bl	8000ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800070e:	2025      	movs	r0, #37	; 0x25
 8000710:	f000 f9fd 	bl	8000b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40013800 	.word	0x40013800
 8000720:	40021000 	.word	0x40021000
 8000724:	40010800 	.word	0x40010800

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800072c:	e7fe      	b.n	800072c <NMI_Handler+0x4>

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <MemManage_Handler+0x4>

0800073a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <BusFault_Handler+0x4>

08000740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <UsageFault_Handler+0x4>

08000746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076e:	f000 f8bf 	bl	80008f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800077e:	f000 fd5e 	bl	800123e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000119c 	.word	0x2000119c

0800078c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <USART1_IRQHandler+0x10>)
 8000792:	f002 fe7b 	bl	800348c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000470 	.word	0x20000470

080007a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a8:	4a14      	ldr	r2, [pc, #80]	; (80007fc <_sbrk+0x5c>)
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <_sbrk+0x60>)
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <_sbrk+0x64>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <_sbrk+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d207      	bcs.n	80007e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d0:	f007 fcea 	bl	80081a8 <__errno>
 80007d4:	4603      	mov	r3, r0
 80007d6:	220c      	movs	r2, #12
 80007d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	e009      	b.n	80007f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	4a05      	ldr	r2, [pc, #20]	; (8000804 <_sbrk+0x64>)
 80007f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007f2:	68fb      	ldr	r3, [r7, #12]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20005000 	.word	0x20005000
 8000800:	00000400 	.word	0x00000400
 8000804:	20000240 	.word	0x20000240
 8000808:	20001498 	.word	0x20001498

0800080c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800081a:	490d      	ldr	r1, [pc, #52]	; (8000850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800081c:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000820:	e002      	b.n	8000828 <LoopCopyDataInit>

08000822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000826:	3304      	adds	r3, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800082c:	d3f9      	bcc.n	8000822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000830:	4c0a      	ldr	r4, [pc, #40]	; (800085c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000834:	e001      	b.n	800083a <LoopFillZerobss>

08000836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000838:	3204      	adds	r2, #4

0800083a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800083c:	d3fb      	bcc.n	8000836 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800083e:	f7ff ffe5 	bl	800080c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000842:	f007 fcb7 	bl	80081b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff fcb3 	bl	80001b0 <main>
  bx lr
 800084a:	4770      	bx	lr
  ldr r0, =_sdata
 800084c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000850:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000854:	08009090 	.word	0x08009090
  ldr r2, =_sbss
 8000858:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800085c:	20001498 	.word	0x20001498

08000860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC1_2_IRQHandler>
	...

08000864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_Init+0x28>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_Init+0x28>)
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f923 	bl	8000ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087a:	200f      	movs	r0, #15
 800087c:	f000 f808 	bl	8000890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000880:	f7ff fecc 	bl	800061c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40022000 	.word	0x40022000

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_InitTick+0x54>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_InitTick+0x58>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f93b 	bl	8000b2a <HAL_SYSTICK_Config>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00e      	b.n	80008dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d80a      	bhi.n	80008da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 f903 	bl	8000ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d0:	4a06      	ldr	r2, [pc, #24]	; (80008ec <HAL_InitTick+0x5c>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000004 	.word	0x20000004

080008f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_IncTick+0x1c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_IncTick+0x20>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4a03      	ldr	r2, [pc, #12]	; (8000910 <HAL_IncTick+0x20>)
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	20000008 	.word	0x20000008
 8000910:	20000504 	.word	0x20000504

08000914 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;
 8000918:	4b02      	ldr	r3, [pc, #8]	; (8000924 <HAL_GetTick+0x10>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	20000504 	.word	0x20000504

08000928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	60d3      	str	r3, [r2, #12]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <__NVIC_GetPriorityGrouping+0x18>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	f003 0307 	and.w	r3, r3, #7
}
 800097e:	4618      	mov	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	2b00      	cmp	r3, #0
 800099c:	db0b      	blt.n	80009b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	f003 021f 	and.w	r2, r3, #31
 80009a4:	4906      	ldr	r1, [pc, #24]	; (80009c0 <__NVIC_EnableIRQ+0x34>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	095b      	lsrs	r3, r3, #5
 80009ac:	2001      	movs	r0, #1
 80009ae:	fa00 f202 	lsl.w	r2, r0, r2
 80009b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	e000e100 	.word	0xe000e100

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db0a      	blt.n	80009ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	490c      	ldr	r1, [pc, #48]	; (8000a10 <__NVIC_SetPriority+0x4c>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	0112      	lsls	r2, r2, #4
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ec:	e00a      	b.n	8000a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4908      	ldr	r1, [pc, #32]	; (8000a14 <__NVIC_SetPriority+0x50>)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	3b04      	subs	r3, #4
 80009fc:	0112      	lsls	r2, r2, #4
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	440b      	add	r3, r1
 8000a02:	761a      	strb	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	; 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f1c3 0307 	rsb	r3, r3, #7
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	bf28      	it	cs
 8000a36:	2304      	movcs	r3, #4
 8000a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	2b06      	cmp	r3, #6
 8000a40:	d902      	bls.n	8000a48 <NVIC_EncodePriority+0x30>
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3b03      	subs	r3, #3
 8000a46:	e000      	b.n	8000a4a <NVIC_EncodePriority+0x32>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43da      	mvns	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	43d9      	mvns	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	4313      	orrs	r3, r2
         );
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3724      	adds	r7, #36	; 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a8c:	d301      	bcc.n	8000a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00f      	b.n	8000ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <SysTick_Config+0x40>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f7ff ff90 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <SysTick_Config+0x40>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <SysTick_Config+0x40>)
 8000aac:	2207      	movs	r2, #7
 8000aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	e000e010 	.word	0xe000e010

08000ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff2d 	bl	8000928 <__NVIC_SetPriorityGrouping>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae8:	f7ff ff42 	bl	8000970 <__NVIC_GetPriorityGrouping>
 8000aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	6978      	ldr	r0, [r7, #20]
 8000af4:	f7ff ff90 	bl	8000a18 <NVIC_EncodePriority>
 8000af8:	4602      	mov	r2, r0
 8000afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff5f 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff35 	bl	800098c <__NVIC_EnableIRQ>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ffa2 	bl	8000a7c <SysTick_Config>
 8000b38:	4603      	mov	r3, r0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b085      	sub	sp, #20
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d008      	beq.n	8000b6a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e020      	b.n	8000bac <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f022 020e 	bic.w	r2, r2, #14
 8000b78:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f022 0201 	bic.w	r2, r2, #1
 8000b88:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b92:	2101      	movs	r1, #1
 8000b94:	fa01 f202 	lsl.w	r2, r1, r2
 8000b98:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
	...

08000bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d005      	beq.n	8000bda <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e051      	b.n	8000c7e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 020e 	bic.w	r2, r2, #14
 8000be8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0201 	bic.w	r2, r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <HAL_DMA_Abort_IT+0xd0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d029      	beq.n	8000c58 <HAL_DMA_Abort_IT+0xa0>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <HAL_DMA_Abort_IT+0xd4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d022      	beq.n	8000c54 <HAL_DMA_Abort_IT+0x9c>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <HAL_DMA_Abort_IT+0xd8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d01a      	beq.n	8000c4e <HAL_DMA_Abort_IT+0x96>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <HAL_DMA_Abort_IT+0xdc>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d012      	beq.n	8000c48 <HAL_DMA_Abort_IT+0x90>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <HAL_DMA_Abort_IT+0xe0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d00a      	beq.n	8000c42 <HAL_DMA_Abort_IT+0x8a>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <HAL_DMA_Abort_IT+0xe4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d102      	bne.n	8000c3c <HAL_DMA_Abort_IT+0x84>
 8000c36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c3a:	e00e      	b.n	8000c5a <HAL_DMA_Abort_IT+0xa2>
 8000c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c40:	e00b      	b.n	8000c5a <HAL_DMA_Abort_IT+0xa2>
 8000c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c46:	e008      	b.n	8000c5a <HAL_DMA_Abort_IT+0xa2>
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	e005      	b.n	8000c5a <HAL_DMA_Abort_IT+0xa2>
 8000c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c52:	e002      	b.n	8000c5a <HAL_DMA_Abort_IT+0xa2>
 8000c54:	2310      	movs	r3, #16
 8000c56:	e000      	b.n	8000c5a <HAL_DMA_Abort_IT+0xa2>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <HAL_DMA_Abort_IT+0xe8>)
 8000c5c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	4798      	blx	r3
    } 
  }
  return status;
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40020008 	.word	0x40020008
 8000c8c:	4002001c 	.word	0x4002001c
 8000c90:	40020030 	.word	0x40020030
 8000c94:	40020044 	.word	0x40020044
 8000c98:	40020058 	.word	0x40020058
 8000c9c:	4002006c 	.word	0x4002006c
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b08b      	sub	sp, #44	; 0x2c
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb6:	e169      	b.n	8000f8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	69fa      	ldr	r2, [r7, #28]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f040 8158 	bne.w	8000f86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	4a9a      	ldr	r2, [pc, #616]	; (8000f44 <HAL_GPIO_Init+0x2a0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d05e      	beq.n	8000d9e <HAL_GPIO_Init+0xfa>
 8000ce0:	4a98      	ldr	r2, [pc, #608]	; (8000f44 <HAL_GPIO_Init+0x2a0>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d875      	bhi.n	8000dd2 <HAL_GPIO_Init+0x12e>
 8000ce6:	4a98      	ldr	r2, [pc, #608]	; (8000f48 <HAL_GPIO_Init+0x2a4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d058      	beq.n	8000d9e <HAL_GPIO_Init+0xfa>
 8000cec:	4a96      	ldr	r2, [pc, #600]	; (8000f48 <HAL_GPIO_Init+0x2a4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d86f      	bhi.n	8000dd2 <HAL_GPIO_Init+0x12e>
 8000cf2:	4a96      	ldr	r2, [pc, #600]	; (8000f4c <HAL_GPIO_Init+0x2a8>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d052      	beq.n	8000d9e <HAL_GPIO_Init+0xfa>
 8000cf8:	4a94      	ldr	r2, [pc, #592]	; (8000f4c <HAL_GPIO_Init+0x2a8>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d869      	bhi.n	8000dd2 <HAL_GPIO_Init+0x12e>
 8000cfe:	4a94      	ldr	r2, [pc, #592]	; (8000f50 <HAL_GPIO_Init+0x2ac>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d04c      	beq.n	8000d9e <HAL_GPIO_Init+0xfa>
 8000d04:	4a92      	ldr	r2, [pc, #584]	; (8000f50 <HAL_GPIO_Init+0x2ac>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d863      	bhi.n	8000dd2 <HAL_GPIO_Init+0x12e>
 8000d0a:	4a92      	ldr	r2, [pc, #584]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d046      	beq.n	8000d9e <HAL_GPIO_Init+0xfa>
 8000d10:	4a90      	ldr	r2, [pc, #576]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d85d      	bhi.n	8000dd2 <HAL_GPIO_Init+0x12e>
 8000d16:	2b12      	cmp	r3, #18
 8000d18:	d82a      	bhi.n	8000d70 <HAL_GPIO_Init+0xcc>
 8000d1a:	2b12      	cmp	r3, #18
 8000d1c:	d859      	bhi.n	8000dd2 <HAL_GPIO_Init+0x12e>
 8000d1e:	a201      	add	r2, pc, #4	; (adr r2, 8000d24 <HAL_GPIO_Init+0x80>)
 8000d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d24:	08000d9f 	.word	0x08000d9f
 8000d28:	08000d79 	.word	0x08000d79
 8000d2c:	08000d8b 	.word	0x08000d8b
 8000d30:	08000dcd 	.word	0x08000dcd
 8000d34:	08000dd3 	.word	0x08000dd3
 8000d38:	08000dd3 	.word	0x08000dd3
 8000d3c:	08000dd3 	.word	0x08000dd3
 8000d40:	08000dd3 	.word	0x08000dd3
 8000d44:	08000dd3 	.word	0x08000dd3
 8000d48:	08000dd3 	.word	0x08000dd3
 8000d4c:	08000dd3 	.word	0x08000dd3
 8000d50:	08000dd3 	.word	0x08000dd3
 8000d54:	08000dd3 	.word	0x08000dd3
 8000d58:	08000dd3 	.word	0x08000dd3
 8000d5c:	08000dd3 	.word	0x08000dd3
 8000d60:	08000dd3 	.word	0x08000dd3
 8000d64:	08000dd3 	.word	0x08000dd3
 8000d68:	08000d81 	.word	0x08000d81
 8000d6c:	08000d95 	.word	0x08000d95
 8000d70:	4a79      	ldr	r2, [pc, #484]	; (8000f58 <HAL_GPIO_Init+0x2b4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d013      	beq.n	8000d9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d76:	e02c      	b.n	8000dd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	623b      	str	r3, [r7, #32]
          break;
 8000d7e:	e029      	b.n	8000dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	3304      	adds	r3, #4
 8000d86:	623b      	str	r3, [r7, #32]
          break;
 8000d88:	e024      	b.n	8000dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	3308      	adds	r3, #8
 8000d90:	623b      	str	r3, [r7, #32]
          break;
 8000d92:	e01f      	b.n	8000dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	330c      	adds	r3, #12
 8000d9a:	623b      	str	r3, [r7, #32]
          break;
 8000d9c:	e01a      	b.n	8000dd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000da6:	2304      	movs	r3, #4
 8000da8:	623b      	str	r3, [r7, #32]
          break;
 8000daa:	e013      	b.n	8000dd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d105      	bne.n	8000dc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000db4:	2308      	movs	r3, #8
 8000db6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69fa      	ldr	r2, [r7, #28]
 8000dbc:	611a      	str	r2, [r3, #16]
          break;
 8000dbe:	e009      	b.n	8000dd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	615a      	str	r2, [r3, #20]
          break;
 8000dca:	e003      	b.n	8000dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
          break;
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x130>
          break;
 8000dd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	2bff      	cmp	r3, #255	; 0xff
 8000dd8:	d801      	bhi.n	8000dde <HAL_GPIO_Init+0x13a>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	e001      	b.n	8000de2 <HAL_GPIO_Init+0x13e>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3304      	adds	r3, #4
 8000de2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	2bff      	cmp	r3, #255	; 0xff
 8000de8:	d802      	bhi.n	8000df0 <HAL_GPIO_Init+0x14c>
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	e002      	b.n	8000df6 <HAL_GPIO_Init+0x152>
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	3b08      	subs	r3, #8
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	401a      	ands	r2, r3
 8000e08:	6a39      	ldr	r1, [r7, #32]
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	431a      	orrs	r2, r3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 80b1 	beq.w	8000f86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e24:	4b4d      	ldr	r3, [pc, #308]	; (8000f5c <HAL_GPIO_Init+0x2b8>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a4c      	ldr	r2, [pc, #304]	; (8000f5c <HAL_GPIO_Init+0x2b8>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b4a      	ldr	r3, [pc, #296]	; (8000f5c <HAL_GPIO_Init+0x2b8>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e3c:	4a48      	ldr	r2, [pc, #288]	; (8000f60 <HAL_GPIO_Init+0x2bc>)
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3302      	adds	r3, #2
 8000e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	220f      	movs	r2, #15
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a40      	ldr	r2, [pc, #256]	; (8000f64 <HAL_GPIO_Init+0x2c0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d013      	beq.n	8000e90 <HAL_GPIO_Init+0x1ec>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a3f      	ldr	r2, [pc, #252]	; (8000f68 <HAL_GPIO_Init+0x2c4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d00d      	beq.n	8000e8c <HAL_GPIO_Init+0x1e8>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a3e      	ldr	r2, [pc, #248]	; (8000f6c <HAL_GPIO_Init+0x2c8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d007      	beq.n	8000e88 <HAL_GPIO_Init+0x1e4>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a3d      	ldr	r2, [pc, #244]	; (8000f70 <HAL_GPIO_Init+0x2cc>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d101      	bne.n	8000e84 <HAL_GPIO_Init+0x1e0>
 8000e80:	2303      	movs	r3, #3
 8000e82:	e006      	b.n	8000e92 <HAL_GPIO_Init+0x1ee>
 8000e84:	2304      	movs	r3, #4
 8000e86:	e004      	b.n	8000e92 <HAL_GPIO_Init+0x1ee>
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e002      	b.n	8000e92 <HAL_GPIO_Init+0x1ee>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <HAL_GPIO_Init+0x1ee>
 8000e90:	2300      	movs	r3, #0
 8000e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e94:	f002 0203 	and.w	r2, r2, #3
 8000e98:	0092      	lsls	r2, r2, #2
 8000e9a:	4093      	lsls	r3, r2
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ea2:	492f      	ldr	r1, [pc, #188]	; (8000f60 <HAL_GPIO_Init+0x2bc>)
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d006      	beq.n	8000eca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <HAL_GPIO_Init+0x2d0>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	492c      	ldr	r1, [pc, #176]	; (8000f74 <HAL_GPIO_Init+0x2d0>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	600b      	str	r3, [r1, #0]
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <HAL_GPIO_Init+0x2d0>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	4928      	ldr	r1, [pc, #160]	; (8000f74 <HAL_GPIO_Init+0x2d0>)
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d006      	beq.n	8000ef2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <HAL_GPIO_Init+0x2d0>)
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	4922      	ldr	r1, [pc, #136]	; (8000f74 <HAL_GPIO_Init+0x2d0>)
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	604b      	str	r3, [r1, #4]
 8000ef0:	e006      	b.n	8000f00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_GPIO_Init+0x2d0>)
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	491e      	ldr	r1, [pc, #120]	; (8000f74 <HAL_GPIO_Init+0x2d0>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d006      	beq.n	8000f1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_GPIO_Init+0x2d0>)
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	4918      	ldr	r1, [pc, #96]	; (8000f74 <HAL_GPIO_Init+0x2d0>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	608b      	str	r3, [r1, #8]
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_GPIO_Init+0x2d0>)
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	4914      	ldr	r1, [pc, #80]	; (8000f74 <HAL_GPIO_Init+0x2d0>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d021      	beq.n	8000f78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_GPIO_Init+0x2d0>)
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	490e      	ldr	r1, [pc, #56]	; (8000f74 <HAL_GPIO_Init+0x2d0>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	60cb      	str	r3, [r1, #12]
 8000f40:	e021      	b.n	8000f86 <HAL_GPIO_Init+0x2e2>
 8000f42:	bf00      	nop
 8000f44:	10320000 	.word	0x10320000
 8000f48:	10310000 	.word	0x10310000
 8000f4c:	10220000 	.word	0x10220000
 8000f50:	10210000 	.word	0x10210000
 8000f54:	10120000 	.word	0x10120000
 8000f58:	10110000 	.word	0x10110000
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010000 	.word	0x40010000
 8000f64:	40010800 	.word	0x40010800
 8000f68:	40010c00 	.word	0x40010c00
 8000f6c:	40011000 	.word	0x40011000
 8000f70:	40011400 	.word	0x40011400
 8000f74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_GPIO_Init+0x304>)
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	4909      	ldr	r1, [pc, #36]	; (8000fa8 <HAL_GPIO_Init+0x304>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	3301      	adds	r3, #1
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	fa22 f303 	lsr.w	r3, r2, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f47f ae8e 	bne.w	8000cb8 <HAL_GPIO_Init+0x14>
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	372c      	adds	r7, #44	; 0x2c
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40010400 	.word	0x40010400

08000fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fc8:	e003      	b.n	8000fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	041a      	lsls	r2, r3, #16
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	611a      	str	r2, [r3, #16]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fde:	b08b      	sub	sp, #44	; 0x2c
 8000fe0:	af06      	add	r7, sp, #24
 8000fe2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e0fd      	b.n	80011ea <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d106      	bne.n	8001008 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f006 fe26 	bl	8007c54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2203      	movs	r2, #3
 800100c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f002 fe35 	bl	8003c84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	687e      	ldr	r6, [r7, #4]
 8001022:	466d      	mov	r5, sp
 8001024:	f106 0410 	add.w	r4, r6, #16
 8001028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800102a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	602b      	str	r3, [r5, #0]
 8001030:	1d33      	adds	r3, r6, #4
 8001032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001034:	6838      	ldr	r0, [r7, #0]
 8001036:	f002 fdff 	bl	8003c38 <USB_CoreInit>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2202      	movs	r2, #2
 8001044:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0ce      	b.n	80011ea <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fe30 	bl	8003cb8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	e04c      	b.n	80010f8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	440b      	add	r3, r1
 800106e:	3301      	adds	r3, #1
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	440b      	add	r3, r1
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	b298      	uxth	r0, r3
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	440b      	add	r3, r1
 800109a:	3336      	adds	r3, #54	; 0x36
 800109c:	4602      	mov	r2, r0
 800109e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	440b      	add	r3, r1
 80010b0:	3303      	adds	r3, #3
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	3338      	adds	r3, #56	; 0x38
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	440b      	add	r3, r1
 80010d8:	333c      	adds	r3, #60	; 0x3c
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	3340      	adds	r3, #64	; 0x40
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	3301      	adds	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d3ad      	bcc.n	800105e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e044      	b.n	8001192 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	440b      	add	r3, r1
 8001116:	f203 1369 	addw	r3, r3, #361	; 0x169
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	440b      	add	r3, r1
 800112c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	440b      	add	r3, r1
 8001142:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	440b      	add	r3, r1
 8001158:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	440b      	add	r3, r1
 800116e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	440b      	add	r3, r1
 8001184:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	3301      	adds	r3, #1
 8001190:	73fb      	strb	r3, [r7, #15]
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	d3b5      	bcc.n	8001108 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	687e      	ldr	r6, [r7, #4]
 80011a4:	466d      	mov	r5, sp
 80011a6:	f106 0410 	add.w	r4, r6, #16
 80011aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	602b      	str	r3, [r5, #0]
 80011b2:	1d33      	adds	r3, r6, #4
 80011b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f002 fd8a 	bl	8003cd0 <USB_DevInit>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2202      	movs	r2, #2
 80011c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00d      	b.n	80011ea <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f004 fefb 	bl	8005fde <USB_DevDisconnect>

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001200:	2b01      	cmp	r3, #1
 8001202:	d101      	bne.n	8001208 <HAL_PCD_Start+0x16>
 8001204:	2302      	movs	r3, #2
 8001206:	e016      	b.n	8001236 <HAL_PCD_Start+0x44>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f002 fd1f 	bl	8003c58 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800121a:	2101      	movs	r1, #1
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f006 ff8c 	bl	800813a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f004 fecf 	bl	8005fca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b088      	sub	sp, #32
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f004 fed1 	bl	8005ff2 <USB_ReadInterrupts>
 8001250:	4603      	mov	r3, r0
 8001252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800125a:	d102      	bne.n	8001262 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 fb61 	bl	8001924 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f004 fec3 	bl	8005ff2 <USB_ReadInterrupts>
 800126c:	4603      	mov	r3, r0
 800126e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001276:	d112      	bne.n	800129e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001280:	b29a      	uxth	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800128a:	b292      	uxth	r2, r2
 800128c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f006 fd5a 	bl	8007d4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001296:	2100      	movs	r1, #0
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f925 	bl	80014e8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 fea5 	bl	8005ff2 <USB_ReadInterrupts>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012b2:	d10b      	bne.n	80012cc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012bc:	b29a      	uxth	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012c6:	b292      	uxth	r2, r2
 80012c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 fe8e 	bl	8005ff2 <USB_ReadInterrupts>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012e0:	d10b      	bne.n	80012fa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012f4:	b292      	uxth	r2, r2
 80012f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 fe77 	bl	8005ff2 <USB_ReadInterrupts>
 8001304:	4603      	mov	r3, r0
 8001306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800130a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800130e:	d126      	bne.n	800135e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0204 	bic.w	r2, r2, #4
 8001322:	b292      	uxth	r2, r2
 8001324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001330:	b29a      	uxth	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0208 	bic.w	r2, r2, #8
 800133a:	b292      	uxth	r2, r2
 800133c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f006 fd3b 	bl	8007dbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800134e:	b29a      	uxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001358:	b292      	uxth	r2, r2
 800135a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f004 fe45 	bl	8005ff2 <USB_ReadInterrupts>
 8001368:	4603      	mov	r3, r0
 800136a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800136e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001372:	f040 8084 	bne.w	800147e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001376:	2300      	movs	r3, #0
 8001378:	77fb      	strb	r3, [r7, #31]
 800137a:	e011      	b.n	80013a0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	7ffb      	ldrb	r3, [r7, #31]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	441a      	add	r2, r3
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	8812      	ldrh	r2, [r2, #0]
 800138c:	b292      	uxth	r2, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	f107 0120 	add.w	r1, r7, #32
 8001394:	440b      	add	r3, r1
 8001396:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800139a:	7ffb      	ldrb	r3, [r7, #31]
 800139c:	3301      	adds	r3, #1
 800139e:	77fb      	strb	r3, [r7, #31]
 80013a0:	7ffb      	ldrb	r3, [r7, #31]
 80013a2:	2b07      	cmp	r3, #7
 80013a4:	d9ea      	bls.n	800137c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 0201 	orr.w	r2, r2, #1
 80013b8:	b292      	uxth	r2, r2
 80013ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0201 	bic.w	r2, r2, #1
 80013d0:	b292      	uxth	r2, r2
 80013d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80013d6:	bf00      	nop
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f6      	beq.n	80013d8 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013fc:	b292      	uxth	r2, r2
 80013fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001402:	2300      	movs	r3, #0
 8001404:	77fb      	strb	r3, [r7, #31]
 8001406:	e010      	b.n	800142a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001408:	7ffb      	ldrb	r3, [r7, #31]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	4611      	mov	r1, r2
 8001410:	7ffa      	ldrb	r2, [r7, #31]
 8001412:	0092      	lsls	r2, r2, #2
 8001414:	440a      	add	r2, r1
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	f107 0120 	add.w	r1, r7, #32
 800141c:	440b      	add	r3, r1
 800141e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001422:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001424:	7ffb      	ldrb	r3, [r7, #31]
 8001426:	3301      	adds	r3, #1
 8001428:	77fb      	strb	r3, [r7, #31]
 800142a:	7ffb      	ldrb	r3, [r7, #31]
 800142c:	2b07      	cmp	r3, #7
 800142e:	d9eb      	bls.n	8001408 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001438:	b29a      	uxth	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0208 	orr.w	r2, r2, #8
 8001442:	b292      	uxth	r2, r2
 8001444:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001450:	b29a      	uxth	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800145a:	b292      	uxth	r2, r2
 800145c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001468:	b29a      	uxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0204 	orr.w	r2, r2, #4
 8001472:	b292      	uxth	r2, r2
 8001474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f006 fc85 	bl	8007d88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f004 fdb5 	bl	8005ff2 <USB_ReadInterrupts>
 8001488:	4603      	mov	r3, r0
 800148a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800148e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001492:	d10e      	bne.n	80014b2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800149c:	b29a      	uxth	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014a6:	b292      	uxth	r2, r2
 80014a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f006 fc3e 	bl	8007d2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f004 fd9b 	bl	8005ff2 <USB_ReadInterrupts>
 80014bc:	4603      	mov	r3, r0
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c6:	d10b      	bne.n	80014e0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014da:	b292      	uxth	r2, r2
 80014dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80014e0:	bf00      	nop
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_PCD_SetAddress+0x1a>
 80014fe:	2302      	movs	r3, #2
 8001500:	e013      	b.n	800152a <HAL_PCD_SetAddress+0x42>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	78fa      	ldrb	r2, [r7, #3]
 800150e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	78fa      	ldrb	r2, [r7, #3]
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f004 fd42 	bl	8005fa4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	4608      	mov	r0, r1
 800153c:	4611      	mov	r1, r2
 800153e:	461a      	mov	r2, r3
 8001540:	4603      	mov	r3, r0
 8001542:	70fb      	strb	r3, [r7, #3]
 8001544:	460b      	mov	r3, r1
 8001546:	803b      	strh	r3, [r7, #0]
 8001548:	4613      	mov	r3, r2
 800154a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001554:	2b00      	cmp	r3, #0
 8001556:	da0e      	bge.n	8001576 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2201      	movs	r2, #1
 8001572:	705a      	strb	r2, [r3, #1]
 8001574:	e00e      	b.n	8001594 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	f003 0207 	and.w	r2, r3, #7
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	b2da      	uxtb	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80015a0:	883a      	ldrh	r2, [r7, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	78ba      	ldrb	r2, [r7, #2]
 80015aa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	785b      	ldrb	r3, [r3, #1]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015be:	78bb      	ldrb	r3, [r7, #2]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d102      	bne.n	80015ca <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_PCD_EP_Open+0xa6>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e00e      	b.n	80015f6 <HAL_PCD_EP_Open+0xc4>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68f9      	ldr	r1, [r7, #12]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 fb92 	bl	8003d10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80015f4:	7afb      	ldrb	r3, [r7, #11]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800160a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800160e:	2b00      	cmp	r3, #0
 8001610:	da0e      	bge.n	8001630 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	705a      	strb	r2, [r3, #1]
 800162e:	e00e      	b.n	800164e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	f003 0207 	and.w	r2, r3, #7
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	b2da      	uxtb	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_PCD_EP_Close+0x6a>
 8001664:	2302      	movs	r3, #2
 8001666:	e00e      	b.n	8001686 <HAL_PCD_EP_Close+0x88>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68f9      	ldr	r1, [r7, #12]
 8001676:	4618      	mov	r0, r3
 8001678:	f002 feb4 	bl	80043e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	460b      	mov	r3, r1
 800169c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800169e:	7afb      	ldrb	r3, [r7, #11]
 80016a0:	f003 0207 	and.w	r2, r3, #7
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2200      	movs	r2, #0
 80016c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2200      	movs	r2, #0
 80016cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016ce:	7afb      	ldrb	r3, [r7, #11]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d106      	bne.n	80016f2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6979      	ldr	r1, [r7, #20]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 f866 	bl	80047bc <USB_EPStartXfer>
 80016f0:	e005      	b.n	80016fe <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6979      	ldr	r1, [r7, #20]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 f85f 	bl	80047bc <USB_EPStartXfer>
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	f003 0207 	and.w	r2, r3, #7
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	460b      	mov	r3, r1
 8001744:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001746:	7afb      	ldrb	r3, [r7, #11]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	4413      	add	r3, r2
 800175a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2200      	movs	r2, #0
 800177a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2201      	movs	r2, #1
 8001780:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001782:	7afb      	ldrb	r3, [r7, #11]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	b2da      	uxtb	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800178e:	7afb      	ldrb	r3, [r7, #11]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	2b00      	cmp	r3, #0
 8001796:	d106      	bne.n	80017a6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6979      	ldr	r1, [r7, #20]
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 f80c 	bl	80047bc <USB_EPStartXfer>
 80017a4:	e005      	b.n	80017b2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6979      	ldr	r1, [r7, #20]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f003 f805 	bl	80047bc <USB_EPStartXfer>
  }

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	f003 0207 	and.w	r2, r3, #7
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d901      	bls.n	80017da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e04c      	b.n	8001874 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da0e      	bge.n	8001800 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2201      	movs	r2, #1
 80017fc:	705a      	strb	r2, [r3, #1]
 80017fe:	e00c      	b.n	800181a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	b2da      	uxtb	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_PCD_EP_SetStall+0x7e>
 8001836:	2302      	movs	r3, #2
 8001838:	e01c      	b.n	8001874 <HAL_PCD_EP_SetStall+0xb8>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68f9      	ldr	r1, [r7, #12]
 8001848:	4618      	mov	r0, r3
 800184a:	f004 faae 	bl	8005daa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	2b00      	cmp	r3, #0
 8001856:	d108      	bne.n	800186a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	f004 fbd3 	bl	8006010 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	f003 020f 	and.w	r2, r3, #15
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	429a      	cmp	r2, r3
 8001894:	d901      	bls.n	800189a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e040      	b.n	800191c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800189a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da0e      	bge.n	80018c0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2201      	movs	r2, #1
 80018bc:	705a      	strb	r2, [r3, #1]
 80018be:	e00e      	b.n	80018de <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	f003 0207 	and.w	r2, r3, #7
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_PCD_EP_ClrStall+0x82>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e00e      	b.n	800191c <HAL_PCD_EP_ClrStall+0xa0>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68f9      	ldr	r1, [r7, #12]
 800190c:	4618      	mov	r0, r3
 800190e:	f004 fa9c 	bl	8005e4a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08e      	sub	sp, #56	; 0x38
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800192c:	e2ec      	b.n	8001f08 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001936:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001938:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f003 030f 	and.w	r3, r3, #15
 8001940:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001944:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001948:	2b00      	cmp	r3, #0
 800194a:	f040 8161 	bne.w	8001c10 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800194e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	2b00      	cmp	r3, #0
 8001956:	d152      	bne.n	80019fe <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001968:	81fb      	strh	r3, [r7, #14]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001978:	b29b      	uxth	r3, r3
 800197a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3328      	adds	r3, #40	; 0x28
 8001980:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800198a:	b29b      	uxth	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4413      	add	r3, r2
 8001996:	3302      	adds	r3, #2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	441a      	add	r2, r3
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80019bc:	2100      	movs	r1, #0
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f006 f99b 	bl	8007cfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 829b 	beq.w	8001f08 <PCD_EP_ISR_Handler+0x5e4>
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 8296 	bne.w	8001f08 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	b292      	uxth	r2, r2
 80019f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80019fc:	e284      	b.n	8001f08 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d034      	beq.n	8001a82 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3306      	adds	r3, #6
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	f004 fb2a 	bl	80060b0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a68:	4013      	ands	r3, r2
 8001a6a:	823b      	strh	r3, [r7, #16]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	8a3a      	ldrh	r2, [r7, #16]
 8001a72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a76:	b292      	uxth	r2, r2
 8001a78:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f006 f910 	bl	8007ca0 <HAL_PCD_SetupStageCallback>
 8001a80:	e242      	b.n	8001f08 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a82:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f280 823e 	bge.w	8001f08 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a98:	4013      	ands	r3, r2
 8001a9a:	83bb      	strh	r3, [r7, #28]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	8bba      	ldrh	r2, [r7, #28]
 8001aa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aa6:	b292      	uxth	r2, r2
 8001aa8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	3306      	adds	r3, #6
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d019      	beq.n	8001b12 <PCD_EP_ISR_Handler+0x1ee>
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d015      	beq.n	8001b12 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	6959      	ldr	r1, [r3, #20]
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f004 fada 	bl	80060b0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	441a      	add	r2, r3
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f006 f8d9 	bl	8007cc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 81f2 	bne.w	8001f08 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	461a      	mov	r2, r3
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4413      	add	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d112      	bne.n	8001b72 <PCD_EP_ISR_Handler+0x24e>
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	801a      	strh	r2, [r3, #0]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	801a      	strh	r2, [r3, #0]
 8001b70:	e02f      	b.n	8001bd2 <PCD_EP_ISR_Handler+0x2ae>
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	2b3e      	cmp	r3, #62	; 0x3e
 8001b78:	d813      	bhi.n	8001ba2 <PCD_EP_ISR_Handler+0x27e>
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	085b      	lsrs	r3, r3, #1
 8001b80:	633b      	str	r3, [r7, #48]	; 0x30
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <PCD_EP_ISR_Handler+0x270>
 8001b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b90:	3301      	adds	r3, #1
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
 8001b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	029b      	lsls	r3, r3, #10
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	801a      	strh	r2, [r3, #0]
 8001ba0:	e017      	b.n	8001bd2 <PCD_EP_ISR_Handler+0x2ae>
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <PCD_EP_ISR_Handler+0x298>
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	029b      	lsls	r3, r3, #10
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be2:	827b      	strh	r3, [r7, #18]
 8001be4:	8a7b      	ldrh	r3, [r7, #18]
 8001be6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001bea:	827b      	strh	r3, [r7, #18]
 8001bec:	8a7b      	ldrh	r3, [r7, #18]
 8001bee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bf2:	827b      	strh	r3, [r7, #18]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	8a7b      	ldrh	r3, [r7, #18]
 8001bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	8013      	strh	r3, [r2, #0]
 8001c0e:	e17b      	b.n	8001f08 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c22:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f280 80ea 	bge.w	8001e00 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c42:	4013      	ands	r3, r2
 8001c44:	853b      	strh	r3, [r7, #40]	; 0x28
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c5a:	b292      	uxth	r2, r2
 8001c5c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c5e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	7b1b      	ldrb	r3, [r3, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d122      	bne.n	8001cc2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	3306      	adds	r3, #6
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ca4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001ca6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 8087 	beq.w	8001dbc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	6959      	ldr	r1, [r3, #20]
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	88da      	ldrh	r2, [r3, #6]
 8001cba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cbc:	f004 f9f8 	bl	80060b0 <USB_ReadPMA>
 8001cc0:	e07c      	b.n	8001dbc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	78db      	ldrb	r3, [r3, #3]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d108      	bne.n	8001cdc <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001cca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ccc:	461a      	mov	r2, r3
 8001cce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f927 	bl	8001f24 <HAL_PCD_EP_DB_Receive>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001cda:	e06f      	b.n	8001dbc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cf6:	847b      	strh	r3, [r7, #34]	; 0x22
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	441a      	add	r2, r3
 8001d06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d021      	beq.n	8001d7a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d5e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d02a      	beq.n	8001dbc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	6959      	ldr	r1, [r3, #20]
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	891a      	ldrh	r2, [r3, #8]
 8001d72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d74:	f004 f99c 	bl	80060b0 <USB_ReadPMA>
 8001d78:	e020      	b.n	8001dbc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3306      	adds	r3, #6
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001da4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d008      	beq.n	8001dbc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	6959      	ldr	r1, [r3, #20]
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	895a      	ldrh	r2, [r3, #10]
 8001db6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001db8:	f004 f97a 	bl	80060b0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	69da      	ldr	r2, [r3, #28]
 8001dc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dc2:	441a      	add	r2, r3
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dce:	441a      	add	r2, r3
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <PCD_EP_ISR_Handler+0x4c2>
 8001ddc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d206      	bcs.n	8001df4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	4619      	mov	r1, r3
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f005 ff69 	bl	8007cc4 <HAL_PCD_DataOutStageCallback>
 8001df2:	e005      	b.n	8001e00 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 fcde 	bl	80047bc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d07e      	beq.n	8001f08 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e38:	843b      	strh	r3, [r7, #32]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	441a      	add	r2, r3
 8001e48:	8c3b      	ldrh	r3, [r7, #32]
 8001e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	78db      	ldrb	r3, [r3, #3]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d00c      	beq.n	8001e78 <PCD_EP_ISR_Handler+0x554>
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	78db      	ldrb	r3, [r3, #3]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d146      	bne.n	8001efc <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001e6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d141      	bne.n	8001efc <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ea0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	8bfb      	ldrh	r3, [r7, #30]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d906      	bls.n	8001eba <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	699a      	ldr	r2, [r3, #24]
 8001eb0:	8bfb      	ldrh	r3, [r7, #30]
 8001eb2:	1ad2      	subs	r2, r2, r3
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	619a      	str	r2, [r3, #24]
 8001eb8:	e002      	b.n	8001ec0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f005 ff13 	bl	8007cfa <HAL_PCD_DataInStageCallback>
 8001ed4:	e018      	b.n	8001f08 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	8bfb      	ldrh	r3, [r7, #30]
 8001edc:	441a      	add	r2, r3
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	69da      	ldr	r2, [r3, #28]
 8001ee6:	8bfb      	ldrh	r3, [r7, #30]
 8001ee8:	441a      	add	r2, r3
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 fc61 	bl	80047bc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001efa:	e005      	b.n	8001f08 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001efc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001efe:	461a      	mov	r2, r3
 8001f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f91b 	bl	800213e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f6ff ad0a 	blt.w	800192e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3738      	adds	r7, #56	; 0x38
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d07e      	beq.n	800203a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	461a      	mov	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	3302      	adds	r3, #2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f64:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	8b7b      	ldrh	r3, [r7, #26]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d306      	bcc.n	8001f7e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	699a      	ldr	r2, [r3, #24]
 8001f74:	8b7b      	ldrh	r3, [r7, #26]
 8001f76:	1ad2      	subs	r2, r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	619a      	str	r2, [r3, #24]
 8001f7c:	e002      	b.n	8001f84 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d123      	bne.n	8001fd4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa6:	833b      	strh	r3, [r7, #24]
 8001fa8:	8b3b      	ldrh	r3, [r7, #24]
 8001faa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fae:	833b      	strh	r3, [r7, #24]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	441a      	add	r2, r3
 8001fbe:	8b3b      	ldrh	r3, [r7, #24]
 8001fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01f      	beq.n	800201e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff8:	82fb      	strh	r3, [r7, #22]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	441a      	add	r2, r3
 8002008:	8afb      	ldrh	r3, [r7, #22]
 800200a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800200e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002016:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800201a:	b29b      	uxth	r3, r3
 800201c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800201e:	8b7b      	ldrh	r3, [r7, #26]
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8087 	beq.w	8002134 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	6959      	ldr	r1, [r3, #20]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	891a      	ldrh	r2, [r3, #8]
 8002032:	8b7b      	ldrh	r3, [r7, #26]
 8002034:	f004 f83c 	bl	80060b0 <USB_ReadPMA>
 8002038:	e07c      	b.n	8002134 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	3306      	adds	r3, #6
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	4413      	add	r3, r2
 8002058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002062:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	699a      	ldr	r2, [r3, #24]
 8002068:	8b7b      	ldrh	r3, [r7, #26]
 800206a:	429a      	cmp	r2, r3
 800206c:	d306      	bcc.n	800207c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	699a      	ldr	r2, [r3, #24]
 8002072:	8b7b      	ldrh	r3, [r7, #26]
 8002074:	1ad2      	subs	r2, r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	619a      	str	r2, [r3, #24]
 800207a:	e002      	b.n	8002082 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d123      	bne.n	80020d2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a4:	83fb      	strh	r3, [r7, #30]
 80020a6:	8bfb      	ldrh	r3, [r7, #30]
 80020a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020ac:	83fb      	strh	r3, [r7, #30]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	441a      	add	r2, r3
 80020bc:	8bfb      	ldrh	r3, [r7, #30]
 80020be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d11f      	bne.n	800211c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f6:	83bb      	strh	r3, [r7, #28]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	441a      	add	r2, r3
 8002106:	8bbb      	ldrh	r3, [r7, #28]
 8002108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800210c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002114:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002118:	b29b      	uxth	r3, r3
 800211a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800211c:	8b7b      	ldrh	r3, [r7, #26]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	6959      	ldr	r1, [r3, #20]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	895a      	ldrh	r2, [r3, #10]
 800212e:	8b7b      	ldrh	r3, [r7, #26]
 8002130:	f003 ffbe 	bl	80060b0 <USB_ReadPMA>
    }
  }

  return count;
 8002134:	8b7b      	ldrh	r3, [r7, #26]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b0a2      	sub	sp, #136	; 0x88
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	4613      	mov	r3, r2
 800214a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 81c7 	beq.w	80024e6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002160:	b29b      	uxth	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	3302      	adds	r3, #2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002180:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	699a      	ldr	r2, [r3, #24]
 8002188:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800218c:	429a      	cmp	r2, r3
 800218e:	d907      	bls.n	80021a0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	699a      	ldr	r2, [r3, #24]
 8002194:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002198:	1ad2      	subs	r2, r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	619a      	str	r2, [r3, #24]
 800219e:	e002      	b.n	80021a6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 80b9 	bne.w	8002322 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	785b      	ldrb	r3, [r3, #1]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d126      	bne.n	8002206 <HAL_PCD_EP_DB_Transmit+0xc8>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021cc:	4413      	add	r3, r2
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	011a      	lsls	r2, r3, #4
 80021d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d8:	4413      	add	r3, r2
 80021da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	801a      	strh	r2, [r3, #0]
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021fe:	b29a      	uxth	r2, r3
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	801a      	strh	r2, [r3, #0]
 8002204:	e01a      	b.n	800223c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	785b      	ldrb	r3, [r3, #1]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d116      	bne.n	800223c <HAL_PCD_EP_DB_Transmit+0xfe>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800221c:	b29b      	uxth	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	4413      	add	r3, r2
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	011a      	lsls	r2, r3, #4
 800222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222e:	4413      	add	r3, r2
 8002230:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002238:	2200      	movs	r2, #0
 800223a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	623b      	str	r3, [r7, #32]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	785b      	ldrb	r3, [r3, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d126      	bne.n	8002298 <HAL_PCD_EP_DB_Transmit+0x15a>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	61bb      	str	r3, [r7, #24]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002258:	b29b      	uxth	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	4413      	add	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	011a      	lsls	r2, r3, #4
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	4413      	add	r3, r2
 800226c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800227c:	b29a      	uxth	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	801a      	strh	r2, [r3, #0]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800228c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002290:	b29a      	uxth	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	801a      	strh	r2, [r3, #0]
 8002296:	e017      	b.n	80022c8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	785b      	ldrb	r3, [r3, #1]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d113      	bne.n	80022c8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	4413      	add	r3, r2
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	011a      	lsls	r2, r3, #4
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	4413      	add	r3, r2
 80022bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	2200      	movs	r2, #0
 80022c6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f005 fd13 	bl	8007cfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 82d4 	beq.w	8002888 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fa:	827b      	strh	r3, [r7, #18]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	441a      	add	r2, r3
 800230a:	8a7b      	ldrh	r3, [r7, #18]
 800230c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231c:	b29b      	uxth	r3, r3
 800231e:	8013      	strh	r3, [r2, #0]
 8002320:	e2b2      	b.n	8002888 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d021      	beq.n	8002370 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	b29b      	uxth	r3, r3
 800233e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002346:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	441a      	add	r2, r3
 8002358:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800235c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800236c:	b29b      	uxth	r3, r3
 800236e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002376:	2b01      	cmp	r3, #1
 8002378:	f040 8286 	bne.w	8002888 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002384:	441a      	add	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002392:	441a      	add	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d309      	bcc.n	80023b8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	6a1a      	ldr	r2, [r3, #32]
 80023ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023b0:	1ad2      	subs	r2, r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	621a      	str	r2, [r3, #32]
 80023b6:	e015      	b.n	80023e4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d107      	bne.n	80023d0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80023c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023ce:	e009      	b.n	80023e4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2200      	movs	r2, #0
 80023e2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	785b      	ldrb	r3, [r3, #1]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d155      	bne.n	8002498 <HAL_PCD_EP_DB_Transmit+0x35a>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002400:	4413      	add	r3, r2
 8002402:	63bb      	str	r3, [r7, #56]	; 0x38
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	011a      	lsls	r2, r3, #4
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	4413      	add	r3, r2
 800240e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
 8002414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002416:	2b00      	cmp	r3, #0
 8002418:	d112      	bne.n	8002440 <HAL_PCD_EP_DB_Transmit+0x302>
 800241a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002424:	b29a      	uxth	r2, r3
 8002426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002438:	b29a      	uxth	r2, r3
 800243a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	e047      	b.n	80024d0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002442:	2b3e      	cmp	r3, #62	; 0x3e
 8002444:	d811      	bhi.n	800246a <HAL_PCD_EP_DB_Transmit+0x32c>
 8002446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002448:	085b      	lsrs	r3, r3, #1
 800244a:	64bb      	str	r3, [r7, #72]	; 0x48
 800244c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_PCD_EP_DB_Transmit+0x31e>
 8002456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002458:	3301      	adds	r3, #1
 800245a:	64bb      	str	r3, [r7, #72]	; 0x48
 800245c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245e:	b29b      	uxth	r3, r3
 8002460:	029b      	lsls	r3, r3, #10
 8002462:	b29a      	uxth	r2, r3
 8002464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002466:	801a      	strh	r2, [r3, #0]
 8002468:	e032      	b.n	80024d0 <HAL_PCD_EP_DB_Transmit+0x392>
 800246a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002472:	f003 031f 	and.w	r3, r3, #31
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <HAL_PCD_EP_DB_Transmit+0x342>
 800247a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247c:	3b01      	subs	r3, #1
 800247e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002482:	b29b      	uxth	r3, r3
 8002484:	029b      	lsls	r3, r3, #10
 8002486:	b29b      	uxth	r3, r3
 8002488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800248c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002490:	b29a      	uxth	r2, r3
 8002492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002494:	801a      	strh	r2, [r3, #0]
 8002496:	e01b      	b.n	80024d0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	785b      	ldrb	r3, [r3, #1]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d117      	bne.n	80024d0 <HAL_PCD_EP_DB_Transmit+0x392>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	643b      	str	r3, [r7, #64]	; 0x40
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b4:	4413      	add	r3, r2
 80024b6:	643b      	str	r3, [r7, #64]	; 0x40
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	011a      	lsls	r2, r3, #4
 80024be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c0:	4413      	add	r3, r2
 80024c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ce:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	6959      	ldr	r1, [r3, #20]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	891a      	ldrh	r2, [r3, #8]
 80024dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f003 fda1 	bl	8006026 <USB_WritePMA>
 80024e4:	e1d0      	b.n	8002888 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	3306      	adds	r3, #6
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	4413      	add	r3, r2
 8002504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800250e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800251a:	429a      	cmp	r2, r3
 800251c:	d307      	bcc.n	800252e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002526:	1ad2      	subs	r2, r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	619a      	str	r2, [r3, #24]
 800252c:	e002      	b.n	8002534 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 80c4 	bne.w	80026c6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d126      	bne.n	8002594 <HAL_PCD_EP_DB_Transmit+0x456>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002554:	b29b      	uxth	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255a:	4413      	add	r3, r2
 800255c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	011a      	lsls	r2, r3, #4
 8002564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002566:	4413      	add	r3, r2
 8002568:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800256c:	66bb      	str	r3, [r7, #104]	; 0x68
 800256e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002578:	b29a      	uxth	r2, r3
 800257a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800258c:	b29a      	uxth	r2, r3
 800258e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	e01a      	b.n	80025ca <HAL_PCD_EP_DB_Transmit+0x48c>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d116      	bne.n	80025ca <HAL_PCD_EP_DB_Transmit+0x48c>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	677b      	str	r3, [r7, #116]	; 0x74
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b0:	4413      	add	r3, r2
 80025b2:	677b      	str	r3, [r7, #116]	; 0x74
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	011a      	lsls	r2, r3, #4
 80025ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025bc:	4413      	add	r3, r2
 80025be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025c2:	673b      	str	r3, [r7, #112]	; 0x70
 80025c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c6:	2200      	movs	r2, #0
 80025c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	785b      	ldrb	r3, [r3, #1]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d12f      	bne.n	8002638 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025f0:	4413      	add	r3, r2
 80025f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	011a      	lsls	r2, r3, #4
 80025fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002600:	4413      	add	r3, r2
 8002602:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002606:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800260a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002616:	b29a      	uxth	r2, r3
 8002618:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800262a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800262e:	b29a      	uxth	r2, r3
 8002630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002634:	801a      	strh	r2, [r3, #0]
 8002636:	e017      	b.n	8002668 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d113      	bne.n	8002668 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800264e:	4413      	add	r3, r2
 8002650:	67bb      	str	r3, [r7, #120]	; 0x78
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	011a      	lsls	r2, r3, #4
 8002658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800265a:	4413      	add	r3, r2
 800265c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002660:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002664:	2200      	movs	r2, #0
 8002666:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f005 fb43 	bl	8007cfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 8104 	bne.w	8002888 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	441a      	add	r2, r3
 80026ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80026b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	8013      	strh	r3, [r2, #0]
 80026c4:	e0e0      	b.n	8002888 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d121      	bne.n	8002714 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	441a      	add	r2, r3
 80026fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800270c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002710:	b29b      	uxth	r3, r3
 8002712:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800271a:	2b01      	cmp	r3, #1
 800271c:	f040 80b4 	bne.w	8002888 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002728:	441a      	add	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	69da      	ldr	r2, [r3, #28]
 8002732:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002736:	441a      	add	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	6a1a      	ldr	r2, [r3, #32]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	429a      	cmp	r2, r3
 8002746:	d309      	bcc.n	800275c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	6a1a      	ldr	r2, [r3, #32]
 8002752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002754:	1ad2      	subs	r2, r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	621a      	str	r2, [r3, #32]
 800275a:	e015      	b.n	8002788 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002764:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002768:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002772:	e009      	b.n	8002788 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2200      	movs	r2, #0
 800277e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	667b      	str	r3, [r7, #100]	; 0x64
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	785b      	ldrb	r3, [r3, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d155      	bne.n	8002842 <HAL_PCD_EP_DB_Transmit+0x704>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027aa:	4413      	add	r3, r2
 80027ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	011a      	lsls	r2, r3, #4
 80027b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b6:	4413      	add	r3, r2
 80027b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80027be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d112      	bne.n	80027ea <HAL_PCD_EP_DB_Transmit+0x6ac>
 80027c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d2:	801a      	strh	r2, [r3, #0]
 80027d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	e044      	b.n	8002874 <HAL_PCD_EP_DB_Transmit+0x736>
 80027ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ec:	2b3e      	cmp	r3, #62	; 0x3e
 80027ee:	d811      	bhi.n	8002814 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80027f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	657b      	str	r3, [r7, #84]	; 0x54
 80027f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002802:	3301      	adds	r3, #1
 8002804:	657b      	str	r3, [r7, #84]	; 0x54
 8002806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002808:	b29b      	uxth	r3, r3
 800280a:	029b      	lsls	r3, r3, #10
 800280c:	b29a      	uxth	r2, r3
 800280e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002810:	801a      	strh	r2, [r3, #0]
 8002812:	e02f      	b.n	8002874 <HAL_PCD_EP_DB_Transmit+0x736>
 8002814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	657b      	str	r3, [r7, #84]	; 0x54
 800281a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002826:	3b01      	subs	r3, #1
 8002828:	657b      	str	r3, [r7, #84]	; 0x54
 800282a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282c:	b29b      	uxth	r3, r3
 800282e:	029b      	lsls	r3, r3, #10
 8002830:	b29b      	uxth	r3, r3
 8002832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800283a:	b29a      	uxth	r2, r3
 800283c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800283e:	801a      	strh	r2, [r3, #0]
 8002840:	e018      	b.n	8002874 <HAL_PCD_EP_DB_Transmit+0x736>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	785b      	ldrb	r3, [r3, #1]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d114      	bne.n	8002874 <HAL_PCD_EP_DB_Transmit+0x736>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002852:	b29b      	uxth	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002858:	4413      	add	r3, r2
 800285a:	667b      	str	r3, [r7, #100]	; 0x64
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	011a      	lsls	r2, r3, #4
 8002862:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002864:	4413      	add	r3, r2
 8002866:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800286a:	663b      	str	r3, [r7, #96]	; 0x60
 800286c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800286e:	b29a      	uxth	r2, r3
 8002870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002872:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	6959      	ldr	r1, [r3, #20]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	895a      	ldrh	r2, [r3, #10]
 8002880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002882:	b29b      	uxth	r3, r3
 8002884:	f003 fbcf 	bl	8006026 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a2:	823b      	strh	r3, [r7, #16]
 80028a4:	8a3b      	ldrh	r3, [r7, #16]
 80028a6:	f083 0310 	eor.w	r3, r3, #16
 80028aa:	823b      	strh	r3, [r7, #16]
 80028ac:	8a3b      	ldrh	r3, [r7, #16]
 80028ae:	f083 0320 	eor.w	r3, r3, #32
 80028b2:	823b      	strh	r3, [r7, #16]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	441a      	add	r2, r3
 80028c2:	8a3b      	ldrh	r3, [r7, #16]
 80028c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3788      	adds	r7, #136	; 0x88
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b087      	sub	sp, #28
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	817b      	strh	r3, [r7, #10]
 80028f0:	4613      	mov	r3, r2
 80028f2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028f4:	897b      	ldrh	r3, [r7, #10]
 80028f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002900:	897b      	ldrh	r3, [r7, #10]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4413      	add	r3, r2
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e009      	b.n	800292c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002918:	897a      	ldrh	r2, [r7, #10]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4413      	add	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800292c:	893b      	ldrh	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d107      	bne.n	8002942 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2200      	movs	r2, #0
 8002936:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	b29a      	uxth	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	80da      	strh	r2, [r3, #6]
 8002940:	e00b      	b.n	800295a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2201      	movs	r2, #1
 8002946:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	b29a      	uxth	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	0c1b      	lsrs	r3, r3, #16
 8002954:	b29a      	uxth	r2, r3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
	...

08002968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e26c      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8087 	beq.w	8002a96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002988:	4b92      	ldr	r3, [pc, #584]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b04      	cmp	r3, #4
 8002992:	d00c      	beq.n	80029ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002994:	4b8f      	ldr	r3, [pc, #572]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d112      	bne.n	80029c6 <HAL_RCC_OscConfig+0x5e>
 80029a0:	4b8c      	ldr	r3, [pc, #560]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ac:	d10b      	bne.n	80029c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ae:	4b89      	ldr	r3, [pc, #548]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d06c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x12c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d168      	bne.n	8002a94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e246      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x76>
 80029d0:	4b80      	ldr	r3, [pc, #512]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a7f      	ldr	r2, [pc, #508]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	e02e      	b.n	8002a3c <HAL_RCC_OscConfig+0xd4>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x98>
 80029e6:	4b7b      	ldr	r3, [pc, #492]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a7a      	ldr	r2, [pc, #488]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b78      	ldr	r3, [pc, #480]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a77      	ldr	r2, [pc, #476]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e01d      	b.n	8002a3c <HAL_RCC_OscConfig+0xd4>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0xbc>
 8002a0a:	4b72      	ldr	r3, [pc, #456]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a71      	ldr	r2, [pc, #452]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b6f      	ldr	r3, [pc, #444]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6e      	ldr	r2, [pc, #440]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0xd4>
 8002a24:	4b6b      	ldr	r3, [pc, #428]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a6a      	ldr	r2, [pc, #424]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b68      	ldr	r3, [pc, #416]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a67      	ldr	r2, [pc, #412]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fd ff66 	bl	8000914 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7fd ff62 	bl	8000914 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e1fa      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0xe4>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7fd ff52 	bl	8000914 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7fd ff4e 	bl	8000914 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1e6      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	4b53      	ldr	r3, [pc, #332]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x10c>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d063      	beq.n	8002b6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa2:	4b4c      	ldr	r3, [pc, #304]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aae:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d11c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x18c>
 8002aba:	4b46      	ldr	r3, [pc, #280]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d116      	bne.n	8002af4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	4b43      	ldr	r3, [pc, #268]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x176>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e1ba      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4939      	ldr	r1, [pc, #228]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	e03a      	b.n	8002b6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002afc:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_RCC_OscConfig+0x270>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7fd ff07 	bl	8000914 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7fd ff03 	bl	8000914 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e19b      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	4b2a      	ldr	r3, [pc, #168]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4927      	ldr	r1, [pc, #156]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
 8002b3c:	e015      	b.n	8002b6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3e:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <HAL_RCC_OscConfig+0x270>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fd fee6 	bl	8000914 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7fd fee2 	bl	8000914 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e17a      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d03a      	beq.n	8002bec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d019      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b84:	f7fd fec6 	bl	8000914 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7fd fec2 	bl	8000914 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e15a      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002baa:	2001      	movs	r0, #1
 8002bac:	f000 fad8 	bl	8003160 <RCC_Delay>
 8002bb0:	e01c      	b.n	8002bec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb8:	f7fd feac 	bl	8000914 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbe:	e00f      	b.n	8002be0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc0:	f7fd fea8 	bl	8000914 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d908      	bls.n	8002be0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e140      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	42420000 	.word	0x42420000
 8002bdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be0:	4b9e      	ldr	r3, [pc, #632]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1e9      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a6 	beq.w	8002d46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfe:	4b97      	ldr	r3, [pc, #604]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	4b94      	ldr	r3, [pc, #592]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4a93      	ldr	r2, [pc, #588]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	61d3      	str	r3, [r2, #28]
 8002c16:	4b91      	ldr	r3, [pc, #580]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c26:	4b8e      	ldr	r3, [pc, #568]	; (8002e60 <HAL_RCC_OscConfig+0x4f8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d118      	bne.n	8002c64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c32:	4b8b      	ldr	r3, [pc, #556]	; (8002e60 <HAL_RCC_OscConfig+0x4f8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a8a      	ldr	r2, [pc, #552]	; (8002e60 <HAL_RCC_OscConfig+0x4f8>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3e:	f7fd fe69 	bl	8000914 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c46:	f7fd fe65 	bl	8000914 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b64      	cmp	r3, #100	; 0x64
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0fd      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	4b81      	ldr	r3, [pc, #516]	; (8002e60 <HAL_RCC_OscConfig+0x4f8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d106      	bne.n	8002c7a <HAL_RCC_OscConfig+0x312>
 8002c6c:	4b7b      	ldr	r3, [pc, #492]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a7a      	ldr	r2, [pc, #488]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6213      	str	r3, [r2, #32]
 8002c78:	e02d      	b.n	8002cd6 <HAL_RCC_OscConfig+0x36e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x334>
 8002c82:	4b76      	ldr	r3, [pc, #472]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	4a75      	ldr	r2, [pc, #468]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	4b73      	ldr	r3, [pc, #460]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a72      	ldr	r2, [pc, #456]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002c94:	f023 0304 	bic.w	r3, r3, #4
 8002c98:	6213      	str	r3, [r2, #32]
 8002c9a:	e01c      	b.n	8002cd6 <HAL_RCC_OscConfig+0x36e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b05      	cmp	r3, #5
 8002ca2:	d10c      	bne.n	8002cbe <HAL_RCC_OscConfig+0x356>
 8002ca4:	4b6d      	ldr	r3, [pc, #436]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	4a6c      	ldr	r2, [pc, #432]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	6213      	str	r3, [r2, #32]
 8002cb0:	4b6a      	ldr	r3, [pc, #424]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4a69      	ldr	r2, [pc, #420]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	e00b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x36e>
 8002cbe:	4b67      	ldr	r3, [pc, #412]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a66      	ldr	r2, [pc, #408]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6213      	str	r3, [r2, #32]
 8002cca:	4b64      	ldr	r3, [pc, #400]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4a63      	ldr	r2, [pc, #396]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002cd0:	f023 0304 	bic.w	r3, r3, #4
 8002cd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d015      	beq.n	8002d0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cde:	f7fd fe19 	bl	8000914 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fd fe15 	bl	8000914 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0ab      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfc:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0ee      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x37e>
 8002d08:	e014      	b.n	8002d34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7fd fe03 	bl	8000914 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fd fdff 	bl	8000914 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e095      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d28:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1ee      	bne.n	8002d12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d105      	bne.n	8002d46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3a:	4b48      	ldr	r3, [pc, #288]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4a47      	ldr	r2, [pc, #284]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8081 	beq.w	8002e52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d50:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d061      	beq.n	8002e20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d146      	bne.n	8002df2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d64:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <HAL_RCC_OscConfig+0x4fc>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7fd fdd3 	bl	8000914 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d72:	f7fd fdcf 	bl	8000914 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e067      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d84:	4b35      	ldr	r3, [pc, #212]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d98:	d108      	bne.n	8002dac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d9a:	4b30      	ldr	r3, [pc, #192]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	492d      	ldr	r1, [pc, #180]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dac:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a19      	ldr	r1, [r3, #32]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	4927      	ldr	r1, [pc, #156]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <HAL_RCC_OscConfig+0x4fc>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fd fda3 	bl	8000914 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fd fd9f 	bl	8000914 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e037      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x46a>
 8002df0:	e02f      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df2:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <HAL_RCC_OscConfig+0x4fc>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fd fd8c 	bl	8000914 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fd fd88 	bl	8000914 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e020      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x498>
 8002e1e:	e018      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e013      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_OscConfig+0x4f4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40007000 	.word	0x40007000
 8002e64:	42420060 	.word	0x42420060

08002e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0d0      	b.n	800301e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d910      	bls.n	8002eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b67      	ldr	r3, [pc, #412]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 0207 	bic.w	r2, r3, #7
 8002e92:	4965      	ldr	r1, [pc, #404]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b63      	ldr	r3, [pc, #396]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0b8      	b.n	800301e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d020      	beq.n	8002efa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec4:	4b59      	ldr	r3, [pc, #356]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4a58      	ldr	r2, [pc, #352]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ece:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002edc:	4b53      	ldr	r3, [pc, #332]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4a52      	ldr	r2, [pc, #328]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ee6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee8:	4b50      	ldr	r3, [pc, #320]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	494d      	ldr	r1, [pc, #308]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d040      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	4b47      	ldr	r3, [pc, #284]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d115      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e07f      	b.n	800301e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	4b41      	ldr	r3, [pc, #260]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e073      	b.n	800301e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f36:	4b3d      	ldr	r3, [pc, #244]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e06b      	b.n	800301e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f46:	4b39      	ldr	r3, [pc, #228]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4936      	ldr	r1, [pc, #216]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f58:	f7fd fcdc 	bl	8000914 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f60:	f7fd fcd8 	bl	8000914 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e053      	b.n	800301e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	4b2d      	ldr	r3, [pc, #180]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 020c 	and.w	r2, r3, #12
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d1eb      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f88:	4b27      	ldr	r3, [pc, #156]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d210      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b24      	ldr	r3, [pc, #144]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 0207 	bic.w	r2, r3, #7
 8002f9e:	4922      	ldr	r1, [pc, #136]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b20      	ldr	r3, [pc, #128]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e032      	b.n	800301e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc4:	4b19      	ldr	r3, [pc, #100]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4916      	ldr	r1, [pc, #88]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fe2:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	490e      	ldr	r1, [pc, #56]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ff6:	f000 f821 	bl	800303c <HAL_RCC_GetSysClockFreq>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	490a      	ldr	r1, [pc, #40]	; (8003030 <HAL_RCC_ClockConfig+0x1c8>)
 8003008:	5ccb      	ldrb	r3, [r1, r3]
 800300a:	fa22 f303 	lsr.w	r3, r2, r3
 800300e:	4a09      	ldr	r2, [pc, #36]	; (8003034 <HAL_RCC_ClockConfig+0x1cc>)
 8003010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_RCC_ClockConfig+0x1d0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fc3a 	bl	8000890 <HAL_InitTick>

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40022000 	.word	0x40022000
 800302c:	40021000 	.word	0x40021000
 8003030:	08008ef0 	.word	0x08008ef0
 8003034:	20000000 	.word	0x20000000
 8003038:	20000004 	.word	0x20000004

0800303c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800303c:	b490      	push	{r4, r7}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003042:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003044:	1d3c      	adds	r4, r7, #4
 8003046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800304c:	f240 2301 	movw	r3, #513	; 0x201
 8003050:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	2300      	movs	r3, #0
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	2300      	movs	r3, #0
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003066:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b04      	cmp	r3, #4
 8003074:	d002      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x40>
 8003076:	2b08      	cmp	r3, #8
 8003078:	d003      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0x46>
 800307a:	e02d      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800307c:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800307e:	623b      	str	r3, [r7, #32]
      break;
 8003080:	e02d      	b.n	80030de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	0c9b      	lsrs	r3, r3, #18
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800308e:	4413      	add	r3, r2
 8003090:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003094:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030a0:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	0c5b      	lsrs	r3, r3, #17
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030ae:	4413      	add	r3, r2
 80030b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	4a0e      	ldr	r2, [pc, #56]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ba:	fb02 f203 	mul.w	r2, r2, r3
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	e004      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	4a0b      	ldr	r2, [pc, #44]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030cc:	fb02 f303 	mul.w	r3, r2, r3
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	623b      	str	r3, [r7, #32]
      break;
 80030d6:	e002      	b.n	80030de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030da:	623b      	str	r3, [r7, #32]
      break;
 80030dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030de:	6a3b      	ldr	r3, [r7, #32]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3728      	adds	r7, #40	; 0x28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc90      	pop	{r4, r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	08008e8c 	.word	0x08008e8c
 80030f0:	40021000 	.word	0x40021000
 80030f4:	007a1200 	.word	0x007a1200
 80030f8:	003d0900 	.word	0x003d0900

080030fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003100:	4b02      	ldr	r3, [pc, #8]	; (800310c <HAL_RCC_GetHCLKFreq+0x10>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	20000000 	.word	0x20000000

08003110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003114:	f7ff fff2 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4903      	ldr	r1, [pc, #12]	; (8003134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021000 	.word	0x40021000
 8003134:	08008f00 	.word	0x08008f00

08003138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800313c:	f7ff ffde 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	0adb      	lsrs	r3, r3, #11
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4903      	ldr	r1, [pc, #12]	; (800315c <HAL_RCC_GetPCLK2Freq+0x24>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000
 800315c:	08008f00 	.word	0x08008f00

08003160 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <RCC_Delay+0x34>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <RCC_Delay+0x38>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0a5b      	lsrs	r3, r3, #9
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800317c:	bf00      	nop
  }
  while (Delay --);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1e5a      	subs	r2, r3, #1
 8003182:	60fa      	str	r2, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f9      	bne.n	800317c <RCC_Delay+0x1c>
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr
 8003194:	20000000 	.word	0x20000000
 8003198:	10624dd3 	.word	0x10624dd3

0800319c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d07d      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031b8:	2300      	movs	r3, #0
 80031ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031bc:	4b4f      	ldr	r3, [pc, #316]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10d      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c8:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	4a4b      	ldr	r2, [pc, #300]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d2:	61d3      	str	r3, [r2, #28]
 80031d4:	4b49      	ldr	r3, [pc, #292]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e0:	2301      	movs	r3, #1
 80031e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e4:	4b46      	ldr	r3, [pc, #280]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d118      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f0:	4b43      	ldr	r3, [pc, #268]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a42      	ldr	r2, [pc, #264]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fc:	f7fd fb8a 	bl	8000914 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003202:	e008      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003204:	f7fd fb86 	bl	8000914 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e06d      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003216:	4b3a      	ldr	r3, [pc, #232]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003222:	4b36      	ldr	r3, [pc, #216]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d02e      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	429a      	cmp	r2, r3
 800323e:	d027      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003240:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003248:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800324a:	4b2e      	ldr	r3, [pc, #184]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003250:	4b2c      	ldr	r3, [pc, #176]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003256:	4a29      	ldr	r2, [pc, #164]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d014      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fd fb55 	bl	8000914 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fd fb51 	bl	8000914 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e036      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003284:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ee      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003290:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4917      	ldr	r1, [pc, #92]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d105      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a8:	4b14      	ldr	r3, [pc, #80]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	4a13      	ldr	r2, [pc, #76]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c0:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	490b      	ldr	r1, [pc, #44]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	4904      	ldr	r1, [pc, #16]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	40007000 	.word	0x40007000
 8003304:	42420440 	.word	0x42420440

08003308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e03f      	b.n	800339a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fd f9a6 	bl	8000680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800334a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fbe5 	bl	8003b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	4613      	mov	r3, r2
 80033ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d130      	bne.n	800341e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_UART_Transmit_IT+0x26>
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e029      	b.n	8003420 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_UART_Transmit_IT+0x38>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e022      	b.n	8003420 <HAL_UART_Transmit_IT+0x7e>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	88fa      	ldrh	r2, [r7, #6]
 80033ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	88fa      	ldrh	r2, [r7, #6]
 80033f2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2221      	movs	r2, #33	; 0x21
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003418:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e000      	b.n	8003420 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800341e:	2302      	movs	r3, #2
  }
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	4613      	mov	r3, r2
 8003436:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b20      	cmp	r3, #32
 8003442:	d11d      	bne.n	8003480 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_UART_Receive_IT+0x26>
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e016      	b.n	8003482 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_UART_Receive_IT+0x38>
 800345e:	2302      	movs	r3, #2
 8003460:	e00f      	b.n	8003482 <HAL_UART_Receive_IT+0x58>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	461a      	mov	r2, r3
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f9c6 	bl	8003808 <UART_Start_Receive_IT>
 800347c:	4603      	mov	r3, r0
 800347e:	e000      	b.n	8003482 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10d      	bne.n	80034de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_UART_IRQHandler+0x52>
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa76 	bl	80039c8 <UART_Receive_IT>
      return;
 80034dc:	e17b      	b.n	80037d6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80b1 	beq.w	8003648 <HAL_UART_IRQHandler+0x1bc>
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d105      	bne.n	80034fc <HAL_UART_IRQHandler+0x70>
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80a6 	beq.w	8003648 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_UART_IRQHandler+0x90>
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0201 	orr.w	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_UART_IRQHandler+0xb0>
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f043 0202 	orr.w	r2, r3, #2
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_UART_IRQHandler+0xd0>
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f043 0204 	orr.w	r2, r3, #4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00f      	beq.n	8003586 <HAL_UART_IRQHandler+0xfa>
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d104      	bne.n	800357a <HAL_UART_IRQHandler+0xee>
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f043 0208 	orr.w	r2, r3, #8
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 811e 	beq.w	80037cc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <HAL_UART_IRQHandler+0x11e>
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fa0f 	bl	80039c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf14      	ite	ne
 80035b8:	2301      	movne	r3, #1
 80035ba:	2300      	moveq	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <HAL_UART_IRQHandler+0x146>
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d031      	beq.n	8003636 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f951 	bl	800387a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d023      	beq.n	800362e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d013      	beq.n	8003626 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	4a76      	ldr	r2, [pc, #472]	; (80037dc <HAL_UART_IRQHandler+0x350>)
 8003604:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd fad4 	bl	8000bb8 <HAL_DMA_Abort_IT>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003620:	4610      	mov	r0, r2
 8003622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003624:	e00e      	b.n	8003644 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f8da 	bl	80037e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362c:	e00a      	b.n	8003644 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8d6 	bl	80037e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	e006      	b.n	8003644 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f8d2 	bl	80037e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003642:	e0c3      	b.n	80037cc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	bf00      	nop
    return;
 8003646:	e0c1      	b.n	80037cc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	2b01      	cmp	r3, #1
 800364e:	f040 80a1 	bne.w	8003794 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 809b 	beq.w	8003794 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8095 	beq.w	8003794 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d04e      	beq.n	800372c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003698:	8a3b      	ldrh	r3, [r7, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 8098 	beq.w	80037d0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036a4:	8a3a      	ldrh	r2, [r7, #16]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	f080 8092 	bcs.w	80037d0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8a3a      	ldrh	r2, [r7, #16]
 80036b0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d02b      	beq.n	8003714 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0210 	bic.w	r2, r2, #16
 8003708:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	4618      	mov	r0, r3
 8003710:	f7fd fa17 	bl	8000b42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800371c:	b29b      	uxth	r3, r3
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	b29b      	uxth	r3, r3
 8003722:	4619      	mov	r1, r3
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f864 	bl	80037f2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800372a:	e051      	b.n	80037d0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003734:	b29b      	uxth	r3, r3
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d047      	beq.n	80037d4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003744:	8a7b      	ldrh	r3, [r7, #18]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d044      	beq.n	80037d4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003758:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0201 	bic.w	r2, r2, #1
 8003768:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0210 	bic.w	r2, r2, #16
 8003786:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003788:	8a7b      	ldrh	r3, [r7, #18]
 800378a:	4619      	mov	r1, r3
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f830 	bl	80037f2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003792:	e01f      	b.n	80037d4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_UART_IRQHandler+0x324>
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f8a6 	bl	80038fa <UART_Transmit_IT>
    return;
 80037ae:	e012      	b.n	80037d6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <HAL_UART_IRQHandler+0x34a>
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f8e7 	bl	8003998 <UART_EndTransmit_IT>
    return;
 80037ca:	e004      	b.n	80037d6 <HAL_UART_IRQHandler+0x34a>
    return;
 80037cc:	bf00      	nop
 80037ce:	e002      	b.n	80037d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80037d0:	bf00      	nop
 80037d2:	e000      	b.n	80037d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80037d4:	bf00      	nop
  }
}
 80037d6:	3728      	adds	r7, #40	; 0x28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	080038d3 	.word	0x080038d3

080037e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr

080037f2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	460b      	mov	r3, r1
 80037fc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	4613      	mov	r3, r2
 8003814:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	88fa      	ldrh	r2, [r7, #6]
 8003820:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	88fa      	ldrh	r2, [r7, #6]
 8003826:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2222      	movs	r2, #34	; 0x22
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800384c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0220 	orr.w	r2, r2, #32
 800386c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003890:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d107      	bne.n	80038ba <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0210 	bic.w	r2, r2, #16
 80038b8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr

080038d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff ff77 	bl	80037e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b21      	cmp	r3, #33	; 0x21
 800390c:	d13e      	bne.n	800398c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003916:	d114      	bne.n	8003942 <UART_Transmit_IT+0x48>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d110      	bne.n	8003942 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003934:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	1c9a      	adds	r2, r3, #2
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	621a      	str	r2, [r3, #32]
 8003940:	e008      	b.n	8003954 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	1c59      	adds	r1, r3, #1
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6211      	str	r1, [r2, #32]
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29b      	uxth	r3, r3
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4619      	mov	r1, r3
 8003962:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10f      	bne.n	8003988 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003976:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003986:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800398c:	2302      	movs	r3, #2
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7fc fbe3 	bl	8000184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b22      	cmp	r3, #34	; 0x22
 80039da:	f040 8099 	bne.w	8003b10 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e6:	d117      	bne.n	8003a18 <UART_Receive_IT+0x50>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d113      	bne.n	8003a18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	1c9a      	adds	r2, r3, #2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	629a      	str	r2, [r3, #40]	; 0x28
 8003a16:	e026      	b.n	8003a66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	d007      	beq.n	8003a3c <UART_Receive_IT+0x74>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <UART_Receive_IT+0x82>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d106      	bne.n	8003a4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e008      	b.n	8003a5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	4619      	mov	r1, r3
 8003a74:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d148      	bne.n	8003b0c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0220 	bic.w	r2, r2, #32
 8003a88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
 8003aa8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d123      	bne.n	8003b02 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0210 	bic.w	r2, r2, #16
 8003ace:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d10a      	bne.n	8003af4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fe79 	bl	80037f2 <HAL_UARTEx_RxEventCallback>
 8003b00:	e002      	b.n	8003b08 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fc fb2a 	bl	800015c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e002      	b.n	8003b12 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b56:	f023 030c 	bic.w	r3, r3, #12
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	430b      	orrs	r3, r1
 8003b62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a2c      	ldr	r2, [pc, #176]	; (8003c30 <UART_SetConfig+0x114>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d103      	bne.n	8003b8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b84:	f7ff fad8 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	e002      	b.n	8003b92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b8c:	f7ff fac0 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8003b90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	009a      	lsls	r2, r3, #2
 8003b9c:	441a      	add	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	4a22      	ldr	r2, [pc, #136]	; (8003c34 <UART_SetConfig+0x118>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	0119      	lsls	r1, r3, #4
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009a      	lsls	r2, r3, #2
 8003bbc:	441a      	add	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <UART_SetConfig+0x118>)
 8003bca:	fba3 0302 	umull	r0, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	2064      	movs	r0, #100	; 0x64
 8003bd2:	fb00 f303 	mul.w	r3, r0, r3
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	3332      	adds	r3, #50	; 0x32
 8003bdc:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <UART_SetConfig+0x118>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be8:	4419      	add	r1, r3
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009a      	lsls	r2, r3, #2
 8003bf4:	441a      	add	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <UART_SetConfig+0x118>)
 8003c02:	fba3 0302 	umull	r0, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2064      	movs	r0, #100	; 0x64
 8003c0a:	fb00 f303 	mul.w	r3, r0, r3
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	3332      	adds	r3, #50	; 0x32
 8003c14:	4a07      	ldr	r2, [pc, #28]	; (8003c34 <UART_SetConfig+0x118>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	f003 020f 	and.w	r2, r3, #15
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	440a      	add	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40013800 	.word	0x40013800
 8003c34:	51eb851f 	.word	0x51eb851f

08003c38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c38:	b084      	sub	sp, #16
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	f107 0014 	add.w	r0, r7, #20
 8003c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	b004      	add	sp, #16
 8003c56:	4770      	bx	lr

08003c58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c68:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003c6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c8c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003c90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	f107 0014 	add.w	r0, r7, #20
 8003cde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	b004      	add	sp, #16
 8003d0e:	4770      	bx	lr

08003d10 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b09b      	sub	sp, #108	; 0x6c
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	78db      	ldrb	r3, [r3, #3]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d81f      	bhi.n	8003d82 <USB_ActivateEndpoint+0x72>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <USB_ActivateEndpoint+0x38>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d59 	.word	0x08003d59
 8003d4c:	08003d75 	.word	0x08003d75
 8003d50:	08003d8b 	.word	0x08003d8b
 8003d54:	08003d67 	.word	0x08003d67
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003d58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d60:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d64:	e012      	b.n	8003d8c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003d66:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d6a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003d6e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d72:	e00b      	b.n	8003d8c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003d74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d80:	e004      	b.n	8003d8c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003d88:	e000      	b.n	8003d8c <USB_ActivateEndpoint+0x7c>
      break;
 8003d8a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	441a      	add	r2, r3
 8003d96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	441a      	add	r2, r3
 8003ddc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	7b1b      	ldrb	r3, [r3, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f040 8149 	bne.w	8004090 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	785b      	ldrb	r3, [r3, #1]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8084 	beq.w	8003f10 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	4413      	add	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	011a      	lsls	r2, r3, #4
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	88db      	ldrh	r3, [r3, #6]
 8003e30:	085b      	lsrs	r3, r3, #1
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	81fb      	strh	r3, [r7, #14]
 8003e4a:	89fb      	ldrh	r3, [r7, #14]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01b      	beq.n	8003e8c <USB_ActivateEndpoint+0x17c>
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6a:	81bb      	strh	r3, [r7, #12]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	441a      	add	r2, r3
 8003e76:	89bb      	ldrh	r3, [r7, #12]
 8003e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	78db      	ldrb	r3, [r3, #3]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d020      	beq.n	8003ed6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eaa:	813b      	strh	r3, [r7, #8]
 8003eac:	893b      	ldrh	r3, [r7, #8]
 8003eae:	f083 0320 	eor.w	r3, r3, #32
 8003eb2:	813b      	strh	r3, [r7, #8]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	441a      	add	r2, r3
 8003ebe:	893b      	ldrh	r3, [r7, #8]
 8003ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	8013      	strh	r3, [r2, #0]
 8003ed4:	e27f      	b.n	80043d6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eec:	817b      	strh	r3, [r7, #10]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	441a      	add	r2, r3
 8003ef8:	897b      	ldrh	r3, [r7, #10]
 8003efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	8013      	strh	r3, [r2, #0]
 8003f0e:	e262      	b.n	80043d6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	4413      	add	r3, r2
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	011a      	lsls	r2, r3, #4
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	88db      	ldrh	r3, [r3, #6]
 8003f38:	085b      	lsrs	r3, r3, #1
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	4413      	add	r3, r2
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	011a      	lsls	r2, r3, #4
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	4413      	add	r3, r2
 8003f62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f66:	623b      	str	r3, [r7, #32]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d112      	bne.n	8003f96 <USB_ActivateEndpoint+0x286>
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	801a      	strh	r2, [r3, #0]
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	801a      	strh	r2, [r3, #0]
 8003f94:	e02f      	b.n	8003ff6 <USB_ActivateEndpoint+0x2e6>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b3e      	cmp	r3, #62	; 0x3e
 8003f9c:	d813      	bhi.n	8003fc6 <USB_ActivateEndpoint+0x2b6>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	663b      	str	r3, [r7, #96]	; 0x60
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <USB_ActivateEndpoint+0x2a8>
 8003fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	663b      	str	r3, [r7, #96]	; 0x60
 8003fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	029b      	lsls	r3, r3, #10
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	801a      	strh	r2, [r3, #0]
 8003fc4:	e017      	b.n	8003ff6 <USB_ActivateEndpoint+0x2e6>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d102      	bne.n	8003fe0 <USB_ActivateEndpoint+0x2d0>
 8003fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	663b      	str	r3, [r7, #96]	; 0x60
 8003fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	029b      	lsls	r3, r3, #10
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	83fb      	strh	r3, [r7, #30]
 8004004:	8bfb      	ldrh	r3, [r7, #30]
 8004006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01b      	beq.n	8004046 <USB_ActivateEndpoint+0x336>
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	b29b      	uxth	r3, r3
 800401c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004024:	83bb      	strh	r3, [r7, #28]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	441a      	add	r2, r3
 8004030:	8bbb      	ldrh	r3, [r7, #28]
 8004032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800403a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800403e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004042:	b29b      	uxth	r3, r3
 8004044:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405c:	837b      	strh	r3, [r7, #26]
 800405e:	8b7b      	ldrh	r3, [r7, #26]
 8004060:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004064:	837b      	strh	r3, [r7, #26]
 8004066:	8b7b      	ldrh	r3, [r7, #26]
 8004068:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800406c:	837b      	strh	r3, [r7, #26]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	441a      	add	r2, r3
 8004078:	8b7b      	ldrh	r3, [r7, #26]
 800407a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408a:	b29b      	uxth	r3, r3
 800408c:	8013      	strh	r3, [r2, #0]
 800408e:	e1a2      	b.n	80043d6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b29b      	uxth	r3, r3
 800409e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	441a      	add	r2, r3
 80040b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80040b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80040c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040dc:	4413      	add	r3, r2
 80040de:	65bb      	str	r3, [r7, #88]	; 0x58
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	011a      	lsls	r2, r3, #4
 80040e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ee:	657b      	str	r3, [r7, #84]	; 0x54
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	891b      	ldrh	r3, [r3, #8]
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	653b      	str	r3, [r7, #80]	; 0x50
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410a:	b29b      	uxth	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004110:	4413      	add	r3, r2
 8004112:	653b      	str	r3, [r7, #80]	; 0x50
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	011a      	lsls	r2, r3, #4
 800411a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800411c:	4413      	add	r3, r2
 800411e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	895b      	ldrh	r3, [r3, #10]
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	b29b      	uxth	r3, r3
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004132:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	785b      	ldrb	r3, [r3, #1]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f040 8091 	bne.w	8004260 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800414c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800414e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01b      	beq.n	800418e <USB_ActivateEndpoint+0x47e>
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	441a      	add	r2, r3
 8004178:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800417a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800417e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004182:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418a:	b29b      	uxth	r3, r3
 800418c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	873b      	strh	r3, [r7, #56]	; 0x38
 800419c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800419e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01b      	beq.n	80041de <USB_ActivateEndpoint+0x4ce>
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	441a      	add	r2, r3
 80041c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041da:	b29b      	uxth	r3, r3
 80041dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80041f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80041fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80041fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004200:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004204:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	441a      	add	r2, r3
 8004210:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800421a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004222:	b29b      	uxth	r3, r3
 8004224:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800423c:	867b      	strh	r3, [r7, #50]	; 0x32
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	441a      	add	r2, r3
 8004248:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800424a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800424e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425a:	b29b      	uxth	r3, r3
 800425c:	8013      	strh	r3, [r2, #0]
 800425e:	e0ba      	b.n	80043d6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004270:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01d      	beq.n	80042b8 <USB_ActivateEndpoint+0x5a8>
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004292:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	441a      	add	r2, r3
 80042a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01d      	beq.n	8004310 <USB_ActivateEndpoint+0x600>
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	441a      	add	r2, r3
 80042f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80042fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004308:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800430c:	b29b      	uxth	r3, r3
 800430e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	78db      	ldrb	r3, [r3, #3]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d024      	beq.n	8004362 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800432e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004332:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004336:	f083 0320 	eor.w	r3, r3, #32
 800433a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	441a      	add	r2, r3
 8004348:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800434c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435c:	b29b      	uxth	r3, r3
 800435e:	8013      	strh	r3, [r2, #0]
 8004360:	e01d      	b.n	800439e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	b29b      	uxth	r3, r3
 8004370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004378:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	441a      	add	r2, r3
 8004386:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800438a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439a:	b29b      	uxth	r3, r3
 800439c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	441a      	add	r2, r3
 80043c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80043c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80043d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80043da:	4618      	mov	r0, r3
 80043dc:	376c      	adds	r7, #108	; 0x6c
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b08d      	sub	sp, #52	; 0x34
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	7b1b      	ldrb	r3, [r3, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f040 808e 	bne.w	8004514 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	785b      	ldrb	r3, [r3, #1]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d044      	beq.n	800448a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	81bb      	strh	r3, [r7, #12]
 800440e:	89bb      	ldrh	r3, [r7, #12]
 8004410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01b      	beq.n	8004450 <USB_DeactivateEndpoint+0x6c>
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442e:	817b      	strh	r3, [r7, #10]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	897b      	ldrh	r3, [r7, #10]
 800443c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004448:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800444c:	b29b      	uxth	r3, r3
 800444e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	b29b      	uxth	r3, r3
 800445e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004466:	813b      	strh	r3, [r7, #8]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	441a      	add	r2, r3
 8004472:	893b      	ldrh	r3, [r7, #8]
 8004474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004484:	b29b      	uxth	r3, r3
 8004486:	8013      	strh	r3, [r2, #0]
 8004488:	e192      	b.n	80047b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	827b      	strh	r3, [r7, #18]
 8004498:	8a7b      	ldrh	r3, [r7, #18]
 800449a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01b      	beq.n	80044da <USB_DeactivateEndpoint+0xf6>
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b8:	823b      	strh	r3, [r7, #16]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	441a      	add	r2, r3
 80044c4:	8a3b      	ldrh	r3, [r7, #16]
 80044c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f0:	81fb      	strh	r3, [r7, #14]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	441a      	add	r2, r3
 80044fc:	89fb      	ldrh	r3, [r7, #14]
 80044fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800450a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450e:	b29b      	uxth	r3, r3
 8004510:	8013      	strh	r3, [r2, #0]
 8004512:	e14d      	b.n	80047b0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	785b      	ldrb	r3, [r3, #1]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f040 80a5 	bne.w	8004668 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	843b      	strh	r3, [r7, #32]
 800452c:	8c3b      	ldrh	r3, [r7, #32]
 800452e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d01b      	beq.n	800456e <USB_DeactivateEndpoint+0x18a>
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454c:	83fb      	strh	r3, [r7, #30]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	441a      	add	r2, r3
 8004558:	8bfb      	ldrh	r3, [r7, #30]
 800455a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800455e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004562:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800456a:	b29b      	uxth	r3, r3
 800456c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	83bb      	strh	r3, [r7, #28]
 800457c:	8bbb      	ldrh	r3, [r7, #28]
 800457e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01b      	beq.n	80045be <USB_DeactivateEndpoint+0x1da>
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	b29b      	uxth	r3, r3
 8004594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459c:	837b      	strh	r3, [r7, #26]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	441a      	add	r2, r3
 80045a8:	8b7b      	ldrh	r3, [r7, #26]
 80045aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d4:	833b      	strh	r3, [r7, #24]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	441a      	add	r2, r3
 80045e0:	8b3b      	ldrh	r3, [r7, #24]
 80045e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460c:	82fb      	strh	r3, [r7, #22]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	441a      	add	r2, r3
 8004618:	8afb      	ldrh	r3, [r7, #22]
 800461a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462a:	b29b      	uxth	r3, r3
 800462c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004644:	82bb      	strh	r3, [r7, #20]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	441a      	add	r2, r3
 8004650:	8abb      	ldrh	r3, [r7, #20]
 8004652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800465a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004662:	b29b      	uxth	r3, r3
 8004664:	8013      	strh	r3, [r2, #0]
 8004666:	e0a3      	b.n	80047b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004676:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01b      	beq.n	80046b8 <USB_DeactivateEndpoint+0x2d4>
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004696:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	441a      	add	r2, r3
 80046a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80046a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80046c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01b      	beq.n	8004708 <USB_DeactivateEndpoint+0x324>
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e6:	853b      	strh	r3, [r7, #40]	; 0x28
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	441a      	add	r2, r3
 80046f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80046f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004700:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004704:	b29b      	uxth	r3, r3
 8004706:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	441a      	add	r2, r3
 800472a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800472c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473c:	b29b      	uxth	r3, r3
 800473e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004756:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	441a      	add	r2, r3
 8004762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800476c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004774:	b29b      	uxth	r3, r3
 8004776:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	b29b      	uxth	r3, r3
 8004786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	441a      	add	r2, r3
 800479a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800479c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3734      	adds	r7, #52	; 0x34
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr

080047bc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b0cc      	sub	sp, #304	; 0x130
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	6018      	str	r0, [r3, #0]
 80047c6:	463b      	mov	r3, r7
 80047c8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047ca:	463b      	mov	r3, r7
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	f040 872e 	bne.w	8005632 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80047d6:	463b      	mov	r3, r7
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699a      	ldr	r2, [r3, #24]
 80047dc:	463b      	mov	r3, r7
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d905      	bls.n	80047f2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80047e6:	463b      	mov	r3, r7
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80047f0:	e004      	b.n	80047fc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80047f2:	463b      	mov	r3, r7
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80047fc:	463b      	mov	r3, r7
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	7b1b      	ldrb	r3, [r3, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d134      	bne.n	8004870 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004806:	463b      	mov	r3, r7
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6959      	ldr	r1, [r3, #20]
 800480c:	463b      	mov	r3, r7
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	88da      	ldrh	r2, [r3, #6]
 8004812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004816:	b29b      	uxth	r3, r3
 8004818:	1d38      	adds	r0, r7, #4
 800481a:	6800      	ldr	r0, [r0, #0]
 800481c:	f001 fc03 	bl	8006026 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004820:	f107 0310 	add.w	r3, r7, #16
 8004824:	1d3a      	adds	r2, r7, #4
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	1d3b      	adds	r3, r7, #4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004832:	b29b      	uxth	r3, r3
 8004834:	4619      	mov	r1, r3
 8004836:	f107 0310 	add.w	r3, r7, #16
 800483a:	f107 0210 	add.w	r2, r7, #16
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	440a      	add	r2, r1
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	463b      	mov	r3, r7
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	011a      	lsls	r2, r3, #4
 800484c:	f107 0310 	add.w	r3, r7, #16
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4413      	add	r3, r2
 8004854:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004858:	f107 030c 	add.w	r3, r7, #12
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004862:	b29a      	uxth	r2, r3
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	801a      	strh	r2, [r3, #0]
 800486c:	f000 beac 	b.w	80055c8 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004870:	463b      	mov	r3, r7
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	78db      	ldrb	r3, [r3, #3]
 8004876:	2b02      	cmp	r3, #2
 8004878:	f040 838c 	bne.w	8004f94 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800487c:	463b      	mov	r3, r7
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6a1a      	ldr	r2, [r3, #32]
 8004882:	463b      	mov	r3, r7
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	429a      	cmp	r2, r3
 800488a:	f240 8330 	bls.w	8004eee <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800488e:	1d3b      	adds	r3, r7, #4
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	463b      	mov	r3, r7
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	463b      	mov	r3, r7
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	441a      	add	r2, r3
 80048ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80048be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80048d2:	463b      	mov	r3, r7
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6a1a      	ldr	r2, [r3, #32]
 80048d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048dc:	1ad2      	subs	r2, r2, r3
 80048de:	463b      	mov	r3, r7
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80048e4:	1d3b      	adds	r3, r7, #4
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	463b      	mov	r3, r7
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 819e 	beq.w	8004c3c <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004900:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004904:	1d3a      	adds	r2, r7, #4
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	463b      	mov	r3, r7
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	785b      	ldrb	r3, [r3, #1]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d17a      	bne.n	8004a0a <USB_EPStartXfer+0x24e>
 8004914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004918:	1d3a      	adds	r2, r7, #4
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	1d3b      	adds	r3, r7, #4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004926:	b29b      	uxth	r3, r3
 8004928:	4619      	mov	r1, r3
 800492a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800492e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	440a      	add	r2, r1
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	463b      	mov	r3, r7
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	011a      	lsls	r2, r3, #4
 8004940:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4413      	add	r3, r2
 8004948:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800494c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11a      	bne.n	8004990 <USB_EPStartXfer+0x1d4>
 800495a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004968:	b29a      	uxth	r2, r3
 800496a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004984:	b29a      	uxth	r2, r3
 8004986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	801a      	strh	r2, [r3, #0]
 800498e:	e062      	b.n	8004a56 <USB_EPStartXfer+0x29a>
 8004990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004994:	2b3e      	cmp	r3, #62	; 0x3e
 8004996:	d819      	bhi.n	80049cc <USB_EPStartXfer+0x210>
 8004998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80049a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d004      	beq.n	80049b8 <USB_EPStartXfer+0x1fc>
 80049ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049b2:	3301      	adds	r3, #1
 80049b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80049b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049bc:	b29b      	uxth	r3, r3
 80049be:	029b      	lsls	r3, r3, #10
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	801a      	strh	r2, [r3, #0]
 80049ca:	e044      	b.n	8004a56 <USB_EPStartXfer+0x29a>
 80049cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80049d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d104      	bne.n	80049ec <USB_EPStartXfer+0x230>
 80049e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049e6:	3b01      	subs	r3, #1
 80049e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80049ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	029b      	lsls	r3, r3, #10
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	801a      	strh	r2, [r3, #0]
 8004a08:	e025      	b.n	8004a56 <USB_EPStartXfer+0x29a>
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d120      	bne.n	8004a56 <USB_EPStartXfer+0x29a>
 8004a14:	1d3b      	adds	r3, r7, #4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a28:	6812      	ldr	r2, [r2, #0]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	463b      	mov	r3, r7
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	011a      	lsls	r2, r3, #4
 8004a36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a56:	463b      	mov	r3, r7
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	895b      	ldrh	r3, [r3, #10]
 8004a5c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a60:	463b      	mov	r3, r7
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6959      	ldr	r1, [r3, #20]
 8004a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a70:	1d38      	adds	r0, r7, #4
 8004a72:	6800      	ldr	r0, [r0, #0]
 8004a74:	f001 fad7 	bl	8006026 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a78:	463b      	mov	r3, r7
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695a      	ldr	r2, [r3, #20]
 8004a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a82:	441a      	add	r2, r3
 8004a84:	463b      	mov	r3, r7
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a8a:	463b      	mov	r3, r7
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6a1a      	ldr	r2, [r3, #32]
 8004a90:	463b      	mov	r3, r7
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d909      	bls.n	8004aae <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6a1a      	ldr	r2, [r3, #32]
 8004aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aa4:	1ad2      	subs	r2, r2, r3
 8004aa6:	463b      	mov	r3, r7
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	621a      	str	r2, [r3, #32]
 8004aac:	e008      	b.n	8004ac0 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8004aae:	463b      	mov	r3, r7
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004ab8:	463b      	mov	r3, r7
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2200      	movs	r2, #0
 8004abe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ac0:	463b      	mov	r3, r7
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	785b      	ldrb	r3, [r3, #1]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d17a      	bne.n	8004bc0 <USB_EPStartXfer+0x404>
 8004aca:	f107 0318 	add.w	r3, r7, #24
 8004ace:	1d3a      	adds	r2, r7, #4
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	1d3b      	adds	r3, r7, #4
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	4619      	mov	r1, r3
 8004ae0:	f107 0318 	add.w	r3, r7, #24
 8004ae4:	f107 0218 	add.w	r2, r7, #24
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	440a      	add	r2, r1
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	463b      	mov	r3, r7
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	011a      	lsls	r2, r3, #4
 8004af6:	f107 0318 	add.w	r3, r7, #24
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4413      	add	r3, r2
 8004afe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004b02:	f107 0314 	add.w	r3, r7, #20
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d11a      	bne.n	8004b46 <USB_EPStartXfer+0x38a>
 8004b10:	f107 0314 	add.w	r3, r7, #20
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	f107 0314 	add.w	r3, r7, #20
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	801a      	strh	r2, [r3, #0]
 8004b28:	f107 0314 	add.w	r3, r7, #20
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	f107 0314 	add.w	r3, r7, #20
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	801a      	strh	r2, [r3, #0]
 8004b44:	e067      	b.n	8004c16 <USB_EPStartXfer+0x45a>
 8004b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b4a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b4c:	d819      	bhi.n	8004b82 <USB_EPStartXfer+0x3c6>
 8004b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d004      	beq.n	8004b6e <USB_EPStartXfer+0x3b2>
 8004b64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b68:	3301      	adds	r3, #1
 8004b6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b6e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	029b      	lsls	r3, r3, #10
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	f107 0314 	add.w	r3, r7, #20
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	e049      	b.n	8004c16 <USB_EPStartXfer+0x45a>
 8004b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b90:	f003 031f 	and.w	r3, r3, #31
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <USB_EPStartXfer+0x3e6>
 8004b98:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004ba2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	029b      	lsls	r3, r3, #10
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	f107 0314 	add.w	r3, r7, #20
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	801a      	strh	r2, [r3, #0]
 8004bbe:	e02a      	b.n	8004c16 <USB_EPStartXfer+0x45a>
 8004bc0:	463b      	mov	r3, r7
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	785b      	ldrb	r3, [r3, #1]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d125      	bne.n	8004c16 <USB_EPStartXfer+0x45a>
 8004bca:	f107 0320 	add.w	r3, r7, #32
 8004bce:	1d3a      	adds	r2, r7, #4
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	1d3b      	adds	r3, r7, #4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	4619      	mov	r1, r3
 8004be0:	f107 0320 	add.w	r3, r7, #32
 8004be4:	f107 0220 	add.w	r2, r7, #32
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	440a      	add	r2, r1
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	463b      	mov	r3, r7
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	011a      	lsls	r2, r3, #4
 8004bf6:	f107 0320 	add.w	r3, r7, #32
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004c02:	f107 031c 	add.w	r3, r7, #28
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	f107 031c 	add.w	r3, r7, #28
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c16:	463b      	mov	r3, r7
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	891b      	ldrh	r3, [r3, #8]
 8004c1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c20:	463b      	mov	r3, r7
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6959      	ldr	r1, [r3, #20]
 8004c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c30:	1d38      	adds	r0, r7, #4
 8004c32:	6800      	ldr	r0, [r0, #0]
 8004c34:	f001 f9f7 	bl	8006026 <USB_WritePMA>
 8004c38:	f000 bcc6 	b.w	80055c8 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c3c:	463b      	mov	r3, r7
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	785b      	ldrb	r3, [r3, #1]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d164      	bne.n	8004d10 <USB_EPStartXfer+0x554>
 8004c46:	1d3b      	adds	r3, r7, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c4c:	1d3b      	adds	r3, r7, #4
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c5a:	4413      	add	r3, r2
 8004c5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c5e:	463b      	mov	r3, r7
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	011a      	lsls	r2, r3, #4
 8004c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c68:	4413      	add	r3, r2
 8004c6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d112      	bne.n	8004c9e <USB_EPStartXfer+0x4e2>
 8004c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c86:	801a      	strh	r2, [r3, #0]
 8004c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	e057      	b.n	8004d4e <USB_EPStartXfer+0x592>
 8004c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ca4:	d817      	bhi.n	8004cd6 <USB_EPStartXfer+0x51a>
 8004ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d004      	beq.n	8004cc6 <USB_EPStartXfer+0x50a>
 8004cbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004cc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	029b      	lsls	r3, r3, #10
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	e03b      	b.n	8004d4e <USB_EPStartXfer+0x592>
 8004cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d104      	bne.n	8004cf6 <USB_EPStartXfer+0x53a>
 8004cec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004cf6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	029b      	lsls	r3, r3, #10
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d0c:	801a      	strh	r2, [r3, #0]
 8004d0e:	e01e      	b.n	8004d4e <USB_EPStartXfer+0x592>
 8004d10:	463b      	mov	r3, r7
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	785b      	ldrb	r3, [r3, #1]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d119      	bne.n	8004d4e <USB_EPStartXfer+0x592>
 8004d1a:	1d3b      	adds	r3, r7, #4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d20:	1d3b      	adds	r3, r7, #4
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d2e:	4413      	add	r3, r2
 8004d30:	653b      	str	r3, [r7, #80]	; 0x50
 8004d32:	463b      	mov	r3, r7
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	011a      	lsls	r2, r3, #4
 8004d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d4e:	463b      	mov	r3, r7
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	891b      	ldrh	r3, [r3, #8]
 8004d54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d58:	463b      	mov	r3, r7
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6959      	ldr	r1, [r3, #20]
 8004d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d68:	1d38      	adds	r0, r7, #4
 8004d6a:	6800      	ldr	r0, [r0, #0]
 8004d6c:	f001 f95b 	bl	8006026 <USB_WritePMA>
            ep->xfer_buff += len;
 8004d70:	463b      	mov	r3, r7
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d7a:	441a      	add	r2, r3
 8004d7c:	463b      	mov	r3, r7
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d82:	463b      	mov	r3, r7
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6a1a      	ldr	r2, [r3, #32]
 8004d88:	463b      	mov	r3, r7
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d909      	bls.n	8004da6 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8004d92:	463b      	mov	r3, r7
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6a1a      	ldr	r2, [r3, #32]
 8004d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d9c:	1ad2      	subs	r2, r2, r3
 8004d9e:	463b      	mov	r3, r7
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	621a      	str	r2, [r3, #32]
 8004da4:	e008      	b.n	8004db8 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004da6:	463b      	mov	r3, r7
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004db0:	463b      	mov	r3, r7
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2200      	movs	r2, #0
 8004db6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004db8:	1d3b      	adds	r3, r7, #4
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d164      	bne.n	8004e92 <USB_EPStartXfer+0x6d6>
 8004dc8:	1d3b      	adds	r3, r7, #4
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dce:	1d3b      	adds	r3, r7, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	4413      	add	r3, r2
 8004dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8004de0:	463b      	mov	r3, r7
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	011a      	lsls	r2, r3, #4
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	4413      	add	r3, r2
 8004dec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004df0:	637b      	str	r3, [r7, #52]	; 0x34
 8004df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d112      	bne.n	8004e20 <USB_EPStartXfer+0x664>
 8004dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e08:	801a      	strh	r2, [r3, #0]
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1c:	801a      	strh	r2, [r3, #0]
 8004e1e:	e054      	b.n	8004eca <USB_EPStartXfer+0x70e>
 8004e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e24:	2b3e      	cmp	r3, #62	; 0x3e
 8004e26:	d817      	bhi.n	8004e58 <USB_EPStartXfer+0x69c>
 8004e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e2c:	085b      	lsrs	r3, r3, #1
 8004e2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d004      	beq.n	8004e48 <USB_EPStartXfer+0x68c>
 8004e3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e42:	3301      	adds	r3, #1
 8004e44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004e48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	029b      	lsls	r3, r3, #10
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	e038      	b.n	8004eca <USB_EPStartXfer+0x70e>
 8004e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d104      	bne.n	8004e78 <USB_EPStartXfer+0x6bc>
 8004e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e72:	3b01      	subs	r3, #1
 8004e74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004e78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	029b      	lsls	r3, r3, #10
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	e01b      	b.n	8004eca <USB_EPStartXfer+0x70e>
 8004e92:	463b      	mov	r3, r7
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d116      	bne.n	8004eca <USB_EPStartXfer+0x70e>
 8004e9c:	1d3b      	adds	r3, r7, #4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eaa:	4413      	add	r3, r2
 8004eac:	643b      	str	r3, [r7, #64]	; 0x40
 8004eae:	463b      	mov	r3, r7
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	011a      	lsls	r2, r3, #4
 8004eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb8:	4413      	add	r3, r2
 8004eba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004eca:	463b      	mov	r3, r7
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	895b      	ldrh	r3, [r3, #10]
 8004ed0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ed4:	463b      	mov	r3, r7
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6959      	ldr	r1, [r3, #20]
 8004eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ee4:	1d38      	adds	r0, r7, #4
 8004ee6:	6800      	ldr	r0, [r0, #0]
 8004ee8:	f001 f89d 	bl	8006026 <USB_WritePMA>
 8004eec:	e36c      	b.n	80055c8 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004eee:	463b      	mov	r3, r7
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004ef8:	1d3b      	adds	r3, r7, #4
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	463b      	mov	r3, r7
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004f16:	1d3b      	adds	r3, r7, #4
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	441a      	add	r2, r3
 8004f24:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f3c:	1d3b      	adds	r3, r7, #4
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f50:	4413      	add	r3, r2
 8004f52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f54:	463b      	mov	r3, r7
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	011a      	lsls	r2, r3, #4
 8004f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f5e:	4413      	add	r3, r2
 8004f60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f64:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004f70:	463b      	mov	r3, r7
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	891b      	ldrh	r3, [r3, #8]
 8004f76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f7a:	463b      	mov	r3, r7
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6959      	ldr	r1, [r3, #20]
 8004f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004f8a:	1d38      	adds	r0, r7, #4
 8004f8c:	6800      	ldr	r0, [r0, #0]
 8004f8e:	f001 f84a 	bl	8006026 <USB_WritePMA>
 8004f92:	e319      	b.n	80055c8 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004f94:	1d3b      	adds	r3, r7, #4
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	463b      	mov	r3, r7
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fae:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004fb2:	1d3b      	adds	r3, r7, #4
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	463b      	mov	r3, r7
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	441a      	add	r2, r3
 8004fc0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fcc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004fd8:	463b      	mov	r3, r7
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe2:	1ad2      	subs	r2, r2, r3
 8004fe4:	463b      	mov	r3, r7
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fea:	1d3b      	adds	r3, r7, #4
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	463b      	mov	r3, r7
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8162 	beq.w	80052ca <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005006:	1d3b      	adds	r3, r7, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800500e:	463b      	mov	r3, r7
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	785b      	ldrb	r3, [r3, #1]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d164      	bne.n	80050e2 <USB_EPStartXfer+0x926>
 8005018:	1d3b      	adds	r3, r7, #4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	67bb      	str	r3, [r7, #120]	; 0x78
 800501e:	1d3b      	adds	r3, r7, #4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005026:	b29b      	uxth	r3, r3
 8005028:	461a      	mov	r2, r3
 800502a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800502c:	4413      	add	r3, r2
 800502e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005030:	463b      	mov	r3, r7
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	011a      	lsls	r2, r3, #4
 8005038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800503a:	4413      	add	r3, r2
 800503c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005040:	677b      	str	r3, [r7, #116]	; 0x74
 8005042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d112      	bne.n	8005070 <USB_EPStartXfer+0x8b4>
 800504a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005054:	b29a      	uxth	r2, r3
 8005056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005058:	801a      	strh	r2, [r3, #0]
 800505a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005068:	b29a      	uxth	r2, r3
 800506a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800506c:	801a      	strh	r2, [r3, #0]
 800506e:	e057      	b.n	8005120 <USB_EPStartXfer+0x964>
 8005070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005074:	2b3e      	cmp	r3, #62	; 0x3e
 8005076:	d817      	bhi.n	80050a8 <USB_EPStartXfer+0x8ec>
 8005078:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507c:	085b      	lsrs	r3, r3, #1
 800507e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d004      	beq.n	8005098 <USB_EPStartXfer+0x8dc>
 800508e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005092:	3301      	adds	r3, #1
 8005094:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005098:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800509c:	b29b      	uxth	r3, r3
 800509e:	029b      	lsls	r3, r3, #10
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050a4:	801a      	strh	r2, [r3, #0]
 80050a6:	e03b      	b.n	8005120 <USB_EPStartXfer+0x964>
 80050a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80050b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <USB_EPStartXfer+0x90c>
 80050be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80050c2:	3b01      	subs	r3, #1
 80050c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80050c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	029b      	lsls	r3, r3, #10
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050da:	b29a      	uxth	r2, r3
 80050dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050de:	801a      	strh	r2, [r3, #0]
 80050e0:	e01e      	b.n	8005120 <USB_EPStartXfer+0x964>
 80050e2:	463b      	mov	r3, r7
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	785b      	ldrb	r3, [r3, #1]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d119      	bne.n	8005120 <USB_EPStartXfer+0x964>
 80050ec:	1d3b      	adds	r3, r7, #4
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050fc:	4413      	add	r3, r2
 80050fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005102:	463b      	mov	r3, r7
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	011a      	lsls	r2, r3, #4
 800510a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800510e:	4413      	add	r3, r2
 8005110:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005114:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511a:	b29a      	uxth	r2, r3
 800511c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800511e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005120:	463b      	mov	r3, r7
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	895b      	ldrh	r3, [r3, #10]
 8005126:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800512a:	463b      	mov	r3, r7
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6959      	ldr	r1, [r3, #20]
 8005130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005134:	b29b      	uxth	r3, r3
 8005136:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800513a:	1d38      	adds	r0, r7, #4
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	f000 ff72 	bl	8006026 <USB_WritePMA>
          ep->xfer_buff += len;
 8005142:	463b      	mov	r3, r7
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695a      	ldr	r2, [r3, #20]
 8005148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800514c:	441a      	add	r2, r3
 800514e:	463b      	mov	r3, r7
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005154:	463b      	mov	r3, r7
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	463b      	mov	r3, r7
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	429a      	cmp	r2, r3
 8005162:	d909      	bls.n	8005178 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005164:	463b      	mov	r3, r7
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6a1a      	ldr	r2, [r3, #32]
 800516a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	463b      	mov	r3, r7
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	621a      	str	r2, [r3, #32]
 8005176:	e008      	b.n	800518a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005178:	463b      	mov	r3, r7
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005182:	463b      	mov	r3, r7
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2200      	movs	r2, #0
 8005188:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800518a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 821a 	beq.w	80055c8 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005194:	463b      	mov	r3, r7
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d164      	bne.n	8005268 <USB_EPStartXfer+0xaac>
 800519e:	1d3b      	adds	r3, r7, #4
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a4:	1d3b      	adds	r3, r7, #4
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	461a      	mov	r2, r3
 80051b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051b2:	4413      	add	r3, r2
 80051b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80051b6:	463b      	mov	r3, r7
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	011a      	lsls	r2, r3, #4
 80051be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051c0:	4413      	add	r3, r2
 80051c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051c6:	667b      	str	r3, [r7, #100]	; 0x64
 80051c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d112      	bne.n	80051f6 <USB_EPStartXfer+0xa3a>
 80051d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051da:	b29a      	uxth	r2, r3
 80051dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051de:	801a      	strh	r2, [r3, #0]
 80051e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051f2:	801a      	strh	r2, [r3, #0]
 80051f4:	e057      	b.n	80052a6 <USB_EPStartXfer+0xaea>
 80051f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051fa:	2b3e      	cmp	r3, #62	; 0x3e
 80051fc:	d817      	bhi.n	800522e <USB_EPStartXfer+0xa72>
 80051fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d004      	beq.n	800521e <USB_EPStartXfer+0xa62>
 8005214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005218:	3301      	adds	r3, #1
 800521a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005222:	b29b      	uxth	r3, r3
 8005224:	029b      	lsls	r3, r3, #10
 8005226:	b29a      	uxth	r2, r3
 8005228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800522a:	801a      	strh	r2, [r3, #0]
 800522c:	e03b      	b.n	80052a6 <USB_EPStartXfer+0xaea>
 800522e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <USB_EPStartXfer+0xa92>
 8005244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005248:	3b01      	subs	r3, #1
 800524a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800524e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005252:	b29b      	uxth	r3, r3
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	b29b      	uxth	r3, r3
 8005258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005260:	b29a      	uxth	r2, r3
 8005262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005264:	801a      	strh	r2, [r3, #0]
 8005266:	e01e      	b.n	80052a6 <USB_EPStartXfer+0xaea>
 8005268:	463b      	mov	r3, r7
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	785b      	ldrb	r3, [r3, #1]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d119      	bne.n	80052a6 <USB_EPStartXfer+0xaea>
 8005272:	1d3b      	adds	r3, r7, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	673b      	str	r3, [r7, #112]	; 0x70
 8005278:	1d3b      	adds	r3, r7, #4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005280:	b29b      	uxth	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005286:	4413      	add	r3, r2
 8005288:	673b      	str	r3, [r7, #112]	; 0x70
 800528a:	463b      	mov	r3, r7
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	011a      	lsls	r2, r3, #4
 8005292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005294:	4413      	add	r3, r2
 8005296:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800529a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800529c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052a6:	463b      	mov	r3, r7
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	891b      	ldrh	r3, [r3, #8]
 80052ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052b0:	463b      	mov	r3, r7
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6959      	ldr	r1, [r3, #20]
 80052b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052c0:	1d38      	adds	r0, r7, #4
 80052c2:	6800      	ldr	r0, [r0, #0]
 80052c4:	f000 feaf 	bl	8006026 <USB_WritePMA>
 80052c8:	e17e      	b.n	80055c8 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052ca:	463b      	mov	r3, r7
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d16f      	bne.n	80053b4 <USB_EPStartXfer+0xbf8>
 80052d4:	1d3b      	adds	r3, r7, #4
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052dc:	1d3b      	adds	r3, r7, #4
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052ec:	4413      	add	r3, r2
 80052ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052f2:	463b      	mov	r3, r7
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	011a      	lsls	r2, r3, #4
 80052fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052fe:	4413      	add	r3, r2
 8005300:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d116      	bne.n	800533e <USB_EPStartXfer+0xb82>
 8005310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	b29b      	uxth	r3, r3
 8005318:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800531c:	b29a      	uxth	r2, r3
 800531e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005334:	b29a      	uxth	r2, r3
 8005336:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800533a:	801a      	strh	r2, [r3, #0]
 800533c:	e05f      	b.n	80053fe <USB_EPStartXfer+0xc42>
 800533e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005342:	2b3e      	cmp	r3, #62	; 0x3e
 8005344:	d818      	bhi.n	8005378 <USB_EPStartXfer+0xbbc>
 8005346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d004      	beq.n	8005366 <USB_EPStartXfer+0xbaa>
 800535c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005360:	3301      	adds	r3, #1
 8005362:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005366:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800536a:	b29b      	uxth	r3, r3
 800536c:	029b      	lsls	r3, r3, #10
 800536e:	b29a      	uxth	r2, r3
 8005370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005374:	801a      	strh	r2, [r3, #0]
 8005376:	e042      	b.n	80053fe <USB_EPStartXfer+0xc42>
 8005378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <USB_EPStartXfer+0xbdc>
 800538e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005392:	3b01      	subs	r3, #1
 8005394:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005398:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800539c:	b29b      	uxth	r3, r3
 800539e:	029b      	lsls	r3, r3, #10
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	e024      	b.n	80053fe <USB_EPStartXfer+0xc42>
 80053b4:	463b      	mov	r3, r7
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d11f      	bne.n	80053fe <USB_EPStartXfer+0xc42>
 80053be:	1d3b      	adds	r3, r7, #4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80053c6:	1d3b      	adds	r3, r7, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053d6:	4413      	add	r3, r2
 80053d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80053dc:	463b      	mov	r3, r7
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	011a      	lsls	r2, r3, #4
 80053e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053e8:	4413      	add	r3, r2
 80053ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053fe:	463b      	mov	r3, r7
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	891b      	ldrh	r3, [r3, #8]
 8005404:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005408:	463b      	mov	r3, r7
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6959      	ldr	r1, [r3, #20]
 800540e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005412:	b29b      	uxth	r3, r3
 8005414:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005418:	1d38      	adds	r0, r7, #4
 800541a:	6800      	ldr	r0, [r0, #0]
 800541c:	f000 fe03 	bl	8006026 <USB_WritePMA>
          ep->xfer_buff += len;
 8005420:	463b      	mov	r3, r7
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542a:	441a      	add	r2, r3
 800542c:	463b      	mov	r3, r7
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005432:	463b      	mov	r3, r7
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6a1a      	ldr	r2, [r3, #32]
 8005438:	463b      	mov	r3, r7
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	429a      	cmp	r2, r3
 8005440:	d909      	bls.n	8005456 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005442:	463b      	mov	r3, r7
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6a1a      	ldr	r2, [r3, #32]
 8005448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800544c:	1ad2      	subs	r2, r2, r3
 800544e:	463b      	mov	r3, r7
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	621a      	str	r2, [r3, #32]
 8005454:	e008      	b.n	8005468 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005456:	463b      	mov	r3, r7
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005460:	463b      	mov	r3, r7
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2200      	movs	r2, #0
 8005466:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80ab 	beq.w	80055c8 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005472:	1d3b      	adds	r3, r7, #4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800547a:	463b      	mov	r3, r7
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	785b      	ldrb	r3, [r3, #1]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d16f      	bne.n	8005564 <USB_EPStartXfer+0xda8>
 8005484:	1d3b      	adds	r3, r7, #4
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800548c:	1d3b      	adds	r3, r7, #4
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005494:	b29b      	uxth	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800549c:	4413      	add	r3, r2
 800549e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054a2:	463b      	mov	r3, r7
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	011a      	lsls	r2, r3, #4
 80054aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054ae:	4413      	add	r3, r2
 80054b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d116      	bne.n	80054ee <USB_EPStartXfer+0xd32>
 80054c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054d2:	801a      	strh	r2, [r3, #0]
 80054d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054ea:	801a      	strh	r2, [r3, #0]
 80054ec:	e05b      	b.n	80055a6 <USB_EPStartXfer+0xdea>
 80054ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f2:	2b3e      	cmp	r3, #62	; 0x3e
 80054f4:	d818      	bhi.n	8005528 <USB_EPStartXfer+0xd6c>
 80054f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fa:	085b      	lsrs	r3, r3, #1
 80054fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d004      	beq.n	8005516 <USB_EPStartXfer+0xd5a>
 800550c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005510:	3301      	adds	r3, #1
 8005512:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800551a:	b29b      	uxth	r3, r3
 800551c:	029b      	lsls	r3, r3, #10
 800551e:	b29a      	uxth	r2, r3
 8005520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005524:	801a      	strh	r2, [r3, #0]
 8005526:	e03e      	b.n	80055a6 <USB_EPStartXfer+0xdea>
 8005528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	2b00      	cmp	r3, #0
 800553c:	d104      	bne.n	8005548 <USB_EPStartXfer+0xd8c>
 800553e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005542:	3b01      	subs	r3, #1
 8005544:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800554c:	b29b      	uxth	r3, r3
 800554e:	029b      	lsls	r3, r3, #10
 8005550:	b29b      	uxth	r3, r3
 8005552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800555a:	b29a      	uxth	r2, r3
 800555c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005560:	801a      	strh	r2, [r3, #0]
 8005562:	e020      	b.n	80055a6 <USB_EPStartXfer+0xdea>
 8005564:	463b      	mov	r3, r7
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	785b      	ldrb	r3, [r3, #1]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d11b      	bne.n	80055a6 <USB_EPStartXfer+0xdea>
 800556e:	1d3b      	adds	r3, r7, #4
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005576:	b29b      	uxth	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800557e:	4413      	add	r3, r2
 8005580:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005584:	463b      	mov	r3, r7
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	011a      	lsls	r2, r3, #4
 800558c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005590:	4413      	add	r3, r2
 8005592:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800559a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800559e:	b29a      	uxth	r2, r3
 80055a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055a6:	463b      	mov	r3, r7
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	895b      	ldrh	r3, [r3, #10]
 80055ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055b0:	463b      	mov	r3, r7
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6959      	ldr	r1, [r3, #20]
 80055b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055c0:	1d38      	adds	r0, r7, #4
 80055c2:	6800      	ldr	r0, [r0, #0]
 80055c4:	f000 fd2f 	bl	8006026 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80055c8:	1d3b      	adds	r3, r7, #4
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	463b      	mov	r3, r7
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f107 020a 	add.w	r2, r7, #10
 80055de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e6:	8013      	strh	r3, [r2, #0]
 80055e8:	f107 030a 	add.w	r3, r7, #10
 80055ec:	f107 020a 	add.w	r2, r7, #10
 80055f0:	8812      	ldrh	r2, [r2, #0]
 80055f2:	f082 0210 	eor.w	r2, r2, #16
 80055f6:	801a      	strh	r2, [r3, #0]
 80055f8:	f107 030a 	add.w	r3, r7, #10
 80055fc:	f107 020a 	add.w	r2, r7, #10
 8005600:	8812      	ldrh	r2, [r2, #0]
 8005602:	f082 0220 	eor.w	r2, r2, #32
 8005606:	801a      	strh	r2, [r3, #0]
 8005608:	1d3b      	adds	r3, r7, #4
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	463b      	mov	r3, r7
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	f107 030a 	add.w	r3, r7, #10
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562c:	b29b      	uxth	r3, r3
 800562e:	8013      	strh	r3, [r2, #0]
 8005630:	e3b5      	b.n	8005d9e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005632:	463b      	mov	r3, r7
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	7b1b      	ldrb	r3, [r3, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	f040 8090 	bne.w	800575e <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800563e:	463b      	mov	r3, r7
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	463b      	mov	r3, r7
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	429a      	cmp	r2, r3
 800564c:	d90e      	bls.n	800566c <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800564e:	463b      	mov	r3, r7
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005658:	463b      	mov	r3, r7
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699a      	ldr	r2, [r3, #24]
 800565e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005662:	1ad2      	subs	r2, r2, r3
 8005664:	463b      	mov	r3, r7
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	619a      	str	r2, [r3, #24]
 800566a:	e008      	b.n	800567e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800566c:	463b      	mov	r3, r7
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005676:	463b      	mov	r3, r7
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2200      	movs	r2, #0
 800567c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005686:	1d3b      	adds	r3, r7, #4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568e:	b29b      	uxth	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005696:	4413      	add	r3, r2
 8005698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800569c:	463b      	mov	r3, r7
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	011a      	lsls	r2, r3, #4
 80056a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056a8:	4413      	add	r3, r2
 80056aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d116      	bne.n	80056e8 <USB_EPStartXfer+0xf2c>
 80056ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056de:	b29a      	uxth	r2, r3
 80056e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	e32c      	b.n	8005d42 <USB_EPStartXfer+0x1586>
 80056e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ec:	2b3e      	cmp	r3, #62	; 0x3e
 80056ee:	d818      	bhi.n	8005722 <USB_EPStartXfer+0xf66>
 80056f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f4:	085b      	lsrs	r3, r3, #1
 80056f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80056fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d004      	beq.n	8005710 <USB_EPStartXfer+0xf54>
 8005706:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800570a:	3301      	adds	r3, #1
 800570c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005710:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005714:	b29b      	uxth	r3, r3
 8005716:	029b      	lsls	r3, r3, #10
 8005718:	b29a      	uxth	r2, r3
 800571a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	e30f      	b.n	8005d42 <USB_EPStartXfer+0x1586>
 8005722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800572c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005730:	f003 031f 	and.w	r3, r3, #31
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <USB_EPStartXfer+0xf86>
 8005738:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800573c:	3b01      	subs	r3, #1
 800573e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005742:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005746:	b29b      	uxth	r3, r3
 8005748:	029b      	lsls	r3, r3, #10
 800574a:	b29b      	uxth	r3, r3
 800574c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005754:	b29a      	uxth	r2, r3
 8005756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	e2f1      	b.n	8005d42 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800575e:	463b      	mov	r3, r7
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	78db      	ldrb	r3, [r3, #3]
 8005764:	2b02      	cmp	r3, #2
 8005766:	f040 818f 	bne.w	8005a88 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800576a:	463b      	mov	r3, r7
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d175      	bne.n	8005860 <USB_EPStartXfer+0x10a4>
 8005774:	1d3b      	adds	r3, r7, #4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800577c:	1d3b      	adds	r3, r7, #4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005784:	b29b      	uxth	r3, r3
 8005786:	461a      	mov	r2, r3
 8005788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800578c:	4413      	add	r3, r2
 800578e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005792:	463b      	mov	r3, r7
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	011a      	lsls	r2, r3, #4
 800579a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800579e:	4413      	add	r3, r2
 80057a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057a8:	463b      	mov	r3, r7
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d116      	bne.n	80057e0 <USB_EPStartXfer+0x1024>
 80057b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057be:	b29a      	uxth	r2, r3
 80057c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057dc:	801a      	strh	r2, [r3, #0]
 80057de:	e065      	b.n	80058ac <USB_EPStartXfer+0x10f0>
 80057e0:	463b      	mov	r3, r7
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b3e      	cmp	r3, #62	; 0x3e
 80057e8:	d81a      	bhi.n	8005820 <USB_EPStartXfer+0x1064>
 80057ea:	463b      	mov	r3, r7
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	085b      	lsrs	r3, r3, #1
 80057f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057f6:	463b      	mov	r3, r7
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d004      	beq.n	800580e <USB_EPStartXfer+0x1052>
 8005804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005808:	3301      	adds	r3, #1
 800580a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800580e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005812:	b29b      	uxth	r3, r3
 8005814:	029b      	lsls	r3, r3, #10
 8005816:	b29a      	uxth	r2, r3
 8005818:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800581c:	801a      	strh	r2, [r3, #0]
 800581e:	e045      	b.n	80058ac <USB_EPStartXfer+0x10f0>
 8005820:	463b      	mov	r3, r7
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	2b00      	cmp	r3, #0
 8005838:	d104      	bne.n	8005844 <USB_EPStartXfer+0x1088>
 800583a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800583e:	3b01      	subs	r3, #1
 8005840:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005848:	b29b      	uxth	r3, r3
 800584a:	029b      	lsls	r3, r3, #10
 800584c:	b29b      	uxth	r3, r3
 800584e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005856:	b29a      	uxth	r2, r3
 8005858:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800585c:	801a      	strh	r2, [r3, #0]
 800585e:	e025      	b.n	80058ac <USB_EPStartXfer+0x10f0>
 8005860:	463b      	mov	r3, r7
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	785b      	ldrb	r3, [r3, #1]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d120      	bne.n	80058ac <USB_EPStartXfer+0x10f0>
 800586a:	1d3b      	adds	r3, r7, #4
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005872:	1d3b      	adds	r3, r7, #4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587a:	b29b      	uxth	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005882:	4413      	add	r3, r2
 8005884:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005888:	463b      	mov	r3, r7
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	011a      	lsls	r2, r3, #4
 8005890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005894:	4413      	add	r3, r2
 8005896:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800589a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800589e:	463b      	mov	r3, r7
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80058aa:	801a      	strh	r2, [r3, #0]
 80058ac:	1d3b      	adds	r3, r7, #4
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058b4:	463b      	mov	r3, r7
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d175      	bne.n	80059aa <USB_EPStartXfer+0x11ee>
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80058c6:	1d3b      	adds	r3, r7, #4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058d6:	4413      	add	r3, r2
 80058d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	011a      	lsls	r2, r3, #4
 80058e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058e8:	4413      	add	r3, r2
 80058ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058f2:	463b      	mov	r3, r7
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d116      	bne.n	800592a <USB_EPStartXfer+0x116e>
 80058fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005908:	b29a      	uxth	r2, r3
 800590a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005920:	b29a      	uxth	r2, r3
 8005922:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	e061      	b.n	80059ee <USB_EPStartXfer+0x1232>
 800592a:	463b      	mov	r3, r7
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	2b3e      	cmp	r3, #62	; 0x3e
 8005932:	d81a      	bhi.n	800596a <USB_EPStartXfer+0x11ae>
 8005934:	463b      	mov	r3, r7
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005940:	463b      	mov	r3, r7
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <USB_EPStartXfer+0x119c>
 800594e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005952:	3301      	adds	r3, #1
 8005954:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005958:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800595c:	b29b      	uxth	r3, r3
 800595e:	029b      	lsls	r3, r3, #10
 8005960:	b29a      	uxth	r2, r3
 8005962:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005966:	801a      	strh	r2, [r3, #0]
 8005968:	e041      	b.n	80059ee <USB_EPStartXfer+0x1232>
 800596a:	463b      	mov	r3, r7
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	095b      	lsrs	r3, r3, #5
 8005972:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005976:	463b      	mov	r3, r7
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <USB_EPStartXfer+0x11d2>
 8005984:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005988:	3b01      	subs	r3, #1
 800598a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800598e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005992:	b29b      	uxth	r3, r3
 8005994:	029b      	lsls	r3, r3, #10
 8005996:	b29b      	uxth	r3, r3
 8005998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800599c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059a6:	801a      	strh	r2, [r3, #0]
 80059a8:	e021      	b.n	80059ee <USB_EPStartXfer+0x1232>
 80059aa:	463b      	mov	r3, r7
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d11c      	bne.n	80059ee <USB_EPStartXfer+0x1232>
 80059b4:	1d3b      	adds	r3, r7, #4
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059bc:	b29b      	uxth	r3, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059c4:	4413      	add	r3, r2
 80059c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059ca:	463b      	mov	r3, r7
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	011a      	lsls	r2, r3, #4
 80059d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059d6:	4413      	add	r3, r2
 80059d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059e0:	463b      	mov	r3, r7
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059ec:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80059ee:	463b      	mov	r3, r7
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 81a4 	beq.w	8005d42 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	463b      	mov	r3, r7
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a0e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <USB_EPStartXfer+0x126a>
 8005a1a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10d      	bne.n	8005a42 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a26:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f040 8187 	bne.w	8005d42 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a34:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f040 8180 	bne.w	8005d42 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005a42:	1d3b      	adds	r3, r7, #4
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	463b      	mov	r3, r7
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005a60:	1d3b      	adds	r3, r7, #4
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	463b      	mov	r3, r7
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	441a      	add	r2, r3
 8005a6e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8013      	strh	r3, [r2, #0]
 8005a86:	e15c      	b.n	8005d42 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005a88:	463b      	mov	r3, r7
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	78db      	ldrb	r3, [r3, #3]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	f040 8155 	bne.w	8005d3e <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005a94:	463b      	mov	r3, r7
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	463b      	mov	r3, r7
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d90e      	bls.n	8005ac2 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005aa4:	463b      	mov	r3, r7
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005aae:	463b      	mov	r3, r7
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699a      	ldr	r2, [r3, #24]
 8005ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab8:	1ad2      	subs	r2, r2, r3
 8005aba:	463b      	mov	r3, r7
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	619a      	str	r2, [r3, #24]
 8005ac0:	e008      	b.n	8005ad4 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005acc:	463b      	mov	r3, r7
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d16f      	bne.n	8005bbe <USB_EPStartXfer+0x1402>
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ae6:	1d3b      	adds	r3, r7, #4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005af6:	4413      	add	r3, r2
 8005af8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005afc:	463b      	mov	r3, r7
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	011a      	lsls	r2, r3, #4
 8005b04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b08:	4413      	add	r3, r2
 8005b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d116      	bne.n	8005b48 <USB_EPStartXfer+0x138c>
 8005b1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b2c:	801a      	strh	r2, [r3, #0]
 8005b2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b44:	801a      	strh	r2, [r3, #0]
 8005b46:	e05f      	b.n	8005c08 <USB_EPStartXfer+0x144c>
 8005b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b4c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b4e:	d818      	bhi.n	8005b82 <USB_EPStartXfer+0x13c6>
 8005b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <USB_EPStartXfer+0x13b4>
 8005b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	029b      	lsls	r3, r3, #10
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	e042      	b.n	8005c08 <USB_EPStartXfer+0x144c>
 8005b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b90:	f003 031f 	and.w	r3, r3, #31
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d104      	bne.n	8005ba2 <USB_EPStartXfer+0x13e6>
 8005b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	029b      	lsls	r3, r3, #10
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bba:	801a      	strh	r2, [r3, #0]
 8005bbc:	e024      	b.n	8005c08 <USB_EPStartXfer+0x144c>
 8005bbe:	463b      	mov	r3, r7
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d11f      	bne.n	8005c08 <USB_EPStartXfer+0x144c>
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bd0:	1d3b      	adds	r3, r7, #4
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be0:	4413      	add	r3, r2
 8005be2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005be6:	463b      	mov	r3, r7
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	011a      	lsls	r2, r3, #4
 8005bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bf8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	1d3b      	adds	r3, r7, #4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c10:	463b      	mov	r3, r7
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d16f      	bne.n	8005cfa <USB_EPStartXfer+0x153e>
 8005c1a:	1d3b      	adds	r3, r7, #4
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c22:	1d3b      	adds	r3, r7, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c32:	4413      	add	r3, r2
 8005c34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c38:	463b      	mov	r3, r7
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	011a      	lsls	r2, r3, #4
 8005c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c44:	4413      	add	r3, r2
 8005c46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d116      	bne.n	8005c84 <USB_EPStartXfer+0x14c8>
 8005c56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c68:	801a      	strh	r2, [r3, #0]
 8005c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c80:	801a      	strh	r2, [r3, #0]
 8005c82:	e05e      	b.n	8005d42 <USB_EPStartXfer+0x1586>
 8005c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c88:	2b3e      	cmp	r3, #62	; 0x3e
 8005c8a:	d818      	bhi.n	8005cbe <USB_EPStartXfer+0x1502>
 8005c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d004      	beq.n	8005cac <USB_EPStartXfer+0x14f0>
 8005ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	029b      	lsls	r3, r3, #10
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cba:	801a      	strh	r2, [r3, #0]
 8005cbc:	e041      	b.n	8005d42 <USB_EPStartXfer+0x1586>
 8005cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ccc:	f003 031f 	and.w	r3, r3, #31
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d104      	bne.n	8005cde <USB_EPStartXfer+0x1522>
 8005cd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	029b      	lsls	r3, r3, #10
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	e023      	b.n	8005d42 <USB_EPStartXfer+0x1586>
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d11e      	bne.n	8005d42 <USB_EPStartXfer+0x1586>
 8005d04:	1d3b      	adds	r3, r7, #4
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d14:	4413      	add	r3, r2
 8005d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	011a      	lsls	r2, r3, #4
 8005d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d26:	4413      	add	r3, r2
 8005d28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	e001      	b.n	8005d42 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e02e      	b.n	8005da0 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d42:	1d3b      	adds	r3, r7, #4
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	463b      	mov	r3, r7
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005d60:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d68:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005d6c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d74:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005d78:	1d3b      	adds	r3, r7, #4
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	441a      	add	r2, r3
 8005d86:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d020      	beq.n	8005dfe <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd2:	81bb      	strh	r3, [r7, #12]
 8005dd4:	89bb      	ldrh	r3, [r7, #12]
 8005dd6:	f083 0310 	eor.w	r3, r3, #16
 8005dda:	81bb      	strh	r3, [r7, #12]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	441a      	add	r2, r3
 8005de6:	89bb      	ldrh	r3, [r7, #12]
 8005de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	8013      	strh	r3, [r2, #0]
 8005dfc:	e01f      	b.n	8005e3e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e14:	81fb      	strh	r3, [r7, #14]
 8005e16:	89fb      	ldrh	r3, [r7, #14]
 8005e18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e1c:	81fb      	strh	r3, [r7, #14]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	441a      	add	r2, r3
 8005e28:	89fb      	ldrh	r3, [r7, #14]
 8005e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr

08005e4a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b087      	sub	sp, #28
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	7b1b      	ldrb	r3, [r3, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f040 809d 	bne.w	8005f98 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d04c      	beq.n	8005f00 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	823b      	strh	r3, [r7, #16]
 8005e74:	8a3b      	ldrh	r3, [r7, #16]
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d01b      	beq.n	8005eb6 <USB_EPClearStall+0x6c>
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e94:	81fb      	strh	r3, [r7, #14]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	441a      	add	r2, r3
 8005ea0:	89fb      	ldrh	r3, [r7, #14]
 8005ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	78db      	ldrb	r3, [r3, #3]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d06c      	beq.n	8005f98 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed4:	81bb      	strh	r3, [r7, #12]
 8005ed6:	89bb      	ldrh	r3, [r7, #12]
 8005ed8:	f083 0320 	eor.w	r3, r3, #32
 8005edc:	81bb      	strh	r3, [r7, #12]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	441a      	add	r2, r3
 8005ee8:	89bb      	ldrh	r3, [r7, #12]
 8005eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	8013      	strh	r3, [r2, #0]
 8005efe:	e04b      	b.n	8005f98 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	82fb      	strh	r3, [r7, #22]
 8005f0e:	8afb      	ldrh	r3, [r7, #22]
 8005f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01b      	beq.n	8005f50 <USB_EPClearStall+0x106>
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2e:	82bb      	strh	r3, [r7, #20]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	441a      	add	r2, r3
 8005f3a:	8abb      	ldrh	r3, [r7, #20]
 8005f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	827b      	strh	r3, [r7, #18]
 8005f68:	8a7b      	ldrh	r3, [r7, #18]
 8005f6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f6e:	827b      	strh	r3, [r7, #18]
 8005f70:	8a7b      	ldrh	r3, [r7, #18]
 8005f72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f76:	827b      	strh	r3, [r7, #18]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	441a      	add	r2, r3
 8005f82:	8a7b      	ldrh	r3, [r7, #18]
 8005f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d103      	bne.n	8005fbe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2280      	movs	r2, #128	; 0x80
 8005fba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bc80      	pop	{r7}
 8005fc8:	4770      	bx	lr

08005fca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr

08005fde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr

08005ff2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006000:	b29b      	uxth	r3, r3
 8006002:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006004:	68fb      	ldr	r3, [r7, #12]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	bc80      	pop	{r7}
 8006024:	4770      	bx	lr

08006026 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006026:	b480      	push	{r7}
 8006028:	b08d      	sub	sp, #52	; 0x34
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	4611      	mov	r1, r2
 8006032:	461a      	mov	r2, r3
 8006034:	460b      	mov	r3, r1
 8006036:	80fb      	strh	r3, [r7, #6]
 8006038:	4613      	mov	r3, r2
 800603a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800603c:	88bb      	ldrh	r3, [r7, #4]
 800603e:	3301      	adds	r3, #1
 8006040:	085b      	lsrs	r3, r3, #1
 8006042:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	005a      	lsls	r2, r3, #1
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006058:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605e:	e01e      	b.n	800609e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	3301      	adds	r3, #1
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	021b      	lsls	r3, r3, #8
 8006074:	b29b      	uxth	r3, r3
 8006076:	461a      	mov	r2, r3
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	b29a      	uxth	r2, r3
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	3302      	adds	r3, #2
 800608a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608e:	3302      	adds	r3, #2
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	3301      	adds	r3, #1
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	3b01      	subs	r3, #1
 800609c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1dd      	bne.n	8006060 <USB_WritePMA+0x3a>
  }
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	3734      	adds	r7, #52	; 0x34
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr

080060b0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b08b      	sub	sp, #44	; 0x2c
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	4611      	mov	r1, r2
 80060bc:	461a      	mov	r2, r3
 80060be:	460b      	mov	r3, r1
 80060c0:	80fb      	strh	r3, [r7, #6]
 80060c2:	4613      	mov	r3, r2
 80060c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80060c6:	88bb      	ldrh	r3, [r7, #4]
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060d6:	88fb      	ldrh	r3, [r7, #6]
 80060d8:	005a      	lsls	r2, r3, #1
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060e2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
 80060e8:	e01b      	b.n	8006122 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	3302      	adds	r3, #2
 80060f6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	3301      	adds	r3, #1
 8006104:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	0a1b      	lsrs	r3, r3, #8
 800610a:	b2da      	uxtb	r2, r3
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	3301      	adds	r3, #1
 8006114:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	3302      	adds	r3, #2
 800611a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	3b01      	subs	r3, #1
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e0      	bne.n	80060ea <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006128:	88bb      	ldrh	r3, [r7, #4]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	b29b      	uxth	r3, r3
 800613a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	b2da      	uxtb	r2, r3
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	701a      	strb	r2, [r3, #0]
  }
}
 8006144:	bf00      	nop
 8006146:	372c      	adds	r7, #44	; 0x2c
 8006148:	46bd      	mov	sp, r7
 800614a:	bc80      	pop	{r7}
 800614c:	4770      	bx	lr

0800614e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	460b      	mov	r3, r1
 8006158:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	7c1b      	ldrb	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d115      	bne.n	8006192 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800616a:	2202      	movs	r2, #2
 800616c:	2181      	movs	r1, #129	; 0x81
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 fea7 	bl	8007ec2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800617a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800617e:	2202      	movs	r2, #2
 8006180:	2101      	movs	r1, #1
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 fe9d 	bl	8007ec2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006190:	e012      	b.n	80061b8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006192:	2340      	movs	r3, #64	; 0x40
 8006194:	2202      	movs	r2, #2
 8006196:	2181      	movs	r1, #129	; 0x81
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 fe92 	bl	8007ec2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80061a4:	2340      	movs	r3, #64	; 0x40
 80061a6:	2202      	movs	r2, #2
 80061a8:	2101      	movs	r1, #1
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 fe89 	bl	8007ec2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061b8:	2308      	movs	r3, #8
 80061ba:	2203      	movs	r2, #3
 80061bc:	2182      	movs	r1, #130	; 0x82
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 fe7f 	bl	8007ec2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80061ca:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80061ce:	f001 ff9f 	bl	8008110 <USBD_static_malloc>
 80061d2:	4602      	mov	r2, r0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80061e4:	2301      	movs	r3, #1
 80061e6:	73fb      	strb	r3, [r7, #15]
 80061e8:	e026      	b.n	8006238 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2200      	movs	r2, #0
 8006208:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	7c1b      	ldrb	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d109      	bne.n	8006228 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800621a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800621e:	2101      	movs	r1, #1
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 ff3f 	bl	80080a4 <USBD_LL_PrepareReceive>
 8006226:	e007      	b.n	8006238 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800622e:	2340      	movs	r3, #64	; 0x40
 8006230:	2101      	movs	r1, #1
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 ff36 	bl	80080a4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006252:	2181      	movs	r1, #129	; 0x81
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 fe5a 	bl	8007f0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006260:	2101      	movs	r1, #1
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 fe53 	bl	8007f0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006270:	2182      	movs	r1, #130	; 0x82
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 fe4b 	bl	8007f0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00e      	beq.n	80062a6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006298:	4618      	mov	r0, r3
 800629a:	f001 ff45 	bl	8008128 <USBD_static_free>
    pdev->pClassData = NULL;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d039      	beq.n	800634e <USBD_CDC_Setup+0x9e>
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d17f      	bne.n	80063de <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	88db      	ldrh	r3, [r3, #6]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d029      	beq.n	800633a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	b25b      	sxtb	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	da11      	bge.n	8006314 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80062fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	88d2      	ldrh	r2, [r2, #6]
 8006302:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006304:	6939      	ldr	r1, [r7, #16]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	88db      	ldrh	r3, [r3, #6]
 800630a:	461a      	mov	r2, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 fa0a 	bl	8007726 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006312:	e06b      	b.n	80063ec <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	785a      	ldrb	r2, [r3, #1]
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	88db      	ldrh	r3, [r3, #6]
 8006322:	b2da      	uxtb	r2, r3
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800632a:	6939      	ldr	r1, [r7, #16]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	88db      	ldrh	r3, [r3, #6]
 8006330:	461a      	mov	r2, r3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 fa25 	bl	8007782 <USBD_CtlPrepareRx>
      break;
 8006338:	e058      	b.n	80063ec <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	7850      	ldrb	r0, [r2, #1]
 8006346:	2200      	movs	r2, #0
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	4798      	blx	r3
      break;
 800634c:	e04e      	b.n	80063ec <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	785b      	ldrb	r3, [r3, #1]
 8006352:	2b0b      	cmp	r3, #11
 8006354:	d02e      	beq.n	80063b4 <USBD_CDC_Setup+0x104>
 8006356:	2b0b      	cmp	r3, #11
 8006358:	dc38      	bgt.n	80063cc <USBD_CDC_Setup+0x11c>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <USBD_CDC_Setup+0xb4>
 800635e:	2b0a      	cmp	r3, #10
 8006360:	d014      	beq.n	800638c <USBD_CDC_Setup+0xdc>
 8006362:	e033      	b.n	80063cc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636a:	2b03      	cmp	r3, #3
 800636c:	d107      	bne.n	800637e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800636e:	f107 030c 	add.w	r3, r7, #12
 8006372:	2202      	movs	r2, #2
 8006374:	4619      	mov	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 f9d5 	bl	8007726 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800637c:	e02e      	b.n	80063dc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 f966 	bl	8007652 <USBD_CtlError>
            ret = USBD_FAIL;
 8006386:	2302      	movs	r3, #2
 8006388:	75fb      	strb	r3, [r7, #23]
          break;
 800638a:	e027      	b.n	80063dc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006392:	2b03      	cmp	r3, #3
 8006394:	d107      	bne.n	80063a6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006396:	f107 030f 	add.w	r3, r7, #15
 800639a:	2201      	movs	r2, #1
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f001 f9c1 	bl	8007726 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063a4:	e01a      	b.n	80063dc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 f952 	bl	8007652 <USBD_CtlError>
            ret = USBD_FAIL;
 80063ae:	2302      	movs	r3, #2
 80063b0:	75fb      	strb	r3, [r7, #23]
          break;
 80063b2:	e013      	b.n	80063dc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d00d      	beq.n	80063da <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 f946 	bl	8007652 <USBD_CtlError>
            ret = USBD_FAIL;
 80063c6:	2302      	movs	r3, #2
 80063c8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80063ca:	e006      	b.n	80063da <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f001 f93f 	bl	8007652 <USBD_CtlError>
          ret = USBD_FAIL;
 80063d4:	2302      	movs	r3, #2
 80063d6:	75fb      	strb	r3, [r7, #23]
          break;
 80063d8:	e000      	b.n	80063dc <USBD_CDC_Setup+0x12c>
          break;
 80063da:	bf00      	nop
      }
      break;
 80063dc:	e006      	b.n	80063ec <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 f936 	bl	8007652 <USBD_CtlError>
      ret = USBD_FAIL;
 80063e6:	2302      	movs	r3, #2
 80063e8:	75fb      	strb	r3, [r7, #23]
      break;
 80063ea:	bf00      	nop
  }

  return ret;
 80063ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006408:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006410:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006418:	2b00      	cmp	r3, #0
 800641a:	d03a      	beq.n	8006492 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800641c:	78fa      	ldrb	r2, [r7, #3]
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	440b      	add	r3, r1
 800642a:	331c      	adds	r3, #28
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d029      	beq.n	8006486 <USBD_CDC_DataIn+0x90>
 8006432:	78fa      	ldrb	r2, [r7, #3]
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	440b      	add	r3, r1
 8006440:	331c      	adds	r3, #28
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	78f9      	ldrb	r1, [r7, #3]
 8006446:	68b8      	ldr	r0, [r7, #8]
 8006448:	460b      	mov	r3, r1
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	440b      	add	r3, r1
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4403      	add	r3, r0
 8006452:	3338      	adds	r3, #56	; 0x38
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	fbb2 f1f3 	udiv	r1, r2, r3
 800645a:	fb03 f301 	mul.w	r3, r3, r1
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d110      	bne.n	8006486 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006464:	78fa      	ldrb	r2, [r7, #3]
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	440b      	add	r3, r1
 8006472:	331c      	adds	r3, #28
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006478:	78f9      	ldrb	r1, [r7, #3]
 800647a:	2300      	movs	r3, #0
 800647c:	2200      	movs	r2, #0
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f001 fded 	bl	800805e <USBD_LL_Transmit>
 8006484:	e003      	b.n	800648e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	e000      	b.n	8006494 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006492:	2302      	movs	r3, #2
  }
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 fe18 	bl	80080ea <USBD_LL_GetRxDataSize>
 80064ba:	4602      	mov	r2, r0
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00d      	beq.n	80064e8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064e0:	4611      	mov	r1, r2
 80064e2:	4798      	blx	r3

    return USBD_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	e000      	b.n	80064ea <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80064e8:	2302      	movs	r3, #2
  }
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006500:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006508:	2b00      	cmp	r3, #0
 800650a:	d015      	beq.n	8006538 <USBD_CDC_EP0_RxReady+0x46>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006512:	2bff      	cmp	r3, #255	; 0xff
 8006514:	d010      	beq.n	8006538 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006524:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800652c:	b292      	uxth	r2, r2
 800652e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	22ff      	movs	r2, #255	; 0xff
 8006534:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2243      	movs	r2, #67	; 0x43
 8006550:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006552:	4b03      	ldr	r3, [pc, #12]	; (8006560 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	bc80      	pop	{r7}
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	20000094 	.word	0x20000094

08006564 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2243      	movs	r2, #67	; 0x43
 8006570:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006572:	4b03      	ldr	r3, [pc, #12]	; (8006580 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006574:	4618      	mov	r0, r3
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	bc80      	pop	{r7}
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	20000050 	.word	0x20000050

08006584 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2243      	movs	r2, #67	; 0x43
 8006590:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006592:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	200000d8 	.word	0x200000d8

080065a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	220a      	movs	r2, #10
 80065b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80065b2:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bc80      	pop	{r7}
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	2000000c 	.word	0x2000000c

080065c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80065ce:	2302      	movs	r3, #2
 80065d0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d005      	beq.n	80065e4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bc80      	pop	{r7}
 80065ee:	4770      	bx	lr

080065f0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	4613      	mov	r3, r2
 80065fc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006604:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800660e:	88fa      	ldrh	r2, [r7, #6]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	bc80      	pop	{r7}
 8006620:	4770      	bx	lr

08006622 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006632:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr

08006648 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006656:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665e:	2b00      	cmp	r3, #0
 8006660:	d01c      	beq.n	800669c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006668:	2b00      	cmp	r3, #0
 800666a:	d115      	bne.n	8006698 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2201      	movs	r2, #1
 8006670:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800668a:	b29b      	uxth	r3, r3
 800668c:	2181      	movs	r1, #129	; 0x81
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 fce5 	bl	800805e <USBD_LL_Transmit>

      return USBD_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	e002      	b.n	800669e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006698:	2301      	movs	r3, #1
 800669a:	e000      	b.n	800669e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800669c:	2302      	movs	r3, #2
  }
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d017      	beq.n	80066f0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	7c1b      	ldrb	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d109      	bne.n	80066dc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066d2:	2101      	movs	r1, #1
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 fce5 	bl	80080a4 <USBD_LL_PrepareReceive>
 80066da:	e007      	b.n	80066ec <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066e2:	2340      	movs	r3, #64	; 0x40
 80066e4:	2101      	movs	r1, #1
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 fcdc 	bl	80080a4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	e000      	b.n	80066f2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80066f0:	2302      	movs	r3, #2
  }
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	4613      	mov	r3, r2
 8006706:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800670e:	2302      	movs	r3, #2
 8006710:	e01a      	b.n	8006748 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	79fa      	ldrb	r2, [r7, #7]
 800673e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f001 fb49 	bl	8007dd8 <USBD_LL_Init>

  return USBD_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d006      	beq.n	8006772 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	73fb      	strb	r3, [r7, #15]
 8006770:	e001      	b.n	8006776 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006772:	2302      	movs	r3, #2
 8006774:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006776:	7bfb      	ldrb	r3, [r7, #15]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr

08006782 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f001 fb7e 	bl	8007e8c <USBD_LL_Start>

  return USBD_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bc80      	pop	{r7}
 80067ac:	4770      	bx	lr

080067ae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	460b      	mov	r3, r1
 80067b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80067ba:	2302      	movs	r3, #2
 80067bc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00c      	beq.n	80067e2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	78fa      	ldrb	r2, [r7, #3]
 80067d2:	4611      	mov	r1, r2
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4798      	blx	r3
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	4611      	mov	r1, r2
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3

  return USBD_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	4618      	mov	r0, r3
 8006826:	f000 fed8 	bl	80075da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006838:	461a      	mov	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006846:	f003 031f 	and.w	r3, r3, #31
 800684a:	2b02      	cmp	r3, #2
 800684c:	d016      	beq.n	800687c <USBD_LL_SetupStage+0x6a>
 800684e:	2b02      	cmp	r3, #2
 8006850:	d81c      	bhi.n	800688c <USBD_LL_SetupStage+0x7a>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <USBD_LL_SetupStage+0x4a>
 8006856:	2b01      	cmp	r3, #1
 8006858:	d008      	beq.n	800686c <USBD_LL_SetupStage+0x5a>
 800685a:	e017      	b.n	800688c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f9cb 	bl	8006c00 <USBD_StdDevReq>
      break;
 800686a:	e01a      	b.n	80068a2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fa2d 	bl	8006cd4 <USBD_StdItfReq>
      break;
 800687a:	e012      	b.n	80068a2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fa6d 	bl	8006d64 <USBD_StdEPReq>
      break;
 800688a:	e00a      	b.n	80068a2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006892:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006896:	b2db      	uxtb	r3, r3
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 fb56 	bl	8007f4c <USBD_LL_StallEP>
      break;
 80068a0:	bf00      	nop
  }

  return USBD_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	460b      	mov	r3, r1
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80068ba:	7afb      	ldrb	r3, [r7, #11]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d14b      	bne.n	8006958 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068c6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d134      	bne.n	800693c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d919      	bls.n	8006912 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	1ad2      	subs	r2, r2, r3
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d203      	bcs.n	8006900 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	e002      	b.n	8006906 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006904:	b29b      	uxth	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 ff57 	bl	80077be <USBD_CtlContinueRx>
 8006910:	e038      	b.n	8006984 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006924:	2b03      	cmp	r3, #3
 8006926:	d105      	bne.n	8006934 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 ff54 	bl	80077e2 <USBD_CtlSendStatus>
 800693a:	e023      	b.n	8006984 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006942:	2b05      	cmp	r3, #5
 8006944:	d11e      	bne.n	8006984 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800694e:	2100      	movs	r1, #0
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f001 fafb 	bl	8007f4c <USBD_LL_StallEP>
 8006956:	e015      	b.n	8006984 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00d      	beq.n	8006980 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800696a:	2b03      	cmp	r3, #3
 800696c:	d108      	bne.n	8006980 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	7afa      	ldrb	r2, [r7, #11]
 8006978:	4611      	mov	r1, r2
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	4798      	blx	r3
 800697e:	e001      	b.n	8006984 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006980:	2302      	movs	r3, #2
 8006982:	e000      	b.n	8006986 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b086      	sub	sp, #24
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	460b      	mov	r3, r1
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800699c:	7afb      	ldrb	r3, [r7, #11]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d17f      	bne.n	8006aa2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3314      	adds	r3, #20
 80069a6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d15c      	bne.n	8006a6c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d915      	bls.n	80069ea <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	1ad2      	subs	r2, r2, r3
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	461a      	mov	r2, r3
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fec1 	bl	800775e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069dc:	2300      	movs	r3, #0
 80069de:	2200      	movs	r2, #0
 80069e0:	2100      	movs	r1, #0
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f001 fb5e 	bl	80080a4 <USBD_LL_PrepareReceive>
 80069e8:	e04e      	b.n	8006a88 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	6912      	ldr	r2, [r2, #16]
 80069f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80069f6:	fb02 f201 	mul.w	r2, r2, r1
 80069fa:	1a9b      	subs	r3, r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d11c      	bne.n	8006a3a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d316      	bcc.n	8006a3a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d20f      	bcs.n	8006a3a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 fe9d 	bl	800775e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2100      	movs	r1, #0
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f001 fb36 	bl	80080a4 <USBD_LL_PrepareReceive>
 8006a38:	e026      	b.n	8006a88 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d105      	bne.n	8006a5c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006a5c:	2180      	movs	r1, #128	; 0x80
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f001 fa74 	bl	8007f4c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fecf 	bl	8007808 <USBD_CtlReceiveStatus>
 8006a6a:	e00d      	b.n	8006a88 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d004      	beq.n	8006a80 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d103      	bne.n	8006a88 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006a80:	2180      	movs	r1, #128	; 0x80
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f001 fa62 	bl	8007f4c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d11d      	bne.n	8006ace <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f7ff fe81 	bl	800679a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006aa0:	e015      	b.n	8006ace <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00d      	beq.n	8006aca <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d108      	bne.n	8006aca <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	7afa      	ldrb	r2, [r7, #11]
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	4798      	blx	r3
 8006ac8:	e001      	b.n	8006ace <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006aca:	2302      	movs	r3, #2
 8006acc:	e000      	b.n	8006ad0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ae0:	2340      	movs	r3, #64	; 0x40
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 f9eb 	bl	8007ec2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2240      	movs	r2, #64	; 0x40
 8006af8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006afc:	2340      	movs	r3, #64	; 0x40
 8006afe:	2200      	movs	r2, #0
 8006b00:	2180      	movs	r1, #128	; 0x80
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 f9dd 	bl	8007ec2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2240      	movs	r2, #64	; 0x40
 8006b12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d009      	beq.n	8006b50 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6852      	ldr	r2, [r2, #4]
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	4798      	blx	r3
  }

  return USBD_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	460b      	mov	r3, r1
 8006b64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	78fa      	ldrb	r2, [r7, #3]
 8006b6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bc80      	pop	{r7}
 8006b76:	4770      	bx	lr

08006b78 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr

08006ba0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d105      	bne.n	8006bbe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr

08006bca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b082      	sub	sp, #8
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d10b      	bne.n	8006bf4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d005      	beq.n	8006bf4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c16:	2b40      	cmp	r3, #64	; 0x40
 8006c18:	d005      	beq.n	8006c26 <USBD_StdDevReq+0x26>
 8006c1a:	2b40      	cmp	r3, #64	; 0x40
 8006c1c:	d84f      	bhi.n	8006cbe <USBD_StdDevReq+0xbe>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d009      	beq.n	8006c36 <USBD_StdDevReq+0x36>
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d14b      	bne.n	8006cbe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	4798      	blx	r3
      break;
 8006c34:	e048      	b.n	8006cc8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	785b      	ldrb	r3, [r3, #1]
 8006c3a:	2b09      	cmp	r3, #9
 8006c3c:	d839      	bhi.n	8006cb2 <USBD_StdDevReq+0xb2>
 8006c3e:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <USBD_StdDevReq+0x44>)
 8006c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c44:	08006c95 	.word	0x08006c95
 8006c48:	08006ca9 	.word	0x08006ca9
 8006c4c:	08006cb3 	.word	0x08006cb3
 8006c50:	08006c9f 	.word	0x08006c9f
 8006c54:	08006cb3 	.word	0x08006cb3
 8006c58:	08006c77 	.word	0x08006c77
 8006c5c:	08006c6d 	.word	0x08006c6d
 8006c60:	08006cb3 	.word	0x08006cb3
 8006c64:	08006c8b 	.word	0x08006c8b
 8006c68:	08006c81 	.word	0x08006c81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f9dc 	bl	800702c <USBD_GetDescriptor>
          break;
 8006c74:	e022      	b.n	8006cbc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fb3f 	bl	80072fc <USBD_SetAddress>
          break;
 8006c7e:	e01d      	b.n	8006cbc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fb7e 	bl	8007384 <USBD_SetConfig>
          break;
 8006c88:	e018      	b.n	8006cbc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fc07 	bl	80074a0 <USBD_GetConfig>
          break;
 8006c92:	e013      	b.n	8006cbc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fc37 	bl	800750a <USBD_GetStatus>
          break;
 8006c9c:	e00e      	b.n	8006cbc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fc65 	bl	8007570 <USBD_SetFeature>
          break;
 8006ca6:	e009      	b.n	8006cbc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fc74 	bl	8007598 <USBD_ClrFeature>
          break;
 8006cb0:	e004      	b.n	8006cbc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fccc 	bl	8007652 <USBD_CtlError>
          break;
 8006cba:	bf00      	nop
      }
      break;
 8006cbc:	e004      	b.n	8006cc8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fcc6 	bl	8007652 <USBD_CtlError>
      break;
 8006cc6:	bf00      	nop
  }

  return ret;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop

08006cd4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d005      	beq.n	8006cfa <USBD_StdItfReq+0x26>
 8006cee:	2b40      	cmp	r3, #64	; 0x40
 8006cf0:	d82e      	bhi.n	8006d50 <USBD_StdItfReq+0x7c>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <USBD_StdItfReq+0x26>
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	d12a      	bne.n	8006d50 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d00:	3b01      	subs	r3, #1
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d81d      	bhi.n	8006d42 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	889b      	ldrh	r3, [r3, #4]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d813      	bhi.n	8006d38 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	4798      	blx	r3
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	88db      	ldrh	r3, [r3, #6]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d110      	bne.n	8006d4c <USBD_StdItfReq+0x78>
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10d      	bne.n	8006d4c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fd56 	bl	80077e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d36:	e009      	b.n	8006d4c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fc89 	bl	8007652 <USBD_CtlError>
          break;
 8006d40:	e004      	b.n	8006d4c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fc84 	bl	8007652 <USBD_CtlError>
          break;
 8006d4a:	e000      	b.n	8006d4e <USBD_StdItfReq+0x7a>
          break;
 8006d4c:	bf00      	nop
      }
      break;
 8006d4e:	e004      	b.n	8006d5a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fc7d 	bl	8007652 <USBD_CtlError>
      break;
 8006d58:	bf00      	nop
  }

  return USBD_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	889b      	ldrh	r3, [r3, #4]
 8006d76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d80:	2b40      	cmp	r3, #64	; 0x40
 8006d82:	d007      	beq.n	8006d94 <USBD_StdEPReq+0x30>
 8006d84:	2b40      	cmp	r3, #64	; 0x40
 8006d86:	f200 8146 	bhi.w	8007016 <USBD_StdEPReq+0x2b2>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <USBD_StdEPReq+0x40>
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	f040 8141 	bne.w	8007016 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3
      break;
 8006da2:	e13d      	b.n	8007020 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dac:	2b20      	cmp	r3, #32
 8006dae:	d10a      	bne.n	8006dc6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	4798      	blx	r3
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	e12d      	b.n	8007022 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d007      	beq.n	8006dde <USBD_StdEPReq+0x7a>
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	f300 811b 	bgt.w	800700a <USBD_StdEPReq+0x2a6>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d072      	beq.n	8006ebe <USBD_StdEPReq+0x15a>
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d03a      	beq.n	8006e52 <USBD_StdEPReq+0xee>
 8006ddc:	e115      	b.n	800700a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d002      	beq.n	8006dee <USBD_StdEPReq+0x8a>
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d015      	beq.n	8006e18 <USBD_StdEPReq+0xb4>
 8006dec:	e02b      	b.n	8006e46 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00c      	beq.n	8006e0e <USBD_StdEPReq+0xaa>
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
 8006df6:	2b80      	cmp	r3, #128	; 0x80
 8006df8:	d009      	beq.n	8006e0e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 f8a4 	bl	8007f4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e04:	2180      	movs	r1, #128	; 0x80
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 f8a0 	bl	8007f4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e0c:	e020      	b.n	8006e50 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fc1e 	bl	8007652 <USBD_CtlError>
              break;
 8006e16:	e01b      	b.n	8006e50 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	885b      	ldrh	r3, [r3, #2]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10e      	bne.n	8006e3e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00b      	beq.n	8006e3e <USBD_StdEPReq+0xda>
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	2b80      	cmp	r3, #128	; 0x80
 8006e2a:	d008      	beq.n	8006e3e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	88db      	ldrh	r3, [r3, #6]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 f887 	bl	8007f4c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fccf 	bl	80077e2 <USBD_CtlSendStatus>

              break;
 8006e44:	e004      	b.n	8006e50 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fc02 	bl	8007652 <USBD_CtlError>
              break;
 8006e4e:	bf00      	nop
          }
          break;
 8006e50:	e0e0      	b.n	8007014 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d002      	beq.n	8006e62 <USBD_StdEPReq+0xfe>
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d015      	beq.n	8006e8c <USBD_StdEPReq+0x128>
 8006e60:	e026      	b.n	8006eb0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00c      	beq.n	8006e82 <USBD_StdEPReq+0x11e>
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	2b80      	cmp	r3, #128	; 0x80
 8006e6c:	d009      	beq.n	8006e82 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 f86a 	bl	8007f4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e78:	2180      	movs	r1, #128	; 0x80
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 f866 	bl	8007f4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e80:	e01c      	b.n	8006ebc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fbe4 	bl	8007652 <USBD_CtlError>
              break;
 8006e8a:	e017      	b.n	8006ebc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	885b      	ldrh	r3, [r3, #2]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d112      	bne.n	8006eba <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e94:	7bbb      	ldrb	r3, [r7, #14]
 8006e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d004      	beq.n	8006ea8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 f871 	bl	8007f8a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fc9a 	bl	80077e2 <USBD_CtlSendStatus>
              }
              break;
 8006eae:	e004      	b.n	8006eba <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fbcd 	bl	8007652 <USBD_CtlError>
              break;
 8006eb8:	e000      	b.n	8006ebc <USBD_StdEPReq+0x158>
              break;
 8006eba:	bf00      	nop
          }
          break;
 8006ebc:	e0aa      	b.n	8007014 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d002      	beq.n	8006ece <USBD_StdEPReq+0x16a>
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d032      	beq.n	8006f32 <USBD_StdEPReq+0x1ce>
 8006ecc:	e097      	b.n	8006ffe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ece:	7bbb      	ldrb	r3, [r7, #14]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d007      	beq.n	8006ee4 <USBD_StdEPReq+0x180>
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	2b80      	cmp	r3, #128	; 0x80
 8006ed8:	d004      	beq.n	8006ee4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fbb8 	bl	8007652 <USBD_CtlError>
                break;
 8006ee2:	e091      	b.n	8007008 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	da0b      	bge.n	8006f04 <USBD_StdEPReq+0x1a0>
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	3310      	adds	r3, #16
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	4413      	add	r3, r2
 8006f00:	3304      	adds	r3, #4
 8006f02:	e00b      	b.n	8006f1c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	4413      	add	r3, r2
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2202      	movs	r2, #2
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fbfb 	bl	8007726 <USBD_CtlSendData>
              break;
 8006f30:	e06a      	b.n	8007008 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	da11      	bge.n	8006f5e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	f003 020f 	and.w	r2, r3, #15
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	3318      	adds	r3, #24
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d117      	bne.n	8006f84 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fb7b 	bl	8007652 <USBD_CtlError>
                  break;
 8006f5c:	e054      	b.n	8007008 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	f003 020f 	and.w	r2, r3, #15
 8006f64:	6879      	ldr	r1, [r7, #4]
 8006f66:	4613      	mov	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	440b      	add	r3, r1
 8006f70:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d104      	bne.n	8006f84 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fb68 	bl	8007652 <USBD_CtlError>
                  break;
 8006f82:	e041      	b.n	8007008 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	da0b      	bge.n	8006fa4 <USBD_StdEPReq+0x240>
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	3310      	adds	r3, #16
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	e00b      	b.n	8006fbc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	4413      	add	r3, r2
 8006fba:	3304      	adds	r3, #4
 8006fbc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <USBD_StdEPReq+0x266>
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	2b80      	cmp	r3, #128	; 0x80
 8006fc8:	d103      	bne.n	8006fd2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	e00e      	b.n	8006ff0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fff6 	bl	8007fc8 <USBD_LL_IsStallEP>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	e002      	b.n	8006ff0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fb95 	bl	8007726 <USBD_CtlSendData>
              break;
 8006ffc:	e004      	b.n	8007008 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fb26 	bl	8007652 <USBD_CtlError>
              break;
 8007006:	bf00      	nop
          }
          break;
 8007008:	e004      	b.n	8007014 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fb20 	bl	8007652 <USBD_CtlError>
          break;
 8007012:	bf00      	nop
      }
      break;
 8007014:	e004      	b.n	8007020 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fb1a 	bl	8007652 <USBD_CtlError>
      break;
 800701e:	bf00      	nop
  }

  return ret;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	885b      	ldrh	r3, [r3, #2]
 8007046:	0a1b      	lsrs	r3, r3, #8
 8007048:	b29b      	uxth	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	2b06      	cmp	r3, #6
 800704e:	f200 8128 	bhi.w	80072a2 <USBD_GetDescriptor+0x276>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <USBD_GetDescriptor+0x2c>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	08007075 	.word	0x08007075
 800705c:	0800708d 	.word	0x0800708d
 8007060:	080070cd 	.word	0x080070cd
 8007064:	080072a3 	.word	0x080072a3
 8007068:	080072a3 	.word	0x080072a3
 800706c:	08007243 	.word	0x08007243
 8007070:	0800726f 	.word	0x0800726f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	7c12      	ldrb	r2, [r2, #16]
 8007080:	f107 0108 	add.w	r1, r7, #8
 8007084:	4610      	mov	r0, r2
 8007086:	4798      	blx	r3
 8007088:	60f8      	str	r0, [r7, #12]
      break;
 800708a:	e112      	b.n	80072b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	7c1b      	ldrb	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10d      	bne.n	80070b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709c:	f107 0208 	add.w	r2, r7, #8
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
 80070a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3301      	adds	r3, #1
 80070aa:	2202      	movs	r2, #2
 80070ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070ae:	e100      	b.n	80072b2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	f107 0208 	add.w	r2, r7, #8
 80070bc:	4610      	mov	r0, r2
 80070be:	4798      	blx	r3
 80070c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3301      	adds	r3, #1
 80070c6:	2202      	movs	r2, #2
 80070c8:	701a      	strb	r2, [r3, #0]
      break;
 80070ca:	e0f2      	b.n	80072b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	885b      	ldrh	r3, [r3, #2]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b05      	cmp	r3, #5
 80070d4:	f200 80ac 	bhi.w	8007230 <USBD_GetDescriptor+0x204>
 80070d8:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <USBD_GetDescriptor+0xb4>)
 80070da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070de:	bf00      	nop
 80070e0:	080070f9 	.word	0x080070f9
 80070e4:	0800712d 	.word	0x0800712d
 80070e8:	08007161 	.word	0x08007161
 80070ec:	08007195 	.word	0x08007195
 80070f0:	080071c9 	.word	0x080071c9
 80070f4:	080071fd 	.word	0x080071fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	7c12      	ldrb	r2, [r2, #16]
 8007110:	f107 0108 	add.w	r1, r7, #8
 8007114:	4610      	mov	r0, r2
 8007116:	4798      	blx	r3
 8007118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800711a:	e091      	b.n	8007240 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fa97 	bl	8007652 <USBD_CtlError>
            err++;
 8007124:	7afb      	ldrb	r3, [r7, #11]
 8007126:	3301      	adds	r3, #1
 8007128:	72fb      	strb	r3, [r7, #11]
          break;
 800712a:	e089      	b.n	8007240 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00b      	beq.n	8007150 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	7c12      	ldrb	r2, [r2, #16]
 8007144:	f107 0108 	add.w	r1, r7, #8
 8007148:	4610      	mov	r0, r2
 800714a:	4798      	blx	r3
 800714c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800714e:	e077      	b.n	8007240 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fa7d 	bl	8007652 <USBD_CtlError>
            err++;
 8007158:	7afb      	ldrb	r3, [r7, #11]
 800715a:	3301      	adds	r3, #1
 800715c:	72fb      	strb	r3, [r7, #11]
          break;
 800715e:	e06f      	b.n	8007240 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00b      	beq.n	8007184 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	7c12      	ldrb	r2, [r2, #16]
 8007178:	f107 0108 	add.w	r1, r7, #8
 800717c:	4610      	mov	r0, r2
 800717e:	4798      	blx	r3
 8007180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007182:	e05d      	b.n	8007240 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa63 	bl	8007652 <USBD_CtlError>
            err++;
 800718c:	7afb      	ldrb	r3, [r7, #11]
 800718e:	3301      	adds	r3, #1
 8007190:	72fb      	strb	r3, [r7, #11]
          break;
 8007192:	e055      	b.n	8007240 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00b      	beq.n	80071b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	7c12      	ldrb	r2, [r2, #16]
 80071ac:	f107 0108 	add.w	r1, r7, #8
 80071b0:	4610      	mov	r0, r2
 80071b2:	4798      	blx	r3
 80071b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071b6:	e043      	b.n	8007240 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fa49 	bl	8007652 <USBD_CtlError>
            err++;
 80071c0:	7afb      	ldrb	r3, [r7, #11]
 80071c2:	3301      	adds	r3, #1
 80071c4:	72fb      	strb	r3, [r7, #11]
          break;
 80071c6:	e03b      	b.n	8007240 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00b      	beq.n	80071ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	7c12      	ldrb	r2, [r2, #16]
 80071e0:	f107 0108 	add.w	r1, r7, #8
 80071e4:	4610      	mov	r0, r2
 80071e6:	4798      	blx	r3
 80071e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ea:	e029      	b.n	8007240 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fa2f 	bl	8007652 <USBD_CtlError>
            err++;
 80071f4:	7afb      	ldrb	r3, [r7, #11]
 80071f6:	3301      	adds	r3, #1
 80071f8:	72fb      	strb	r3, [r7, #11]
          break;
 80071fa:	e021      	b.n	8007240 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	7c12      	ldrb	r2, [r2, #16]
 8007214:	f107 0108 	add.w	r1, r7, #8
 8007218:	4610      	mov	r0, r2
 800721a:	4798      	blx	r3
 800721c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800721e:	e00f      	b.n	8007240 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fa15 	bl	8007652 <USBD_CtlError>
            err++;
 8007228:	7afb      	ldrb	r3, [r7, #11]
 800722a:	3301      	adds	r3, #1
 800722c:	72fb      	strb	r3, [r7, #11]
          break;
 800722e:	e007      	b.n	8007240 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fa0d 	bl	8007652 <USBD_CtlError>
          err++;
 8007238:	7afb      	ldrb	r3, [r7, #11]
 800723a:	3301      	adds	r3, #1
 800723c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800723e:	e038      	b.n	80072b2 <USBD_GetDescriptor+0x286>
 8007240:	e037      	b.n	80072b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	7c1b      	ldrb	r3, [r3, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d109      	bne.n	800725e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007252:	f107 0208 	add.w	r2, r7, #8
 8007256:	4610      	mov	r0, r2
 8007258:	4798      	blx	r3
 800725a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800725c:	e029      	b.n	80072b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f9f6 	bl	8007652 <USBD_CtlError>
        err++;
 8007266:	7afb      	ldrb	r3, [r7, #11]
 8007268:	3301      	adds	r3, #1
 800726a:	72fb      	strb	r3, [r7, #11]
      break;
 800726c:	e021      	b.n	80072b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	7c1b      	ldrb	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10d      	bne.n	8007292 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800727c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727e:	f107 0208 	add.w	r2, r7, #8
 8007282:	4610      	mov	r0, r2
 8007284:	4798      	blx	r3
 8007286:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3301      	adds	r3, #1
 800728c:	2207      	movs	r2, #7
 800728e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007290:	e00f      	b.n	80072b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f9dc 	bl	8007652 <USBD_CtlError>
        err++;
 800729a:	7afb      	ldrb	r3, [r7, #11]
 800729c:	3301      	adds	r3, #1
 800729e:	72fb      	strb	r3, [r7, #11]
      break;
 80072a0:	e007      	b.n	80072b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f9d4 	bl	8007652 <USBD_CtlError>
      err++;
 80072aa:	7afb      	ldrb	r3, [r7, #11]
 80072ac:	3301      	adds	r3, #1
 80072ae:	72fb      	strb	r3, [r7, #11]
      break;
 80072b0:	bf00      	nop
  }

  if (err != 0U)
 80072b2:	7afb      	ldrb	r3, [r7, #11]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d11c      	bne.n	80072f2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80072b8:	893b      	ldrh	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d011      	beq.n	80072e2 <USBD_GetDescriptor+0x2b6>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	88db      	ldrh	r3, [r3, #6]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00d      	beq.n	80072e2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	88da      	ldrh	r2, [r3, #6]
 80072ca:	893b      	ldrh	r3, [r7, #8]
 80072cc:	4293      	cmp	r3, r2
 80072ce:	bf28      	it	cs
 80072d0:	4613      	movcs	r3, r2
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072d6:	893b      	ldrh	r3, [r7, #8]
 80072d8:	461a      	mov	r2, r3
 80072da:	68f9      	ldr	r1, [r7, #12]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fa22 	bl	8007726 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	88db      	ldrh	r3, [r3, #6]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d104      	bne.n	80072f4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fa79 	bl	80077e2 <USBD_CtlSendStatus>
 80072f0:	e000      	b.n	80072f4 <USBD_GetDescriptor+0x2c8>
    return;
 80072f2:	bf00      	nop
    }
  }
}
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop

080072fc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	889b      	ldrh	r3, [r3, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d130      	bne.n	8007370 <USBD_SetAddress+0x74>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	88db      	ldrh	r3, [r3, #6]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d12c      	bne.n	8007370 <USBD_SetAddress+0x74>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	885b      	ldrh	r3, [r3, #2]
 800731a:	2b7f      	cmp	r3, #127	; 0x7f
 800731c:	d828      	bhi.n	8007370 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	885b      	ldrh	r3, [r3, #2]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007328:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007330:	2b03      	cmp	r3, #3
 8007332:	d104      	bne.n	800733e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f98b 	bl	8007652 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733c:	e01d      	b.n	800737a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	7bfa      	ldrb	r2, [r7, #15]
 8007342:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007346:	7bfb      	ldrb	r3, [r7, #15]
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fe68 	bl	8008020 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fa46 	bl	80077e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007364:	e009      	b.n	800737a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800736e:	e004      	b.n	800737a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f96d 	bl	8007652 <USBD_CtlError>
  }
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	885b      	ldrh	r3, [r3, #2]
 8007392:	b2da      	uxtb	r2, r3
 8007394:	4b41      	ldr	r3, [pc, #260]	; (800749c <USBD_SetConfig+0x118>)
 8007396:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007398:	4b40      	ldr	r3, [pc, #256]	; (800749c <USBD_SetConfig+0x118>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d904      	bls.n	80073aa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f955 	bl	8007652 <USBD_CtlError>
 80073a8:	e075      	b.n	8007496 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d002      	beq.n	80073ba <USBD_SetConfig+0x36>
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d023      	beq.n	8007400 <USBD_SetConfig+0x7c>
 80073b8:	e062      	b.n	8007480 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80073ba:	4b38      	ldr	r3, [pc, #224]	; (800749c <USBD_SetConfig+0x118>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01a      	beq.n	80073f8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80073c2:	4b36      	ldr	r3, [pc, #216]	; (800749c <USBD_SetConfig+0x118>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2203      	movs	r2, #3
 80073d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80073d4:	4b31      	ldr	r3, [pc, #196]	; (800749c <USBD_SetConfig+0x118>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff f9e7 	bl	80067ae <USBD_SetClassConfig>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d104      	bne.n	80073f0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f932 	bl	8007652 <USBD_CtlError>
            return;
 80073ee:	e052      	b.n	8007496 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f9f6 	bl	80077e2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80073f6:	e04e      	b.n	8007496 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f9f2 	bl	80077e2 <USBD_CtlSendStatus>
        break;
 80073fe:	e04a      	b.n	8007496 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007400:	4b26      	ldr	r3, [pc, #152]	; (800749c <USBD_SetConfig+0x118>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d112      	bne.n	800742e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007410:	4b22      	ldr	r3, [pc, #136]	; (800749c <USBD_SetConfig+0x118>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	461a      	mov	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800741a:	4b20      	ldr	r3, [pc, #128]	; (800749c <USBD_SetConfig+0x118>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff f9e3 	bl	80067ec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f9db 	bl	80077e2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800742c:	e033      	b.n	8007496 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800742e:	4b1b      	ldr	r3, [pc, #108]	; (800749c <USBD_SetConfig+0x118>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	429a      	cmp	r2, r3
 800743a:	d01d      	beq.n	8007478 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	b2db      	uxtb	r3, r3
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff f9d1 	bl	80067ec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800744a:	4b14      	ldr	r3, [pc, #80]	; (800749c <USBD_SetConfig+0x118>)
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007454:	4b11      	ldr	r3, [pc, #68]	; (800749c <USBD_SetConfig+0x118>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff f9a7 	bl	80067ae <USBD_SetClassConfig>
 8007460:	4603      	mov	r3, r0
 8007462:	2b02      	cmp	r3, #2
 8007464:	d104      	bne.n	8007470 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f8f2 	bl	8007652 <USBD_CtlError>
            return;
 800746e:	e012      	b.n	8007496 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f9b6 	bl	80077e2 <USBD_CtlSendStatus>
        break;
 8007476:	e00e      	b.n	8007496 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f9b2 	bl	80077e2 <USBD_CtlSendStatus>
        break;
 800747e:	e00a      	b.n	8007496 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f8e5 	bl	8007652 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007488:	4b04      	ldr	r3, [pc, #16]	; (800749c <USBD_SetConfig+0x118>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff f9ac 	bl	80067ec <USBD_ClrClassConfig>
        break;
 8007494:	bf00      	nop
    }
  }
}
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	20000244 	.word	0x20000244

080074a0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	88db      	ldrh	r3, [r3, #6]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d004      	beq.n	80074bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f8cc 	bl	8007652 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074ba:	e022      	b.n	8007502 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	dc02      	bgt.n	80074cc <USBD_GetConfig+0x2c>
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	dc03      	bgt.n	80074d2 <USBD_GetConfig+0x32>
 80074ca:	e015      	b.n	80074f8 <USBD_GetConfig+0x58>
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d00b      	beq.n	80074e8 <USBD_GetConfig+0x48>
 80074d0:	e012      	b.n	80074f8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3308      	adds	r3, #8
 80074dc:	2201      	movs	r2, #1
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f920 	bl	8007726 <USBD_CtlSendData>
        break;
 80074e6:	e00c      	b.n	8007502 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3304      	adds	r3, #4
 80074ec:	2201      	movs	r2, #1
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f918 	bl	8007726 <USBD_CtlSendData>
        break;
 80074f6:	e004      	b.n	8007502 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f8a9 	bl	8007652 <USBD_CtlError>
        break;
 8007500:	bf00      	nop
}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751a:	3b01      	subs	r3, #1
 800751c:	2b02      	cmp	r3, #2
 800751e:	d81e      	bhi.n	800755e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	88db      	ldrh	r3, [r3, #6]
 8007524:	2b02      	cmp	r3, #2
 8007526:	d004      	beq.n	8007532 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f891 	bl	8007652 <USBD_CtlError>
        break;
 8007530:	e01a      	b.n	8007568 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f043 0202 	orr.w	r2, r3, #2
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	330c      	adds	r3, #12
 8007552:	2202      	movs	r2, #2
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f8e5 	bl	8007726 <USBD_CtlSendData>
      break;
 800755c:	e004      	b.n	8007568 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f876 	bl	8007652 <USBD_CtlError>
      break;
 8007566:	bf00      	nop
  }
}
 8007568:	bf00      	nop
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	885b      	ldrh	r3, [r3, #2]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d106      	bne.n	8007590 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f929 	bl	80077e2 <USBD_CtlSendStatus>
  }
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a8:	3b01      	subs	r3, #1
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d80b      	bhi.n	80075c6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	885b      	ldrh	r3, [r3, #2]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d10c      	bne.n	80075d0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f90f 	bl	80077e2 <USBD_CtlSendStatus>
      }
      break;
 80075c4:	e004      	b.n	80075d0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f842 	bl	8007652 <USBD_CtlError>
      break;
 80075ce:	e000      	b.n	80075d2 <USBD_ClrFeature+0x3a>
      break;
 80075d0:	bf00      	nop
  }
}
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781a      	ldrb	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	785a      	ldrb	r2, [r3, #1]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	3302      	adds	r3, #2
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	3303      	adds	r3, #3
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	021b      	lsls	r3, r3, #8
 8007606:	b29b      	uxth	r3, r3
 8007608:	4413      	add	r3, r2
 800760a:	b29a      	uxth	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	3304      	adds	r3, #4
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	b29a      	uxth	r2, r3
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	3305      	adds	r3, #5
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	b29b      	uxth	r3, r3
 8007620:	021b      	lsls	r3, r3, #8
 8007622:	b29b      	uxth	r3, r3
 8007624:	4413      	add	r3, r2
 8007626:	b29a      	uxth	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	3306      	adds	r3, #6
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	b29a      	uxth	r2, r3
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	3307      	adds	r3, #7
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	b29b      	uxth	r3, r3
 800763c:	021b      	lsls	r3, r3, #8
 800763e:	b29b      	uxth	r3, r3
 8007640:	4413      	add	r3, r2
 8007642:	b29a      	uxth	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	80da      	strh	r2, [r3, #6]

}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	bc80      	pop	{r7}
 8007650:	4770      	bx	lr

08007652 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800765c:	2180      	movs	r1, #128	; 0x80
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fc74 	bl	8007f4c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007664:	2100      	movs	r1, #0
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fc70 	bl	8007f4c <USBD_LL_StallEP>
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d032      	beq.n	80076f0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 f834 	bl	80076f8 <USBD_GetLen>
 8007690:	4603      	mov	r3, r0
 8007692:	3301      	adds	r3, #1
 8007694:	b29b      	uxth	r3, r3
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	b29a      	uxth	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	75fa      	strb	r2, [r7, #23]
 80076a4:	461a      	mov	r2, r3
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	4413      	add	r3, r2
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	7812      	ldrb	r2, [r2, #0]
 80076ae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	75fa      	strb	r2, [r7, #23]
 80076b6:	461a      	mov	r2, r3
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	4413      	add	r3, r2
 80076bc:	2203      	movs	r2, #3
 80076be:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80076c0:	e012      	b.n	80076e8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	60fa      	str	r2, [r7, #12]
 80076c8:	7dfa      	ldrb	r2, [r7, #23]
 80076ca:	1c51      	adds	r1, r2, #1
 80076cc:	75f9      	strb	r1, [r7, #23]
 80076ce:	4611      	mov	r1, r2
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	440a      	add	r2, r1
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	75fa      	strb	r2, [r7, #23]
 80076de:	461a      	mov	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4413      	add	r3, r2
 80076e4:	2200      	movs	r2, #0
 80076e6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e8      	bne.n	80076c2 <USBD_GetString+0x4e>
    }
  }
}
 80076f0:	bf00      	nop
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007704:	e005      	b.n	8007712 <USBD_GetLen+0x1a>
  {
    len++;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	3301      	adds	r3, #1
 800770a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3301      	adds	r3, #1
 8007710:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1f5      	bne.n	8007706 <USBD_GetLen+0xe>
  }

  return len;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	bc80      	pop	{r7}
 8007724:	4770      	bx	lr

08007726 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	4613      	mov	r3, r2
 8007732:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2202      	movs	r2, #2
 8007738:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800773c:	88fa      	ldrh	r2, [r7, #6]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007742:	88fa      	ldrh	r2, [r7, #6]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007748:	88fb      	ldrh	r3, [r7, #6]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	2100      	movs	r1, #0
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 fc85 	bl	800805e <USBD_LL_Transmit>

  return USBD_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	4613      	mov	r3, r2
 800776a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800776c:	88fb      	ldrh	r3, [r7, #6]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	2100      	movs	r1, #0
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f000 fc73 	bl	800805e <USBD_LL_Transmit>

  return USBD_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	4613      	mov	r3, r2
 800778e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2203      	movs	r2, #3
 8007794:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007798:	88fa      	ldrh	r2, [r7, #6]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80077a0:	88fa      	ldrh	r2, [r7, #6]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077a8:	88fb      	ldrh	r3, [r7, #6]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	2100      	movs	r1, #0
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 fc78 	bl	80080a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	60b9      	str	r1, [r7, #8]
 80077c8:	4613      	mov	r3, r2
 80077ca:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077cc:	88fb      	ldrh	r3, [r7, #6]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	2100      	movs	r1, #0
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 fc66 	bl	80080a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2204      	movs	r2, #4
 80077ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077f2:	2300      	movs	r3, #0
 80077f4:	2200      	movs	r2, #0
 80077f6:	2100      	movs	r1, #0
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fc30 	bl	800805e <USBD_LL_Transmit>

  return USBD_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2205      	movs	r2, #5
 8007814:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007818:	2300      	movs	r3, #0
 800781a:	2200      	movs	r2, #0
 800781c:	2100      	movs	r1, #0
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fc40 	bl	80080a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
	...

08007830 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007834:	2200      	movs	r2, #0
 8007836:	4912      	ldr	r1, [pc, #72]	; (8007880 <MX_USB_DEVICE_Init+0x50>)
 8007838:	4812      	ldr	r0, [pc, #72]	; (8007884 <MX_USB_DEVICE_Init+0x54>)
 800783a:	f7fe ff5e 	bl	80066fa <USBD_Init>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007844:	f7f8 fee4 	bl	8000610 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007848:	490f      	ldr	r1, [pc, #60]	; (8007888 <MX_USB_DEVICE_Init+0x58>)
 800784a:	480e      	ldr	r0, [pc, #56]	; (8007884 <MX_USB_DEVICE_Init+0x54>)
 800784c:	f7fe ff80 	bl	8006750 <USBD_RegisterClass>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007856:	f7f8 fedb 	bl	8000610 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800785a:	490c      	ldr	r1, [pc, #48]	; (800788c <MX_USB_DEVICE_Init+0x5c>)
 800785c:	4809      	ldr	r0, [pc, #36]	; (8007884 <MX_USB_DEVICE_Init+0x54>)
 800785e:	f7fe feb1 	bl	80065c4 <USBD_CDC_RegisterInterface>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007868:	f7f8 fed2 	bl	8000610 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800786c:	4805      	ldr	r0, [pc, #20]	; (8007884 <MX_USB_DEVICE_Init+0x54>)
 800786e:	f7fe ff88 	bl	8006782 <USBD_Start>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007878:	f7f8 feca 	bl	8000610 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800787c:	bf00      	nop
 800787e:	bd80      	pop	{r7, pc}
 8007880:	2000012c 	.word	0x2000012c
 8007884:	20000508 	.word	0x20000508
 8007888:	20000018 	.word	0x20000018
 800788c:	2000011c 	.word	0x2000011c

08007890 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007894:	2200      	movs	r2, #0
 8007896:	4905      	ldr	r1, [pc, #20]	; (80078ac <CDC_Init_FS+0x1c>)
 8007898:	4805      	ldr	r0, [pc, #20]	; (80078b0 <CDC_Init_FS+0x20>)
 800789a:	f7fe fea9 	bl	80065f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800789e:	4905      	ldr	r1, [pc, #20]	; (80078b4 <CDC_Init_FS+0x24>)
 80078a0:	4803      	ldr	r0, [pc, #12]	; (80078b0 <CDC_Init_FS+0x20>)
 80078a2:	f7fe febe 	bl	8006622 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	20000bb4 	.word	0x20000bb4
 80078b0:	20000508 	.word	0x20000508
 80078b4:	200007cc 	.word	0x200007cc

080078b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078be:	4618      	mov	r0, r3
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr
	...

080078c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	4603      	mov	r3, r0
 80078d0:	6039      	str	r1, [r7, #0]
 80078d2:	71fb      	strb	r3, [r7, #7]
 80078d4:	4613      	mov	r3, r2
 80078d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	2b23      	cmp	r3, #35	; 0x23
 80078dc:	d84a      	bhi.n	8007974 <CDC_Control_FS+0xac>
 80078de:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <CDC_Control_FS+0x1c>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	08007975 	.word	0x08007975
 80078e8:	08007975 	.word	0x08007975
 80078ec:	08007975 	.word	0x08007975
 80078f0:	08007975 	.word	0x08007975
 80078f4:	08007975 	.word	0x08007975
 80078f8:	08007975 	.word	0x08007975
 80078fc:	08007975 	.word	0x08007975
 8007900:	08007975 	.word	0x08007975
 8007904:	08007975 	.word	0x08007975
 8007908:	08007975 	.word	0x08007975
 800790c:	08007975 	.word	0x08007975
 8007910:	08007975 	.word	0x08007975
 8007914:	08007975 	.word	0x08007975
 8007918:	08007975 	.word	0x08007975
 800791c:	08007975 	.word	0x08007975
 8007920:	08007975 	.word	0x08007975
 8007924:	08007975 	.word	0x08007975
 8007928:	08007975 	.word	0x08007975
 800792c:	08007975 	.word	0x08007975
 8007930:	08007975 	.word	0x08007975
 8007934:	08007975 	.word	0x08007975
 8007938:	08007975 	.word	0x08007975
 800793c:	08007975 	.word	0x08007975
 8007940:	08007975 	.word	0x08007975
 8007944:	08007975 	.word	0x08007975
 8007948:	08007975 	.word	0x08007975
 800794c:	08007975 	.word	0x08007975
 8007950:	08007975 	.word	0x08007975
 8007954:	08007975 	.word	0x08007975
 8007958:	08007975 	.word	0x08007975
 800795c:	08007975 	.word	0x08007975
 8007960:	08007975 	.word	0x08007975
 8007964:	08007975 	.word	0x08007975
 8007968:	08007975 	.word	0x08007975
 800796c:	08007975 	.word	0x08007975
 8007970:	08007975 	.word	0x08007975
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007974:	bf00      	nop
  }

  return (USBD_OK);
 8007976:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop

08007984 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800798e:	6879      	ldr	r1, [r7, #4]
 8007990:	4812      	ldr	r0, [pc, #72]	; (80079dc <CDC_Receive_FS+0x58>)
 8007992:	f7fe fe46 	bl	8006622 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007996:	4811      	ldr	r0, [pc, #68]	; (80079dc <CDC_Receive_FS+0x58>)
 8007998:	f7fe fe85 	bl	80066a6 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 800799c:	2240      	movs	r2, #64	; 0x40
 800799e:	2100      	movs	r1, #0
 80079a0:	480f      	ldr	r0, [pc, #60]	; (80079e0 <CDC_Receive_FS+0x5c>)
 80079a2:	f000 fc39 	bl	8008218 <memset>
  uint8_t len = (uint8_t)*Len;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	73fb      	strb	r3, [r7, #15]
  length_of_packet = len;
 80079ac:	4a0d      	ldr	r2, [pc, #52]	; (80079e4 <CDC_Receive_FS+0x60>)
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	7013      	strb	r3, [r2, #0]
  COMdataAvailable = 1;
 80079b2:	4b0d      	ldr	r3, [pc, #52]	; (80079e8 <CDC_Receive_FS+0x64>)
 80079b4:	2201      	movs	r2, #1
 80079b6:	701a      	strb	r2, [r3, #0]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	461a      	mov	r2, r3
 80079bc:	6879      	ldr	r1, [r7, #4]
 80079be:	4808      	ldr	r0, [pc, #32]	; (80079e0 <CDC_Receive_FS+0x5c>)
 80079c0:	f000 fc1c 	bl	80081fc <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	461a      	mov	r2, r3
 80079c8:	2100      	movs	r1, #0
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fc24 	bl	8008218 <memset>

  return (USBD_OK);
 80079d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20000508 	.word	0x20000508
 80079e0:	200004b4 	.word	0x200004b4
 80079e4:	2000023c 	.word	0x2000023c
 80079e8:	2000023d 	.word	0x2000023d

080079ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80079fc:	4b0d      	ldr	r3, [pc, #52]	; (8007a34 <CDC_Transmit_FS+0x48>)
 80079fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e00b      	b.n	8007a2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a12:	887b      	ldrh	r3, [r7, #2]
 8007a14:	461a      	mov	r2, r3
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	4806      	ldr	r0, [pc, #24]	; (8007a34 <CDC_Transmit_FS+0x48>)
 8007a1a:	f7fe fde9 	bl	80065f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a1e:	4805      	ldr	r0, [pc, #20]	; (8007a34 <CDC_Transmit_FS+0x48>)
 8007a20:	f7fe fe12 	bl	8006648 <USBD_CDC_TransmitPacket>
 8007a24:	4603      	mov	r3, r0
 8007a26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20000508 	.word	0x20000508

08007a38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	6039      	str	r1, [r7, #0]
 8007a42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2212      	movs	r2, #18
 8007a48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a4a:	4b03      	ldr	r3, [pc, #12]	; (8007a58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20000148 	.word	0x20000148

08007a5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4603      	mov	r3, r0
 8007a64:	6039      	str	r1, [r7, #0]
 8007a66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2204      	movs	r2, #4
 8007a6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a6e:	4b03      	ldr	r3, [pc, #12]	; (8007a7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	2000015c 	.word	0x2000015c

08007a80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	6039      	str	r1, [r7, #0]
 8007a8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a8c:	79fb      	ldrb	r3, [r7, #7]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d105      	bne.n	8007a9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	4907      	ldr	r1, [pc, #28]	; (8007ab4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a96:	4808      	ldr	r0, [pc, #32]	; (8007ab8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a98:	f7ff fdec 	bl	8007674 <USBD_GetString>
 8007a9c:	e004      	b.n	8007aa8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	4904      	ldr	r1, [pc, #16]	; (8007ab4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007aa2:	4805      	ldr	r0, [pc, #20]	; (8007ab8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007aa4:	f7ff fde6 	bl	8007674 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007aa8:	4b02      	ldr	r3, [pc, #8]	; (8007ab4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000f9c 	.word	0x20000f9c
 8007ab8:	08008e9c 	.word	0x08008e9c

08007abc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	6039      	str	r1, [r7, #0]
 8007ac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	4904      	ldr	r1, [pc, #16]	; (8007adc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007acc:	4804      	ldr	r0, [pc, #16]	; (8007ae0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ace:	f7ff fdd1 	bl	8007674 <USBD_GetString>
  return USBD_StrDesc;
 8007ad2:	4b02      	ldr	r3, [pc, #8]	; (8007adc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	20000f9c 	.word	0x20000f9c
 8007ae0:	08008eb4 	.word	0x08008eb4

08007ae4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	221a      	movs	r2, #26
 8007af4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007af6:	f000 f843 	bl	8007b80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007afa:	4b02      	ldr	r3, [pc, #8]	; (8007b04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20000160 	.word	0x20000160

08007b08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	6039      	str	r1, [r7, #0]
 8007b12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d105      	bne.n	8007b26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	4907      	ldr	r1, [pc, #28]	; (8007b3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b1e:	4808      	ldr	r0, [pc, #32]	; (8007b40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b20:	f7ff fda8 	bl	8007674 <USBD_GetString>
 8007b24:	e004      	b.n	8007b30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	4904      	ldr	r1, [pc, #16]	; (8007b3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b2a:	4805      	ldr	r0, [pc, #20]	; (8007b40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b2c:	f7ff fda2 	bl	8007674 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b30:	4b02      	ldr	r3, [pc, #8]	; (8007b3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000f9c 	.word	0x20000f9c
 8007b40:	08008ec8 	.word	0x08008ec8

08007b44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	6039      	str	r1, [r7, #0]
 8007b4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b50:	79fb      	ldrb	r3, [r7, #7]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d105      	bne.n	8007b62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	4907      	ldr	r1, [pc, #28]	; (8007b78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b5a:	4808      	ldr	r0, [pc, #32]	; (8007b7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b5c:	f7ff fd8a 	bl	8007674 <USBD_GetString>
 8007b60:	e004      	b.n	8007b6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	4904      	ldr	r1, [pc, #16]	; (8007b78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b66:	4805      	ldr	r0, [pc, #20]	; (8007b7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b68:	f7ff fd84 	bl	8007674 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b6c:	4b02      	ldr	r3, [pc, #8]	; (8007b78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20000f9c 	.word	0x20000f9c
 8007b7c:	08008ed4 	.word	0x08008ed4

08007b80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b86:	4b0f      	ldr	r3, [pc, #60]	; (8007bc4 <Get_SerialNum+0x44>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b8c:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <Get_SerialNum+0x48>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b92:	4b0e      	ldr	r3, [pc, #56]	; (8007bcc <Get_SerialNum+0x4c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d009      	beq.n	8007bba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ba6:	2208      	movs	r2, #8
 8007ba8:	4909      	ldr	r1, [pc, #36]	; (8007bd0 <Get_SerialNum+0x50>)
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f814 	bl	8007bd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bb0:	2204      	movs	r2, #4
 8007bb2:	4908      	ldr	r1, [pc, #32]	; (8007bd4 <Get_SerialNum+0x54>)
 8007bb4:	68b8      	ldr	r0, [r7, #8]
 8007bb6:	f000 f80f 	bl	8007bd8 <IntToUnicode>
  }
}
 8007bba:	bf00      	nop
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	1ffff7e8 	.word	0x1ffff7e8
 8007bc8:	1ffff7ec 	.word	0x1ffff7ec
 8007bcc:	1ffff7f0 	.word	0x1ffff7f0
 8007bd0:	20000162 	.word	0x20000162
 8007bd4:	20000172 	.word	0x20000172

08007bd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	4613      	mov	r3, r2
 8007be4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007bea:	2300      	movs	r3, #0
 8007bec:	75fb      	strb	r3, [r7, #23]
 8007bee:	e027      	b.n	8007c40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	0f1b      	lsrs	r3, r3, #28
 8007bf4:	2b09      	cmp	r3, #9
 8007bf6:	d80b      	bhi.n	8007c10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	0f1b      	lsrs	r3, r3, #28
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	4619      	mov	r1, r3
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	440b      	add	r3, r1
 8007c08:	3230      	adds	r2, #48	; 0x30
 8007c0a:	b2d2      	uxtb	r2, r2
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	e00a      	b.n	8007c26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	0f1b      	lsrs	r3, r3, #28
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	440b      	add	r3, r1
 8007c20:	3237      	adds	r2, #55	; 0x37
 8007c22:	b2d2      	uxtb	r2, r2
 8007c24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	3301      	adds	r3, #1
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	4413      	add	r3, r2
 8007c36:	2200      	movs	r2, #0
 8007c38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	75fb      	strb	r3, [r7, #23]
 8007c40:	7dfa      	ldrb	r2, [r7, #23]
 8007c42:	79fb      	ldrb	r3, [r7, #7]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d3d3      	bcc.n	8007bf0 <IntToUnicode+0x18>
  }
}
 8007c48:	bf00      	nop
 8007c4a:	bf00      	nop
 8007c4c:	371c      	adds	r7, #28
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bc80      	pop	{r7}
 8007c52:	4770      	bx	lr

08007c54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a0d      	ldr	r2, [pc, #52]	; (8007c98 <HAL_PCD_MspInit+0x44>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d113      	bne.n	8007c8e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007c66:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <HAL_PCD_MspInit+0x48>)
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	4a0c      	ldr	r2, [pc, #48]	; (8007c9c <HAL_PCD_MspInit+0x48>)
 8007c6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c70:	61d3      	str	r3, [r2, #28]
 8007c72:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <HAL_PCD_MspInit+0x48>)
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2100      	movs	r1, #0
 8007c82:	2014      	movs	r0, #20
 8007c84:	f7f8 ff27 	bl	8000ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007c88:	2014      	movs	r0, #20
 8007c8a:	f7f8 ff40 	bl	8000b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40005c00 	.word	0x40005c00
 8007c9c:	40021000 	.word	0x40021000

08007ca0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	f7fe fdab 	bl	8006812 <USBD_LL_SetupStage>
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007cd6:	78fa      	ldrb	r2, [r7, #3]
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	440b      	add	r3, r1
 8007ce4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	78fb      	ldrb	r3, [r7, #3]
 8007cec:	4619      	mov	r1, r3
 8007cee:	f7fe fddd 	bl	80068ac <USBD_LL_DataOutStage>
}
 8007cf2:	bf00      	nop
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	460b      	mov	r3, r1
 8007d04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d0c:	78fa      	ldrb	r2, [r7, #3]
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	4613      	mov	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	440b      	add	r3, r1
 8007d1a:	333c      	adds	r3, #60	; 0x3c
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	4619      	mov	r1, r3
 8007d22:	f7fe fe34 	bl	800698e <USBD_LL_DataInStage>
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fe ff44 	bl	8006bca <USBD_LL_SOF>
}
 8007d42:	bf00      	nop
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d52:	2301      	movs	r3, #1
 8007d54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d001      	beq.n	8007d62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007d5e:	f7f8 fc57 	bl	8000610 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d68:	7bfa      	ldrb	r2, [r7, #15]
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fe fef4 	bl	8006b5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe fead 	bl	8006ad8 <USBD_LL_Reset>
}
 8007d7e:	bf00      	nop
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe feee 	bl	8006b78 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d005      	beq.n	8007db0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007da4:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <HAL_PCD_SuspendCallback+0x30>)
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	4a03      	ldr	r2, [pc, #12]	; (8007db8 <HAL_PCD_SuspendCallback+0x30>)
 8007daa:	f043 0306 	orr.w	r3, r3, #6
 8007dae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	e000ed00 	.word	0xe000ed00

08007dbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe fee8 	bl	8006ba0 <USBD_LL_Resume>
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007de0:	4a28      	ldr	r2, [pc, #160]	; (8007e84 <USBD_LL_Init+0xac>)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a26      	ldr	r2, [pc, #152]	; (8007e84 <USBD_LL_Init+0xac>)
 8007dec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007df0:	4b24      	ldr	r3, [pc, #144]	; (8007e84 <USBD_LL_Init+0xac>)
 8007df2:	4a25      	ldr	r2, [pc, #148]	; (8007e88 <USBD_LL_Init+0xb0>)
 8007df4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007df6:	4b23      	ldr	r3, [pc, #140]	; (8007e84 <USBD_LL_Init+0xac>)
 8007df8:	2208      	movs	r2, #8
 8007dfa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007dfc:	4b21      	ldr	r3, [pc, #132]	; (8007e84 <USBD_LL_Init+0xac>)
 8007dfe:	2202      	movs	r2, #2
 8007e00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e02:	4b20      	ldr	r3, [pc, #128]	; (8007e84 <USBD_LL_Init+0xac>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007e08:	4b1e      	ldr	r3, [pc, #120]	; (8007e84 <USBD_LL_Init+0xac>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007e0e:	4b1d      	ldr	r3, [pc, #116]	; (8007e84 <USBD_LL_Init+0xac>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007e14:	481b      	ldr	r0, [pc, #108]	; (8007e84 <USBD_LL_Init+0xac>)
 8007e16:	f7f9 f8e1 	bl	8000fdc <HAL_PCD_Init>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007e20:	f7f8 fbf6 	bl	8000610 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e2a:	2318      	movs	r3, #24
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	2100      	movs	r1, #0
 8007e30:	f7fa fd57 	bl	80028e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e3a:	2358      	movs	r3, #88	; 0x58
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2180      	movs	r1, #128	; 0x80
 8007e40:	f7fa fd4f 	bl	80028e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e4a:	23c0      	movs	r3, #192	; 0xc0
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2181      	movs	r1, #129	; 0x81
 8007e50:	f7fa fd47 	bl	80028e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007e5e:	2200      	movs	r2, #0
 8007e60:	2101      	movs	r1, #1
 8007e62:	f7fa fd3e 	bl	80028e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e70:	2200      	movs	r2, #0
 8007e72:	2182      	movs	r1, #130	; 0x82
 8007e74:	f7fa fd35 	bl	80028e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	2000119c 	.word	0x2000119c
 8007e88:	40005c00 	.word	0x40005c00

08007e8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7f9 f9a5 	bl	80011f2 <HAL_PCD_Start>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 f94e 	bl	8008150 <USBD_Get_USB_Status>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	4608      	mov	r0, r1
 8007ecc:	4611      	mov	r1, r2
 8007ece:	461a      	mov	r2, r3
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	70fb      	strb	r3, [r7, #3]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	70bb      	strb	r3, [r7, #2]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eea:	78bb      	ldrb	r3, [r7, #2]
 8007eec:	883a      	ldrh	r2, [r7, #0]
 8007eee:	78f9      	ldrb	r1, [r7, #3]
 8007ef0:	f7f9 fb1f 	bl	8001532 <HAL_PCD_EP_Open>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 f928 	bl	8008150 <USBD_Get_USB_Status>
 8007f00:	4603      	mov	r3, r0
 8007f02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	460b      	mov	r3, r1
 8007f18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f28:	78fa      	ldrb	r2, [r7, #3]
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7f9 fb66 	bl	80015fe <HAL_PCD_EP_Close>
 8007f32:	4603      	mov	r3, r0
 8007f34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 f909 	bl	8008150 <USBD_Get_USB_Status>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f66:	78fa      	ldrb	r2, [r7, #3]
 8007f68:	4611      	mov	r1, r2
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7f9 fc26 	bl	80017bc <HAL_PCD_EP_SetStall>
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 f8ea 	bl	8008150 <USBD_Get_USB_Status>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	460b      	mov	r3, r1
 8007f94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fa4:	78fa      	ldrb	r2, [r7, #3]
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7f9 fc67 	bl	800187c <HAL_PCD_EP_ClrStall>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 f8cb 	bl	8008150 <USBD_Get_USB_Status>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	da0c      	bge.n	8007ffe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fea:	68f9      	ldr	r1, [r7, #12]
 8007fec:	1c5a      	adds	r2, r3, #1
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	00db      	lsls	r3, r3, #3
 8007ff6:	440b      	add	r3, r1
 8007ff8:	3302      	adds	r3, #2
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	e00b      	b.n	8008016 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008004:	68f9      	ldr	r1, [r7, #12]
 8008006:	4613      	mov	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	440b      	add	r3, r1
 8008010:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008014:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008016:	4618      	mov	r0, r3
 8008018:	3714      	adds	r7, #20
 800801a:	46bd      	mov	sp, r7
 800801c:	bc80      	pop	{r7}
 800801e:	4770      	bx	lr

08008020 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800803a:	78fa      	ldrb	r2, [r7, #3]
 800803c:	4611      	mov	r1, r2
 800803e:	4618      	mov	r0, r3
 8008040:	f7f9 fa52 	bl	80014e8 <HAL_PCD_SetAddress>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 f880 	bl	8008150 <USBD_Get_USB_Status>
 8008050:	4603      	mov	r3, r0
 8008052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008054:	7bbb      	ldrb	r3, [r7, #14]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b086      	sub	sp, #24
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	461a      	mov	r2, r3
 800806a:	460b      	mov	r3, r1
 800806c:	72fb      	strb	r3, [r7, #11]
 800806e:	4613      	mov	r3, r2
 8008070:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008080:	893b      	ldrh	r3, [r7, #8]
 8008082:	7af9      	ldrb	r1, [r7, #11]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	f7f9 fb56 	bl	8001736 <HAL_PCD_EP_Transmit>
 800808a:	4603      	mov	r3, r0
 800808c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	4618      	mov	r0, r3
 8008092:	f000 f85d 	bl	8008150 <USBD_Get_USB_Status>
 8008096:	4603      	mov	r3, r0
 8008098:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800809a:	7dbb      	ldrb	r3, [r7, #22]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	607a      	str	r2, [r7, #4]
 80080ae:	461a      	mov	r2, r3
 80080b0:	460b      	mov	r3, r1
 80080b2:	72fb      	strb	r3, [r7, #11]
 80080b4:	4613      	mov	r3, r2
 80080b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080c6:	893b      	ldrh	r3, [r7, #8]
 80080c8:	7af9      	ldrb	r1, [r7, #11]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	f7f9 fadf 	bl	800168e <HAL_PCD_EP_Receive>
 80080d0:	4603      	mov	r3, r0
 80080d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f83a 	bl	8008150 <USBD_Get_USB_Status>
 80080dc:	4603      	mov	r3, r0
 80080de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080fc:	78fa      	ldrb	r2, [r7, #3]
 80080fe:	4611      	mov	r1, r2
 8008100:	4618      	mov	r0, r3
 8008102:	f7f9 fb01 	bl	8001708 <HAL_PCD_EP_GetRxCount>
 8008106:	4603      	mov	r3, r0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008118:	4b02      	ldr	r3, [pc, #8]	; (8008124 <USBD_static_malloc+0x14>)
}
 800811a:	4618      	mov	r0, r3
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	bc80      	pop	{r7}
 8008122:	4770      	bx	lr
 8008124:	20000248 	.word	0x20000248

08008128 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]

}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	bc80      	pop	{r7}
 8008138:	4770      	bx	lr

0800813a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	460b      	mov	r3, r1
 8008144:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008146:	bf00      	nop
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	bc80      	pop	{r7}
 800814e:	4770      	bx	lr

08008150 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	4603      	mov	r3, r0
 8008158:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800815e:	79fb      	ldrb	r3, [r7, #7]
 8008160:	2b03      	cmp	r3, #3
 8008162:	d817      	bhi.n	8008194 <USBD_Get_USB_Status+0x44>
 8008164:	a201      	add	r2, pc, #4	; (adr r2, 800816c <USBD_Get_USB_Status+0x1c>)
 8008166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816a:	bf00      	nop
 800816c:	0800817d 	.word	0x0800817d
 8008170:	08008183 	.word	0x08008183
 8008174:	08008189 	.word	0x08008189
 8008178:	0800818f 	.word	0x0800818f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	73fb      	strb	r3, [r7, #15]
    break;
 8008180:	e00b      	b.n	800819a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008182:	2302      	movs	r3, #2
 8008184:	73fb      	strb	r3, [r7, #15]
    break;
 8008186:	e008      	b.n	800819a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008188:	2301      	movs	r3, #1
 800818a:	73fb      	strb	r3, [r7, #15]
    break;
 800818c:	e005      	b.n	800819a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800818e:	2302      	movs	r3, #2
 8008190:	73fb      	strb	r3, [r7, #15]
    break;
 8008192:	e002      	b.n	800819a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008194:	2302      	movs	r3, #2
 8008196:	73fb      	strb	r3, [r7, #15]
    break;
 8008198:	bf00      	nop
  }
  return usb_status;
 800819a:	7bfb      	ldrb	r3, [r7, #15]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop

080081a8 <__errno>:
 80081a8:	4b01      	ldr	r3, [pc, #4]	; (80081b0 <__errno+0x8>)
 80081aa:	6818      	ldr	r0, [r3, #0]
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	2000017c 	.word	0x2000017c

080081b4 <__libc_init_array>:
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	2600      	movs	r6, #0
 80081b8:	4d0c      	ldr	r5, [pc, #48]	; (80081ec <__libc_init_array+0x38>)
 80081ba:	4c0d      	ldr	r4, [pc, #52]	; (80081f0 <__libc_init_array+0x3c>)
 80081bc:	1b64      	subs	r4, r4, r5
 80081be:	10a4      	asrs	r4, r4, #2
 80081c0:	42a6      	cmp	r6, r4
 80081c2:	d109      	bne.n	80081d8 <__libc_init_array+0x24>
 80081c4:	f000 fe04 	bl	8008dd0 <_init>
 80081c8:	2600      	movs	r6, #0
 80081ca:	4d0a      	ldr	r5, [pc, #40]	; (80081f4 <__libc_init_array+0x40>)
 80081cc:	4c0a      	ldr	r4, [pc, #40]	; (80081f8 <__libc_init_array+0x44>)
 80081ce:	1b64      	subs	r4, r4, r5
 80081d0:	10a4      	asrs	r4, r4, #2
 80081d2:	42a6      	cmp	r6, r4
 80081d4:	d105      	bne.n	80081e2 <__libc_init_array+0x2e>
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081dc:	4798      	blx	r3
 80081de:	3601      	adds	r6, #1
 80081e0:	e7ee      	b.n	80081c0 <__libc_init_array+0xc>
 80081e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e6:	4798      	blx	r3
 80081e8:	3601      	adds	r6, #1
 80081ea:	e7f2      	b.n	80081d2 <__libc_init_array+0x1e>
 80081ec:	08009088 	.word	0x08009088
 80081f0:	08009088 	.word	0x08009088
 80081f4:	08009088 	.word	0x08009088
 80081f8:	0800908c 	.word	0x0800908c

080081fc <memcpy>:
 80081fc:	440a      	add	r2, r1
 80081fe:	4291      	cmp	r1, r2
 8008200:	f100 33ff 	add.w	r3, r0, #4294967295
 8008204:	d100      	bne.n	8008208 <memcpy+0xc>
 8008206:	4770      	bx	lr
 8008208:	b510      	push	{r4, lr}
 800820a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800820e:	4291      	cmp	r1, r2
 8008210:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008214:	d1f9      	bne.n	800820a <memcpy+0xe>
 8008216:	bd10      	pop	{r4, pc}

08008218 <memset>:
 8008218:	4603      	mov	r3, r0
 800821a:	4402      	add	r2, r0
 800821c:	4293      	cmp	r3, r2
 800821e:	d100      	bne.n	8008222 <memset+0xa>
 8008220:	4770      	bx	lr
 8008222:	f803 1b01 	strb.w	r1, [r3], #1
 8008226:	e7f9      	b.n	800821c <memset+0x4>

08008228 <siscanf>:
 8008228:	b40e      	push	{r1, r2, r3}
 800822a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800822e:	b530      	push	{r4, r5, lr}
 8008230:	b09c      	sub	sp, #112	; 0x70
 8008232:	ac1f      	add	r4, sp, #124	; 0x7c
 8008234:	f854 5b04 	ldr.w	r5, [r4], #4
 8008238:	f8ad 2014 	strh.w	r2, [sp, #20]
 800823c:	9002      	str	r0, [sp, #8]
 800823e:	9006      	str	r0, [sp, #24]
 8008240:	f7f7 ff84 	bl	800014c <strlen>
 8008244:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <siscanf+0x4c>)
 8008246:	9003      	str	r0, [sp, #12]
 8008248:	930b      	str	r3, [sp, #44]	; 0x2c
 800824a:	2300      	movs	r3, #0
 800824c:	930f      	str	r3, [sp, #60]	; 0x3c
 800824e:	9314      	str	r3, [sp, #80]	; 0x50
 8008250:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008254:	9007      	str	r0, [sp, #28]
 8008256:	4808      	ldr	r0, [pc, #32]	; (8008278 <siscanf+0x50>)
 8008258:	f8ad 3016 	strh.w	r3, [sp, #22]
 800825c:	462a      	mov	r2, r5
 800825e:	4623      	mov	r3, r4
 8008260:	a902      	add	r1, sp, #8
 8008262:	6800      	ldr	r0, [r0, #0]
 8008264:	9401      	str	r4, [sp, #4]
 8008266:	f000 f877 	bl	8008358 <__ssvfiscanf_r>
 800826a:	b01c      	add	sp, #112	; 0x70
 800826c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008270:	b003      	add	sp, #12
 8008272:	4770      	bx	lr
 8008274:	0800827d 	.word	0x0800827d
 8008278:	2000017c 	.word	0x2000017c

0800827c <__seofread>:
 800827c:	2000      	movs	r0, #0
 800827e:	4770      	bx	lr

08008280 <strncmp>:
 8008280:	b510      	push	{r4, lr}
 8008282:	b16a      	cbz	r2, 80082a0 <strncmp+0x20>
 8008284:	3901      	subs	r1, #1
 8008286:	1884      	adds	r4, r0, r2
 8008288:	f810 3b01 	ldrb.w	r3, [r0], #1
 800828c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008290:	4293      	cmp	r3, r2
 8008292:	d103      	bne.n	800829c <strncmp+0x1c>
 8008294:	42a0      	cmp	r0, r4
 8008296:	d001      	beq.n	800829c <strncmp+0x1c>
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1f5      	bne.n	8008288 <strncmp+0x8>
 800829c:	1a98      	subs	r0, r3, r2
 800829e:	bd10      	pop	{r4, pc}
 80082a0:	4610      	mov	r0, r2
 80082a2:	e7fc      	b.n	800829e <strncmp+0x1e>

080082a4 <_sungetc_r>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	1c4b      	adds	r3, r1, #1
 80082a8:	4614      	mov	r4, r2
 80082aa:	d103      	bne.n	80082b4 <_sungetc_r+0x10>
 80082ac:	f04f 35ff 	mov.w	r5, #4294967295
 80082b0:	4628      	mov	r0, r5
 80082b2:	bd38      	pop	{r3, r4, r5, pc}
 80082b4:	8993      	ldrh	r3, [r2, #12]
 80082b6:	b2cd      	uxtb	r5, r1
 80082b8:	f023 0320 	bic.w	r3, r3, #32
 80082bc:	8193      	strh	r3, [r2, #12]
 80082be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082c0:	6852      	ldr	r2, [r2, #4]
 80082c2:	b18b      	cbz	r3, 80082e8 <_sungetc_r+0x44>
 80082c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082c6:	4293      	cmp	r3, r2
 80082c8:	dd08      	ble.n	80082dc <_sungetc_r+0x38>
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	1e5a      	subs	r2, r3, #1
 80082ce:	6022      	str	r2, [r4, #0]
 80082d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80082d4:	6863      	ldr	r3, [r4, #4]
 80082d6:	3301      	adds	r3, #1
 80082d8:	6063      	str	r3, [r4, #4]
 80082da:	e7e9      	b.n	80082b0 <_sungetc_r+0xc>
 80082dc:	4621      	mov	r1, r4
 80082de:	f000 fc3f 	bl	8008b60 <__submore>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d0f1      	beq.n	80082ca <_sungetc_r+0x26>
 80082e6:	e7e1      	b.n	80082ac <_sungetc_r+0x8>
 80082e8:	6921      	ldr	r1, [r4, #16]
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	b151      	cbz	r1, 8008304 <_sungetc_r+0x60>
 80082ee:	4299      	cmp	r1, r3
 80082f0:	d208      	bcs.n	8008304 <_sungetc_r+0x60>
 80082f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80082f6:	42a9      	cmp	r1, r5
 80082f8:	d104      	bne.n	8008304 <_sungetc_r+0x60>
 80082fa:	3b01      	subs	r3, #1
 80082fc:	3201      	adds	r2, #1
 80082fe:	6023      	str	r3, [r4, #0]
 8008300:	6062      	str	r2, [r4, #4]
 8008302:	e7d5      	b.n	80082b0 <_sungetc_r+0xc>
 8008304:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800830c:	6363      	str	r3, [r4, #52]	; 0x34
 800830e:	2303      	movs	r3, #3
 8008310:	63a3      	str	r3, [r4, #56]	; 0x38
 8008312:	4623      	mov	r3, r4
 8008314:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	2301      	movs	r3, #1
 800831c:	e7dc      	b.n	80082d8 <_sungetc_r+0x34>

0800831e <__ssrefill_r>:
 800831e:	b510      	push	{r4, lr}
 8008320:	460c      	mov	r4, r1
 8008322:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008324:	b169      	cbz	r1, 8008342 <__ssrefill_r+0x24>
 8008326:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800832a:	4299      	cmp	r1, r3
 800832c:	d001      	beq.n	8008332 <__ssrefill_r+0x14>
 800832e:	f000 fc5f 	bl	8008bf0 <_free_r>
 8008332:	2000      	movs	r0, #0
 8008334:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008336:	6360      	str	r0, [r4, #52]	; 0x34
 8008338:	6063      	str	r3, [r4, #4]
 800833a:	b113      	cbz	r3, 8008342 <__ssrefill_r+0x24>
 800833c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800833e:	6023      	str	r3, [r4, #0]
 8008340:	bd10      	pop	{r4, pc}
 8008342:	6923      	ldr	r3, [r4, #16]
 8008344:	f04f 30ff 	mov.w	r0, #4294967295
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	2300      	movs	r3, #0
 800834c:	6063      	str	r3, [r4, #4]
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	f043 0320 	orr.w	r3, r3, #32
 8008354:	81a3      	strh	r3, [r4, #12]
 8008356:	e7f3      	b.n	8008340 <__ssrefill_r+0x22>

08008358 <__ssvfiscanf_r>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	460c      	mov	r4, r1
 800835e:	2100      	movs	r1, #0
 8008360:	4606      	mov	r6, r0
 8008362:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008366:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800836a:	49b3      	ldr	r1, [pc, #716]	; (8008638 <__ssvfiscanf_r+0x2e0>)
 800836c:	f10d 0804 	add.w	r8, sp, #4
 8008370:	91a0      	str	r1, [sp, #640]	; 0x280
 8008372:	49b2      	ldr	r1, [pc, #712]	; (800863c <__ssvfiscanf_r+0x2e4>)
 8008374:	4fb2      	ldr	r7, [pc, #712]	; (8008640 <__ssvfiscanf_r+0x2e8>)
 8008376:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8008644 <__ssvfiscanf_r+0x2ec>
 800837a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800837e:	91a1      	str	r1, [sp, #644]	; 0x284
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	f892 a000 	ldrb.w	sl, [r2]
 8008386:	f1ba 0f00 	cmp.w	sl, #0
 800838a:	f000 8153 	beq.w	8008634 <__ssvfiscanf_r+0x2dc>
 800838e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8008392:	1c55      	adds	r5, r2, #1
 8008394:	f013 0308 	ands.w	r3, r3, #8
 8008398:	d019      	beq.n	80083ce <__ssvfiscanf_r+0x76>
 800839a:	6863      	ldr	r3, [r4, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	dd0f      	ble.n	80083c0 <__ssvfiscanf_r+0x68>
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	781a      	ldrb	r2, [r3, #0]
 80083a4:	5cba      	ldrb	r2, [r7, r2]
 80083a6:	0712      	lsls	r2, r2, #28
 80083a8:	d401      	bmi.n	80083ae <__ssvfiscanf_r+0x56>
 80083aa:	462a      	mov	r2, r5
 80083ac:	e7e9      	b.n	8008382 <__ssvfiscanf_r+0x2a>
 80083ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80083b0:	3301      	adds	r3, #1
 80083b2:	3201      	adds	r2, #1
 80083b4:	9245      	str	r2, [sp, #276]	; 0x114
 80083b6:	6862      	ldr	r2, [r4, #4]
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	3a01      	subs	r2, #1
 80083bc:	6062      	str	r2, [r4, #4]
 80083be:	e7ec      	b.n	800839a <__ssvfiscanf_r+0x42>
 80083c0:	4621      	mov	r1, r4
 80083c2:	4630      	mov	r0, r6
 80083c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80083c6:	4798      	blx	r3
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d0e9      	beq.n	80083a0 <__ssvfiscanf_r+0x48>
 80083cc:	e7ed      	b.n	80083aa <__ssvfiscanf_r+0x52>
 80083ce:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80083d2:	f040 8086 	bne.w	80084e2 <__ssvfiscanf_r+0x18a>
 80083d6:	9341      	str	r3, [sp, #260]	; 0x104
 80083d8:	9343      	str	r3, [sp, #268]	; 0x10c
 80083da:	7853      	ldrb	r3, [r2, #1]
 80083dc:	2b2a      	cmp	r3, #42	; 0x2a
 80083de:	bf04      	itt	eq
 80083e0:	2310      	moveq	r3, #16
 80083e2:	1c95      	addeq	r5, r2, #2
 80083e4:	f04f 020a 	mov.w	r2, #10
 80083e8:	bf08      	it	eq
 80083ea:	9341      	streq	r3, [sp, #260]	; 0x104
 80083ec:	46ab      	mov	fp, r5
 80083ee:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80083f2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80083f6:	2b09      	cmp	r3, #9
 80083f8:	d91d      	bls.n	8008436 <__ssvfiscanf_r+0xde>
 80083fa:	2203      	movs	r2, #3
 80083fc:	4891      	ldr	r0, [pc, #580]	; (8008644 <__ssvfiscanf_r+0x2ec>)
 80083fe:	f000 fbe9 	bl	8008bd4 <memchr>
 8008402:	b140      	cbz	r0, 8008416 <__ssvfiscanf_r+0xbe>
 8008404:	2301      	movs	r3, #1
 8008406:	465d      	mov	r5, fp
 8008408:	eba0 0009 	sub.w	r0, r0, r9
 800840c:	fa03 f000 	lsl.w	r0, r3, r0
 8008410:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008412:	4318      	orrs	r0, r3
 8008414:	9041      	str	r0, [sp, #260]	; 0x104
 8008416:	f815 3b01 	ldrb.w	r3, [r5], #1
 800841a:	2b78      	cmp	r3, #120	; 0x78
 800841c:	d806      	bhi.n	800842c <__ssvfiscanf_r+0xd4>
 800841e:	2b57      	cmp	r3, #87	; 0x57
 8008420:	d810      	bhi.n	8008444 <__ssvfiscanf_r+0xec>
 8008422:	2b25      	cmp	r3, #37	; 0x25
 8008424:	d05d      	beq.n	80084e2 <__ssvfiscanf_r+0x18a>
 8008426:	d857      	bhi.n	80084d8 <__ssvfiscanf_r+0x180>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d075      	beq.n	8008518 <__ssvfiscanf_r+0x1c0>
 800842c:	2303      	movs	r3, #3
 800842e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008430:	230a      	movs	r3, #10
 8008432:	9342      	str	r3, [sp, #264]	; 0x108
 8008434:	e082      	b.n	800853c <__ssvfiscanf_r+0x1e4>
 8008436:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008438:	465d      	mov	r5, fp
 800843a:	fb02 1303 	mla	r3, r2, r3, r1
 800843e:	3b30      	subs	r3, #48	; 0x30
 8008440:	9343      	str	r3, [sp, #268]	; 0x10c
 8008442:	e7d3      	b.n	80083ec <__ssvfiscanf_r+0x94>
 8008444:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008448:	2a20      	cmp	r2, #32
 800844a:	d8ef      	bhi.n	800842c <__ssvfiscanf_r+0xd4>
 800844c:	a101      	add	r1, pc, #4	; (adr r1, 8008454 <__ssvfiscanf_r+0xfc>)
 800844e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008452:	bf00      	nop
 8008454:	08008527 	.word	0x08008527
 8008458:	0800842d 	.word	0x0800842d
 800845c:	0800842d 	.word	0x0800842d
 8008460:	08008585 	.word	0x08008585
 8008464:	0800842d 	.word	0x0800842d
 8008468:	0800842d 	.word	0x0800842d
 800846c:	0800842d 	.word	0x0800842d
 8008470:	0800842d 	.word	0x0800842d
 8008474:	0800842d 	.word	0x0800842d
 8008478:	0800842d 	.word	0x0800842d
 800847c:	0800842d 	.word	0x0800842d
 8008480:	0800859b 	.word	0x0800859b
 8008484:	08008571 	.word	0x08008571
 8008488:	080084df 	.word	0x080084df
 800848c:	080084df 	.word	0x080084df
 8008490:	080084df 	.word	0x080084df
 8008494:	0800842d 	.word	0x0800842d
 8008498:	08008575 	.word	0x08008575
 800849c:	0800842d 	.word	0x0800842d
 80084a0:	0800842d 	.word	0x0800842d
 80084a4:	0800842d 	.word	0x0800842d
 80084a8:	0800842d 	.word	0x0800842d
 80084ac:	080085ab 	.word	0x080085ab
 80084b0:	0800857d 	.word	0x0800857d
 80084b4:	0800851f 	.word	0x0800851f
 80084b8:	0800842d 	.word	0x0800842d
 80084bc:	0800842d 	.word	0x0800842d
 80084c0:	080085a7 	.word	0x080085a7
 80084c4:	0800842d 	.word	0x0800842d
 80084c8:	08008571 	.word	0x08008571
 80084cc:	0800842d 	.word	0x0800842d
 80084d0:	0800842d 	.word	0x0800842d
 80084d4:	08008527 	.word	0x08008527
 80084d8:	3b45      	subs	r3, #69	; 0x45
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d8a6      	bhi.n	800842c <__ssvfiscanf_r+0xd4>
 80084de:	2305      	movs	r3, #5
 80084e0:	e02b      	b.n	800853a <__ssvfiscanf_r+0x1e2>
 80084e2:	6863      	ldr	r3, [r4, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	dd0d      	ble.n	8008504 <__ssvfiscanf_r+0x1ac>
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	781a      	ldrb	r2, [r3, #0]
 80084ec:	4552      	cmp	r2, sl
 80084ee:	f040 80a1 	bne.w	8008634 <__ssvfiscanf_r+0x2dc>
 80084f2:	3301      	adds	r3, #1
 80084f4:	6862      	ldr	r2, [r4, #4]
 80084f6:	6023      	str	r3, [r4, #0]
 80084f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80084fa:	3a01      	subs	r2, #1
 80084fc:	3301      	adds	r3, #1
 80084fe:	6062      	str	r2, [r4, #4]
 8008500:	9345      	str	r3, [sp, #276]	; 0x114
 8008502:	e752      	b.n	80083aa <__ssvfiscanf_r+0x52>
 8008504:	4621      	mov	r1, r4
 8008506:	4630      	mov	r0, r6
 8008508:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800850a:	4798      	blx	r3
 800850c:	2800      	cmp	r0, #0
 800850e:	d0eb      	beq.n	80084e8 <__ssvfiscanf_r+0x190>
 8008510:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008512:	2800      	cmp	r0, #0
 8008514:	f040 8084 	bne.w	8008620 <__ssvfiscanf_r+0x2c8>
 8008518:	f04f 30ff 	mov.w	r0, #4294967295
 800851c:	e086      	b.n	800862c <__ssvfiscanf_r+0x2d4>
 800851e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008520:	f042 0220 	orr.w	r2, r2, #32
 8008524:	9241      	str	r2, [sp, #260]	; 0x104
 8008526:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800852c:	9241      	str	r2, [sp, #260]	; 0x104
 800852e:	2210      	movs	r2, #16
 8008530:	2b6f      	cmp	r3, #111	; 0x6f
 8008532:	bf34      	ite	cc
 8008534:	2303      	movcc	r3, #3
 8008536:	2304      	movcs	r3, #4
 8008538:	9242      	str	r2, [sp, #264]	; 0x108
 800853a:	9347      	str	r3, [sp, #284]	; 0x11c
 800853c:	6863      	ldr	r3, [r4, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	dd41      	ble.n	80085c6 <__ssvfiscanf_r+0x26e>
 8008542:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008544:	0659      	lsls	r1, r3, #25
 8008546:	d404      	bmi.n	8008552 <__ssvfiscanf_r+0x1fa>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	781a      	ldrb	r2, [r3, #0]
 800854c:	5cba      	ldrb	r2, [r7, r2]
 800854e:	0712      	lsls	r2, r2, #28
 8008550:	d440      	bmi.n	80085d4 <__ssvfiscanf_r+0x27c>
 8008552:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008554:	2b02      	cmp	r3, #2
 8008556:	dc4f      	bgt.n	80085f8 <__ssvfiscanf_r+0x2a0>
 8008558:	466b      	mov	r3, sp
 800855a:	4622      	mov	r2, r4
 800855c:	4630      	mov	r0, r6
 800855e:	a941      	add	r1, sp, #260	; 0x104
 8008560:	f000 f874 	bl	800864c <_scanf_chars>
 8008564:	2801      	cmp	r0, #1
 8008566:	d065      	beq.n	8008634 <__ssvfiscanf_r+0x2dc>
 8008568:	2802      	cmp	r0, #2
 800856a:	f47f af1e 	bne.w	80083aa <__ssvfiscanf_r+0x52>
 800856e:	e7cf      	b.n	8008510 <__ssvfiscanf_r+0x1b8>
 8008570:	220a      	movs	r2, #10
 8008572:	e7dd      	b.n	8008530 <__ssvfiscanf_r+0x1d8>
 8008574:	2300      	movs	r3, #0
 8008576:	9342      	str	r3, [sp, #264]	; 0x108
 8008578:	2303      	movs	r3, #3
 800857a:	e7de      	b.n	800853a <__ssvfiscanf_r+0x1e2>
 800857c:	2308      	movs	r3, #8
 800857e:	9342      	str	r3, [sp, #264]	; 0x108
 8008580:	2304      	movs	r3, #4
 8008582:	e7da      	b.n	800853a <__ssvfiscanf_r+0x1e2>
 8008584:	4629      	mov	r1, r5
 8008586:	4640      	mov	r0, r8
 8008588:	f000 f9aa 	bl	80088e0 <__sccl>
 800858c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800858e:	4605      	mov	r5, r0
 8008590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008594:	9341      	str	r3, [sp, #260]	; 0x104
 8008596:	2301      	movs	r3, #1
 8008598:	e7cf      	b.n	800853a <__ssvfiscanf_r+0x1e2>
 800859a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800859c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a0:	9341      	str	r3, [sp, #260]	; 0x104
 80085a2:	2300      	movs	r3, #0
 80085a4:	e7c9      	b.n	800853a <__ssvfiscanf_r+0x1e2>
 80085a6:	2302      	movs	r3, #2
 80085a8:	e7c7      	b.n	800853a <__ssvfiscanf_r+0x1e2>
 80085aa:	9841      	ldr	r0, [sp, #260]	; 0x104
 80085ac:	06c3      	lsls	r3, r0, #27
 80085ae:	f53f aefc 	bmi.w	80083aa <__ssvfiscanf_r+0x52>
 80085b2:	9b00      	ldr	r3, [sp, #0]
 80085b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80085b6:	1d19      	adds	r1, r3, #4
 80085b8:	9100      	str	r1, [sp, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	07c0      	lsls	r0, r0, #31
 80085be:	bf4c      	ite	mi
 80085c0:	801a      	strhmi	r2, [r3, #0]
 80085c2:	601a      	strpl	r2, [r3, #0]
 80085c4:	e6f1      	b.n	80083aa <__ssvfiscanf_r+0x52>
 80085c6:	4621      	mov	r1, r4
 80085c8:	4630      	mov	r0, r6
 80085ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80085cc:	4798      	blx	r3
 80085ce:	2800      	cmp	r0, #0
 80085d0:	d0b7      	beq.n	8008542 <__ssvfiscanf_r+0x1ea>
 80085d2:	e79d      	b.n	8008510 <__ssvfiscanf_r+0x1b8>
 80085d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80085d6:	3201      	adds	r2, #1
 80085d8:	9245      	str	r2, [sp, #276]	; 0x114
 80085da:	6862      	ldr	r2, [r4, #4]
 80085dc:	3a01      	subs	r2, #1
 80085de:	2a00      	cmp	r2, #0
 80085e0:	6062      	str	r2, [r4, #4]
 80085e2:	dd02      	ble.n	80085ea <__ssvfiscanf_r+0x292>
 80085e4:	3301      	adds	r3, #1
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	e7ae      	b.n	8008548 <__ssvfiscanf_r+0x1f0>
 80085ea:	4621      	mov	r1, r4
 80085ec:	4630      	mov	r0, r6
 80085ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80085f0:	4798      	blx	r3
 80085f2:	2800      	cmp	r0, #0
 80085f4:	d0a8      	beq.n	8008548 <__ssvfiscanf_r+0x1f0>
 80085f6:	e78b      	b.n	8008510 <__ssvfiscanf_r+0x1b8>
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	dc06      	bgt.n	800860a <__ssvfiscanf_r+0x2b2>
 80085fc:	466b      	mov	r3, sp
 80085fe:	4622      	mov	r2, r4
 8008600:	4630      	mov	r0, r6
 8008602:	a941      	add	r1, sp, #260	; 0x104
 8008604:	f000 f87a 	bl	80086fc <_scanf_i>
 8008608:	e7ac      	b.n	8008564 <__ssvfiscanf_r+0x20c>
 800860a:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <__ssvfiscanf_r+0x2f0>)
 800860c:	2b00      	cmp	r3, #0
 800860e:	f43f aecc 	beq.w	80083aa <__ssvfiscanf_r+0x52>
 8008612:	466b      	mov	r3, sp
 8008614:	4622      	mov	r2, r4
 8008616:	4630      	mov	r0, r6
 8008618:	a941      	add	r1, sp, #260	; 0x104
 800861a:	f3af 8000 	nop.w
 800861e:	e7a1      	b.n	8008564 <__ssvfiscanf_r+0x20c>
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008626:	bf18      	it	ne
 8008628:	f04f 30ff 	movne.w	r0, #4294967295
 800862c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008634:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008636:	e7f9      	b.n	800862c <__ssvfiscanf_r+0x2d4>
 8008638:	080082a5 	.word	0x080082a5
 800863c:	0800831f 	.word	0x0800831f
 8008640:	08008f28 	.word	0x08008f28
 8008644:	08008f08 	.word	0x08008f08
 8008648:	00000000 	.word	0x00000000

0800864c <_scanf_chars>:
 800864c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008650:	4615      	mov	r5, r2
 8008652:	688a      	ldr	r2, [r1, #8]
 8008654:	4680      	mov	r8, r0
 8008656:	460c      	mov	r4, r1
 8008658:	b932      	cbnz	r2, 8008668 <_scanf_chars+0x1c>
 800865a:	698a      	ldr	r2, [r1, #24]
 800865c:	2a00      	cmp	r2, #0
 800865e:	bf0c      	ite	eq
 8008660:	2201      	moveq	r2, #1
 8008662:	f04f 32ff 	movne.w	r2, #4294967295
 8008666:	608a      	str	r2, [r1, #8]
 8008668:	2700      	movs	r7, #0
 800866a:	6822      	ldr	r2, [r4, #0]
 800866c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80086f8 <_scanf_chars+0xac>
 8008670:	06d1      	lsls	r1, r2, #27
 8008672:	bf5f      	itttt	pl
 8008674:	681a      	ldrpl	r2, [r3, #0]
 8008676:	1d11      	addpl	r1, r2, #4
 8008678:	6019      	strpl	r1, [r3, #0]
 800867a:	6816      	ldrpl	r6, [r2, #0]
 800867c:	69a0      	ldr	r0, [r4, #24]
 800867e:	b188      	cbz	r0, 80086a4 <_scanf_chars+0x58>
 8008680:	2801      	cmp	r0, #1
 8008682:	d107      	bne.n	8008694 <_scanf_chars+0x48>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	781a      	ldrb	r2, [r3, #0]
 8008688:	6963      	ldr	r3, [r4, #20]
 800868a:	5c9b      	ldrb	r3, [r3, r2]
 800868c:	b953      	cbnz	r3, 80086a4 <_scanf_chars+0x58>
 800868e:	bb27      	cbnz	r7, 80086da <_scanf_chars+0x8e>
 8008690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008694:	2802      	cmp	r0, #2
 8008696:	d120      	bne.n	80086da <_scanf_chars+0x8e>
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	f813 3009 	ldrb.w	r3, [r3, r9]
 80086a0:	071b      	lsls	r3, r3, #28
 80086a2:	d41a      	bmi.n	80086da <_scanf_chars+0x8e>
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	3701      	adds	r7, #1
 80086a8:	06da      	lsls	r2, r3, #27
 80086aa:	bf5e      	ittt	pl
 80086ac:	682b      	ldrpl	r3, [r5, #0]
 80086ae:	781b      	ldrbpl	r3, [r3, #0]
 80086b0:	f806 3b01 	strbpl.w	r3, [r6], #1
 80086b4:	682a      	ldr	r2, [r5, #0]
 80086b6:	686b      	ldr	r3, [r5, #4]
 80086b8:	3201      	adds	r2, #1
 80086ba:	602a      	str	r2, [r5, #0]
 80086bc:	68a2      	ldr	r2, [r4, #8]
 80086be:	3b01      	subs	r3, #1
 80086c0:	3a01      	subs	r2, #1
 80086c2:	606b      	str	r3, [r5, #4]
 80086c4:	60a2      	str	r2, [r4, #8]
 80086c6:	b142      	cbz	r2, 80086da <_scanf_chars+0x8e>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	dcd7      	bgt.n	800867c <_scanf_chars+0x30>
 80086cc:	4629      	mov	r1, r5
 80086ce:	4640      	mov	r0, r8
 80086d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80086d4:	4798      	blx	r3
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d0d0      	beq.n	800867c <_scanf_chars+0x30>
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	f013 0310 	ands.w	r3, r3, #16
 80086e0:	d105      	bne.n	80086ee <_scanf_chars+0xa2>
 80086e2:	68e2      	ldr	r2, [r4, #12]
 80086e4:	3201      	adds	r2, #1
 80086e6:	60e2      	str	r2, [r4, #12]
 80086e8:	69a2      	ldr	r2, [r4, #24]
 80086ea:	b102      	cbz	r2, 80086ee <_scanf_chars+0xa2>
 80086ec:	7033      	strb	r3, [r6, #0]
 80086ee:	6923      	ldr	r3, [r4, #16]
 80086f0:	2000      	movs	r0, #0
 80086f2:	441f      	add	r7, r3
 80086f4:	6127      	str	r7, [r4, #16]
 80086f6:	e7cb      	b.n	8008690 <_scanf_chars+0x44>
 80086f8:	08008f28 	.word	0x08008f28

080086fc <_scanf_i>:
 80086fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	460c      	mov	r4, r1
 8008702:	4698      	mov	r8, r3
 8008704:	4b72      	ldr	r3, [pc, #456]	; (80088d0 <_scanf_i+0x1d4>)
 8008706:	b087      	sub	sp, #28
 8008708:	4682      	mov	sl, r0
 800870a:	4616      	mov	r6, r2
 800870c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008710:	ab03      	add	r3, sp, #12
 8008712:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008716:	4b6f      	ldr	r3, [pc, #444]	; (80088d4 <_scanf_i+0x1d8>)
 8008718:	69a1      	ldr	r1, [r4, #24]
 800871a:	4a6f      	ldr	r2, [pc, #444]	; (80088d8 <_scanf_i+0x1dc>)
 800871c:	4627      	mov	r7, r4
 800871e:	2903      	cmp	r1, #3
 8008720:	bf18      	it	ne
 8008722:	461a      	movne	r2, r3
 8008724:	68a3      	ldr	r3, [r4, #8]
 8008726:	9201      	str	r2, [sp, #4]
 8008728:	1e5a      	subs	r2, r3, #1
 800872a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800872e:	bf81      	itttt	hi
 8008730:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008734:	eb03 0905 	addhi.w	r9, r3, r5
 8008738:	f240 135d 	movwhi	r3, #349	; 0x15d
 800873c:	60a3      	strhi	r3, [r4, #8]
 800873e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008742:	bf98      	it	ls
 8008744:	f04f 0900 	movls.w	r9, #0
 8008748:	463d      	mov	r5, r7
 800874a:	f04f 0b00 	mov.w	fp, #0
 800874e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008752:	6023      	str	r3, [r4, #0]
 8008754:	6831      	ldr	r1, [r6, #0]
 8008756:	ab03      	add	r3, sp, #12
 8008758:	2202      	movs	r2, #2
 800875a:	7809      	ldrb	r1, [r1, #0]
 800875c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008760:	f000 fa38 	bl	8008bd4 <memchr>
 8008764:	b328      	cbz	r0, 80087b2 <_scanf_i+0xb6>
 8008766:	f1bb 0f01 	cmp.w	fp, #1
 800876a:	d159      	bne.n	8008820 <_scanf_i+0x124>
 800876c:	6862      	ldr	r2, [r4, #4]
 800876e:	b92a      	cbnz	r2, 800877c <_scanf_i+0x80>
 8008770:	2308      	movs	r3, #8
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	6063      	str	r3, [r4, #4]
 8008776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800877a:	6022      	str	r2, [r4, #0]
 800877c:	6822      	ldr	r2, [r4, #0]
 800877e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008782:	6022      	str	r2, [r4, #0]
 8008784:	68a2      	ldr	r2, [r4, #8]
 8008786:	1e51      	subs	r1, r2, #1
 8008788:	60a1      	str	r1, [r4, #8]
 800878a:	b192      	cbz	r2, 80087b2 <_scanf_i+0xb6>
 800878c:	6832      	ldr	r2, [r6, #0]
 800878e:	1c51      	adds	r1, r2, #1
 8008790:	6031      	str	r1, [r6, #0]
 8008792:	7812      	ldrb	r2, [r2, #0]
 8008794:	f805 2b01 	strb.w	r2, [r5], #1
 8008798:	6872      	ldr	r2, [r6, #4]
 800879a:	3a01      	subs	r2, #1
 800879c:	2a00      	cmp	r2, #0
 800879e:	6072      	str	r2, [r6, #4]
 80087a0:	dc07      	bgt.n	80087b2 <_scanf_i+0xb6>
 80087a2:	4631      	mov	r1, r6
 80087a4:	4650      	mov	r0, sl
 80087a6:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80087aa:	4790      	blx	r2
 80087ac:	2800      	cmp	r0, #0
 80087ae:	f040 8085 	bne.w	80088bc <_scanf_i+0x1c0>
 80087b2:	f10b 0b01 	add.w	fp, fp, #1
 80087b6:	f1bb 0f03 	cmp.w	fp, #3
 80087ba:	d1cb      	bne.n	8008754 <_scanf_i+0x58>
 80087bc:	6863      	ldr	r3, [r4, #4]
 80087be:	b90b      	cbnz	r3, 80087c4 <_scanf_i+0xc8>
 80087c0:	230a      	movs	r3, #10
 80087c2:	6063      	str	r3, [r4, #4]
 80087c4:	6863      	ldr	r3, [r4, #4]
 80087c6:	4945      	ldr	r1, [pc, #276]	; (80088dc <_scanf_i+0x1e0>)
 80087c8:	6960      	ldr	r0, [r4, #20]
 80087ca:	1ac9      	subs	r1, r1, r3
 80087cc:	f000 f888 	bl	80088e0 <__sccl>
 80087d0:	f04f 0b00 	mov.w	fp, #0
 80087d4:	68a3      	ldr	r3, [r4, #8]
 80087d6:	6822      	ldr	r2, [r4, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d03d      	beq.n	8008858 <_scanf_i+0x15c>
 80087dc:	6831      	ldr	r1, [r6, #0]
 80087de:	6960      	ldr	r0, [r4, #20]
 80087e0:	f891 c000 	ldrb.w	ip, [r1]
 80087e4:	f810 000c 	ldrb.w	r0, [r0, ip]
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d035      	beq.n	8008858 <_scanf_i+0x15c>
 80087ec:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80087f0:	d124      	bne.n	800883c <_scanf_i+0x140>
 80087f2:	0510      	lsls	r0, r2, #20
 80087f4:	d522      	bpl.n	800883c <_scanf_i+0x140>
 80087f6:	f10b 0b01 	add.w	fp, fp, #1
 80087fa:	f1b9 0f00 	cmp.w	r9, #0
 80087fe:	d003      	beq.n	8008808 <_scanf_i+0x10c>
 8008800:	3301      	adds	r3, #1
 8008802:	f109 39ff 	add.w	r9, r9, #4294967295
 8008806:	60a3      	str	r3, [r4, #8]
 8008808:	6873      	ldr	r3, [r6, #4]
 800880a:	3b01      	subs	r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	6073      	str	r3, [r6, #4]
 8008810:	dd1b      	ble.n	800884a <_scanf_i+0x14e>
 8008812:	6833      	ldr	r3, [r6, #0]
 8008814:	3301      	adds	r3, #1
 8008816:	6033      	str	r3, [r6, #0]
 8008818:	68a3      	ldr	r3, [r4, #8]
 800881a:	3b01      	subs	r3, #1
 800881c:	60a3      	str	r3, [r4, #8]
 800881e:	e7d9      	b.n	80087d4 <_scanf_i+0xd8>
 8008820:	f1bb 0f02 	cmp.w	fp, #2
 8008824:	d1ae      	bne.n	8008784 <_scanf_i+0x88>
 8008826:	6822      	ldr	r2, [r4, #0]
 8008828:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800882c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008830:	d1bf      	bne.n	80087b2 <_scanf_i+0xb6>
 8008832:	2310      	movs	r3, #16
 8008834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008838:	6063      	str	r3, [r4, #4]
 800883a:	e7a2      	b.n	8008782 <_scanf_i+0x86>
 800883c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008840:	6022      	str	r2, [r4, #0]
 8008842:	780b      	ldrb	r3, [r1, #0]
 8008844:	f805 3b01 	strb.w	r3, [r5], #1
 8008848:	e7de      	b.n	8008808 <_scanf_i+0x10c>
 800884a:	4631      	mov	r1, r6
 800884c:	4650      	mov	r0, sl
 800884e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008852:	4798      	blx	r3
 8008854:	2800      	cmp	r0, #0
 8008856:	d0df      	beq.n	8008818 <_scanf_i+0x11c>
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	05d9      	lsls	r1, r3, #23
 800885c:	d50d      	bpl.n	800887a <_scanf_i+0x17e>
 800885e:	42bd      	cmp	r5, r7
 8008860:	d909      	bls.n	8008876 <_scanf_i+0x17a>
 8008862:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008866:	4632      	mov	r2, r6
 8008868:	4650      	mov	r0, sl
 800886a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800886e:	f105 39ff 	add.w	r9, r5, #4294967295
 8008872:	4798      	blx	r3
 8008874:	464d      	mov	r5, r9
 8008876:	42bd      	cmp	r5, r7
 8008878:	d028      	beq.n	80088cc <_scanf_i+0x1d0>
 800887a:	6822      	ldr	r2, [r4, #0]
 800887c:	f012 0210 	ands.w	r2, r2, #16
 8008880:	d113      	bne.n	80088aa <_scanf_i+0x1ae>
 8008882:	702a      	strb	r2, [r5, #0]
 8008884:	4639      	mov	r1, r7
 8008886:	6863      	ldr	r3, [r4, #4]
 8008888:	4650      	mov	r0, sl
 800888a:	9e01      	ldr	r6, [sp, #4]
 800888c:	47b0      	blx	r6
 800888e:	f8d8 3000 	ldr.w	r3, [r8]
 8008892:	6821      	ldr	r1, [r4, #0]
 8008894:	1d1a      	adds	r2, r3, #4
 8008896:	f8c8 2000 	str.w	r2, [r8]
 800889a:	f011 0f20 	tst.w	r1, #32
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	d00f      	beq.n	80088c2 <_scanf_i+0x1c6>
 80088a2:	6018      	str	r0, [r3, #0]
 80088a4:	68e3      	ldr	r3, [r4, #12]
 80088a6:	3301      	adds	r3, #1
 80088a8:	60e3      	str	r3, [r4, #12]
 80088aa:	2000      	movs	r0, #0
 80088ac:	1bed      	subs	r5, r5, r7
 80088ae:	44ab      	add	fp, r5
 80088b0:	6925      	ldr	r5, [r4, #16]
 80088b2:	445d      	add	r5, fp
 80088b4:	6125      	str	r5, [r4, #16]
 80088b6:	b007      	add	sp, #28
 80088b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088bc:	f04f 0b00 	mov.w	fp, #0
 80088c0:	e7ca      	b.n	8008858 <_scanf_i+0x15c>
 80088c2:	07ca      	lsls	r2, r1, #31
 80088c4:	bf4c      	ite	mi
 80088c6:	8018      	strhmi	r0, [r3, #0]
 80088c8:	6018      	strpl	r0, [r3, #0]
 80088ca:	e7eb      	b.n	80088a4 <_scanf_i+0x1a8>
 80088cc:	2001      	movs	r0, #1
 80088ce:	e7f2      	b.n	80088b6 <_scanf_i+0x1ba>
 80088d0:	08008ee4 	.word	0x08008ee4
 80088d4:	08008b5d 	.word	0x08008b5d
 80088d8:	08008a61 	.word	0x08008a61
 80088dc:	08008f25 	.word	0x08008f25

080088e0 <__sccl>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	780b      	ldrb	r3, [r1, #0]
 80088e4:	4604      	mov	r4, r0
 80088e6:	2b5e      	cmp	r3, #94	; 0x5e
 80088e8:	bf13      	iteet	ne
 80088ea:	2200      	movne	r2, #0
 80088ec:	2201      	moveq	r2, #1
 80088ee:	784b      	ldrbeq	r3, [r1, #1]
 80088f0:	1c48      	addne	r0, r1, #1
 80088f2:	bf08      	it	eq
 80088f4:	1c88      	addeq	r0, r1, #2
 80088f6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80088fa:	1e61      	subs	r1, r4, #1
 80088fc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008900:	42a9      	cmp	r1, r5
 8008902:	d1fb      	bne.n	80088fc <__sccl+0x1c>
 8008904:	b90b      	cbnz	r3, 800890a <__sccl+0x2a>
 8008906:	3801      	subs	r0, #1
 8008908:	bd70      	pop	{r4, r5, r6, pc}
 800890a:	f082 0101 	eor.w	r1, r2, #1
 800890e:	54e1      	strb	r1, [r4, r3]
 8008910:	1c42      	adds	r2, r0, #1
 8008912:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8008916:	4610      	mov	r0, r2
 8008918:	2d2d      	cmp	r5, #45	; 0x2d
 800891a:	f102 36ff 	add.w	r6, r2, #4294967295
 800891e:	d006      	beq.n	800892e <__sccl+0x4e>
 8008920:	2d5d      	cmp	r5, #93	; 0x5d
 8008922:	d0f1      	beq.n	8008908 <__sccl+0x28>
 8008924:	b90d      	cbnz	r5, 800892a <__sccl+0x4a>
 8008926:	4630      	mov	r0, r6
 8008928:	e7ee      	b.n	8008908 <__sccl+0x28>
 800892a:	462b      	mov	r3, r5
 800892c:	e7ef      	b.n	800890e <__sccl+0x2e>
 800892e:	7816      	ldrb	r6, [r2, #0]
 8008930:	2e5d      	cmp	r6, #93	; 0x5d
 8008932:	d0fa      	beq.n	800892a <__sccl+0x4a>
 8008934:	42b3      	cmp	r3, r6
 8008936:	dcf8      	bgt.n	800892a <__sccl+0x4a>
 8008938:	4618      	mov	r0, r3
 800893a:	3001      	adds	r0, #1
 800893c:	4286      	cmp	r6, r0
 800893e:	5421      	strb	r1, [r4, r0]
 8008940:	dcfb      	bgt.n	800893a <__sccl+0x5a>
 8008942:	43d8      	mvns	r0, r3
 8008944:	4430      	add	r0, r6
 8008946:	42b3      	cmp	r3, r6
 8008948:	bfa8      	it	ge
 800894a:	2000      	movge	r0, #0
 800894c:	1c5d      	adds	r5, r3, #1
 800894e:	182b      	adds	r3, r5, r0
 8008950:	3202      	adds	r2, #2
 8008952:	e7de      	b.n	8008912 <__sccl+0x32>

08008954 <_strtol_l.isra.0>:
 8008954:	2b01      	cmp	r3, #1
 8008956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800895a:	4686      	mov	lr, r0
 800895c:	d001      	beq.n	8008962 <_strtol_l.isra.0+0xe>
 800895e:	2b24      	cmp	r3, #36	; 0x24
 8008960:	d906      	bls.n	8008970 <_strtol_l.isra.0+0x1c>
 8008962:	f7ff fc21 	bl	80081a8 <__errno>
 8008966:	2316      	movs	r3, #22
 8008968:	6003      	str	r3, [r0, #0]
 800896a:	2000      	movs	r0, #0
 800896c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008970:	468c      	mov	ip, r1
 8008972:	4e3a      	ldr	r6, [pc, #232]	; (8008a5c <_strtol_l.isra.0+0x108>)
 8008974:	4660      	mov	r0, ip
 8008976:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800897a:	5da5      	ldrb	r5, [r4, r6]
 800897c:	f015 0508 	ands.w	r5, r5, #8
 8008980:	d1f8      	bne.n	8008974 <_strtol_l.isra.0+0x20>
 8008982:	2c2d      	cmp	r4, #45	; 0x2d
 8008984:	d133      	bne.n	80089ee <_strtol_l.isra.0+0x9a>
 8008986:	f04f 0801 	mov.w	r8, #1
 800898a:	f89c 4000 	ldrb.w	r4, [ip]
 800898e:	f100 0c02 	add.w	ip, r0, #2
 8008992:	2b00      	cmp	r3, #0
 8008994:	d05d      	beq.n	8008a52 <_strtol_l.isra.0+0xfe>
 8008996:	2b10      	cmp	r3, #16
 8008998:	d10c      	bne.n	80089b4 <_strtol_l.isra.0+0x60>
 800899a:	2c30      	cmp	r4, #48	; 0x30
 800899c:	d10a      	bne.n	80089b4 <_strtol_l.isra.0+0x60>
 800899e:	f89c 0000 	ldrb.w	r0, [ip]
 80089a2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80089a6:	2858      	cmp	r0, #88	; 0x58
 80089a8:	d14e      	bne.n	8008a48 <_strtol_l.isra.0+0xf4>
 80089aa:	2310      	movs	r3, #16
 80089ac:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80089b0:	f10c 0c02 	add.w	ip, ip, #2
 80089b4:	2500      	movs	r5, #0
 80089b6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80089ba:	3f01      	subs	r7, #1
 80089bc:	fbb7 f9f3 	udiv	r9, r7, r3
 80089c0:	4628      	mov	r0, r5
 80089c2:	fb03 7a19 	mls	sl, r3, r9, r7
 80089c6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80089ca:	2e09      	cmp	r6, #9
 80089cc:	d818      	bhi.n	8008a00 <_strtol_l.isra.0+0xac>
 80089ce:	4634      	mov	r4, r6
 80089d0:	42a3      	cmp	r3, r4
 80089d2:	dd24      	ble.n	8008a1e <_strtol_l.isra.0+0xca>
 80089d4:	2d00      	cmp	r5, #0
 80089d6:	db1f      	blt.n	8008a18 <_strtol_l.isra.0+0xc4>
 80089d8:	4581      	cmp	r9, r0
 80089da:	d31d      	bcc.n	8008a18 <_strtol_l.isra.0+0xc4>
 80089dc:	d101      	bne.n	80089e2 <_strtol_l.isra.0+0x8e>
 80089de:	45a2      	cmp	sl, r4
 80089e0:	db1a      	blt.n	8008a18 <_strtol_l.isra.0+0xc4>
 80089e2:	2501      	movs	r5, #1
 80089e4:	fb00 4003 	mla	r0, r0, r3, r4
 80089e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80089ec:	e7eb      	b.n	80089c6 <_strtol_l.isra.0+0x72>
 80089ee:	2c2b      	cmp	r4, #43	; 0x2b
 80089f0:	bf08      	it	eq
 80089f2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80089f6:	46a8      	mov	r8, r5
 80089f8:	bf08      	it	eq
 80089fa:	f100 0c02 	addeq.w	ip, r0, #2
 80089fe:	e7c8      	b.n	8008992 <_strtol_l.isra.0+0x3e>
 8008a00:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008a04:	2e19      	cmp	r6, #25
 8008a06:	d801      	bhi.n	8008a0c <_strtol_l.isra.0+0xb8>
 8008a08:	3c37      	subs	r4, #55	; 0x37
 8008a0a:	e7e1      	b.n	80089d0 <_strtol_l.isra.0+0x7c>
 8008a0c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008a10:	2e19      	cmp	r6, #25
 8008a12:	d804      	bhi.n	8008a1e <_strtol_l.isra.0+0xca>
 8008a14:	3c57      	subs	r4, #87	; 0x57
 8008a16:	e7db      	b.n	80089d0 <_strtol_l.isra.0+0x7c>
 8008a18:	f04f 35ff 	mov.w	r5, #4294967295
 8008a1c:	e7e4      	b.n	80089e8 <_strtol_l.isra.0+0x94>
 8008a1e:	2d00      	cmp	r5, #0
 8008a20:	da08      	bge.n	8008a34 <_strtol_l.isra.0+0xe0>
 8008a22:	2322      	movs	r3, #34	; 0x22
 8008a24:	4638      	mov	r0, r7
 8008a26:	f8ce 3000 	str.w	r3, [lr]
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	d09e      	beq.n	800896c <_strtol_l.isra.0+0x18>
 8008a2e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008a32:	e007      	b.n	8008a44 <_strtol_l.isra.0+0xf0>
 8008a34:	f1b8 0f00 	cmp.w	r8, #0
 8008a38:	d000      	beq.n	8008a3c <_strtol_l.isra.0+0xe8>
 8008a3a:	4240      	negs	r0, r0
 8008a3c:	2a00      	cmp	r2, #0
 8008a3e:	d095      	beq.n	800896c <_strtol_l.isra.0+0x18>
 8008a40:	2d00      	cmp	r5, #0
 8008a42:	d1f4      	bne.n	8008a2e <_strtol_l.isra.0+0xda>
 8008a44:	6011      	str	r1, [r2, #0]
 8008a46:	e791      	b.n	800896c <_strtol_l.isra.0+0x18>
 8008a48:	2430      	movs	r4, #48	; 0x30
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1b2      	bne.n	80089b4 <_strtol_l.isra.0+0x60>
 8008a4e:	2308      	movs	r3, #8
 8008a50:	e7b0      	b.n	80089b4 <_strtol_l.isra.0+0x60>
 8008a52:	2c30      	cmp	r4, #48	; 0x30
 8008a54:	d0a3      	beq.n	800899e <_strtol_l.isra.0+0x4a>
 8008a56:	230a      	movs	r3, #10
 8008a58:	e7ac      	b.n	80089b4 <_strtol_l.isra.0+0x60>
 8008a5a:	bf00      	nop
 8008a5c:	08008f28 	.word	0x08008f28

08008a60 <_strtol_r>:
 8008a60:	f7ff bf78 	b.w	8008954 <_strtol_l.isra.0>

08008a64 <_strtoul_l.isra.0>:
 8008a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a68:	468c      	mov	ip, r1
 8008a6a:	4686      	mov	lr, r0
 8008a6c:	4e3a      	ldr	r6, [pc, #232]	; (8008b58 <_strtoul_l.isra.0+0xf4>)
 8008a6e:	4660      	mov	r0, ip
 8008a70:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008a74:	5da5      	ldrb	r5, [r4, r6]
 8008a76:	f015 0508 	ands.w	r5, r5, #8
 8008a7a:	d1f8      	bne.n	8008a6e <_strtoul_l.isra.0+0xa>
 8008a7c:	2c2d      	cmp	r4, #45	; 0x2d
 8008a7e:	d134      	bne.n	8008aea <_strtoul_l.isra.0+0x86>
 8008a80:	f04f 0801 	mov.w	r8, #1
 8008a84:	f89c 4000 	ldrb.w	r4, [ip]
 8008a88:	f100 0c02 	add.w	ip, r0, #2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d05e      	beq.n	8008b4e <_strtoul_l.isra.0+0xea>
 8008a90:	2b10      	cmp	r3, #16
 8008a92:	d10c      	bne.n	8008aae <_strtoul_l.isra.0+0x4a>
 8008a94:	2c30      	cmp	r4, #48	; 0x30
 8008a96:	d10a      	bne.n	8008aae <_strtoul_l.isra.0+0x4a>
 8008a98:	f89c 0000 	ldrb.w	r0, [ip]
 8008a9c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008aa0:	2858      	cmp	r0, #88	; 0x58
 8008aa2:	d14f      	bne.n	8008b44 <_strtoul_l.isra.0+0xe0>
 8008aa4:	2310      	movs	r3, #16
 8008aa6:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8008aaa:	f10c 0c02 	add.w	ip, ip, #2
 8008aae:	f04f 37ff 	mov.w	r7, #4294967295
 8008ab2:	fbb7 f7f3 	udiv	r7, r7, r3
 8008ab6:	2500      	movs	r5, #0
 8008ab8:	fb03 f907 	mul.w	r9, r3, r7
 8008abc:	4628      	mov	r0, r5
 8008abe:	ea6f 0909 	mvn.w	r9, r9
 8008ac2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8008ac6:	2e09      	cmp	r6, #9
 8008ac8:	d818      	bhi.n	8008afc <_strtoul_l.isra.0+0x98>
 8008aca:	4634      	mov	r4, r6
 8008acc:	42a3      	cmp	r3, r4
 8008ace:	dd24      	ble.n	8008b1a <_strtoul_l.isra.0+0xb6>
 8008ad0:	2d00      	cmp	r5, #0
 8008ad2:	db1f      	blt.n	8008b14 <_strtoul_l.isra.0+0xb0>
 8008ad4:	4287      	cmp	r7, r0
 8008ad6:	d31d      	bcc.n	8008b14 <_strtoul_l.isra.0+0xb0>
 8008ad8:	d101      	bne.n	8008ade <_strtoul_l.isra.0+0x7a>
 8008ada:	45a1      	cmp	r9, r4
 8008adc:	db1a      	blt.n	8008b14 <_strtoul_l.isra.0+0xb0>
 8008ade:	2501      	movs	r5, #1
 8008ae0:	fb00 4003 	mla	r0, r0, r3, r4
 8008ae4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008ae8:	e7eb      	b.n	8008ac2 <_strtoul_l.isra.0+0x5e>
 8008aea:	2c2b      	cmp	r4, #43	; 0x2b
 8008aec:	bf08      	it	eq
 8008aee:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008af2:	46a8      	mov	r8, r5
 8008af4:	bf08      	it	eq
 8008af6:	f100 0c02 	addeq.w	ip, r0, #2
 8008afa:	e7c7      	b.n	8008a8c <_strtoul_l.isra.0+0x28>
 8008afc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008b00:	2e19      	cmp	r6, #25
 8008b02:	d801      	bhi.n	8008b08 <_strtoul_l.isra.0+0xa4>
 8008b04:	3c37      	subs	r4, #55	; 0x37
 8008b06:	e7e1      	b.n	8008acc <_strtoul_l.isra.0+0x68>
 8008b08:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008b0c:	2e19      	cmp	r6, #25
 8008b0e:	d804      	bhi.n	8008b1a <_strtoul_l.isra.0+0xb6>
 8008b10:	3c57      	subs	r4, #87	; 0x57
 8008b12:	e7db      	b.n	8008acc <_strtoul_l.isra.0+0x68>
 8008b14:	f04f 35ff 	mov.w	r5, #4294967295
 8008b18:	e7e4      	b.n	8008ae4 <_strtoul_l.isra.0+0x80>
 8008b1a:	2d00      	cmp	r5, #0
 8008b1c:	da07      	bge.n	8008b2e <_strtoul_l.isra.0+0xca>
 8008b1e:	2322      	movs	r3, #34	; 0x22
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295
 8008b24:	f8ce 3000 	str.w	r3, [lr]
 8008b28:	b942      	cbnz	r2, 8008b3c <_strtoul_l.isra.0+0xd8>
 8008b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b2e:	f1b8 0f00 	cmp.w	r8, #0
 8008b32:	d000      	beq.n	8008b36 <_strtoul_l.isra.0+0xd2>
 8008b34:	4240      	negs	r0, r0
 8008b36:	2a00      	cmp	r2, #0
 8008b38:	d0f7      	beq.n	8008b2a <_strtoul_l.isra.0+0xc6>
 8008b3a:	b10d      	cbz	r5, 8008b40 <_strtoul_l.isra.0+0xdc>
 8008b3c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008b40:	6011      	str	r1, [r2, #0]
 8008b42:	e7f2      	b.n	8008b2a <_strtoul_l.isra.0+0xc6>
 8008b44:	2430      	movs	r4, #48	; 0x30
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1b1      	bne.n	8008aae <_strtoul_l.isra.0+0x4a>
 8008b4a:	2308      	movs	r3, #8
 8008b4c:	e7af      	b.n	8008aae <_strtoul_l.isra.0+0x4a>
 8008b4e:	2c30      	cmp	r4, #48	; 0x30
 8008b50:	d0a2      	beq.n	8008a98 <_strtoul_l.isra.0+0x34>
 8008b52:	230a      	movs	r3, #10
 8008b54:	e7ab      	b.n	8008aae <_strtoul_l.isra.0+0x4a>
 8008b56:	bf00      	nop
 8008b58:	08008f28 	.word	0x08008f28

08008b5c <_strtoul_r>:
 8008b5c:	f7ff bf82 	b.w	8008a64 <_strtoul_l.isra.0>

08008b60 <__submore>:
 8008b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b64:	460c      	mov	r4, r1
 8008b66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b6c:	4299      	cmp	r1, r3
 8008b6e:	d11b      	bne.n	8008ba8 <__submore+0x48>
 8008b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008b74:	f000 f888 	bl	8008c88 <_malloc_r>
 8008b78:	b918      	cbnz	r0, 8008b82 <__submore+0x22>
 8008b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b86:	63a3      	str	r3, [r4, #56]	; 0x38
 8008b88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8008b8e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008b92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008b96:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008b9a:	7043      	strb	r3, [r0, #1]
 8008b9c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008ba0:	7003      	strb	r3, [r0, #0]
 8008ba2:	6020      	str	r0, [r4, #0]
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	e7ea      	b.n	8008b7e <__submore+0x1e>
 8008ba8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008baa:	0077      	lsls	r7, r6, #1
 8008bac:	463a      	mov	r2, r7
 8008bae:	f000 f8c5 	bl	8008d3c <_realloc_r>
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d0e0      	beq.n	8008b7a <__submore+0x1a>
 8008bb8:	eb00 0806 	add.w	r8, r0, r6
 8008bbc:	4601      	mov	r1, r0
 8008bbe:	4632      	mov	r2, r6
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	f7ff fb1b 	bl	80081fc <memcpy>
 8008bc6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008bca:	f8c4 8000 	str.w	r8, [r4]
 8008bce:	e7e9      	b.n	8008ba4 <__submore+0x44>

08008bd0 <__retarget_lock_acquire_recursive>:
 8008bd0:	4770      	bx	lr

08008bd2 <__retarget_lock_release_recursive>:
 8008bd2:	4770      	bx	lr

08008bd4 <memchr>:
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	b510      	push	{r4, lr}
 8008bd8:	b2c9      	uxtb	r1, r1
 8008bda:	4402      	add	r2, r0
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	4618      	mov	r0, r3
 8008be0:	d101      	bne.n	8008be6 <memchr+0x12>
 8008be2:	2000      	movs	r0, #0
 8008be4:	e003      	b.n	8008bee <memchr+0x1a>
 8008be6:	7804      	ldrb	r4, [r0, #0]
 8008be8:	3301      	adds	r3, #1
 8008bea:	428c      	cmp	r4, r1
 8008bec:	d1f6      	bne.n	8008bdc <memchr+0x8>
 8008bee:	bd10      	pop	{r4, pc}

08008bf0 <_free_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	2900      	cmp	r1, #0
 8008bf6:	d043      	beq.n	8008c80 <_free_r+0x90>
 8008bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bfc:	1f0c      	subs	r4, r1, #4
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	bfb8      	it	lt
 8008c02:	18e4      	addlt	r4, r4, r3
 8008c04:	f000 f8d0 	bl	8008da8 <__malloc_lock>
 8008c08:	4a1e      	ldr	r2, [pc, #120]	; (8008c84 <_free_r+0x94>)
 8008c0a:	6813      	ldr	r3, [r2, #0]
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	b933      	cbnz	r3, 8008c1e <_free_r+0x2e>
 8008c10:	6063      	str	r3, [r4, #4]
 8008c12:	6014      	str	r4, [r2, #0]
 8008c14:	4628      	mov	r0, r5
 8008c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c1a:	f000 b8cb 	b.w	8008db4 <__malloc_unlock>
 8008c1e:	42a3      	cmp	r3, r4
 8008c20:	d90a      	bls.n	8008c38 <_free_r+0x48>
 8008c22:	6821      	ldr	r1, [r4, #0]
 8008c24:	1862      	adds	r2, r4, r1
 8008c26:	4293      	cmp	r3, r2
 8008c28:	bf01      	itttt	eq
 8008c2a:	681a      	ldreq	r2, [r3, #0]
 8008c2c:	685b      	ldreq	r3, [r3, #4]
 8008c2e:	1852      	addeq	r2, r2, r1
 8008c30:	6022      	streq	r2, [r4, #0]
 8008c32:	6063      	str	r3, [r4, #4]
 8008c34:	6004      	str	r4, [r0, #0]
 8008c36:	e7ed      	b.n	8008c14 <_free_r+0x24>
 8008c38:	461a      	mov	r2, r3
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	b10b      	cbz	r3, 8008c42 <_free_r+0x52>
 8008c3e:	42a3      	cmp	r3, r4
 8008c40:	d9fa      	bls.n	8008c38 <_free_r+0x48>
 8008c42:	6811      	ldr	r1, [r2, #0]
 8008c44:	1850      	adds	r0, r2, r1
 8008c46:	42a0      	cmp	r0, r4
 8008c48:	d10b      	bne.n	8008c62 <_free_r+0x72>
 8008c4a:	6820      	ldr	r0, [r4, #0]
 8008c4c:	4401      	add	r1, r0
 8008c4e:	1850      	adds	r0, r2, r1
 8008c50:	4283      	cmp	r3, r0
 8008c52:	6011      	str	r1, [r2, #0]
 8008c54:	d1de      	bne.n	8008c14 <_free_r+0x24>
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	4401      	add	r1, r0
 8008c5c:	6011      	str	r1, [r2, #0]
 8008c5e:	6053      	str	r3, [r2, #4]
 8008c60:	e7d8      	b.n	8008c14 <_free_r+0x24>
 8008c62:	d902      	bls.n	8008c6a <_free_r+0x7a>
 8008c64:	230c      	movs	r3, #12
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	e7d4      	b.n	8008c14 <_free_r+0x24>
 8008c6a:	6820      	ldr	r0, [r4, #0]
 8008c6c:	1821      	adds	r1, r4, r0
 8008c6e:	428b      	cmp	r3, r1
 8008c70:	bf01      	itttt	eq
 8008c72:	6819      	ldreq	r1, [r3, #0]
 8008c74:	685b      	ldreq	r3, [r3, #4]
 8008c76:	1809      	addeq	r1, r1, r0
 8008c78:	6021      	streq	r1, [r4, #0]
 8008c7a:	6063      	str	r3, [r4, #4]
 8008c7c:	6054      	str	r4, [r2, #4]
 8008c7e:	e7c9      	b.n	8008c14 <_free_r+0x24>
 8008c80:	bd38      	pop	{r3, r4, r5, pc}
 8008c82:	bf00      	nop
 8008c84:	20000468 	.word	0x20000468

08008c88 <_malloc_r>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	1ccd      	adds	r5, r1, #3
 8008c8c:	f025 0503 	bic.w	r5, r5, #3
 8008c90:	3508      	adds	r5, #8
 8008c92:	2d0c      	cmp	r5, #12
 8008c94:	bf38      	it	cc
 8008c96:	250c      	movcc	r5, #12
 8008c98:	2d00      	cmp	r5, #0
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	db01      	blt.n	8008ca2 <_malloc_r+0x1a>
 8008c9e:	42a9      	cmp	r1, r5
 8008ca0:	d903      	bls.n	8008caa <_malloc_r+0x22>
 8008ca2:	230c      	movs	r3, #12
 8008ca4:	6033      	str	r3, [r6, #0]
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008caa:	f000 f87d 	bl	8008da8 <__malloc_lock>
 8008cae:	4921      	ldr	r1, [pc, #132]	; (8008d34 <_malloc_r+0xac>)
 8008cb0:	680a      	ldr	r2, [r1, #0]
 8008cb2:	4614      	mov	r4, r2
 8008cb4:	b99c      	cbnz	r4, 8008cde <_malloc_r+0x56>
 8008cb6:	4f20      	ldr	r7, [pc, #128]	; (8008d38 <_malloc_r+0xb0>)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	b923      	cbnz	r3, 8008cc6 <_malloc_r+0x3e>
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f000 f862 	bl	8008d88 <_sbrk_r>
 8008cc4:	6038      	str	r0, [r7, #0]
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f000 f85d 	bl	8008d88 <_sbrk_r>
 8008cce:	1c43      	adds	r3, r0, #1
 8008cd0:	d123      	bne.n	8008d1a <_malloc_r+0x92>
 8008cd2:	230c      	movs	r3, #12
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	6033      	str	r3, [r6, #0]
 8008cd8:	f000 f86c 	bl	8008db4 <__malloc_unlock>
 8008cdc:	e7e3      	b.n	8008ca6 <_malloc_r+0x1e>
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	1b5b      	subs	r3, r3, r5
 8008ce2:	d417      	bmi.n	8008d14 <_malloc_r+0x8c>
 8008ce4:	2b0b      	cmp	r3, #11
 8008ce6:	d903      	bls.n	8008cf0 <_malloc_r+0x68>
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	441c      	add	r4, r3
 8008cec:	6025      	str	r5, [r4, #0]
 8008cee:	e004      	b.n	8008cfa <_malloc_r+0x72>
 8008cf0:	6863      	ldr	r3, [r4, #4]
 8008cf2:	42a2      	cmp	r2, r4
 8008cf4:	bf0c      	ite	eq
 8008cf6:	600b      	streq	r3, [r1, #0]
 8008cf8:	6053      	strne	r3, [r2, #4]
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f000 f85a 	bl	8008db4 <__malloc_unlock>
 8008d00:	f104 000b 	add.w	r0, r4, #11
 8008d04:	1d23      	adds	r3, r4, #4
 8008d06:	f020 0007 	bic.w	r0, r0, #7
 8008d0a:	1ac2      	subs	r2, r0, r3
 8008d0c:	d0cc      	beq.n	8008ca8 <_malloc_r+0x20>
 8008d0e:	1a1b      	subs	r3, r3, r0
 8008d10:	50a3      	str	r3, [r4, r2]
 8008d12:	e7c9      	b.n	8008ca8 <_malloc_r+0x20>
 8008d14:	4622      	mov	r2, r4
 8008d16:	6864      	ldr	r4, [r4, #4]
 8008d18:	e7cc      	b.n	8008cb4 <_malloc_r+0x2c>
 8008d1a:	1cc4      	adds	r4, r0, #3
 8008d1c:	f024 0403 	bic.w	r4, r4, #3
 8008d20:	42a0      	cmp	r0, r4
 8008d22:	d0e3      	beq.n	8008cec <_malloc_r+0x64>
 8008d24:	1a21      	subs	r1, r4, r0
 8008d26:	4630      	mov	r0, r6
 8008d28:	f000 f82e 	bl	8008d88 <_sbrk_r>
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	d1dd      	bne.n	8008cec <_malloc_r+0x64>
 8008d30:	e7cf      	b.n	8008cd2 <_malloc_r+0x4a>
 8008d32:	bf00      	nop
 8008d34:	20000468 	.word	0x20000468
 8008d38:	2000046c 	.word	0x2000046c

08008d3c <_realloc_r>:
 8008d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3e:	4607      	mov	r7, r0
 8008d40:	4614      	mov	r4, r2
 8008d42:	460e      	mov	r6, r1
 8008d44:	b921      	cbnz	r1, 8008d50 <_realloc_r+0x14>
 8008d46:	4611      	mov	r1, r2
 8008d48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d4c:	f7ff bf9c 	b.w	8008c88 <_malloc_r>
 8008d50:	b922      	cbnz	r2, 8008d5c <_realloc_r+0x20>
 8008d52:	f7ff ff4d 	bl	8008bf0 <_free_r>
 8008d56:	4625      	mov	r5, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d5c:	f000 f830 	bl	8008dc0 <_malloc_usable_size_r>
 8008d60:	42a0      	cmp	r0, r4
 8008d62:	d20f      	bcs.n	8008d84 <_realloc_r+0x48>
 8008d64:	4621      	mov	r1, r4
 8008d66:	4638      	mov	r0, r7
 8008d68:	f7ff ff8e 	bl	8008c88 <_malloc_r>
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d0f2      	beq.n	8008d58 <_realloc_r+0x1c>
 8008d72:	4631      	mov	r1, r6
 8008d74:	4622      	mov	r2, r4
 8008d76:	f7ff fa41 	bl	80081fc <memcpy>
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f7ff ff37 	bl	8008bf0 <_free_r>
 8008d82:	e7e9      	b.n	8008d58 <_realloc_r+0x1c>
 8008d84:	4635      	mov	r5, r6
 8008d86:	e7e7      	b.n	8008d58 <_realloc_r+0x1c>

08008d88 <_sbrk_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	4d05      	ldr	r5, [pc, #20]	; (8008da4 <_sbrk_r+0x1c>)
 8008d8e:	4604      	mov	r4, r0
 8008d90:	4608      	mov	r0, r1
 8008d92:	602b      	str	r3, [r5, #0]
 8008d94:	f7f7 fd04 	bl	80007a0 <_sbrk>
 8008d98:	1c43      	adds	r3, r0, #1
 8008d9a:	d102      	bne.n	8008da2 <_sbrk_r+0x1a>
 8008d9c:	682b      	ldr	r3, [r5, #0]
 8008d9e:	b103      	cbz	r3, 8008da2 <_sbrk_r+0x1a>
 8008da0:	6023      	str	r3, [r4, #0]
 8008da2:	bd38      	pop	{r3, r4, r5, pc}
 8008da4:	20001488 	.word	0x20001488

08008da8 <__malloc_lock>:
 8008da8:	4801      	ldr	r0, [pc, #4]	; (8008db0 <__malloc_lock+0x8>)
 8008daa:	f7ff bf11 	b.w	8008bd0 <__retarget_lock_acquire_recursive>
 8008dae:	bf00      	nop
 8008db0:	20001490 	.word	0x20001490

08008db4 <__malloc_unlock>:
 8008db4:	4801      	ldr	r0, [pc, #4]	; (8008dbc <__malloc_unlock+0x8>)
 8008db6:	f7ff bf0c 	b.w	8008bd2 <__retarget_lock_release_recursive>
 8008dba:	bf00      	nop
 8008dbc:	20001490 	.word	0x20001490

08008dc0 <_malloc_usable_size_r>:
 8008dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc4:	1f18      	subs	r0, r3, #4
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	bfbc      	itt	lt
 8008dca:	580b      	ldrlt	r3, [r1, r0]
 8008dcc:	18c0      	addlt	r0, r0, r3
 8008dce:	4770      	bx	lr

08008dd0 <_init>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	bf00      	nop
 8008dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd6:	bc08      	pop	{r3}
 8008dd8:	469e      	mov	lr, r3
 8008dda:	4770      	bx	lr

08008ddc <_fini>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	bf00      	nop
 8008de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de2:	bc08      	pop	{r3}
 8008de4:	469e      	mov	lr, r3
 8008de6:	4770      	bx	lr
