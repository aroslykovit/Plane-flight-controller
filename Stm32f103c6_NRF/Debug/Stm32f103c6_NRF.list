
Stm32f103c6_NRF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003888  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b60  08003b60  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b60  08003b60  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b60  08003b60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000070  08003bd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003bd8  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e7f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab2  00000000  00000000  00029f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002b9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002c390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017318  00000000  00000000  0002ccb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096b3  00000000  00000000  00043fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008277f  00000000  00000000  0004d683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfe02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aec  00000000  00000000  000cfe58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003980 	.word	0x08003980

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003980 	.word	0x08003980

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin	== IRQ_Pin)
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d106      	bne.n	800017e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"IRQ\n", strlen("IRQ\n"), 1000);
 8000170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000174:	2204      	movs	r2, #4
 8000176:	4904      	ldr	r1, [pc, #16]	; (8000188 <HAL_GPIO_EXTI_Callback+0x28>)
 8000178:	4804      	ldr	r0, [pc, #16]	; (800018c <HAL_GPIO_EXTI_Callback+0x2c>)
 800017a:	f002 fe16 	bl	8002daa <HAL_UART_Transmit>
	}
}
 800017e:	bf00      	nop
 8000180:	3708      	adds	r7, #8
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	08003998 	.word	0x08003998
 800018c:	200000a4 	.word	0x200000a4

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b09e      	sub	sp, #120	; 0x78
 8000194:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f001 f8dd 	bl	8001354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 fa07 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 faab 	bl	80006f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001a2:	f000 fa49 	bl	8000638 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001a6:	f000 fa7d 	bl	80006a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DWT_Init(); // счётчик для микросекундных пауз
 80001aa:	f000 fb21 	bl	80007f0 <DWT_Init>

    const uint64_t pipe1 = 0xE8E8F0F0E2LL;
 80001ae:	a3f5      	add	r3, pc, #980	; (adr r3, 8000584 <main+0x3f4>)
 80001b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80001b4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

    uint8_t res = isChipConnected(); // проверяет подключён ли модуль к SPI
 80001b8:	f000 fd74 	bl	8000ca4 <isChipConnected>
 80001bc:	4603      	mov	r3, r0
 80001be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    char str[64] = {0,};
 80001c2:	2300      	movs	r3, #0
 80001c4:	627b      	str	r3, [r7, #36]	; 0x24
 80001c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ca:	223c      	movs	r2, #60	; 0x3c
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f002 ff8e 	bl	80030f0 <memset>
    snprintf(str, 64, "Connected: %s\n", 1 ? "OK" : "NOT OK");
 80001d4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80001d8:	4bd3      	ldr	r3, [pc, #844]	; (8000528 <main+0x398>)
 80001da:	4ad4      	ldr	r2, [pc, #848]	; (800052c <main+0x39c>)
 80001dc:	2140      	movs	r1, #64	; 0x40
 80001de:	f002 ff8f 	bl	8003100 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80001e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001e6:	4618      	mov	r0, r3
 80001e8:	f7ff ffb2 	bl	8000150 <strlen>
 80001ec:	4603      	mov	r3, r0
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80001f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f8:	48cd      	ldr	r0, [pc, #820]	; (8000530 <main+0x3a0>)
 80001fa:	f002 fdd6 	bl	8002daa <HAL_UART_Transmit>

    res = NRF_Init(); // инициализация
 80001fe:	f000 fcdb 	bl	8000bb8 <NRF_Init>
 8000202:	4603      	mov	r3, r0
 8000204:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    snprintf(str, 64, "Init: %s\n", res > 0 && res < 255 ? "OK" : "NOT OK");
 8000208:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800020c:	2b00      	cmp	r3, #0
 800020e:	d005      	beq.n	800021c <main+0x8c>
 8000210:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000214:	2bff      	cmp	r3, #255	; 0xff
 8000216:	d001      	beq.n	800021c <main+0x8c>
 8000218:	4bc3      	ldr	r3, [pc, #780]	; (8000528 <main+0x398>)
 800021a:	e000      	b.n	800021e <main+0x8e>
 800021c:	4bc5      	ldr	r3, [pc, #788]	; (8000534 <main+0x3a4>)
 800021e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000222:	4ac5      	ldr	r2, [pc, #788]	; (8000538 <main+0x3a8>)
 8000224:	2140      	movs	r1, #64	; 0x40
 8000226:	f002 ff6b 	bl	8003100 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800022a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800022e:	4618      	mov	r0, r3
 8000230:	f7ff ff8e 	bl	8000150 <strlen>
 8000234:	4603      	mov	r3, r0
 8000236:	b29a      	uxth	r2, r3
 8000238:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800023c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000240:	48bb      	ldr	r0, [pc, #748]	; (8000530 <main+0x3a0>)
 8000242:	f002 fdb2 	bl	8002daa <HAL_UART_Transmit>

    ////////////// SET ////////////////
    enableAckPayload();
 8000246:	f000 fe2d 	bl	8000ea4 <enableAckPayload>
    //setAutoAck(false);
    //setPayloadSize(6);
    setChannel(19);
 800024a:	2013      	movs	r0, #19
 800024c:	f000 fc94 	bl	8000b78 <setChannel>
    openWritingPipe(pipe1);
 8000250:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8000254:	f000 fde4 	bl	8000e20 <openWritingPipe>
    ///////////////////////////////////

    ////////////////////////// Вывод всяких статусов, для работы не нужно /////////////////////////////
    uint8_t status = get_status();
 8000258:	f000 fc86 	bl	8000b68 <get_status>
 800025c:	4603      	mov	r3, r0
 800025e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "get_status: 0x%02x\n", status);
 8000262:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000266:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800026a:	4ab4      	ldr	r2, [pc, #720]	; (800053c <main+0x3ac>)
 800026c:	2140      	movs	r1, #64	; 0x40
 800026e:	f002 ff47 	bl	8003100 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ff6a 	bl	8000150 <strlen>
 800027c:	4603      	mov	r3, r0
 800027e:	b29a      	uxth	r2, r3
 8000280:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000288:	48a9      	ldr	r0, [pc, #676]	; (8000530 <main+0x3a0>)
 800028a:	f002 fd8e 	bl	8002daa <HAL_UART_Transmit>

    status = getPALevel();
 800028e:	f000 fe5c 	bl	8000f4a <getPALevel>
 8000292:	4603      	mov	r3, r0
 8000294:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getPALevel: 0x%02x  ", status);
 8000298:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800029c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80002a0:	4aa7      	ldr	r2, [pc, #668]	; (8000540 <main+0x3b0>)
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	f002 ff2c 	bl	8003100 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80002a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff4f 	bl	8000150 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80002ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002be:	489c      	ldr	r0, [pc, #624]	; (8000530 <main+0x3a0>)
 80002c0:	f002 fd73 	bl	8002daa <HAL_UART_Transmit>

    if(status == 0x00)
 80002c4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d107      	bne.n	80002dc <main+0x14c>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_MIN\n", strlen("RF24_PA_MIN\n"), 1000);
 80002cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d0:	220c      	movs	r2, #12
 80002d2:	499c      	ldr	r1, [pc, #624]	; (8000544 <main+0x3b4>)
 80002d4:	4896      	ldr	r0, [pc, #600]	; (8000530 <main+0x3a0>)
 80002d6:	f002 fd68 	bl	8002daa <HAL_UART_Transmit>
 80002da:	e022      	b.n	8000322 <main+0x192>
    }
    else if(status == 0x01)
 80002dc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d107      	bne.n	80002f4 <main+0x164>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_LOW\n", strlen("RF24_PA_LOW\n"), 1000);
 80002e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e8:	220c      	movs	r2, #12
 80002ea:	4997      	ldr	r1, [pc, #604]	; (8000548 <main+0x3b8>)
 80002ec:	4890      	ldr	r0, [pc, #576]	; (8000530 <main+0x3a0>)
 80002ee:	f002 fd5c 	bl	8002daa <HAL_UART_Transmit>
 80002f2:	e016      	b.n	8000322 <main+0x192>
    }
    else if(status == 0x02)
 80002f4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80002f8:	2b02      	cmp	r3, #2
 80002fa:	d107      	bne.n	800030c <main+0x17c>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_HIGH\n", strlen("RF24_PA_HIGH\n"), 1000);
 80002fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000300:	220d      	movs	r2, #13
 8000302:	4992      	ldr	r1, [pc, #584]	; (800054c <main+0x3bc>)
 8000304:	488a      	ldr	r0, [pc, #552]	; (8000530 <main+0x3a0>)
 8000306:	f002 fd50 	bl	8002daa <HAL_UART_Transmit>
 800030a:	e00a      	b.n	8000322 <main+0x192>
    }
    else if(status == 0x03)
 800030c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000310:	2b03      	cmp	r3, #3
 8000312:	d106      	bne.n	8000322 <main+0x192>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_MAX\n", strlen("RF24_PA_MAX\n"), 1000);
 8000314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000318:	220c      	movs	r2, #12
 800031a:	498d      	ldr	r1, [pc, #564]	; (8000550 <main+0x3c0>)
 800031c:	4884      	ldr	r0, [pc, #528]	; (8000530 <main+0x3a0>)
 800031e:	f002 fd44 	bl	8002daa <HAL_UART_Transmit>
    }

    status = getChannel();
 8000322:	f000 fc37 	bl	8000b94 <getChannel>
 8000326:	4603      	mov	r3, r0
 8000328:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getChannel: 0x%02x № %d\n", status, status);
 800032c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000330:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000334:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	4613      	mov	r3, r2
 800033c:	4a85      	ldr	r2, [pc, #532]	; (8000554 <main+0x3c4>)
 800033e:	2140      	movs	r1, #64	; 0x40
 8000340:	f002 fede 	bl	8003100 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff01 	bl	8000150 <strlen>
 800034e:	4603      	mov	r3, r0
 8000350:	b29a      	uxth	r2, r3
 8000352:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800035a:	4875      	ldr	r0, [pc, #468]	; (8000530 <main+0x3a0>)
 800035c:	f002 fd25 	bl	8002daa <HAL_UART_Transmit>

    status = getDataRate();
 8000360:	f000 fe40 	bl	8000fe4 <getDataRate>
 8000364:	4603      	mov	r3, r0
 8000366:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getDataRate: 0x%02x  ", status);
 800036a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800036e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000372:	4a79      	ldr	r2, [pc, #484]	; (8000558 <main+0x3c8>)
 8000374:	2140      	movs	r1, #64	; 0x40
 8000376:	f002 fec3 	bl	8003100 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800037a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff fee6 	bl	8000150 <strlen>
 8000384:	4603      	mov	r3, r0
 8000386:	b29a      	uxth	r2, r3
 8000388:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800038c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000390:	4867      	ldr	r0, [pc, #412]	; (8000530 <main+0x3a0>)
 8000392:	f002 fd0a 	bl	8002daa <HAL_UART_Transmit>

    if(status == 0x02)
 8000396:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800039a:	2b02      	cmp	r3, #2
 800039c:	d107      	bne.n	80003ae <main+0x21e>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_250KBPS\n", strlen("RF24_250KBPS\n"), 1000);
 800039e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003a2:	220d      	movs	r2, #13
 80003a4:	496d      	ldr	r1, [pc, #436]	; (800055c <main+0x3cc>)
 80003a6:	4862      	ldr	r0, [pc, #392]	; (8000530 <main+0x3a0>)
 80003a8:	f002 fcff 	bl	8002daa <HAL_UART_Transmit>
 80003ac:	e012      	b.n	80003d4 <main+0x244>
    }
    else if(status == 0x01)
 80003ae:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d107      	bne.n	80003c6 <main+0x236>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_2MBPS\n", strlen("RF24_2MBPS\n"), 1000);
 80003b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ba:	220b      	movs	r2, #11
 80003bc:	4968      	ldr	r1, [pc, #416]	; (8000560 <main+0x3d0>)
 80003be:	485c      	ldr	r0, [pc, #368]	; (8000530 <main+0x3a0>)
 80003c0:	f002 fcf3 	bl	8002daa <HAL_UART_Transmit>
 80003c4:	e006      	b.n	80003d4 <main+0x244>
    }
    else
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_1MBPS\n", strlen("RF24_1MBPS\n"), 1000);
 80003c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ca:	220b      	movs	r2, #11
 80003cc:	4965      	ldr	r1, [pc, #404]	; (8000564 <main+0x3d4>)
 80003ce:	4858      	ldr	r0, [pc, #352]	; (8000530 <main+0x3a0>)
 80003d0:	f002 fceb 	bl	8002daa <HAL_UART_Transmit>
    }

    status = getPayloadSize();
 80003d4:	f000 fbe6 	bl	8000ba4 <getPayloadSize>
 80003d8:	4603      	mov	r3, r0
 80003da:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getPayloadSize: %d\n", status);
 80003de:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80003e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80003e6:	4a60      	ldr	r2, [pc, #384]	; (8000568 <main+0x3d8>)
 80003e8:	2140      	movs	r1, #64	; 0x40
 80003ea:	f002 fe89 	bl	8003100 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80003ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff feac 	bl	8000150 <strlen>
 80003f8:	4603      	mov	r3, r0
 80003fa:	b29a      	uxth	r2, r3
 80003fc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000404:	484a      	ldr	r0, [pc, #296]	; (8000530 <main+0x3a0>)
 8000406:	f002 fcd0 	bl	8002daa <HAL_UART_Transmit>

    status = getCRCLength();
 800040a:	f000 fe08 	bl	800101e <getCRCLength>
 800040e:	4603      	mov	r3, r0
 8000410:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getCRCLength: 0x%02x  ", status);
 8000414:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000418:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800041c:	4a53      	ldr	r2, [pc, #332]	; (800056c <main+0x3dc>)
 800041e:	2140      	movs	r1, #64	; 0x40
 8000420:	f002 fe6e 	bl	8003100 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff fe91 	bl	8000150 <strlen>
 800042e:	4603      	mov	r3, r0
 8000430:	b29a      	uxth	r2, r3
 8000432:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800043a:	483d      	ldr	r0, [pc, #244]	; (8000530 <main+0x3a0>)
 800043c:	f002 fcb5 	bl	8002daa <HAL_UART_Transmit>

    if(status == 0x00)
 8000440:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000444:	2b00      	cmp	r3, #0
 8000446:	d107      	bne.n	8000458 <main+0x2c8>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_DISABLED\n", strlen("RF24_CRC_DISABLED\n"), 1000);
 8000448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800044c:	2212      	movs	r2, #18
 800044e:	4948      	ldr	r1, [pc, #288]	; (8000570 <main+0x3e0>)
 8000450:	4837      	ldr	r0, [pc, #220]	; (8000530 <main+0x3a0>)
 8000452:	f002 fcaa 	bl	8002daa <HAL_UART_Transmit>
 8000456:	e016      	b.n	8000486 <main+0x2f6>
    }
    else if(status == 0x01)
 8000458:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800045c:	2b01      	cmp	r3, #1
 800045e:	d107      	bne.n	8000470 <main+0x2e0>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_8\n", strlen("RF24_CRC_8\n"), 1000);
 8000460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000464:	220b      	movs	r2, #11
 8000466:	4943      	ldr	r1, [pc, #268]	; (8000574 <main+0x3e4>)
 8000468:	4831      	ldr	r0, [pc, #196]	; (8000530 <main+0x3a0>)
 800046a:	f002 fc9e 	bl	8002daa <HAL_UART_Transmit>
 800046e:	e00a      	b.n	8000486 <main+0x2f6>
    }
    else if(status == 0x02)
 8000470:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000474:	2b02      	cmp	r3, #2
 8000476:	d106      	bne.n	8000486 <main+0x2f6>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_16\n", strlen("RF24_CRC_16\n"), 1000);
 8000478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800047c:	220c      	movs	r2, #12
 800047e:	493e      	ldr	r1, [pc, #248]	; (8000578 <main+0x3e8>)
 8000480:	482b      	ldr	r0, [pc, #172]	; (8000530 <main+0x3a0>)
 8000482:	f002 fc92 	bl	8002daa <HAL_UART_Transmit>
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////


    maskIRQ(true, true, true); // маскируем прерывания
 8000486:	2201      	movs	r2, #1
 8000488:	2101      	movs	r1, #1
 800048a:	2001      	movs	r0, #1
 800048c:	f000 fc88 	bl	8000da0 <maskIRQ>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ///////////////////////////////////// ПЕРЕДАЧА /////////////////////////////////////////////
	 	  uint8_t nrf_data[32] = {0,}; // буфер указываем максимального размера
 8000490:	2300      	movs	r3, #0
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
 80004a0:	611a      	str	r2, [r3, #16]
 80004a2:	615a      	str	r2, [r3, #20]
 80004a4:	619a      	str	r2, [r3, #24]
	 	  nrf_data[0] = 77;
 80004a6:	234d      	movs	r3, #77	; 0x4d
 80004a8:	703b      	strb	r3, [r7, #0]
	 	  nrf_data[1] = 86;
 80004aa:	2356      	movs	r3, #86	; 0x56
 80004ac:	707b      	strb	r3, [r7, #1]
	 	  nrf_data[2] = 97;
 80004ae:	2361      	movs	r3, #97	; 0x61
 80004b0:	70bb      	strb	r3, [r7, #2]

	 	  uint8_t remsg = 0; // переменная для приёма байта пришедшего вместе с ответом
 80004b2:	2300      	movs	r3, #0
 80004b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	 	  if(write(&nrf_data, strlen((const char*)nrf_data))) // отправляем данные
 80004b8:	463b      	mov	r3, r7
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff fe48 	bl	8000150 <strlen>
 80004c0:	4603      	mov	r3, r0
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	463b      	mov	r3, r7
 80004c6:	4611      	mov	r1, r2
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 fc1c 	bl	8000d06 <write>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d05b      	beq.n	800058c <main+0x3fc>
	 	  {
	 		if(isAckPayloadAvailable()) // проверяем пришло ли что-то вместе с ответом
 80004d4:	f000 fd06 	bl	8000ee4 <isAckPayloadAvailable>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d05d      	beq.n	800059a <main+0x40a>
	 		{
	 			read(&remsg, sizeof(remsg));
 80004de:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80004e2:	2101      	movs	r1, #1
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fc88 	bl	8000dfa <read>
	 			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ee:	4823      	ldr	r0, [pc, #140]	; (800057c <main+0x3ec>)
 80004f0:	f001 fa56 	bl	80019a0 <HAL_GPIO_TogglePin>
	 			snprintf(str, 64, "Ack: %d\n", remsg);
 80004f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004f8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80004fc:	4a20      	ldr	r2, [pc, #128]	; (8000580 <main+0x3f0>)
 80004fe:	2140      	movs	r1, #64	; 0x40
 8000500:	f002 fdfe 	bl	8003100 <sniprintf>
	 			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff fe21 	bl	8000150 <strlen>
 800050e:	4603      	mov	r3, r0
 8000510:	b29a      	uxth	r2, r3
 8000512:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <main+0x3a0>)
 800051c:	f002 fc45 	bl	8002daa <HAL_UART_Transmit>
 8000520:	e03b      	b.n	800059a <main+0x40a>
 8000522:	bf00      	nop
 8000524:	f3af 8000 	nop.w
 8000528:	080039a0 	.word	0x080039a0
 800052c:	080039a4 	.word	0x080039a4
 8000530:	200000a4 	.word	0x200000a4
 8000534:	080039b4 	.word	0x080039b4
 8000538:	080039bc 	.word	0x080039bc
 800053c:	080039c8 	.word	0x080039c8
 8000540:	080039dc 	.word	0x080039dc
 8000544:	080039f4 	.word	0x080039f4
 8000548:	08003a04 	.word	0x08003a04
 800054c:	08003a14 	.word	0x08003a14
 8000550:	08003a24 	.word	0x08003a24
 8000554:	08003a34 	.word	0x08003a34
 8000558:	08003a50 	.word	0x08003a50
 800055c:	08003a68 	.word	0x08003a68
 8000560:	08003a78 	.word	0x08003a78
 8000564:	08003a84 	.word	0x08003a84
 8000568:	08003a90 	.word	0x08003a90
 800056c:	08003aa4 	.word	0x08003aa4
 8000570:	08003abc 	.word	0x08003abc
 8000574:	08003ad0 	.word	0x08003ad0
 8000578:	08003adc 	.word	0x08003adc
 800057c:	40011000 	.word	0x40011000
 8000580:	08003aec 	.word	0x08003aec
 8000584:	e8f0f0e2 	.word	0xe8f0f0e2
 8000588:	000000e8 	.word	0x000000e8
	 		}
	 	  }
	 	  else HAL_UART_Transmit(&huart1, (uint8_t*)"Not write\n", strlen("Not write\n"), 1000);
 800058c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000590:	220a      	movs	r2, #10
 8000592:	4904      	ldr	r1, [pc, #16]	; (80005a4 <main+0x414>)
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <main+0x418>)
 8000596:	f002 fc08 	bl	8002daa <HAL_UART_Transmit>

	 	  HAL_Delay(100);
 800059a:	2064      	movs	r0, #100	; 0x64
 800059c:	f000 ff3c 	bl	8001418 <HAL_Delay>
  {
 80005a0:	e776      	b.n	8000490 <main+0x300>
 80005a2:	bf00      	nop
 80005a4:	08003af8 	.word	0x08003af8
 80005a8:	200000a4 	.word	0x200000a4

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b090      	sub	sp, #64	; 0x40
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	2228      	movs	r2, #40	; 0x28
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fd98 	bl	80030f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ce:	2301      	movs	r3, #1
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0318 	add.w	r3, r7, #24
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fa05 	bl	8001a04 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000600:	f000 f8f0 	bl	80007e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fc70 	bl	8001f04 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800062a:	f000 f8db 	bl	80007e4 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3740      	adds	r7, #64	; 0x40
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_SPI1_Init+0x64>)
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <MX_SPI1_Init+0x68>)
 8000640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_SPI1_Init+0x64>)
 8000644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_SPI1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_SPI1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_SPI1_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_SPI1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_SPI1_Init+0x64>)
 8000664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000668:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_SPI1_Init+0x64>)
 800066c:	2218      	movs	r2, #24
 800066e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_SPI1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_SPI1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_SPI1_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_SPI1_Init+0x64>)
 8000684:	220a      	movs	r2, #10
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_SPI1_Init+0x64>)
 800068a:	f001 fdd5 	bl	8002238 <HAL_SPI_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000694:	f000 f8a6 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000e8 	.word	0x200000e8
 80006a0:	40013000 	.word	0x40013000

080006a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_USART1_UART_Init+0x50>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006dc:	f002 fb18 	bl	8002d10 <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006e6:	f000 f87d 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000a4 	.word	0x200000a4
 80006f4:	40013800 	.word	0x40013800

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070c:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <MX_GPIO_Init+0xdc>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a30      	ldr	r2, [pc, #192]	; (80007d4 <MX_GPIO_Init+0xdc>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <MX_GPIO_Init+0xdc>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <MX_GPIO_Init+0xdc>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <MX_GPIO_Init+0xdc>)
 800072a:	f043 0320 	orr.w	r3, r3, #32
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_GPIO_Init+0xdc>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0320 	and.w	r3, r3, #32
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <MX_GPIO_Init+0xdc>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a24      	ldr	r2, [pc, #144]	; (80007d4 <MX_GPIO_Init+0xdc>)
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_GPIO_Init+0xdc>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0304 	and.w	r3, r3, #4
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075a:	481f      	ldr	r0, [pc, #124]	; (80007d8 <MX_GPIO_Init+0xe0>)
 800075c:	f001 f908 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2112      	movs	r1, #18
 8000764:	481d      	ldr	r0, [pc, #116]	; (80007dc <MX_GPIO_Init+0xe4>)
 8000766:	f001 f903 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800076a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2302      	movs	r3, #2
 800077a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4619      	mov	r1, r3
 8000782:	4815      	ldr	r0, [pc, #84]	; (80007d8 <MX_GPIO_Init+0xe0>)
 8000784:	f000 ff7a 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_GPIO_Init+0xe8>)
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4619      	mov	r1, r3
 800079a:	4810      	ldr	r0, [pc, #64]	; (80007dc <MX_GPIO_Init+0xe4>)
 800079c:	f000 ff6e 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 80007a0:	2312      	movs	r3, #18
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	4809      	ldr	r0, [pc, #36]	; (80007dc <MX_GPIO_Init+0xe4>)
 80007b8:	f000 ff60 	bl	800167c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2100      	movs	r1, #0
 80007c0:	2006      	movs	r0, #6
 80007c2:	f000 ff24 	bl	800160e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007c6:	2006      	movs	r0, #6
 80007c8:	f000 ff3d 	bl	8001646 <HAL_NVIC_EnableIRQ>

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40011000 	.word	0x40011000
 80007dc:	40010800 	.word	0x40010800
 80007e0:	10210000 	.word	0x10210000

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <DWT_Init>:
uint8_t addr_width = 0; /**< The address width to use - 3,4 or 5 bytes. */
uint8_t txDelay = 0;


void DWT_Init(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <DWT_Init+0x24>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a06      	ldr	r2, [pc, #24]	; (8000814 <DWT_Init+0x24>)
 80007fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007fe:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <DWT_Init+0x28>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <DWT_Init+0x28>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	e000edfc 	.word	0xe000edfc
 8000818:	e0001000 	.word	0xe0001000

0800081c <delay_us>:

void delay_us(uint32_t us) // DelayMicro
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <delay_us+0x3c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <delay_us+0x40>)
 800082a:	fba2 2303 	umull	r2, r3, r2, r3
 800082e:	0c9a      	lsrs	r2, r3, #18
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	fb02 f303 	mul.w	r3, r2, r3
 8000836:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <delay_us+0x44>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 800083e:	bf00      	nop
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <delay_us+0x44>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	429a      	cmp	r2, r3
 8000848:	d8fa      	bhi.n	8000840 <delay_us+0x24>
}
 800084a:	bf00      	nop
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000000 	.word	0x20000000
 800085c:	431bde83 	.word	0x431bde83
 8000860:	e0001000 	.word	0xe0001000

08000864 <csn>:

void csn(uint8_t level)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, level);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	461a      	mov	r2, r3
 8000872:	2110      	movs	r1, #16
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <csn+0x24>)
 8000876:	f001 f87b 	bl	8001970 <HAL_GPIO_WritePin>
	delay_us(5);
 800087a:	2005      	movs	r0, #5
 800087c:	f7ff ffce 	bl	800081c <delay_us>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40010800 	.word	0x40010800

0800088c <ce>:

void ce(uint8_t level)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, level);
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	461a      	mov	r2, r3
 800089a:	2102      	movs	r1, #2
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <ce+0x20>)
 800089e:	f001 f867 	bl	8001970 <HAL_GPIO_WritePin>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40010800 	.word	0x40010800

080008b0 <read_register>:

uint8_t read_register(uint8_t reg)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f003 031f 	and.w	r3, r3, #31
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	73fb      	strb	r3, [r7, #15]
	uint8_t dt = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff ffcb 	bl	8000864 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 80008ce:	f107 020e 	add.w	r2, r7, #14
 80008d2:	f107 010f 	add.w	r1, r7, #15
 80008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	480a      	ldr	r0, [pc, #40]	; (8000908 <read_register+0x58>)
 80008e0:	f001 ff7b 	bl	80027da <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &dt, 1, 1000);
 80008e4:	f107 020e 	add.w	r2, r7, #14
 80008e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2301      	movs	r3, #1
 80008f0:	21ff      	movs	r1, #255	; 0xff
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <read_register+0x58>)
 80008f4:	f001 ff71 	bl	80027da <HAL_SPI_TransmitReceive>
	csn(HIGH);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff ffb3 	bl	8000864 <csn>
	return dt;
 80008fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200000e8 	.word	0x200000e8

0800090c <write_registerMy>:

uint8_t write_registerMy(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af02      	add	r7, sp, #8
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	4613      	mov	r3, r2
 800091a:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	f003 031f 	and.w	r3, r3, #31
 8000926:	b2db      	uxtb	r3, r3
 8000928:	f043 0320 	orr.w	r3, r3, #32
 800092c:	b2db      	uxtb	r3, r3
 800092e:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff97 	bl	8000864 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000936:	f107 020f 	add.w	r2, r7, #15
 800093a:	f107 010e 	add.w	r1, r7, #14
 800093e:	2364      	movs	r3, #100	; 0x64
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	4808      	ldr	r0, [pc, #32]	; (8000968 <write_registerMy+0x5c>)
 8000946:	f001 ff48 	bl	80027da <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, len, 100);
 800094a:	79bb      	ldrb	r3, [r7, #6]
 800094c:	b29a      	uxth	r2, r3
 800094e:	2364      	movs	r3, #100	; 0x64
 8000950:	6839      	ldr	r1, [r7, #0]
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <write_registerMy+0x5c>)
 8000954:	f001 fcf4 	bl	8002340 <HAL_SPI_Transmit>
	csn(HIGH);
 8000958:	2001      	movs	r0, #1
 800095a:	f7ff ff83 	bl	8000864 <csn>
	return status;
 800095e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000e8 	.word	0x200000e8

0800096c <write_register>:

uint8_t write_register(uint8_t reg, uint8_t value)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af02      	add	r7, sp, #8
 8000972:	4603      	mov	r3, r0
 8000974:	460a      	mov	r2, r1
 8000976:	71fb      	strb	r3, [r7, #7]
 8000978:	4613      	mov	r3, r2
 800097a:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 031f 	and.w	r3, r3, #31
 8000986:	b2db      	uxtb	r3, r3
 8000988:	f043 0320 	orr.w	r3, r3, #32
 800098c:	b2db      	uxtb	r3, r3
 800098e:	73bb      	strb	r3, [r7, #14]
	csn(LOW);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff ff67 	bl	8000864 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000996:	f107 020f 	add.w	r2, r7, #15
 800099a:	f107 010e 	add.w	r1, r7, #14
 800099e:	2364      	movs	r3, #100	; 0x64
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2301      	movs	r3, #1
 80009a4:	4808      	ldr	r0, [pc, #32]	; (80009c8 <write_register+0x5c>)
 80009a6:	f001 ff18 	bl	80027da <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 80009aa:	1db9      	adds	r1, r7, #6
 80009ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b0:	2201      	movs	r2, #1
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <write_register+0x5c>)
 80009b4:	f001 fcc4 	bl	8002340 <HAL_SPI_Transmit>
	csn(HIGH);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff ff53 	bl	8000864 <csn>
	return status;
 80009be:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200000e8 	.word	0x200000e8

080009cc <write_payload>:

uint8_t write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af02      	add	r7, sp, #8
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	70fb      	strb	r3, [r7, #3]
 80009d8:	4613      	mov	r3, r2
 80009da:	70bb      	strb	r3, [r7, #2]
	uint8_t status = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]
	const uint8_t* current = (const uint8_t*)buf;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	613b      	str	r3, [r7, #16]
	uint8_t addr = writeType;
 80009e4:	78bb      	ldrb	r3, [r7, #2]
 80009e6:	73bb      	strb	r3, [r7, #14]

	data_len = rf24_min(data_len, payload_size);
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <write_payload+0x98>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	78fa      	ldrb	r2, [r7, #3]
 80009ee:	4293      	cmp	r3, r2
 80009f0:	bf28      	it	cs
 80009f2:	4613      	movcs	r3, r2
 80009f4:	70fb      	strb	r3, [r7, #3]
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <write_payload+0x9c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <write_payload+0x36>
 80009fe:	2300      	movs	r3, #0
 8000a00:	e004      	b.n	8000a0c <write_payload+0x40>
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <write_payload+0x98>)
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	75fb      	strb	r3, [r7, #23]

	csn(LOW);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff ff28 	bl	8000864 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000a14:	f107 020f 	add.w	r2, r7, #15
 8000a18:	f107 010e 	add.w	r1, r7, #14
 8000a1c:	2364      	movs	r3, #100	; 0x64
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2301      	movs	r3, #1
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <write_payload+0xa0>)
 8000a24:	f001 fed9 	bl	80027da <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)current, data_len, 100);
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	2364      	movs	r3, #100	; 0x64
 8000a2e:	6939      	ldr	r1, [r7, #16]
 8000a30:	480e      	ldr	r0, [pc, #56]	; (8000a6c <write_payload+0xa0>)
 8000a32:	f001 fc85 	bl	8002340 <HAL_SPI_Transmit>

	while(blank_len--)
 8000a36:	e008      	b.n	8000a4a <write_payload+0x7e>
	{
		uint8_t empt = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&hspi1, &empt, 1, 100);
 8000a3c:	f107 010d 	add.w	r1, r7, #13
 8000a40:	2364      	movs	r3, #100	; 0x64
 8000a42:	2201      	movs	r2, #1
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <write_payload+0xa0>)
 8000a46:	f001 fc7b 	bl	8002340 <HAL_SPI_Transmit>
	while(blank_len--)
 8000a4a:	7dfb      	ldrb	r3, [r7, #23]
 8000a4c:	1e5a      	subs	r2, r3, #1
 8000a4e:	75fa      	strb	r2, [r7, #23]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1f1      	bne.n	8000a38 <write_payload+0x6c>
	}

	csn(HIGH);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f7ff ff05 	bl	8000864 <csn>
	return status;
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	2000008c 	.word	0x2000008c
 8000a68:	20000140 	.word	0x20000140
 8000a6c:	200000e8 	.word	0x200000e8

08000a70 <read_payload>:

uint8_t read_payload(void* buf, uint8_t data_len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	75bb      	strb	r3, [r7, #22]
	uint8_t* current = (uint8_t*)buf;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	613b      	str	r3, [r7, #16]

	if(data_len > payload_size)
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <read_payload+0x90>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	78fa      	ldrb	r2, [r7, #3]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d902      	bls.n	8000a94 <read_payload+0x24>
	{
		data_len = payload_size;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <read_payload+0x90>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	70fb      	strb	r3, [r7, #3]
	}

	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <read_payload+0x94>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <read_payload+0x30>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e004      	b.n	8000aaa <read_payload+0x3a>
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <read_payload+0x90>)
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	75fb      	strb	r3, [r7, #23]

	uint8_t addr = R_RX_PAYLOAD;
 8000aac:	2361      	movs	r3, #97	; 0x61
 8000aae:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff fed7 	bl	8000864 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 8000ab6:	f107 010f 	add.w	r1, r7, #15
 8000aba:	2364      	movs	r3, #100	; 0x64
 8000abc:	2201      	movs	r2, #1
 8000abe:	4812      	ldr	r0, [pc, #72]	; (8000b08 <read_payload+0x98>)
 8000ac0:	f001 fc3e 	bl	8002340 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)current, data_len, 100);
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	2364      	movs	r3, #100	; 0x64
 8000aca:	6939      	ldr	r1, [r7, #16]
 8000acc:	480e      	ldr	r0, [pc, #56]	; (8000b08 <read_payload+0x98>)
 8000ace:	f001 fd73 	bl	80025b8 <HAL_SPI_Receive>

	while(blank_len--)
 8000ad2:	e008      	b.n	8000ae6 <read_payload+0x76>
	{
		uint8_t empt = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 8000ad8:	f107 010e 	add.w	r1, r7, #14
 8000adc:	2364      	movs	r3, #100	; 0x64
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <read_payload+0x98>)
 8000ae2:	f001 fd69 	bl	80025b8 <HAL_SPI_Receive>
	while(blank_len--)
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	1e5a      	subs	r2, r3, #1
 8000aea:	75fa      	strb	r2, [r7, #23]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1f1      	bne.n	8000ad4 <read_payload+0x64>
	}

	csn(HIGH);
 8000af0:	2001      	movs	r0, #1
 8000af2:	f7ff feb7 	bl	8000864 <csn>
	return status;
 8000af6:	7dbb      	ldrb	r3, [r7, #22]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000008c 	.word	0x2000008c
 8000b04:	20000140 	.word	0x20000140
 8000b08:	200000e8 	.word	0x200000e8

08000b0c <flush_rx>:

uint8_t flush_rx(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_RX);
 8000b10:	20e2      	movs	r0, #226	; 0xe2
 8000b12:	f000 f80b 	bl	8000b2c <spiTrans>
 8000b16:	4603      	mov	r3, r0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <flush_tx>:

uint8_t flush_tx(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_TX);
 8000b20:	20e1      	movs	r0, #225	; 0xe1
 8000b22:	f000 f803 	bl	8000b2c <spiTrans>
 8000b26:	4603      	mov	r3, r0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <spiTrans>:

uint8_t spiTrans(uint8_t cmd)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fe92 	bl	8000864 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &cmd, &status, 1, 1000);
 8000b40:	f107 020f 	add.w	r2, r7, #15
 8000b44:	1df9      	adds	r1, r7, #7
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <spiTrans+0x38>)
 8000b50:	f001 fe43 	bl	80027da <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f7ff fe85 	bl	8000864 <csn>
	return status;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200000e8 	.word	0x200000e8

08000b68 <get_status>:

uint8_t get_status(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	return spiTrans(NOP);
 8000b6c:	20ff      	movs	r0, #255	; 0xff
 8000b6e:	f7ff ffdd 	bl	8000b2c <spiTrans>
 8000b72:	4603      	mov	r3, r0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <setChannel>:

void setChannel(uint8_t channel)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	write_register(RF_CH, channel);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4619      	mov	r1, r3
 8000b86:	2005      	movs	r0, #5
 8000b88:	f7ff fef0 	bl	800096c <write_register>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <getChannel>:

uint8_t getChannel()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	return read_register(RF_CH);
 8000b98:	2005      	movs	r0, #5
 8000b9a:	f7ff fe89 	bl	80008b0 <read_register>
 8000b9e:	4603      	mov	r3, r0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <getPayloadSize>:
{
	payload_size = rf24_min(size, 32);
}

uint8_t getPayloadSize(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
	return payload_size;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <getPayloadSize+0x10>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	2000008c 	.word	0x2000008c

08000bb8 <NRF_Init>:

uint8_t NRF_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	uint8_t setup = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	p_variant = false;
 8000bc2:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <NRF_Init+0xd8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
	payload_size = 32;
 8000bc8:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <NRF_Init+0xdc>)
 8000bca:	2220      	movs	r2, #32
 8000bcc:	701a      	strb	r2, [r3, #0]
	dynamic_payloads_enabled = false;
 8000bce:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <NRF_Init+0xe0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
	addr_width = 5;
 8000bd4:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <NRF_Init+0xe4>)
 8000bd6:	2205      	movs	r2, #5
 8000bd8:	701a      	strb	r2, [r3, #0]
	pipe0_reading_address[0] = 0;
 8000bda:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <NRF_Init+0xe8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]

	ce(LOW);
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff fe53 	bl	800088c <ce>
	csn(HIGH);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff fe3c 	bl	8000864 <csn>
	HAL_Delay(5);
 8000bec:	2005      	movs	r0, #5
 8000bee:	f000 fc13 	bl	8001418 <HAL_Delay>

	write_register(NRF_CONFIG, 0x0C); // Reset NRF_CONFIG and enable 16-bit CRC.
 8000bf2:	210c      	movs	r1, #12
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f7ff feb9 	bl	800096c <write_register>
	setRetries(5, 15);
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	2005      	movs	r0, #5
 8000bfe:	f000 fa36 	bl	800106e <setRetries>
	setPALevel(RF24_PA_MAX); // Reset value is MAX
 8000c02:	2003      	movs	r0, #3
 8000c04:	f000 f97d 	bl	8000f02 <setPALevel>

	if(setDataRate(RF24_250KBPS)) // check for connected module and if this is a p nRF24l01 variant
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f000 f9ab 	bl	8000f64 <setDataRate>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d002      	beq.n	8000c1a <NRF_Init+0x62>
	{
		p_variant = true;
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <NRF_Init+0xd8>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
	}

	setup = read_register(RF_SETUP);
 8000c1a:	2006      	movs	r0, #6
 8000c1c:	f7ff fe48 	bl	80008b0 <read_register>
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
	setDataRate(RF24_1MBPS); // Then set the data rate to the slowest (and most reliable) speed supported by all hardware.
 8000c24:	2000      	movs	r0, #0
 8000c26:	f000 f99d 	bl	8000f64 <setDataRate>

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	toggle_features();
 8000c2a:	f000 f91b 	bl	8000e64 <toggle_features>
	write_register(FEATURE, 0);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	201d      	movs	r0, #29
 8000c32:	f7ff fe9b 	bl	800096c <write_register>
	write_register(DYNPD, 0);
 8000c36:	2100      	movs	r1, #0
 8000c38:	201c      	movs	r0, #28
 8000c3a:	f7ff fe97 	bl	800096c <write_register>
	dynamic_payloads_enabled = false;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <NRF_Init+0xe0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]

	// Reset current status. Notice reset and flush is the last thing we do
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8000c44:	2170      	movs	r1, #112	; 0x70
 8000c46:	2007      	movs	r0, #7
 8000c48:	f7ff fe90 	bl	800096c <write_register>
	setChannel(76);
 8000c4c:	204c      	movs	r0, #76	; 0x4c
 8000c4e:	f7ff ff93 	bl	8000b78 <setChannel>
	flush_rx();
 8000c52:	f7ff ff5b 	bl	8000b0c <flush_rx>
	flush_tx();
 8000c56:	f7ff ff61 	bl	8000b1c <flush_tx>
	powerUp(); //Power up by default when begin() is called
 8000c5a:	f000 f838 	bl	8000cce <powerUp>
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fe26 	bl	80008b0 <read_register>
 8000c64:	4603      	mov	r3, r0
 8000c66:	f023 0301 	bic.w	r3, r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff fe7c 	bl	800096c <write_register>
	return (setup != 0 && setup != 0xff);
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d004      	beq.n	8000c84 <NRF_Init+0xcc>
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2bff      	cmp	r3, #255	; 0xff
 8000c7e:	d001      	beq.n	8000c84 <NRF_Init+0xcc>
 8000c80:	2301      	movs	r3, #1
 8000c82:	e000      	b.n	8000c86 <NRF_Init+0xce>
 8000c84:	2300      	movs	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000141 	.word	0x20000141
 8000c94:	2000008c 	.word	0x2000008c
 8000c98:	20000140 	.word	0x20000140
 8000c9c:	20000095 	.word	0x20000095
 8000ca0:	20000090 	.word	0x20000090

08000ca4 <isChipConnected>:

bool isChipConnected()
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
	uint8_t setup = read_register(SETUP_AW);
 8000caa:	2003      	movs	r0, #3
 8000cac:	f7ff fe00 	bl	80008b0 <read_register>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	71fb      	strb	r3, [r7, #7]

	if(setup >= 1 && setup <= 3)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <isChipConnected+0x20>
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d801      	bhi.n	8000cc4 <isChipConnected+0x20>
	{
		return true;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <isChipConnected+0x22>
	}

	return false;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <powerUp>:
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) & ~(1 << PWR_UP));
}

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void powerUp(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
	uint8_t cfg = read_register(NRF_CONFIG);
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff fdeb 	bl	80008b0 <read_register>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
	// if not powered up then power up and wait for the radio to initialize
	if(!(cfg & (1 << PWR_UP)))
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d10a      	bne.n	8000cfe <powerUp+0x30>
	{
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff fe3a 	bl	800096c <write_register>
		HAL_Delay(5);
 8000cf8:	2005      	movs	r0, #5
 8000cfa:	f000 fb8d 	bl	8001418 <HAL_Delay>
	}
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <write>:


//Similar to the previous write, clears the interrupt flags
bool write(const void* buf, uint8_t len)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b084      	sub	sp, #16
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	70fb      	strb	r3, [r7, #3]
	startFastWrite(buf, len, 1, 1);
 8000d12:	78f9      	ldrb	r1, [r7, #3]
 8000d14:	2301      	movs	r3, #1
 8000d16:	2201      	movs	r2, #1
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f000 f81f 	bl	8000d5c <startFastWrite>

	while(!(get_status() & ((1 << TX_DS) | (1 << MAX_RT))))
 8000d1e:	bf00      	nop
 8000d20:	f7ff ff22 	bl	8000b68 <get_status>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f8      	beq.n	8000d20 <write+0x1a>
	{}

	ce(LOW);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff fdac 	bl	800088c <ce>
	uint8_t status = write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8000d34:	2170      	movs	r1, #112	; 0x70
 8000d36:	2007      	movs	r0, #7
 8000d38:	f7ff fe18 	bl	800096c <write_register>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	73fb      	strb	r3, [r7, #15]

	if(status & (1 << MAX_RT))
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	f003 0310 	and.w	r3, r3, #16
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <write+0x4c>
	{
		flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
 8000d4a:	f7ff fee7 	bl	8000b1c <flush_tx>
		return 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e000      	b.n	8000d54 <write+0x4e>
	}

	//TX OK 1 or 0
	return 1;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <startFastWrite>:

void startFastWrite(const void* buf, uint8_t len, const bool multicast, bool startTx)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	4608      	mov	r0, r1
 8000d66:	4611      	mov	r1, r2
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	70fb      	strb	r3, [r7, #3]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	70bb      	strb	r3, [r7, #2]
 8000d72:	4613      	mov	r3, r2
 8000d74:	707b      	strb	r3, [r7, #1]
	write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
 8000d76:	78bb      	ldrb	r3, [r7, #2]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <startFastWrite+0x24>
 8000d7c:	22b0      	movs	r2, #176	; 0xb0
 8000d7e:	e000      	b.n	8000d82 <startFastWrite+0x26>
 8000d80:	22a0      	movs	r2, #160	; 0xa0
 8000d82:	78fb      	ldrb	r3, [r7, #3]
 8000d84:	4619      	mov	r1, r3
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fe20 	bl	80009cc <write_payload>

	if(startTx)
 8000d8c:	787b      	ldrb	r3, [r7, #1]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <startFastWrite+0x3c>
	{
		ce(HIGH);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f7ff fd7a 	bl	800088c <ce>
	}
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <maskIRQ>:

void maskIRQ(bool tx, bool fail, bool rx)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
 8000daa:	460b      	mov	r3, r1
 8000dac:	71bb      	strb	r3, [r7, #6]
 8000dae:	4613      	mov	r3, r2
 8000db0:	717b      	strb	r3, [r7, #5]
	uint8_t config = read_register(NRF_CONFIG);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff fd7c 	bl	80008b0 <read_register>
 8000db8:	4603      	mov	r3, r0
 8000dba:	73fb      	strb	r3, [r7, #15]
	config &= ~(1 << MASK_MAX_RT | 1 << MASK_TX_DS | 1 << MASK_RX_DR); //clear the interrupt flags
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dc2:	73fb      	strb	r3, [r7, #15]
	config |= fail << MASK_MAX_RT | tx << MASK_TX_DS | rx << MASK_RX_DR; // set the specified interrupt flags
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	b25a      	sxtb	r2, r3
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	015b      	lsls	r3, r3, #5
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b25a      	sxtb	r2, r3
 8000dd4:	797b      	ldrb	r3, [r7, #5]
 8000dd6:	019b      	lsls	r3, r3, #6
 8000dd8:	b25b      	sxtb	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b25a      	sxtb	r2, r3
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	73fb      	strb	r3, [r7, #15]
	write_register(NRF_CONFIG, config);
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	4619      	mov	r1, r3
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fdbd 	bl	800096c <write_register>
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <read>:

	return 0;
}

void read(void* buf, uint8_t len)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	460b      	mov	r3, r1
 8000e04:	70fb      	strb	r3, [r7, #3]
	read_payload(buf, len);
 8000e06:	78fb      	ldrb	r3, [r7, #3]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff fe30 	bl	8000a70 <read_payload>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
 8000e10:	2170      	movs	r1, #112	; 0x70
 8000e12:	2007      	movs	r0, #7
 8000e14:	f7ff fdaa 	bl	800096c <write_register>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <openWritingPipe>:
	uint8_t rx_ready = status & (1 << RX_DR);*/
	return status;
}

void openWritingPipe(uint64_t value)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	e9c7 0100 	strd	r0, r1, [r7]
	write_registerMy(RX_ADDR_P0, (uint8_t*)&value, addr_width);
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <openWritingPipe+0x3c>)
 8000e2c:	781a      	ldrb	r2, [r3, #0]
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	200a      	movs	r0, #10
 8000e34:	f7ff fd6a 	bl	800090c <write_registerMy>
	write_registerMy(TX_ADDR, (uint8_t*)&value, addr_width);
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <openWritingPipe+0x3c>)
 8000e3a:	781a      	ldrb	r2, [r3, #0]
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	4619      	mov	r1, r3
 8000e40:	2010      	movs	r0, #16
 8000e42:	f7ff fd63 	bl	800090c <write_registerMy>
	write_register(RX_PW_P0, payload_size);
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <openWritingPipe+0x40>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	2011      	movs	r0, #17
 8000e4e:	f7ff fd8d 	bl	800096c <write_register>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000095 	.word	0x20000095
 8000e60:	2000008c 	.word	0x2000008c

08000e64 <toggle_features>:
{
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
}

void toggle_features(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
	uint8_t addr = ACTIVATE;
 8000e6a:	2350      	movs	r3, #80	; 0x50
 8000e6c:	71fb      	strb	r3, [r7, #7]
	csn(LOW);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff fcf8 	bl	8000864 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8000e74:	1df9      	adds	r1, r7, #7
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <toggle_features+0x3c>)
 8000e7e:	f001 fa5f 	bl	8002340 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)0x73, 1, 1000);
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	2201      	movs	r2, #1
 8000e88:	2173      	movs	r1, #115	; 0x73
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <toggle_features+0x3c>)
 8000e8c:	f001 fa58 	bl	8002340 <HAL_SPI_Transmit>
	csn(HIGH);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f7ff fce7 	bl	8000864 <csn>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000e8 	.word	0x200000e8

08000ea4 <enableAckPayload>:
	write_register(DYNPD, 0);
	dynamic_payloads_enabled = false;
}

void enableAckPayload(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_ACK_PAY) | (1 << EN_DPL));
 8000ea8:	201d      	movs	r0, #29
 8000eaa:	f7ff fd01 	bl	80008b0 <read_register>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f043 0306 	orr.w	r3, r3, #6
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	201d      	movs	r0, #29
 8000eba:	f7ff fd57 	bl	800096c <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P1) | (1 << DPL_P0));
 8000ebe:	201c      	movs	r0, #28
 8000ec0:	f7ff fcf6 	bl	80008b0 <read_register>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f043 0303 	orr.w	r3, r3, #3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4619      	mov	r1, r3
 8000ece:	201c      	movs	r0, #28
 8000ed0:	f7ff fd4c 	bl	800096c <write_register>
	dynamic_payloads_enabled = true;
 8000ed4:	4b02      	ldr	r3, [pc, #8]	; (8000ee0 <enableAckPayload+0x3c>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000140 	.word	0x20000140

08000ee4 <isAckPayloadAvailable>:
	HAL_SPI_Transmit(&hspi1, (uint8_t*)current, data_len, 1000);
	csn(HIGH);
}

bool isAckPayloadAvailable(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	return !(read_register(FIFO_STATUS) & (1 << RX_EMPTY));
 8000ee8:	2017      	movs	r0, #23
 8000eea:	f7ff fce1 	bl	80008b0 <read_register>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	bf0c      	ite	eq
 8000ef8:	2301      	moveq	r3, #1
 8000efa:	2300      	movne	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <setPALevel>:
		write_register(EN_AA, en_aa);
	}
}

void setPALevel(uint8_t level)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 8000f0c:	2006      	movs	r0, #6
 8000f0e:	f7ff fccf 	bl	80008b0 <read_register>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f023 0307 	bic.w	r3, r3, #7
 8000f18:	73fb      	strb	r3, [r7, #15]

  if(level > 3) // If invalid level, go to max PA
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d902      	bls.n	8000f26 <setPALevel+0x24>
  {
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
 8000f20:	2307      	movs	r3, #7
 8000f22:	71fb      	strb	r3, [r7, #7]
 8000f24:	e004      	b.n	8000f30 <setPALevel+0x2e>
  }
  else
  {
	  level = (level << 1) + 1;	 		// Else set level as requested
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	71fb      	strb	r3, [r7, #7]
  }

  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	2006      	movs	r0, #6
 8000f3e:	f7ff fd15 	bl	800096c <write_register>
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <getPALevel>:

uint8_t getPALevel(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
	return (read_register(RF_SETUP) & ((1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH))) >> 1;
 8000f4e:	2006      	movs	r0, #6
 8000f50:	f7ff fcae 	bl	80008b0 <read_register>
 8000f54:	4603      	mov	r3, r0
 8000f56:	105b      	asrs	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	b2db      	uxtb	r3, r3
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <setDataRate>:

bool setDataRate(rf24_datarate_e speed)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = read_register(RF_SETUP);
 8000f72:	2006      	movs	r0, #6
 8000f74:	f7ff fc9c 	bl	80008b0 <read_register>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73bb      	strb	r3, [r7, #14]
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f82:	73bb      	strb	r3, [r7, #14]
	txDelay = 85;
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <setDataRate+0x7c>)
 8000f86:	2255      	movs	r2, #85	; 0x55
 8000f88:	701a      	strb	r2, [r3, #0]

	if(speed == RF24_250KBPS)
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d107      	bne.n	8000fa0 <setDataRate+0x3c>
	{
		setup |= (1 << RF_DR_LOW);
 8000f90:	7bbb      	ldrb	r3, [r7, #14]
 8000f92:	f043 0320 	orr.w	r3, r3, #32
 8000f96:	73bb      	strb	r3, [r7, #14]
		txDelay = 155;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <setDataRate+0x7c>)
 8000f9a:	229b      	movs	r2, #155	; 0x9b
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	e009      	b.n	8000fb4 <setDataRate+0x50>
	}
	else
	{
		if(speed == RF24_2MBPS)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d106      	bne.n	8000fb4 <setDataRate+0x50>
		{
			setup |= (1 << RF_DR_HIGH);
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	73bb      	strb	r3, [r7, #14]
			txDelay = 65;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <setDataRate+0x7c>)
 8000fb0:	2241      	movs	r2, #65	; 0x41
 8000fb2:	701a      	strb	r2, [r3, #0]
		}
	}

	write_register(RF_SETUP, setup);
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	2006      	movs	r0, #6
 8000fba:	f7ff fcd7 	bl	800096c <write_register>
	uint8_t ggg = read_register(RF_SETUP);
 8000fbe:	2006      	movs	r0, #6
 8000fc0:	f7ff fc76 	bl	80008b0 <read_register>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	737b      	strb	r3, [r7, #13]

	if(ggg == setup)
 8000fc8:	7b7a      	ldrb	r2, [r7, #13]
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d101      	bne.n	8000fd4 <setDataRate+0x70>
	{
		result = true;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000096 	.word	0x20000096

08000fe4 <getDataRate>:

rf24_datarate_e getDataRate(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	rf24_datarate_e result ;
	uint8_t dr = read_register(RF_SETUP) & ((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8000fea:	2006      	movs	r0, #6
 8000fec:	f7ff fc60 	bl	80008b0 <read_register>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8000ff6:	71bb      	strb	r3, [r7, #6]

	// switch uses RAM (evil!)
	// Order matters in our case below
	if(dr == (1 << RF_DR_LOW))
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	2b20      	cmp	r3, #32
 8000ffc:	d102      	bne.n	8001004 <getDataRate+0x20>
	{
		result = RF24_250KBPS;
 8000ffe:	2302      	movs	r3, #2
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	e007      	b.n	8001014 <getDataRate+0x30>
	}
	else if(dr == (1 << RF_DR_HIGH))
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	2b08      	cmp	r3, #8
 8001008:	d102      	bne.n	8001010 <getDataRate+0x2c>
	{
		result = RF24_2MBPS;
 800100a:	2301      	movs	r3, #1
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	e001      	b.n	8001014 <getDataRate+0x30>
	}
	else
	{
		result = RF24_1MBPS;
 8001010:	2300      	movs	r3, #0
 8001012:	71fb      	strb	r3, [r7, #7]
	}

	return result;
 8001014:	79fb      	ldrb	r3, [r7, #7]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <getCRCLength>:

	write_register(NRF_CONFIG, config);
}

rf24_crclength_e getCRCLength(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
	rf24_crclength_e result = RF24_CRC_DISABLED;
 8001024:	2300      	movs	r3, #0
 8001026:	71fb      	strb	r3, [r7, #7]

	uint8_t config = read_register(NRF_CONFIG) & ((1 << CRCO) | (1 << EN_CRC));
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff fc41 	bl	80008b0 <read_register>
 800102e:	4603      	mov	r3, r0
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	71bb      	strb	r3, [r7, #6]
	uint8_t AA = read_register(EN_AA);
 8001036:	2001      	movs	r0, #1
 8001038:	f7ff fc3a 	bl	80008b0 <read_register>
 800103c:	4603      	mov	r3, r0
 800103e:	717b      	strb	r3, [r7, #5]

	if(config & (1 << EN_CRC) || AA)
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <getCRCLength+0x32>
 800104a:	797b      	ldrb	r3, [r7, #5]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d009      	beq.n	8001064 <getCRCLength+0x46>
	{
		if(config & (1 << CRCO))
 8001050:	79bb      	ldrb	r3, [r7, #6]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <getCRCLength+0x42>
		  result = RF24_CRC_16;
 800105a:	2302      	movs	r3, #2
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	e001      	b.n	8001064 <getCRCLength+0x46>
		else
		  result = RF24_CRC_8;
 8001060:	2301      	movs	r3, #1
 8001062:	71fb      	strb	r3, [r7, #7]
	}

	return result;
 8001064:	79fb      	ldrb	r3, [r7, #7]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <setRetries>:
	uint8_t disable = read_register(NRF_CONFIG) & ~(1 << EN_CRC);
	write_register(NRF_CONFIG, disable);
}

void setRetries(uint8_t delay, uint8_t count)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	460a      	mov	r2, r1
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	4613      	mov	r3, r2
 800107c:	71bb      	strb	r3, [r7, #6]
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	b25a      	sxtb	r2, r3
 8001084:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001088:	f003 030f 	and.w	r3, r3, #15
 800108c:	b25b      	sxtb	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b25b      	sxtb	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4619      	mov	r1, r3
 8001096:	2004      	movs	r0, #4
 8001098:	f7ff fc68 	bl	800096c <write_register>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_MspInit+0x5c>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_MspInit+0x5c>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6193      	str	r3, [r2, #24]
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_MspInit+0x5c>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_MspInit+0x5c>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_MspInit+0x5c>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_MspInit+0x5c>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_MspInit+0x60>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_MspInit+0x60>)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40021000 	.word	0x40021000
 8001104:	40010000 	.word	0x40010000

08001108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d12f      	bne.n	8001188 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_SPI_MspInit+0x8c>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a19      	ldr	r2, [pc, #100]	; (8001194 <HAL_SPI_MspInit+0x8c>)
 800112e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_SPI_MspInit+0x8c>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_SPI_MspInit+0x8c>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a13      	ldr	r2, [pc, #76]	; (8001194 <HAL_SPI_MspInit+0x8c>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_SPI_MspInit+0x8c>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001158:	23a0      	movs	r3, #160	; 0xa0
 800115a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	480b      	ldr	r0, [pc, #44]	; (8001198 <HAL_SPI_MspInit+0x90>)
 800116c:	f000 fa86 	bl	800167c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001170:	2340      	movs	r3, #64	; 0x40
 8001172:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4619      	mov	r1, r3
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_SPI_MspInit+0x90>)
 8001184:	f000 fa7a 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40013000 	.word	0x40013000
 8001194:	40021000 	.word	0x40021000
 8001198:	40010800 	.word	0x40010800

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <HAL_UART_MspInit+0x8c>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d131      	bne.n	8001220 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_UART_MspInit+0x90>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a1a      	ldr	r2, [pc, #104]	; (800122c <HAL_UART_MspInit+0x90>)
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_UART_MspInit+0x90>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_UART_MspInit+0x90>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_UART_MspInit+0x90>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_UART_MspInit+0x90>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	4619      	mov	r1, r3
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <HAL_UART_MspInit+0x94>)
 8001202:	f000 fa3b 	bl	800167c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <HAL_UART_MspInit+0x94>)
 800121c:	f000 fa2e 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001220:	bf00      	nop
 8001222:	3720      	adds	r7, #32
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40013800 	.word	0x40013800
 800122c:	40021000 	.word	0x40021000
 8001230:	40010800 	.word	0x40010800

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <MemManage_Handler+0x4>

08001246 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler+0x4>

08001252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127a:	f000 f8b1 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}

08001282 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001286:	2001      	movs	r0, #1
 8001288:	f000 fba4 	bl	80019d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <_sbrk+0x5c>)
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <_sbrk+0x60>)
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <_sbrk+0x64>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <_sbrk+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d207      	bcs.n	80012d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c0:	f001 fede 	bl	8003080 <__errno>
 80012c4:	4603      	mov	r3, r0
 80012c6:	220c      	movs	r2, #12
 80012c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	e009      	b.n	80012e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <_sbrk+0x64>)
 80012e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20002800 	.word	0x20002800
 80012f0:	00000400 	.word	0x00000400
 80012f4:	20000098 	.word	0x20000098
 80012f8:	20000158 	.word	0x20000158

080012fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800130a:	490d      	ldr	r1, [pc, #52]	; (8001340 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001320:	4c0a      	ldr	r4, [pc, #40]	; (800134c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800132e:	f7ff ffe5 	bl	80012fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001332:	f001 feab 	bl	800308c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001336:	f7fe ff2b 	bl	8000190 <main>
  bx lr
 800133a:	4770      	bx	lr
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001344:	08003b68 	.word	0x08003b68
  ldr r2, =_sbss
 8001348:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800134c:	20000158 	.word	0x20000158

08001350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC1_2_IRQHandler>
	...

08001354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_Init+0x28>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <HAL_Init+0x28>)
 800135e:	f043 0310 	orr.w	r3, r3, #16
 8001362:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001364:	2003      	movs	r0, #3
 8001366:	f000 f947 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136a:	200f      	movs	r0, #15
 800136c:	f000 f808 	bl	8001380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001370:	f7ff fe98 	bl	80010a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40022000 	.word	0x40022000

08001380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x54>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x58>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	fbb3 f3f1 	udiv	r3, r3, r1
 800139a:	fbb2 f3f3 	udiv	r3, r2, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f95f 	bl	8001662 <HAL_SYSTICK_Config>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00e      	b.n	80013cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d80a      	bhi.n	80013ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f000 f927 	bl	800160e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c0:	4a06      	ldr	r2, [pc, #24]	; (80013dc <HAL_InitTick+0x5c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e000      	b.n	80013cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20000004 	.word	0x20000004

080013e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_IncTick+0x1c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_IncTick+0x20>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <HAL_IncTick+0x20>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	20000008 	.word	0x20000008
 8001400:	20000144 	.word	0x20000144

08001404 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b02      	ldr	r3, [pc, #8]	; (8001414 <HAL_GetTick+0x10>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	20000144 	.word	0x20000144

08001418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff fff0 	bl	8001404 <HAL_GetTick>
 8001424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001430:	d005      	beq.n	800143e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_Delay+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143e:	bf00      	nop
 8001440:	f7ff ffe0 	bl	8001404 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	d8f7      	bhi.n	8001440 <HAL_Delay+0x28>
  {
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4906      	ldr	r1, [pc, #24]	; (80014f8 <__NVIC_EnableIRQ+0x34>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c4:	d301      	bcc.n	80015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00f      	b.n	80015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <SysTick_Config+0x40>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d2:	210f      	movs	r1, #15
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f7ff ff90 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <SysTick_Config+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <SysTick_Config+0x40>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff2d 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff42 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ff90 	bl	8001550 <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5f 	bl	80014fc <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff35 	bl	80014c4 <__NVIC_EnableIRQ>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ffa2 	bl	80015b4 <SysTick_Config>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b08b      	sub	sp, #44	; 0x2c
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168e:	e148      	b.n	8001922 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001690:	2201      	movs	r2, #1
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f040 8137 	bne.w	800191c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4aa3      	ldr	r2, [pc, #652]	; (8001940 <HAL_GPIO_Init+0x2c4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d05e      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016b8:	4aa1      	ldr	r2, [pc, #644]	; (8001940 <HAL_GPIO_Init+0x2c4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d875      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016be:	4aa1      	ldr	r2, [pc, #644]	; (8001944 <HAL_GPIO_Init+0x2c8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d058      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016c4:	4a9f      	ldr	r2, [pc, #636]	; (8001944 <HAL_GPIO_Init+0x2c8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d86f      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016ca:	4a9f      	ldr	r2, [pc, #636]	; (8001948 <HAL_GPIO_Init+0x2cc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d052      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016d0:	4a9d      	ldr	r2, [pc, #628]	; (8001948 <HAL_GPIO_Init+0x2cc>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d869      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016d6:	4a9d      	ldr	r2, [pc, #628]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d04c      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016dc:	4a9b      	ldr	r2, [pc, #620]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d863      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016e2:	4a9b      	ldr	r2, [pc, #620]	; (8001950 <HAL_GPIO_Init+0x2d4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d046      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016e8:	4a99      	ldr	r2, [pc, #612]	; (8001950 <HAL_GPIO_Init+0x2d4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d85d      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016ee:	2b12      	cmp	r3, #18
 80016f0:	d82a      	bhi.n	8001748 <HAL_GPIO_Init+0xcc>
 80016f2:	2b12      	cmp	r3, #18
 80016f4:	d859      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016f6:	a201      	add	r2, pc, #4	; (adr r2, 80016fc <HAL_GPIO_Init+0x80>)
 80016f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fc:	08001777 	.word	0x08001777
 8001700:	08001751 	.word	0x08001751
 8001704:	08001763 	.word	0x08001763
 8001708:	080017a5 	.word	0x080017a5
 800170c:	080017ab 	.word	0x080017ab
 8001710:	080017ab 	.word	0x080017ab
 8001714:	080017ab 	.word	0x080017ab
 8001718:	080017ab 	.word	0x080017ab
 800171c:	080017ab 	.word	0x080017ab
 8001720:	080017ab 	.word	0x080017ab
 8001724:	080017ab 	.word	0x080017ab
 8001728:	080017ab 	.word	0x080017ab
 800172c:	080017ab 	.word	0x080017ab
 8001730:	080017ab 	.word	0x080017ab
 8001734:	080017ab 	.word	0x080017ab
 8001738:	080017ab 	.word	0x080017ab
 800173c:	080017ab 	.word	0x080017ab
 8001740:	08001759 	.word	0x08001759
 8001744:	0800176d 	.word	0x0800176d
 8001748:	4a82      	ldr	r2, [pc, #520]	; (8001954 <HAL_GPIO_Init+0x2d8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174e:	e02c      	b.n	80017aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e029      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	3304      	adds	r3, #4
 800175e:	623b      	str	r3, [r7, #32]
          break;
 8001760:	e024      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	3308      	adds	r3, #8
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e01f      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	330c      	adds	r3, #12
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e01a      	b.n	80017ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177e:	2304      	movs	r3, #4
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e013      	b.n	80017ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800178c:	2308      	movs	r3, #8
 800178e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	611a      	str	r2, [r3, #16]
          break;
 8001796:	e009      	b.n	80017ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001798:	2308      	movs	r3, #8
 800179a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	615a      	str	r2, [r3, #20]
          break;
 80017a2:	e003      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	e000      	b.n	80017ac <HAL_GPIO_Init+0x130>
          break;
 80017aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2bff      	cmp	r3, #255	; 0xff
 80017b0:	d801      	bhi.n	80017b6 <HAL_GPIO_Init+0x13a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	e001      	b.n	80017ba <HAL_GPIO_Init+0x13e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3304      	adds	r3, #4
 80017ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2bff      	cmp	r3, #255	; 0xff
 80017c0:	d802      	bhi.n	80017c8 <HAL_GPIO_Init+0x14c>
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0x152>
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	3b08      	subs	r3, #8
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	210f      	movs	r1, #15
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	401a      	ands	r2, r3
 80017e0:	6a39      	ldr	r1, [r7, #32]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	431a      	orrs	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8090 	beq.w	800191c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017fc:	4b56      	ldr	r3, [pc, #344]	; (8001958 <HAL_GPIO_Init+0x2dc>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a55      	ldr	r2, [pc, #340]	; (8001958 <HAL_GPIO_Init+0x2dc>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_GPIO_Init+0x2dc>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001814:	4a51      	ldr	r2, [pc, #324]	; (800195c <HAL_GPIO_Init+0x2e0>)
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001820:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a49      	ldr	r2, [pc, #292]	; (8001960 <HAL_GPIO_Init+0x2e4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00d      	beq.n	800185c <HAL_GPIO_Init+0x1e0>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a48      	ldr	r2, [pc, #288]	; (8001964 <HAL_GPIO_Init+0x2e8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x1dc>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a47      	ldr	r2, [pc, #284]	; (8001968 <HAL_GPIO_Init+0x2ec>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_Init+0x1d8>
 8001850:	2302      	movs	r3, #2
 8001852:	e004      	b.n	800185e <HAL_GPIO_Init+0x1e2>
 8001854:	2303      	movs	r3, #3
 8001856:	e002      	b.n	800185e <HAL_GPIO_Init+0x1e2>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_GPIO_Init+0x1e2>
 800185c:	2300      	movs	r3, #0
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	f002 0203 	and.w	r2, r2, #3
 8001864:	0092      	lsls	r2, r2, #2
 8001866:	4093      	lsls	r3, r2
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800186e:	493b      	ldr	r1, [pc, #236]	; (800195c <HAL_GPIO_Init+0x2e0>)
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001888:	4b38      	ldr	r3, [pc, #224]	; (800196c <HAL_GPIO_Init+0x2f0>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4937      	ldr	r1, [pc, #220]	; (800196c <HAL_GPIO_Init+0x2f0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001896:	4b35      	ldr	r3, [pc, #212]	; (800196c <HAL_GPIO_Init+0x2f0>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	43db      	mvns	r3, r3
 800189e:	4933      	ldr	r1, [pc, #204]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	492d      	ldr	r1, [pc, #180]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018be:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4929      	ldr	r1, [pc, #164]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	4923      	ldr	r1, [pc, #140]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	491f      	ldr	r1, [pc, #124]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_GPIO_Init+0x2f0>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	4919      	ldr	r1, [pc, #100]	; (800196c <HAL_GPIO_Init+0x2f0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_GPIO_Init+0x2f0>)
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	4915      	ldr	r1, [pc, #84]	; (800196c <HAL_GPIO_Init+0x2f0>)
 8001918:	4013      	ands	r3, r2
 800191a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	3301      	adds	r3, #1
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	f47f aeaf 	bne.w	8001690 <HAL_GPIO_Init+0x14>
  }
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	372c      	adds	r7, #44	; 0x2c
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	10320000 	.word	0x10320000
 8001944:	10310000 	.word	0x10310000
 8001948:	10220000 	.word	0x10220000
 800194c:	10210000 	.word	0x10210000
 8001950:	10120000 	.word	0x10120000
 8001954:	10110000 	.word	0x10110000
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000
 8001960:	40010800 	.word	0x40010800
 8001964:	40010c00 	.word	0x40010c00
 8001968:	40011000 	.word	0x40011000
 800196c:	40010400 	.word	0x40010400

08001970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800198c:	e003      	b.n	8001996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	041a      	lsls	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	611a      	str	r2, [r3, #16]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	041a      	lsls	r2, r3, #16
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43d9      	mvns	r1, r3
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	400b      	ands	r3, r1
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	611a      	str	r2, [r3, #16]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d006      	beq.n	80019f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fbb4 	bl	8000160 <HAL_GPIO_EXTI_Callback>
  }
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40010400 	.word	0x40010400

08001a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e26c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8087 	beq.w	8001b32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a24:	4b92      	ldr	r3, [pc, #584]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d00c      	beq.n	8001a4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a30:	4b8f      	ldr	r3, [pc, #572]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d112      	bne.n	8001a62 <HAL_RCC_OscConfig+0x5e>
 8001a3c:	4b8c      	ldr	r3, [pc, #560]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a48:	d10b      	bne.n	8001a62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4a:	4b89      	ldr	r3, [pc, #548]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d06c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x12c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d168      	bne.n	8001b30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e246      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x76>
 8001a6c:	4b80      	ldr	r3, [pc, #512]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a7f      	ldr	r2, [pc, #508]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	e02e      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd4>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x98>
 8001a82:	4b7b      	ldr	r3, [pc, #492]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a7a      	ldr	r2, [pc, #488]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b78      	ldr	r3, [pc, #480]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a77      	ldr	r2, [pc, #476]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e01d      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd4>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0xbc>
 8001aa6:	4b72      	ldr	r3, [pc, #456]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a71      	ldr	r2, [pc, #452]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b6f      	ldr	r3, [pc, #444]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6e      	ldr	r2, [pc, #440]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd4>
 8001ac0:	4b6b      	ldr	r3, [pc, #428]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a6a      	ldr	r2, [pc, #424]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b68      	ldr	r3, [pc, #416]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a67      	ldr	r2, [pc, #412]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fc90 	bl	8001404 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff fc8c 	bl	8001404 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e1fa      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xe4>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7ff fc7c 	bl	8001404 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff fc78 	bl	8001404 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e1e6      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x10c>
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d063      	beq.n	8001c06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3e:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00b      	beq.n	8001b62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b4a:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d11c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x18c>
 8001b56:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d116      	bne.n	8001b90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	4b43      	ldr	r3, [pc, #268]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <HAL_RCC_OscConfig+0x176>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e1ba      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4939      	ldr	r1, [pc, #228]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	e03a      	b.n	8001c06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7ff fc31 	bl	8001404 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba6:	f7ff fc2d 	bl	8001404 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e19b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc4:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4927      	ldr	r1, [pc, #156]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e015      	b.n	8001c06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fc10 	bl	8001404 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be8:	f7ff fc0c 	bl	8001404 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e17a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d03a      	beq.n	8001c88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d019      	beq.n	8001c4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c20:	f7ff fbf0 	bl	8001404 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c28:	f7ff fbec 	bl	8001404 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e15a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c46:	2001      	movs	r0, #1
 8001c48:	f000 fad8 	bl	80021fc <RCC_Delay>
 8001c4c:	e01c      	b.n	8001c88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c54:	f7ff fbd6 	bl	8001404 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5a:	e00f      	b.n	8001c7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7ff fbd2 	bl	8001404 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d908      	bls.n	8001c7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e140      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	42420000 	.word	0x42420000
 8001c78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7c:	4b9e      	ldr	r3, [pc, #632]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1e9      	bne.n	8001c5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a6 	beq.w	8001de2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9a:	4b97      	ldr	r3, [pc, #604]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10d      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	4b94      	ldr	r3, [pc, #592]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a93      	ldr	r2, [pc, #588]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	61d3      	str	r3, [r2, #28]
 8001cb2:	4b91      	ldr	r3, [pc, #580]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	4b8e      	ldr	r3, [pc, #568]	; (8001efc <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d118      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cce:	4b8b      	ldr	r3, [pc, #556]	; (8001efc <HAL_RCC_OscConfig+0x4f8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a8a      	ldr	r2, [pc, #552]	; (8001efc <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cda:	f7ff fb93 	bl	8001404 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce2:	f7ff fb8f 	bl	8001404 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b64      	cmp	r3, #100	; 0x64
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0fd      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	4b81      	ldr	r3, [pc, #516]	; (8001efc <HAL_RCC_OscConfig+0x4f8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x312>
 8001d08:	4b7b      	ldr	r3, [pc, #492]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a7a      	ldr	r2, [pc, #488]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6213      	str	r3, [r2, #32]
 8001d14:	e02d      	b.n	8001d72 <HAL_RCC_OscConfig+0x36e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x334>
 8001d1e:	4b76      	ldr	r3, [pc, #472]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4a75      	ldr	r2, [pc, #468]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6213      	str	r3, [r2, #32]
 8001d2a:	4b73      	ldr	r3, [pc, #460]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4a72      	ldr	r2, [pc, #456]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	6213      	str	r3, [r2, #32]
 8001d36:	e01c      	b.n	8001d72 <HAL_RCC_OscConfig+0x36e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d10c      	bne.n	8001d5a <HAL_RCC_OscConfig+0x356>
 8001d40:	4b6d      	ldr	r3, [pc, #436]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4a6c      	ldr	r2, [pc, #432]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	f043 0304 	orr.w	r3, r3, #4
 8001d4a:	6213      	str	r3, [r2, #32]
 8001d4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4a69      	ldr	r2, [pc, #420]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6213      	str	r3, [r2, #32]
 8001d58:	e00b      	b.n	8001d72 <HAL_RCC_OscConfig+0x36e>
 8001d5a:	4b67      	ldr	r3, [pc, #412]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4a66      	ldr	r2, [pc, #408]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6213      	str	r3, [r2, #32]
 8001d66:	4b64      	ldr	r3, [pc, #400]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4a63      	ldr	r2, [pc, #396]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d015      	beq.n	8001da6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff fb43 	bl	8001404 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7ff fb3f 	bl	8001404 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e0ab      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d98:	4b57      	ldr	r3, [pc, #348]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0ee      	beq.n	8001d82 <HAL_RCC_OscConfig+0x37e>
 8001da4:	e014      	b.n	8001dd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da6:	f7ff fb2d 	bl	8001404 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7ff fb29 	bl	8001404 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e095      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1ee      	bne.n	8001dae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d105      	bne.n	8001de2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd6:	4b48      	ldr	r3, [pc, #288]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4a47      	ldr	r2, [pc, #284]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8081 	beq.w	8001eee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dec:	4b42      	ldr	r3, [pc, #264]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d061      	beq.n	8001ebc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d146      	bne.n	8001e8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e00:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <HAL_RCC_OscConfig+0x4fc>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff fafd 	bl	8001404 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff faf9 	bl	8001404 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e067      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e20:	4b35      	ldr	r3, [pc, #212]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e34:	d108      	bne.n	8001e48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e36:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	492d      	ldr	r1, [pc, #180]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e48:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a19      	ldr	r1, [r3, #32]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	4927      	ldr	r1, [pc, #156]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_RCC_OscConfig+0x4fc>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff facd 	bl	8001404 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff fac9 	bl	8001404 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e037      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x46a>
 8001e8c:	e02f      	b.n	8001eee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <HAL_RCC_OscConfig+0x4fc>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff fab6 	bl	8001404 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff fab2 	bl	8001404 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e020      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x498>
 8001eba:	e018      	b.n	8001eee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e013      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40007000 	.word	0x40007000
 8001f00:	42420060 	.word	0x42420060

08001f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0d0      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f18:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d910      	bls.n	8001f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 0207 	bic.w	r2, r3, #7
 8001f2e:	4965      	ldr	r1, [pc, #404]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0b8      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f60:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a58      	ldr	r2, [pc, #352]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f78:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a52      	ldr	r2, [pc, #328]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f84:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	494d      	ldr	r1, [pc, #308]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d040      	beq.n	8002024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d115      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e07f      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc2:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e073      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e06b      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f023 0203 	bic.w	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4936      	ldr	r1, [pc, #216]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff4:	f7ff fa06 	bl	8001404 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7ff fa02 	bl	8001404 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e053      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 020c 	and.w	r2, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	429a      	cmp	r2, r3
 8002022:	d1eb      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d210      	bcs.n	8002054 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	4922      	ldr	r1, [pc, #136]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e032      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4916      	ldr	r1, [pc, #88]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	490e      	ldr	r1, [pc, #56]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002092:	f000 f821 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002096:	4602      	mov	r2, r0
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	490a      	ldr	r1, [pc, #40]	; (80020cc <HAL_RCC_ClockConfig+0x1c8>)
 80020a4:	5ccb      	ldrb	r3, [r1, r3]
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1cc>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_ClockConfig+0x1d0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f964 	bl	8001380 <HAL_InitTick>

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08003b14 	.word	0x08003b14
 80020d0:	20000000 	.word	0x20000000
 80020d4:	20000004 	.word	0x20000004

080020d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b490      	push	{r4, r7}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020de:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020e0:	1d3c      	adds	r4, r7, #4
 80020e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020e8:	f240 2301 	movw	r3, #513	; 0x201
 80020ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b04      	cmp	r3, #4
 8002110:	d002      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x40>
 8002112:	2b08      	cmp	r3, #8
 8002114:	d003      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x46>
 8002116:	e02d      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 800211a:	623b      	str	r3, [r7, #32]
      break;
 800211c:	e02d      	b.n	800217a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	0c9b      	lsrs	r3, r3, #18
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800212a:	4413      	add	r3, r2
 800212c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002130:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d013      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_RCC_GetSysClockFreq+0xb4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	0c5b      	lsrs	r3, r3, #17
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800214a:	4413      	add	r3, r2
 800214c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002150:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002156:	fb02 f203 	mul.w	r2, r2, r3
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
 8002162:	e004      	b.n	800216e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002168:	fb02 f303 	mul.w	r3, r2, r3
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	623b      	str	r3, [r7, #32]
      break;
 8002172:	e002      	b.n	800217a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002176:	623b      	str	r3, [r7, #32]
      break;
 8002178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800217a:	6a3b      	ldr	r3, [r7, #32]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3728      	adds	r7, #40	; 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bc90      	pop	{r4, r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	08003b04 	.word	0x08003b04
 800218c:	40021000 	.word	0x40021000
 8002190:	007a1200 	.word	0x007a1200
 8002194:	003d0900 	.word	0x003d0900

08002198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800219c:	4b02      	ldr	r3, [pc, #8]	; (80021a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	20000000 	.word	0x20000000

080021ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021b0:	f7ff fff2 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	4903      	ldr	r1, [pc, #12]	; (80021d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c2:	5ccb      	ldrb	r3, [r1, r3]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	08003b24 	.word	0x08003b24

080021d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021d8:	f7ff ffde 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	0adb      	lsrs	r3, r3, #11
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	4903      	ldr	r1, [pc, #12]	; (80021f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000
 80021f8:	08003b24 	.word	0x08003b24

080021fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <RCC_Delay+0x34>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <RCC_Delay+0x38>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002218:	bf00      	nop
  }
  while (Delay --);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	60fa      	str	r2, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f9      	bne.n	8002218 <RCC_Delay+0x1c>
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	20000000 	.word	0x20000000
 8002234:	10624dd3 	.word	0x10624dd3

08002238 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e076      	b.n	8002338 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800225a:	d009      	beq.n	8002270 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
 8002262:	e005      	b.n	8002270 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe ff3c 	bl	8001108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f4:	ea42 0103 	orr.w	r1, r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	0c1a      	lsrs	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f002 0204 	and.w	r2, r2, #4
 8002316:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002326:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_SPI_Transmit+0x22>
 800235e:	2302      	movs	r3, #2
 8002360:	e126      	b.n	80025b0 <HAL_SPI_Transmit+0x270>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800236a:	f7ff f84b 	bl	8001404 <HAL_GetTick>
 800236e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d002      	beq.n	8002386 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002380:	2302      	movs	r3, #2
 8002382:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002384:	e10b      	b.n	800259e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <HAL_SPI_Transmit+0x52>
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002396:	e102      	b.n	800259e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2203      	movs	r2, #3
 800239c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	88fa      	ldrh	r2, [r7, #6]
 80023b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023de:	d10f      	bne.n	8002400 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240a:	2b40      	cmp	r3, #64	; 0x40
 800240c:	d007      	beq.n	800241e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002426:	d14b      	bne.n	80024c0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_SPI_Transmit+0xf6>
 8002430:	8afb      	ldrh	r3, [r7, #22]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d13e      	bne.n	80024b4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	881a      	ldrh	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	1c9a      	adds	r2, r3, #2
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800245a:	e02b      	b.n	80024b4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b02      	cmp	r3, #2
 8002468:	d112      	bne.n	8002490 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	1c9a      	adds	r2, r3, #2
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	86da      	strh	r2, [r3, #54]	; 0x36
 800248e:	e011      	b.n	80024b4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002490:	f7fe ffb8 	bl	8001404 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d803      	bhi.n	80024a8 <HAL_SPI_Transmit+0x168>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d102      	bne.n	80024ae <HAL_SPI_Transmit+0x16e>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024b2:	e074      	b.n	800259e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1ce      	bne.n	800245c <HAL_SPI_Transmit+0x11c>
 80024be:	e04c      	b.n	800255a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <HAL_SPI_Transmit+0x18e>
 80024c8:	8afb      	ldrh	r3, [r7, #22]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d140      	bne.n	8002550 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	330c      	adds	r3, #12
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024f4:	e02c      	b.n	8002550 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b02      	cmp	r3, #2
 8002502:	d113      	bne.n	800252c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	7812      	ldrb	r2, [r2, #0]
 8002510:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	86da      	strh	r2, [r3, #54]	; 0x36
 800252a:	e011      	b.n	8002550 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800252c:	f7fe ff6a 	bl	8001404 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d803      	bhi.n	8002544 <HAL_SPI_Transmit+0x204>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002542:	d102      	bne.n	800254a <HAL_SPI_Transmit+0x20a>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800254e:	e026      	b.n	800259e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1cd      	bne.n	80024f6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	6839      	ldr	r1, [r7, #0]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fbb8 	bl	8002cd4 <SPI_EndRxTxTransaction>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	77fb      	strb	r3, [r7, #31]
 800259a:	e000      	b.n	800259e <HAL_SPI_Transmit+0x25e>
  }

error:
 800259c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	4613      	mov	r3, r2
 80025c6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025d4:	d112      	bne.n	80025fc <HAL_SPI_Receive+0x44>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10e      	bne.n	80025fc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2204      	movs	r2, #4
 80025e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025e6:	88fa      	ldrh	r2, [r7, #6]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f8f1 	bl	80027da <HAL_SPI_TransmitReceive>
 80025f8:	4603      	mov	r3, r0
 80025fa:	e0ea      	b.n	80027d2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_SPI_Receive+0x52>
 8002606:	2302      	movs	r3, #2
 8002608:	e0e3      	b.n	80027d2 <HAL_SPI_Receive+0x21a>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002612:	f7fe fef7 	bl	8001404 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d002      	beq.n	800262a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002624:	2302      	movs	r3, #2
 8002626:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002628:	e0ca      	b.n	80027c0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_SPI_Receive+0x7e>
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d102      	bne.n	800263c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	75fb      	strb	r3, [r7, #23]
    goto error;
 800263a:	e0c1      	b.n	80027c0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2204      	movs	r2, #4
 8002640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	88fa      	ldrh	r2, [r7, #6]
 800265a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002682:	d10f      	bne.n	80026a4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002692:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d007      	beq.n	80026c2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d162      	bne.n	8002790 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026ca:	e02e      	b.n	800272a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d115      	bne.n	8002706 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f103 020c 	add.w	r2, r3, #12
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	7812      	ldrb	r2, [r2, #0]
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002704:	e011      	b.n	800272a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002706:	f7fe fe7d 	bl	8001404 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d803      	bhi.n	800271e <HAL_SPI_Receive+0x166>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d102      	bne.n	8002724 <HAL_SPI_Receive+0x16c>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002728:	e04a      	b.n	80027c0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1cb      	bne.n	80026cc <HAL_SPI_Receive+0x114>
 8002734:	e031      	b.n	800279a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d113      	bne.n	800276c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	b292      	uxth	r2, r2
 8002750:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	1c9a      	adds	r2, r3, #2
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	87da      	strh	r2, [r3, #62]	; 0x3e
 800276a:	e011      	b.n	8002790 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800276c:	f7fe fe4a 	bl	8001404 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d803      	bhi.n	8002784 <HAL_SPI_Receive+0x1cc>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002782:	d102      	bne.n	800278a <HAL_SPI_Receive+0x1d2>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800278e:	e017      	b.n	80027c0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1cd      	bne.n	8002736 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	6839      	ldr	r1, [r7, #0]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fa46 	bl	8002c30 <SPI_EndRxTransaction>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	75fb      	strb	r3, [r7, #23]
 80027bc:	e000      	b.n	80027c0 <HAL_SPI_Receive+0x208>
  }

error :
 80027be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b08c      	sub	sp, #48	; 0x30
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027e8:	2301      	movs	r3, #1
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_SPI_TransmitReceive+0x26>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e18a      	b.n	8002b16 <HAL_SPI_TransmitReceive+0x33c>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002808:	f7fe fdfc 	bl	8001404 <HAL_GetTick>
 800280c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002822:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002826:	2b01      	cmp	r3, #1
 8002828:	d00f      	beq.n	800284a <HAL_SPI_TransmitReceive+0x70>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002830:	d107      	bne.n	8002842 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <HAL_SPI_TransmitReceive+0x68>
 800283a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800283e:	2b04      	cmp	r3, #4
 8002840:	d003      	beq.n	800284a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002842:	2302      	movs	r3, #2
 8002844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002848:	e15b      	b.n	8002b02 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_SPI_TransmitReceive+0x82>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_SPI_TransmitReceive+0x82>
 8002856:	887b      	ldrh	r3, [r7, #2]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d103      	bne.n	8002864 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002862:	e14e      	b.n	8002b02 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b04      	cmp	r3, #4
 800286e:	d003      	beq.n	8002878 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2205      	movs	r2, #5
 8002874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	887a      	ldrh	r2, [r7, #2]
 800288e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	887a      	ldrh	r2, [r7, #2]
 800289a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b40      	cmp	r3, #64	; 0x40
 80028ba:	d007      	beq.n	80028cc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d4:	d178      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_SPI_TransmitReceive+0x10a>
 80028de:	8b7b      	ldrh	r3, [r7, #26]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d166      	bne.n	80029b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	881a      	ldrh	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	1c9a      	adds	r2, r3, #2
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002908:	e053      	b.n	80029b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b02      	cmp	r3, #2
 8002916:	d11b      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x176>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d016      	beq.n	8002950 <HAL_SPI_TransmitReceive+0x176>
 8002922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d113      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	881a      	ldrh	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	1c9a      	adds	r2, r3, #2
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d119      	bne.n	8002992 <HAL_SPI_TransmitReceive+0x1b8>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d014      	beq.n	8002992 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	b292      	uxth	r2, r2
 8002974:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	1c9a      	adds	r2, r3, #2
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800298e:	2301      	movs	r3, #1
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002992:	f7fe fd37 	bl	8001404 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800299e:	429a      	cmp	r2, r3
 80029a0:	d807      	bhi.n	80029b2 <HAL_SPI_TransmitReceive+0x1d8>
 80029a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a8:	d003      	beq.n	80029b2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029b0:	e0a7      	b.n	8002b02 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1a6      	bne.n	800290a <HAL_SPI_TransmitReceive+0x130>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1a1      	bne.n	800290a <HAL_SPI_TransmitReceive+0x130>
 80029c6:	e07c      	b.n	8002ac2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_SPI_TransmitReceive+0x1fc>
 80029d0:	8b7b      	ldrh	r3, [r7, #26]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d16b      	bne.n	8002aae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	330c      	adds	r3, #12
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029fc:	e057      	b.n	8002aae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d11c      	bne.n	8002a46 <HAL_SPI_TransmitReceive+0x26c>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d017      	beq.n	8002a46 <HAL_SPI_TransmitReceive+0x26c>
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d114      	bne.n	8002a46 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	330c      	adds	r3, #12
 8002a26:	7812      	ldrb	r2, [r2, #0]
 8002a28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d119      	bne.n	8002a88 <HAL_SPI_TransmitReceive+0x2ae>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d014      	beq.n	8002a88 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a84:	2301      	movs	r3, #1
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a88:	f7fe fcbc 	bl	8001404 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d803      	bhi.n	8002aa0 <HAL_SPI_TransmitReceive+0x2c6>
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9e:	d102      	bne.n	8002aa6 <HAL_SPI_TransmitReceive+0x2cc>
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002aac:	e029      	b.n	8002b02 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1a2      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x224>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d19d      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f904 	bl	8002cd4 <SPI_EndRxTxTransaction>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ade:	e010      	b.n	8002b02 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	e000      	b.n	8002b02 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002b00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3730      	adds	r7, #48	; 0x30
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b30:	f7fe fc68 	bl	8001404 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b40:	f7fe fc60 	bl	8001404 <HAL_GetTick>
 8002b44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b46:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	015b      	lsls	r3, r3, #5
 8002b4c:	0d1b      	lsrs	r3, r3, #20
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	fb02 f303 	mul.w	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b56:	e054      	b.n	8002c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5e:	d050      	beq.n	8002c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b60:	f7fe fc50 	bl	8001404 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d902      	bls.n	8002b76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d13d      	bne.n	8002bf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8e:	d111      	bne.n	8002bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b98:	d004      	beq.n	8002ba4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba2:	d107      	bne.n	8002bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bbc:	d10f      	bne.n	8002bde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e017      	b.n	8002c22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d19b      	bne.n	8002b58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000000 	.word	0x20000000

08002c30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c44:	d111      	bne.n	8002c6a <SPI_EndRxTransaction+0x3a>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4e:	d004      	beq.n	8002c5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c58:	d107      	bne.n	8002c6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c68:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c72:	d117      	bne.n	8002ca4 <SPI_EndRxTransaction+0x74>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7c:	d112      	bne.n	8002ca4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2200      	movs	r2, #0
 8002c86:	2101      	movs	r1, #1
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f7ff ff49 	bl	8002b20 <SPI_WaitFlagStateUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01a      	beq.n	8002cca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c98:	f043 0220 	orr.w	r2, r3, #32
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e013      	b.n	8002ccc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2200      	movs	r2, #0
 8002cac:	2180      	movs	r1, #128	; 0x80
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff ff36 	bl	8002b20 <SPI_WaitFlagStateUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	f043 0220 	orr.w	r2, r3, #32
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e000      	b.n	8002ccc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f7ff ff18 	bl	8002b20 <SPI_WaitFlagStateUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d007      	beq.n	8002d06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f043 0220 	orr.w	r2, r3, #32
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e000      	b.n	8002d08 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e03f      	b.n	8002da2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe fa30 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	; 0x24
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f905 	bl	8002f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b08a      	sub	sp, #40	; 0x28
 8002dae:	af02      	add	r7, sp, #8
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	4613      	mov	r3, r2
 8002db8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d17c      	bne.n	8002ec4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_UART_Transmit+0x2c>
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e075      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_UART_Transmit+0x3e>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e06e      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2221      	movs	r2, #33	; 0x21
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dfe:	f7fe fb01 	bl	8001404 <HAL_GetTick>
 8002e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	88fa      	ldrh	r2, [r7, #6]
 8002e0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e18:	d108      	bne.n	8002e2c <HAL_UART_Transmit+0x82>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d104      	bne.n	8002e2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	e003      	b.n	8002e34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e3c:	e02a      	b.n	8002e94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2200      	movs	r2, #0
 8002e46:	2180      	movs	r1, #128	; 0x80
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f840 	bl	8002ece <UART_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e036      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10b      	bne.n	8002e76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	3302      	adds	r3, #2
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	e007      	b.n	8002e86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	781a      	ldrb	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	3301      	adds	r3, #1
 8002e84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1cf      	bne.n	8002e3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2140      	movs	r1, #64	; 0x40
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f810 	bl	8002ece <UART_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e006      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	4613      	mov	r3, r2
 8002edc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ede:	e02c      	b.n	8002f3a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d028      	beq.n	8002f3a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <UART_WaitOnFlagUntilTimeout+0x30>
 8002eee:	f7fe fa89 	bl	8001404 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d21d      	bcs.n	8002f3a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f0c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e00f      	b.n	8002f5a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	bf0c      	ite	eq
 8002f4a:	2301      	moveq	r3, #1
 8002f4c:	2300      	movne	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d0c3      	beq.n	8002ee0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f9e:	f023 030c 	bic.w	r3, r3, #12
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2c      	ldr	r2, [pc, #176]	; (8003078 <UART_SetConfig+0x114>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d103      	bne.n	8002fd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fcc:	f7ff f902 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	e002      	b.n	8002fda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fd4:	f7ff f8ea 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 8002fd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009a      	lsls	r2, r3, #2
 8002fe4:	441a      	add	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	4a22      	ldr	r2, [pc, #136]	; (800307c <UART_SetConfig+0x118>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	0119      	lsls	r1, r3, #4
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	009a      	lsls	r2, r3, #2
 8003004:	441a      	add	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003010:	4b1a      	ldr	r3, [pc, #104]	; (800307c <UART_SetConfig+0x118>)
 8003012:	fba3 0302 	umull	r0, r3, r3, r2
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	2064      	movs	r0, #100	; 0x64
 800301a:	fb00 f303 	mul.w	r3, r0, r3
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	3332      	adds	r3, #50	; 0x32
 8003024:	4a15      	ldr	r2, [pc, #84]	; (800307c <UART_SetConfig+0x118>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003030:	4419      	add	r1, r3
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009a      	lsls	r2, r3, #2
 800303c:	441a      	add	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	fbb2 f2f3 	udiv	r2, r2, r3
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <UART_SetConfig+0x118>)
 800304a:	fba3 0302 	umull	r0, r3, r3, r2
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	2064      	movs	r0, #100	; 0x64
 8003052:	fb00 f303 	mul.w	r3, r0, r3
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	3332      	adds	r3, #50	; 0x32
 800305c:	4a07      	ldr	r2, [pc, #28]	; (800307c <UART_SetConfig+0x118>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	f003 020f 	and.w	r2, r3, #15
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	440a      	add	r2, r1
 800306e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40013800 	.word	0x40013800
 800307c:	51eb851f 	.word	0x51eb851f

08003080 <__errno>:
 8003080:	4b01      	ldr	r3, [pc, #4]	; (8003088 <__errno+0x8>)
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	2000000c 	.word	0x2000000c

0800308c <__libc_init_array>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	2600      	movs	r6, #0
 8003090:	4d0c      	ldr	r5, [pc, #48]	; (80030c4 <__libc_init_array+0x38>)
 8003092:	4c0d      	ldr	r4, [pc, #52]	; (80030c8 <__libc_init_array+0x3c>)
 8003094:	1b64      	subs	r4, r4, r5
 8003096:	10a4      	asrs	r4, r4, #2
 8003098:	42a6      	cmp	r6, r4
 800309a:	d109      	bne.n	80030b0 <__libc_init_array+0x24>
 800309c:	f000 fc70 	bl	8003980 <_init>
 80030a0:	2600      	movs	r6, #0
 80030a2:	4d0a      	ldr	r5, [pc, #40]	; (80030cc <__libc_init_array+0x40>)
 80030a4:	4c0a      	ldr	r4, [pc, #40]	; (80030d0 <__libc_init_array+0x44>)
 80030a6:	1b64      	subs	r4, r4, r5
 80030a8:	10a4      	asrs	r4, r4, #2
 80030aa:	42a6      	cmp	r6, r4
 80030ac:	d105      	bne.n	80030ba <__libc_init_array+0x2e>
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b4:	4798      	blx	r3
 80030b6:	3601      	adds	r6, #1
 80030b8:	e7ee      	b.n	8003098 <__libc_init_array+0xc>
 80030ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80030be:	4798      	blx	r3
 80030c0:	3601      	adds	r6, #1
 80030c2:	e7f2      	b.n	80030aa <__libc_init_array+0x1e>
 80030c4:	08003b60 	.word	0x08003b60
 80030c8:	08003b60 	.word	0x08003b60
 80030cc:	08003b60 	.word	0x08003b60
 80030d0:	08003b64 	.word	0x08003b64

080030d4 <memcpy>:
 80030d4:	440a      	add	r2, r1
 80030d6:	4291      	cmp	r1, r2
 80030d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80030dc:	d100      	bne.n	80030e0 <memcpy+0xc>
 80030de:	4770      	bx	lr
 80030e0:	b510      	push	{r4, lr}
 80030e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030e6:	4291      	cmp	r1, r2
 80030e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030ec:	d1f9      	bne.n	80030e2 <memcpy+0xe>
 80030ee:	bd10      	pop	{r4, pc}

080030f0 <memset>:
 80030f0:	4603      	mov	r3, r0
 80030f2:	4402      	add	r2, r0
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d100      	bne.n	80030fa <memset+0xa>
 80030f8:	4770      	bx	lr
 80030fa:	f803 1b01 	strb.w	r1, [r3], #1
 80030fe:	e7f9      	b.n	80030f4 <memset+0x4>

08003100 <sniprintf>:
 8003100:	b40c      	push	{r2, r3}
 8003102:	b530      	push	{r4, r5, lr}
 8003104:	4b17      	ldr	r3, [pc, #92]	; (8003164 <sniprintf+0x64>)
 8003106:	1e0c      	subs	r4, r1, #0
 8003108:	681d      	ldr	r5, [r3, #0]
 800310a:	b09d      	sub	sp, #116	; 0x74
 800310c:	da08      	bge.n	8003120 <sniprintf+0x20>
 800310e:	238b      	movs	r3, #139	; 0x8b
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	602b      	str	r3, [r5, #0]
 8003116:	b01d      	add	sp, #116	; 0x74
 8003118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800311c:	b002      	add	sp, #8
 800311e:	4770      	bx	lr
 8003120:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003124:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003128:	bf0c      	ite	eq
 800312a:	4623      	moveq	r3, r4
 800312c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003130:	9304      	str	r3, [sp, #16]
 8003132:	9307      	str	r3, [sp, #28]
 8003134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003138:	9002      	str	r0, [sp, #8]
 800313a:	9006      	str	r0, [sp, #24]
 800313c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003140:	4628      	mov	r0, r5
 8003142:	ab21      	add	r3, sp, #132	; 0x84
 8003144:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003146:	a902      	add	r1, sp, #8
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	f000 f869 	bl	8003220 <_svfiprintf_r>
 800314e:	1c43      	adds	r3, r0, #1
 8003150:	bfbc      	itt	lt
 8003152:	238b      	movlt	r3, #139	; 0x8b
 8003154:	602b      	strlt	r3, [r5, #0]
 8003156:	2c00      	cmp	r4, #0
 8003158:	d0dd      	beq.n	8003116 <sniprintf+0x16>
 800315a:	2200      	movs	r2, #0
 800315c:	9b02      	ldr	r3, [sp, #8]
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e7d9      	b.n	8003116 <sniprintf+0x16>
 8003162:	bf00      	nop
 8003164:	2000000c 	.word	0x2000000c

08003168 <__ssputs_r>:
 8003168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800316c:	688e      	ldr	r6, [r1, #8]
 800316e:	4682      	mov	sl, r0
 8003170:	429e      	cmp	r6, r3
 8003172:	460c      	mov	r4, r1
 8003174:	4690      	mov	r8, r2
 8003176:	461f      	mov	r7, r3
 8003178:	d838      	bhi.n	80031ec <__ssputs_r+0x84>
 800317a:	898a      	ldrh	r2, [r1, #12]
 800317c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003180:	d032      	beq.n	80031e8 <__ssputs_r+0x80>
 8003182:	6825      	ldr	r5, [r4, #0]
 8003184:	6909      	ldr	r1, [r1, #16]
 8003186:	3301      	adds	r3, #1
 8003188:	eba5 0901 	sub.w	r9, r5, r1
 800318c:	6965      	ldr	r5, [r4, #20]
 800318e:	444b      	add	r3, r9
 8003190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003198:	106d      	asrs	r5, r5, #1
 800319a:	429d      	cmp	r5, r3
 800319c:	bf38      	it	cc
 800319e:	461d      	movcc	r5, r3
 80031a0:	0553      	lsls	r3, r2, #21
 80031a2:	d531      	bpl.n	8003208 <__ssputs_r+0xa0>
 80031a4:	4629      	mov	r1, r5
 80031a6:	f000 fb45 	bl	8003834 <_malloc_r>
 80031aa:	4606      	mov	r6, r0
 80031ac:	b950      	cbnz	r0, 80031c4 <__ssputs_r+0x5c>
 80031ae:	230c      	movs	r3, #12
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	f8ca 3000 	str.w	r3, [sl]
 80031b8:	89a3      	ldrh	r3, [r4, #12]
 80031ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031be:	81a3      	strh	r3, [r4, #12]
 80031c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c4:	464a      	mov	r2, r9
 80031c6:	6921      	ldr	r1, [r4, #16]
 80031c8:	f7ff ff84 	bl	80030d4 <memcpy>
 80031cc:	89a3      	ldrh	r3, [r4, #12]
 80031ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d6:	81a3      	strh	r3, [r4, #12]
 80031d8:	6126      	str	r6, [r4, #16]
 80031da:	444e      	add	r6, r9
 80031dc:	6026      	str	r6, [r4, #0]
 80031de:	463e      	mov	r6, r7
 80031e0:	6165      	str	r5, [r4, #20]
 80031e2:	eba5 0509 	sub.w	r5, r5, r9
 80031e6:	60a5      	str	r5, [r4, #8]
 80031e8:	42be      	cmp	r6, r7
 80031ea:	d900      	bls.n	80031ee <__ssputs_r+0x86>
 80031ec:	463e      	mov	r6, r7
 80031ee:	4632      	mov	r2, r6
 80031f0:	4641      	mov	r1, r8
 80031f2:	6820      	ldr	r0, [r4, #0]
 80031f4:	f000 fab8 	bl	8003768 <memmove>
 80031f8:	68a3      	ldr	r3, [r4, #8]
 80031fa:	6822      	ldr	r2, [r4, #0]
 80031fc:	1b9b      	subs	r3, r3, r6
 80031fe:	4432      	add	r2, r6
 8003200:	2000      	movs	r0, #0
 8003202:	60a3      	str	r3, [r4, #8]
 8003204:	6022      	str	r2, [r4, #0]
 8003206:	e7db      	b.n	80031c0 <__ssputs_r+0x58>
 8003208:	462a      	mov	r2, r5
 800320a:	f000 fb6d 	bl	80038e8 <_realloc_r>
 800320e:	4606      	mov	r6, r0
 8003210:	2800      	cmp	r0, #0
 8003212:	d1e1      	bne.n	80031d8 <__ssputs_r+0x70>
 8003214:	4650      	mov	r0, sl
 8003216:	6921      	ldr	r1, [r4, #16]
 8003218:	f000 fac0 	bl	800379c <_free_r>
 800321c:	e7c7      	b.n	80031ae <__ssputs_r+0x46>
	...

08003220 <_svfiprintf_r>:
 8003220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003224:	4698      	mov	r8, r3
 8003226:	898b      	ldrh	r3, [r1, #12]
 8003228:	4607      	mov	r7, r0
 800322a:	061b      	lsls	r3, r3, #24
 800322c:	460d      	mov	r5, r1
 800322e:	4614      	mov	r4, r2
 8003230:	b09d      	sub	sp, #116	; 0x74
 8003232:	d50e      	bpl.n	8003252 <_svfiprintf_r+0x32>
 8003234:	690b      	ldr	r3, [r1, #16]
 8003236:	b963      	cbnz	r3, 8003252 <_svfiprintf_r+0x32>
 8003238:	2140      	movs	r1, #64	; 0x40
 800323a:	f000 fafb 	bl	8003834 <_malloc_r>
 800323e:	6028      	str	r0, [r5, #0]
 8003240:	6128      	str	r0, [r5, #16]
 8003242:	b920      	cbnz	r0, 800324e <_svfiprintf_r+0x2e>
 8003244:	230c      	movs	r3, #12
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	e0d1      	b.n	80033f2 <_svfiprintf_r+0x1d2>
 800324e:	2340      	movs	r3, #64	; 0x40
 8003250:	616b      	str	r3, [r5, #20]
 8003252:	2300      	movs	r3, #0
 8003254:	9309      	str	r3, [sp, #36]	; 0x24
 8003256:	2320      	movs	r3, #32
 8003258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800325c:	2330      	movs	r3, #48	; 0x30
 800325e:	f04f 0901 	mov.w	r9, #1
 8003262:	f8cd 800c 	str.w	r8, [sp, #12]
 8003266:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800340c <_svfiprintf_r+0x1ec>
 800326a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800326e:	4623      	mov	r3, r4
 8003270:	469a      	mov	sl, r3
 8003272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003276:	b10a      	cbz	r2, 800327c <_svfiprintf_r+0x5c>
 8003278:	2a25      	cmp	r2, #37	; 0x25
 800327a:	d1f9      	bne.n	8003270 <_svfiprintf_r+0x50>
 800327c:	ebba 0b04 	subs.w	fp, sl, r4
 8003280:	d00b      	beq.n	800329a <_svfiprintf_r+0x7a>
 8003282:	465b      	mov	r3, fp
 8003284:	4622      	mov	r2, r4
 8003286:	4629      	mov	r1, r5
 8003288:	4638      	mov	r0, r7
 800328a:	f7ff ff6d 	bl	8003168 <__ssputs_r>
 800328e:	3001      	adds	r0, #1
 8003290:	f000 80aa 	beq.w	80033e8 <_svfiprintf_r+0x1c8>
 8003294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003296:	445a      	add	r2, fp
 8003298:	9209      	str	r2, [sp, #36]	; 0x24
 800329a:	f89a 3000 	ldrb.w	r3, [sl]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 80a2 	beq.w	80033e8 <_svfiprintf_r+0x1c8>
 80032a4:	2300      	movs	r3, #0
 80032a6:	f04f 32ff 	mov.w	r2, #4294967295
 80032aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032ae:	f10a 0a01 	add.w	sl, sl, #1
 80032b2:	9304      	str	r3, [sp, #16]
 80032b4:	9307      	str	r3, [sp, #28]
 80032b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032ba:	931a      	str	r3, [sp, #104]	; 0x68
 80032bc:	4654      	mov	r4, sl
 80032be:	2205      	movs	r2, #5
 80032c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032c4:	4851      	ldr	r0, [pc, #324]	; (800340c <_svfiprintf_r+0x1ec>)
 80032c6:	f000 fa41 	bl	800374c <memchr>
 80032ca:	9a04      	ldr	r2, [sp, #16]
 80032cc:	b9d8      	cbnz	r0, 8003306 <_svfiprintf_r+0xe6>
 80032ce:	06d0      	lsls	r0, r2, #27
 80032d0:	bf44      	itt	mi
 80032d2:	2320      	movmi	r3, #32
 80032d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032d8:	0711      	lsls	r1, r2, #28
 80032da:	bf44      	itt	mi
 80032dc:	232b      	movmi	r3, #43	; 0x2b
 80032de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032e2:	f89a 3000 	ldrb.w	r3, [sl]
 80032e6:	2b2a      	cmp	r3, #42	; 0x2a
 80032e8:	d015      	beq.n	8003316 <_svfiprintf_r+0xf6>
 80032ea:	4654      	mov	r4, sl
 80032ec:	2000      	movs	r0, #0
 80032ee:	f04f 0c0a 	mov.w	ip, #10
 80032f2:	9a07      	ldr	r2, [sp, #28]
 80032f4:	4621      	mov	r1, r4
 80032f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032fa:	3b30      	subs	r3, #48	; 0x30
 80032fc:	2b09      	cmp	r3, #9
 80032fe:	d94e      	bls.n	800339e <_svfiprintf_r+0x17e>
 8003300:	b1b0      	cbz	r0, 8003330 <_svfiprintf_r+0x110>
 8003302:	9207      	str	r2, [sp, #28]
 8003304:	e014      	b.n	8003330 <_svfiprintf_r+0x110>
 8003306:	eba0 0308 	sub.w	r3, r0, r8
 800330a:	fa09 f303 	lsl.w	r3, r9, r3
 800330e:	4313      	orrs	r3, r2
 8003310:	46a2      	mov	sl, r4
 8003312:	9304      	str	r3, [sp, #16]
 8003314:	e7d2      	b.n	80032bc <_svfiprintf_r+0x9c>
 8003316:	9b03      	ldr	r3, [sp, #12]
 8003318:	1d19      	adds	r1, r3, #4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	9103      	str	r1, [sp, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	bfbb      	ittet	lt
 8003322:	425b      	neglt	r3, r3
 8003324:	f042 0202 	orrlt.w	r2, r2, #2
 8003328:	9307      	strge	r3, [sp, #28]
 800332a:	9307      	strlt	r3, [sp, #28]
 800332c:	bfb8      	it	lt
 800332e:	9204      	strlt	r2, [sp, #16]
 8003330:	7823      	ldrb	r3, [r4, #0]
 8003332:	2b2e      	cmp	r3, #46	; 0x2e
 8003334:	d10c      	bne.n	8003350 <_svfiprintf_r+0x130>
 8003336:	7863      	ldrb	r3, [r4, #1]
 8003338:	2b2a      	cmp	r3, #42	; 0x2a
 800333a:	d135      	bne.n	80033a8 <_svfiprintf_r+0x188>
 800333c:	9b03      	ldr	r3, [sp, #12]
 800333e:	3402      	adds	r4, #2
 8003340:	1d1a      	adds	r2, r3, #4
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	9203      	str	r2, [sp, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	bfb8      	it	lt
 800334a:	f04f 33ff 	movlt.w	r3, #4294967295
 800334e:	9305      	str	r3, [sp, #20]
 8003350:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800341c <_svfiprintf_r+0x1fc>
 8003354:	2203      	movs	r2, #3
 8003356:	4650      	mov	r0, sl
 8003358:	7821      	ldrb	r1, [r4, #0]
 800335a:	f000 f9f7 	bl	800374c <memchr>
 800335e:	b140      	cbz	r0, 8003372 <_svfiprintf_r+0x152>
 8003360:	2340      	movs	r3, #64	; 0x40
 8003362:	eba0 000a 	sub.w	r0, r0, sl
 8003366:	fa03 f000 	lsl.w	r0, r3, r0
 800336a:	9b04      	ldr	r3, [sp, #16]
 800336c:	3401      	adds	r4, #1
 800336e:	4303      	orrs	r3, r0
 8003370:	9304      	str	r3, [sp, #16]
 8003372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003376:	2206      	movs	r2, #6
 8003378:	4825      	ldr	r0, [pc, #148]	; (8003410 <_svfiprintf_r+0x1f0>)
 800337a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800337e:	f000 f9e5 	bl	800374c <memchr>
 8003382:	2800      	cmp	r0, #0
 8003384:	d038      	beq.n	80033f8 <_svfiprintf_r+0x1d8>
 8003386:	4b23      	ldr	r3, [pc, #140]	; (8003414 <_svfiprintf_r+0x1f4>)
 8003388:	bb1b      	cbnz	r3, 80033d2 <_svfiprintf_r+0x1b2>
 800338a:	9b03      	ldr	r3, [sp, #12]
 800338c:	3307      	adds	r3, #7
 800338e:	f023 0307 	bic.w	r3, r3, #7
 8003392:	3308      	adds	r3, #8
 8003394:	9303      	str	r3, [sp, #12]
 8003396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003398:	4433      	add	r3, r6
 800339a:	9309      	str	r3, [sp, #36]	; 0x24
 800339c:	e767      	b.n	800326e <_svfiprintf_r+0x4e>
 800339e:	460c      	mov	r4, r1
 80033a0:	2001      	movs	r0, #1
 80033a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80033a6:	e7a5      	b.n	80032f4 <_svfiprintf_r+0xd4>
 80033a8:	2300      	movs	r3, #0
 80033aa:	f04f 0c0a 	mov.w	ip, #10
 80033ae:	4619      	mov	r1, r3
 80033b0:	3401      	adds	r4, #1
 80033b2:	9305      	str	r3, [sp, #20]
 80033b4:	4620      	mov	r0, r4
 80033b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033ba:	3a30      	subs	r2, #48	; 0x30
 80033bc:	2a09      	cmp	r2, #9
 80033be:	d903      	bls.n	80033c8 <_svfiprintf_r+0x1a8>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0c5      	beq.n	8003350 <_svfiprintf_r+0x130>
 80033c4:	9105      	str	r1, [sp, #20]
 80033c6:	e7c3      	b.n	8003350 <_svfiprintf_r+0x130>
 80033c8:	4604      	mov	r4, r0
 80033ca:	2301      	movs	r3, #1
 80033cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80033d0:	e7f0      	b.n	80033b4 <_svfiprintf_r+0x194>
 80033d2:	ab03      	add	r3, sp, #12
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	462a      	mov	r2, r5
 80033d8:	4638      	mov	r0, r7
 80033da:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <_svfiprintf_r+0x1f8>)
 80033dc:	a904      	add	r1, sp, #16
 80033de:	f3af 8000 	nop.w
 80033e2:	1c42      	adds	r2, r0, #1
 80033e4:	4606      	mov	r6, r0
 80033e6:	d1d6      	bne.n	8003396 <_svfiprintf_r+0x176>
 80033e8:	89ab      	ldrh	r3, [r5, #12]
 80033ea:	065b      	lsls	r3, r3, #25
 80033ec:	f53f af2c 	bmi.w	8003248 <_svfiprintf_r+0x28>
 80033f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033f2:	b01d      	add	sp, #116	; 0x74
 80033f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033f8:	ab03      	add	r3, sp, #12
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	462a      	mov	r2, r5
 80033fe:	4638      	mov	r0, r7
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <_svfiprintf_r+0x1f8>)
 8003402:	a904      	add	r1, sp, #16
 8003404:	f000 f87c 	bl	8003500 <_printf_i>
 8003408:	e7eb      	b.n	80033e2 <_svfiprintf_r+0x1c2>
 800340a:	bf00      	nop
 800340c:	08003b2c 	.word	0x08003b2c
 8003410:	08003b36 	.word	0x08003b36
 8003414:	00000000 	.word	0x00000000
 8003418:	08003169 	.word	0x08003169
 800341c:	08003b32 	.word	0x08003b32

08003420 <_printf_common>:
 8003420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003424:	4616      	mov	r6, r2
 8003426:	4699      	mov	r9, r3
 8003428:	688a      	ldr	r2, [r1, #8]
 800342a:	690b      	ldr	r3, [r1, #16]
 800342c:	4607      	mov	r7, r0
 800342e:	4293      	cmp	r3, r2
 8003430:	bfb8      	it	lt
 8003432:	4613      	movlt	r3, r2
 8003434:	6033      	str	r3, [r6, #0]
 8003436:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800343a:	460c      	mov	r4, r1
 800343c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003440:	b10a      	cbz	r2, 8003446 <_printf_common+0x26>
 8003442:	3301      	adds	r3, #1
 8003444:	6033      	str	r3, [r6, #0]
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	0699      	lsls	r1, r3, #26
 800344a:	bf42      	ittt	mi
 800344c:	6833      	ldrmi	r3, [r6, #0]
 800344e:	3302      	addmi	r3, #2
 8003450:	6033      	strmi	r3, [r6, #0]
 8003452:	6825      	ldr	r5, [r4, #0]
 8003454:	f015 0506 	ands.w	r5, r5, #6
 8003458:	d106      	bne.n	8003468 <_printf_common+0x48>
 800345a:	f104 0a19 	add.w	sl, r4, #25
 800345e:	68e3      	ldr	r3, [r4, #12]
 8003460:	6832      	ldr	r2, [r6, #0]
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	42ab      	cmp	r3, r5
 8003466:	dc28      	bgt.n	80034ba <_printf_common+0x9a>
 8003468:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800346c:	1e13      	subs	r3, r2, #0
 800346e:	6822      	ldr	r2, [r4, #0]
 8003470:	bf18      	it	ne
 8003472:	2301      	movne	r3, #1
 8003474:	0692      	lsls	r2, r2, #26
 8003476:	d42d      	bmi.n	80034d4 <_printf_common+0xb4>
 8003478:	4649      	mov	r1, r9
 800347a:	4638      	mov	r0, r7
 800347c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003480:	47c0      	blx	r8
 8003482:	3001      	adds	r0, #1
 8003484:	d020      	beq.n	80034c8 <_printf_common+0xa8>
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	68e5      	ldr	r5, [r4, #12]
 800348a:	f003 0306 	and.w	r3, r3, #6
 800348e:	2b04      	cmp	r3, #4
 8003490:	bf18      	it	ne
 8003492:	2500      	movne	r5, #0
 8003494:	6832      	ldr	r2, [r6, #0]
 8003496:	f04f 0600 	mov.w	r6, #0
 800349a:	68a3      	ldr	r3, [r4, #8]
 800349c:	bf08      	it	eq
 800349e:	1aad      	subeq	r5, r5, r2
 80034a0:	6922      	ldr	r2, [r4, #16]
 80034a2:	bf08      	it	eq
 80034a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034a8:	4293      	cmp	r3, r2
 80034aa:	bfc4      	itt	gt
 80034ac:	1a9b      	subgt	r3, r3, r2
 80034ae:	18ed      	addgt	r5, r5, r3
 80034b0:	341a      	adds	r4, #26
 80034b2:	42b5      	cmp	r5, r6
 80034b4:	d11a      	bne.n	80034ec <_printf_common+0xcc>
 80034b6:	2000      	movs	r0, #0
 80034b8:	e008      	b.n	80034cc <_printf_common+0xac>
 80034ba:	2301      	movs	r3, #1
 80034bc:	4652      	mov	r2, sl
 80034be:	4649      	mov	r1, r9
 80034c0:	4638      	mov	r0, r7
 80034c2:	47c0      	blx	r8
 80034c4:	3001      	adds	r0, #1
 80034c6:	d103      	bne.n	80034d0 <_printf_common+0xb0>
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d0:	3501      	adds	r5, #1
 80034d2:	e7c4      	b.n	800345e <_printf_common+0x3e>
 80034d4:	2030      	movs	r0, #48	; 0x30
 80034d6:	18e1      	adds	r1, r4, r3
 80034d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034e2:	4422      	add	r2, r4
 80034e4:	3302      	adds	r3, #2
 80034e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034ea:	e7c5      	b.n	8003478 <_printf_common+0x58>
 80034ec:	2301      	movs	r3, #1
 80034ee:	4622      	mov	r2, r4
 80034f0:	4649      	mov	r1, r9
 80034f2:	4638      	mov	r0, r7
 80034f4:	47c0      	blx	r8
 80034f6:	3001      	adds	r0, #1
 80034f8:	d0e6      	beq.n	80034c8 <_printf_common+0xa8>
 80034fa:	3601      	adds	r6, #1
 80034fc:	e7d9      	b.n	80034b2 <_printf_common+0x92>
	...

08003500 <_printf_i>:
 8003500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003504:	460c      	mov	r4, r1
 8003506:	7e27      	ldrb	r7, [r4, #24]
 8003508:	4691      	mov	r9, r2
 800350a:	2f78      	cmp	r7, #120	; 0x78
 800350c:	4680      	mov	r8, r0
 800350e:	469a      	mov	sl, r3
 8003510:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003512:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003516:	d807      	bhi.n	8003528 <_printf_i+0x28>
 8003518:	2f62      	cmp	r7, #98	; 0x62
 800351a:	d80a      	bhi.n	8003532 <_printf_i+0x32>
 800351c:	2f00      	cmp	r7, #0
 800351e:	f000 80d9 	beq.w	80036d4 <_printf_i+0x1d4>
 8003522:	2f58      	cmp	r7, #88	; 0x58
 8003524:	f000 80a4 	beq.w	8003670 <_printf_i+0x170>
 8003528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800352c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003530:	e03a      	b.n	80035a8 <_printf_i+0xa8>
 8003532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003536:	2b15      	cmp	r3, #21
 8003538:	d8f6      	bhi.n	8003528 <_printf_i+0x28>
 800353a:	a001      	add	r0, pc, #4	; (adr r0, 8003540 <_printf_i+0x40>)
 800353c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003540:	08003599 	.word	0x08003599
 8003544:	080035ad 	.word	0x080035ad
 8003548:	08003529 	.word	0x08003529
 800354c:	08003529 	.word	0x08003529
 8003550:	08003529 	.word	0x08003529
 8003554:	08003529 	.word	0x08003529
 8003558:	080035ad 	.word	0x080035ad
 800355c:	08003529 	.word	0x08003529
 8003560:	08003529 	.word	0x08003529
 8003564:	08003529 	.word	0x08003529
 8003568:	08003529 	.word	0x08003529
 800356c:	080036bb 	.word	0x080036bb
 8003570:	080035dd 	.word	0x080035dd
 8003574:	0800369d 	.word	0x0800369d
 8003578:	08003529 	.word	0x08003529
 800357c:	08003529 	.word	0x08003529
 8003580:	080036dd 	.word	0x080036dd
 8003584:	08003529 	.word	0x08003529
 8003588:	080035dd 	.word	0x080035dd
 800358c:	08003529 	.word	0x08003529
 8003590:	08003529 	.word	0x08003529
 8003594:	080036a5 	.word	0x080036a5
 8003598:	680b      	ldr	r3, [r1, #0]
 800359a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800359e:	1d1a      	adds	r2, r3, #4
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	600a      	str	r2, [r1, #0]
 80035a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0a4      	b.n	80036f6 <_printf_i+0x1f6>
 80035ac:	6825      	ldr	r5, [r4, #0]
 80035ae:	6808      	ldr	r0, [r1, #0]
 80035b0:	062e      	lsls	r6, r5, #24
 80035b2:	f100 0304 	add.w	r3, r0, #4
 80035b6:	d50a      	bpl.n	80035ce <_printf_i+0xce>
 80035b8:	6805      	ldr	r5, [r0, #0]
 80035ba:	600b      	str	r3, [r1, #0]
 80035bc:	2d00      	cmp	r5, #0
 80035be:	da03      	bge.n	80035c8 <_printf_i+0xc8>
 80035c0:	232d      	movs	r3, #45	; 0x2d
 80035c2:	426d      	negs	r5, r5
 80035c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035c8:	230a      	movs	r3, #10
 80035ca:	485e      	ldr	r0, [pc, #376]	; (8003744 <_printf_i+0x244>)
 80035cc:	e019      	b.n	8003602 <_printf_i+0x102>
 80035ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80035d2:	6805      	ldr	r5, [r0, #0]
 80035d4:	600b      	str	r3, [r1, #0]
 80035d6:	bf18      	it	ne
 80035d8:	b22d      	sxthne	r5, r5
 80035da:	e7ef      	b.n	80035bc <_printf_i+0xbc>
 80035dc:	680b      	ldr	r3, [r1, #0]
 80035de:	6825      	ldr	r5, [r4, #0]
 80035e0:	1d18      	adds	r0, r3, #4
 80035e2:	6008      	str	r0, [r1, #0]
 80035e4:	0628      	lsls	r0, r5, #24
 80035e6:	d501      	bpl.n	80035ec <_printf_i+0xec>
 80035e8:	681d      	ldr	r5, [r3, #0]
 80035ea:	e002      	b.n	80035f2 <_printf_i+0xf2>
 80035ec:	0669      	lsls	r1, r5, #25
 80035ee:	d5fb      	bpl.n	80035e8 <_printf_i+0xe8>
 80035f0:	881d      	ldrh	r5, [r3, #0]
 80035f2:	2f6f      	cmp	r7, #111	; 0x6f
 80035f4:	bf0c      	ite	eq
 80035f6:	2308      	moveq	r3, #8
 80035f8:	230a      	movne	r3, #10
 80035fa:	4852      	ldr	r0, [pc, #328]	; (8003744 <_printf_i+0x244>)
 80035fc:	2100      	movs	r1, #0
 80035fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003602:	6866      	ldr	r6, [r4, #4]
 8003604:	2e00      	cmp	r6, #0
 8003606:	bfa8      	it	ge
 8003608:	6821      	ldrge	r1, [r4, #0]
 800360a:	60a6      	str	r6, [r4, #8]
 800360c:	bfa4      	itt	ge
 800360e:	f021 0104 	bicge.w	r1, r1, #4
 8003612:	6021      	strge	r1, [r4, #0]
 8003614:	b90d      	cbnz	r5, 800361a <_printf_i+0x11a>
 8003616:	2e00      	cmp	r6, #0
 8003618:	d04d      	beq.n	80036b6 <_printf_i+0x1b6>
 800361a:	4616      	mov	r6, r2
 800361c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003620:	fb03 5711 	mls	r7, r3, r1, r5
 8003624:	5dc7      	ldrb	r7, [r0, r7]
 8003626:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800362a:	462f      	mov	r7, r5
 800362c:	42bb      	cmp	r3, r7
 800362e:	460d      	mov	r5, r1
 8003630:	d9f4      	bls.n	800361c <_printf_i+0x11c>
 8003632:	2b08      	cmp	r3, #8
 8003634:	d10b      	bne.n	800364e <_printf_i+0x14e>
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	07df      	lsls	r7, r3, #31
 800363a:	d508      	bpl.n	800364e <_printf_i+0x14e>
 800363c:	6923      	ldr	r3, [r4, #16]
 800363e:	6861      	ldr	r1, [r4, #4]
 8003640:	4299      	cmp	r1, r3
 8003642:	bfde      	ittt	le
 8003644:	2330      	movle	r3, #48	; 0x30
 8003646:	f806 3c01 	strble.w	r3, [r6, #-1]
 800364a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800364e:	1b92      	subs	r2, r2, r6
 8003650:	6122      	str	r2, [r4, #16]
 8003652:	464b      	mov	r3, r9
 8003654:	4621      	mov	r1, r4
 8003656:	4640      	mov	r0, r8
 8003658:	f8cd a000 	str.w	sl, [sp]
 800365c:	aa03      	add	r2, sp, #12
 800365e:	f7ff fedf 	bl	8003420 <_printf_common>
 8003662:	3001      	adds	r0, #1
 8003664:	d14c      	bne.n	8003700 <_printf_i+0x200>
 8003666:	f04f 30ff 	mov.w	r0, #4294967295
 800366a:	b004      	add	sp, #16
 800366c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003670:	4834      	ldr	r0, [pc, #208]	; (8003744 <_printf_i+0x244>)
 8003672:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003676:	680e      	ldr	r6, [r1, #0]
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	f856 5b04 	ldr.w	r5, [r6], #4
 800367e:	061f      	lsls	r7, r3, #24
 8003680:	600e      	str	r6, [r1, #0]
 8003682:	d514      	bpl.n	80036ae <_printf_i+0x1ae>
 8003684:	07d9      	lsls	r1, r3, #31
 8003686:	bf44      	itt	mi
 8003688:	f043 0320 	orrmi.w	r3, r3, #32
 800368c:	6023      	strmi	r3, [r4, #0]
 800368e:	b91d      	cbnz	r5, 8003698 <_printf_i+0x198>
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	f023 0320 	bic.w	r3, r3, #32
 8003696:	6023      	str	r3, [r4, #0]
 8003698:	2310      	movs	r3, #16
 800369a:	e7af      	b.n	80035fc <_printf_i+0xfc>
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	f043 0320 	orr.w	r3, r3, #32
 80036a2:	6023      	str	r3, [r4, #0]
 80036a4:	2378      	movs	r3, #120	; 0x78
 80036a6:	4828      	ldr	r0, [pc, #160]	; (8003748 <_printf_i+0x248>)
 80036a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036ac:	e7e3      	b.n	8003676 <_printf_i+0x176>
 80036ae:	065e      	lsls	r6, r3, #25
 80036b0:	bf48      	it	mi
 80036b2:	b2ad      	uxthmi	r5, r5
 80036b4:	e7e6      	b.n	8003684 <_printf_i+0x184>
 80036b6:	4616      	mov	r6, r2
 80036b8:	e7bb      	b.n	8003632 <_printf_i+0x132>
 80036ba:	680b      	ldr	r3, [r1, #0]
 80036bc:	6826      	ldr	r6, [r4, #0]
 80036be:	1d1d      	adds	r5, r3, #4
 80036c0:	6960      	ldr	r0, [r4, #20]
 80036c2:	600d      	str	r5, [r1, #0]
 80036c4:	0635      	lsls	r5, r6, #24
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	d501      	bpl.n	80036ce <_printf_i+0x1ce>
 80036ca:	6018      	str	r0, [r3, #0]
 80036cc:	e002      	b.n	80036d4 <_printf_i+0x1d4>
 80036ce:	0671      	lsls	r1, r6, #25
 80036d0:	d5fb      	bpl.n	80036ca <_printf_i+0x1ca>
 80036d2:	8018      	strh	r0, [r3, #0]
 80036d4:	2300      	movs	r3, #0
 80036d6:	4616      	mov	r6, r2
 80036d8:	6123      	str	r3, [r4, #16]
 80036da:	e7ba      	b.n	8003652 <_printf_i+0x152>
 80036dc:	680b      	ldr	r3, [r1, #0]
 80036de:	1d1a      	adds	r2, r3, #4
 80036e0:	600a      	str	r2, [r1, #0]
 80036e2:	681e      	ldr	r6, [r3, #0]
 80036e4:	2100      	movs	r1, #0
 80036e6:	4630      	mov	r0, r6
 80036e8:	6862      	ldr	r2, [r4, #4]
 80036ea:	f000 f82f 	bl	800374c <memchr>
 80036ee:	b108      	cbz	r0, 80036f4 <_printf_i+0x1f4>
 80036f0:	1b80      	subs	r0, r0, r6
 80036f2:	6060      	str	r0, [r4, #4]
 80036f4:	6863      	ldr	r3, [r4, #4]
 80036f6:	6123      	str	r3, [r4, #16]
 80036f8:	2300      	movs	r3, #0
 80036fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036fe:	e7a8      	b.n	8003652 <_printf_i+0x152>
 8003700:	4632      	mov	r2, r6
 8003702:	4649      	mov	r1, r9
 8003704:	4640      	mov	r0, r8
 8003706:	6923      	ldr	r3, [r4, #16]
 8003708:	47d0      	blx	sl
 800370a:	3001      	adds	r0, #1
 800370c:	d0ab      	beq.n	8003666 <_printf_i+0x166>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	079b      	lsls	r3, r3, #30
 8003712:	d413      	bmi.n	800373c <_printf_i+0x23c>
 8003714:	68e0      	ldr	r0, [r4, #12]
 8003716:	9b03      	ldr	r3, [sp, #12]
 8003718:	4298      	cmp	r0, r3
 800371a:	bfb8      	it	lt
 800371c:	4618      	movlt	r0, r3
 800371e:	e7a4      	b.n	800366a <_printf_i+0x16a>
 8003720:	2301      	movs	r3, #1
 8003722:	4632      	mov	r2, r6
 8003724:	4649      	mov	r1, r9
 8003726:	4640      	mov	r0, r8
 8003728:	47d0      	blx	sl
 800372a:	3001      	adds	r0, #1
 800372c:	d09b      	beq.n	8003666 <_printf_i+0x166>
 800372e:	3501      	adds	r5, #1
 8003730:	68e3      	ldr	r3, [r4, #12]
 8003732:	9903      	ldr	r1, [sp, #12]
 8003734:	1a5b      	subs	r3, r3, r1
 8003736:	42ab      	cmp	r3, r5
 8003738:	dcf2      	bgt.n	8003720 <_printf_i+0x220>
 800373a:	e7eb      	b.n	8003714 <_printf_i+0x214>
 800373c:	2500      	movs	r5, #0
 800373e:	f104 0619 	add.w	r6, r4, #25
 8003742:	e7f5      	b.n	8003730 <_printf_i+0x230>
 8003744:	08003b3d 	.word	0x08003b3d
 8003748:	08003b4e 	.word	0x08003b4e

0800374c <memchr>:
 800374c:	4603      	mov	r3, r0
 800374e:	b510      	push	{r4, lr}
 8003750:	b2c9      	uxtb	r1, r1
 8003752:	4402      	add	r2, r0
 8003754:	4293      	cmp	r3, r2
 8003756:	4618      	mov	r0, r3
 8003758:	d101      	bne.n	800375e <memchr+0x12>
 800375a:	2000      	movs	r0, #0
 800375c:	e003      	b.n	8003766 <memchr+0x1a>
 800375e:	7804      	ldrb	r4, [r0, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	428c      	cmp	r4, r1
 8003764:	d1f6      	bne.n	8003754 <memchr+0x8>
 8003766:	bd10      	pop	{r4, pc}

08003768 <memmove>:
 8003768:	4288      	cmp	r0, r1
 800376a:	b510      	push	{r4, lr}
 800376c:	eb01 0402 	add.w	r4, r1, r2
 8003770:	d902      	bls.n	8003778 <memmove+0x10>
 8003772:	4284      	cmp	r4, r0
 8003774:	4623      	mov	r3, r4
 8003776:	d807      	bhi.n	8003788 <memmove+0x20>
 8003778:	1e43      	subs	r3, r0, #1
 800377a:	42a1      	cmp	r1, r4
 800377c:	d008      	beq.n	8003790 <memmove+0x28>
 800377e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003782:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003786:	e7f8      	b.n	800377a <memmove+0x12>
 8003788:	4601      	mov	r1, r0
 800378a:	4402      	add	r2, r0
 800378c:	428a      	cmp	r2, r1
 800378e:	d100      	bne.n	8003792 <memmove+0x2a>
 8003790:	bd10      	pop	{r4, pc}
 8003792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800379a:	e7f7      	b.n	800378c <memmove+0x24>

0800379c <_free_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4605      	mov	r5, r0
 80037a0:	2900      	cmp	r1, #0
 80037a2:	d043      	beq.n	800382c <_free_r+0x90>
 80037a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037a8:	1f0c      	subs	r4, r1, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bfb8      	it	lt
 80037ae:	18e4      	addlt	r4, r4, r3
 80037b0:	f000 f8d0 	bl	8003954 <__malloc_lock>
 80037b4:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <_free_r+0x94>)
 80037b6:	6813      	ldr	r3, [r2, #0]
 80037b8:	4610      	mov	r0, r2
 80037ba:	b933      	cbnz	r3, 80037ca <_free_r+0x2e>
 80037bc:	6063      	str	r3, [r4, #4]
 80037be:	6014      	str	r4, [r2, #0]
 80037c0:	4628      	mov	r0, r5
 80037c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037c6:	f000 b8cb 	b.w	8003960 <__malloc_unlock>
 80037ca:	42a3      	cmp	r3, r4
 80037cc:	d90a      	bls.n	80037e4 <_free_r+0x48>
 80037ce:	6821      	ldr	r1, [r4, #0]
 80037d0:	1862      	adds	r2, r4, r1
 80037d2:	4293      	cmp	r3, r2
 80037d4:	bf01      	itttt	eq
 80037d6:	681a      	ldreq	r2, [r3, #0]
 80037d8:	685b      	ldreq	r3, [r3, #4]
 80037da:	1852      	addeq	r2, r2, r1
 80037dc:	6022      	streq	r2, [r4, #0]
 80037de:	6063      	str	r3, [r4, #4]
 80037e0:	6004      	str	r4, [r0, #0]
 80037e2:	e7ed      	b.n	80037c0 <_free_r+0x24>
 80037e4:	461a      	mov	r2, r3
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	b10b      	cbz	r3, 80037ee <_free_r+0x52>
 80037ea:	42a3      	cmp	r3, r4
 80037ec:	d9fa      	bls.n	80037e4 <_free_r+0x48>
 80037ee:	6811      	ldr	r1, [r2, #0]
 80037f0:	1850      	adds	r0, r2, r1
 80037f2:	42a0      	cmp	r0, r4
 80037f4:	d10b      	bne.n	800380e <_free_r+0x72>
 80037f6:	6820      	ldr	r0, [r4, #0]
 80037f8:	4401      	add	r1, r0
 80037fa:	1850      	adds	r0, r2, r1
 80037fc:	4283      	cmp	r3, r0
 80037fe:	6011      	str	r1, [r2, #0]
 8003800:	d1de      	bne.n	80037c0 <_free_r+0x24>
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4401      	add	r1, r0
 8003808:	6011      	str	r1, [r2, #0]
 800380a:	6053      	str	r3, [r2, #4]
 800380c:	e7d8      	b.n	80037c0 <_free_r+0x24>
 800380e:	d902      	bls.n	8003816 <_free_r+0x7a>
 8003810:	230c      	movs	r3, #12
 8003812:	602b      	str	r3, [r5, #0]
 8003814:	e7d4      	b.n	80037c0 <_free_r+0x24>
 8003816:	6820      	ldr	r0, [r4, #0]
 8003818:	1821      	adds	r1, r4, r0
 800381a:	428b      	cmp	r3, r1
 800381c:	bf01      	itttt	eq
 800381e:	6819      	ldreq	r1, [r3, #0]
 8003820:	685b      	ldreq	r3, [r3, #4]
 8003822:	1809      	addeq	r1, r1, r0
 8003824:	6021      	streq	r1, [r4, #0]
 8003826:	6063      	str	r3, [r4, #4]
 8003828:	6054      	str	r4, [r2, #4]
 800382a:	e7c9      	b.n	80037c0 <_free_r+0x24>
 800382c:	bd38      	pop	{r3, r4, r5, pc}
 800382e:	bf00      	nop
 8003830:	2000009c 	.word	0x2000009c

08003834 <_malloc_r>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	1ccd      	adds	r5, r1, #3
 8003838:	f025 0503 	bic.w	r5, r5, #3
 800383c:	3508      	adds	r5, #8
 800383e:	2d0c      	cmp	r5, #12
 8003840:	bf38      	it	cc
 8003842:	250c      	movcc	r5, #12
 8003844:	2d00      	cmp	r5, #0
 8003846:	4606      	mov	r6, r0
 8003848:	db01      	blt.n	800384e <_malloc_r+0x1a>
 800384a:	42a9      	cmp	r1, r5
 800384c:	d903      	bls.n	8003856 <_malloc_r+0x22>
 800384e:	230c      	movs	r3, #12
 8003850:	6033      	str	r3, [r6, #0]
 8003852:	2000      	movs	r0, #0
 8003854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003856:	f000 f87d 	bl	8003954 <__malloc_lock>
 800385a:	4921      	ldr	r1, [pc, #132]	; (80038e0 <_malloc_r+0xac>)
 800385c:	680a      	ldr	r2, [r1, #0]
 800385e:	4614      	mov	r4, r2
 8003860:	b99c      	cbnz	r4, 800388a <_malloc_r+0x56>
 8003862:	4f20      	ldr	r7, [pc, #128]	; (80038e4 <_malloc_r+0xb0>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	b923      	cbnz	r3, 8003872 <_malloc_r+0x3e>
 8003868:	4621      	mov	r1, r4
 800386a:	4630      	mov	r0, r6
 800386c:	f000 f862 	bl	8003934 <_sbrk_r>
 8003870:	6038      	str	r0, [r7, #0]
 8003872:	4629      	mov	r1, r5
 8003874:	4630      	mov	r0, r6
 8003876:	f000 f85d 	bl	8003934 <_sbrk_r>
 800387a:	1c43      	adds	r3, r0, #1
 800387c:	d123      	bne.n	80038c6 <_malloc_r+0x92>
 800387e:	230c      	movs	r3, #12
 8003880:	4630      	mov	r0, r6
 8003882:	6033      	str	r3, [r6, #0]
 8003884:	f000 f86c 	bl	8003960 <__malloc_unlock>
 8003888:	e7e3      	b.n	8003852 <_malloc_r+0x1e>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	1b5b      	subs	r3, r3, r5
 800388e:	d417      	bmi.n	80038c0 <_malloc_r+0x8c>
 8003890:	2b0b      	cmp	r3, #11
 8003892:	d903      	bls.n	800389c <_malloc_r+0x68>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	441c      	add	r4, r3
 8003898:	6025      	str	r5, [r4, #0]
 800389a:	e004      	b.n	80038a6 <_malloc_r+0x72>
 800389c:	6863      	ldr	r3, [r4, #4]
 800389e:	42a2      	cmp	r2, r4
 80038a0:	bf0c      	ite	eq
 80038a2:	600b      	streq	r3, [r1, #0]
 80038a4:	6053      	strne	r3, [r2, #4]
 80038a6:	4630      	mov	r0, r6
 80038a8:	f000 f85a 	bl	8003960 <__malloc_unlock>
 80038ac:	f104 000b 	add.w	r0, r4, #11
 80038b0:	1d23      	adds	r3, r4, #4
 80038b2:	f020 0007 	bic.w	r0, r0, #7
 80038b6:	1ac2      	subs	r2, r0, r3
 80038b8:	d0cc      	beq.n	8003854 <_malloc_r+0x20>
 80038ba:	1a1b      	subs	r3, r3, r0
 80038bc:	50a3      	str	r3, [r4, r2]
 80038be:	e7c9      	b.n	8003854 <_malloc_r+0x20>
 80038c0:	4622      	mov	r2, r4
 80038c2:	6864      	ldr	r4, [r4, #4]
 80038c4:	e7cc      	b.n	8003860 <_malloc_r+0x2c>
 80038c6:	1cc4      	adds	r4, r0, #3
 80038c8:	f024 0403 	bic.w	r4, r4, #3
 80038cc:	42a0      	cmp	r0, r4
 80038ce:	d0e3      	beq.n	8003898 <_malloc_r+0x64>
 80038d0:	1a21      	subs	r1, r4, r0
 80038d2:	4630      	mov	r0, r6
 80038d4:	f000 f82e 	bl	8003934 <_sbrk_r>
 80038d8:	3001      	adds	r0, #1
 80038da:	d1dd      	bne.n	8003898 <_malloc_r+0x64>
 80038dc:	e7cf      	b.n	800387e <_malloc_r+0x4a>
 80038de:	bf00      	nop
 80038e0:	2000009c 	.word	0x2000009c
 80038e4:	200000a0 	.word	0x200000a0

080038e8 <_realloc_r>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	4607      	mov	r7, r0
 80038ec:	4614      	mov	r4, r2
 80038ee:	460e      	mov	r6, r1
 80038f0:	b921      	cbnz	r1, 80038fc <_realloc_r+0x14>
 80038f2:	4611      	mov	r1, r2
 80038f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80038f8:	f7ff bf9c 	b.w	8003834 <_malloc_r>
 80038fc:	b922      	cbnz	r2, 8003908 <_realloc_r+0x20>
 80038fe:	f7ff ff4d 	bl	800379c <_free_r>
 8003902:	4625      	mov	r5, r4
 8003904:	4628      	mov	r0, r5
 8003906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003908:	f000 f830 	bl	800396c <_malloc_usable_size_r>
 800390c:	42a0      	cmp	r0, r4
 800390e:	d20f      	bcs.n	8003930 <_realloc_r+0x48>
 8003910:	4621      	mov	r1, r4
 8003912:	4638      	mov	r0, r7
 8003914:	f7ff ff8e 	bl	8003834 <_malloc_r>
 8003918:	4605      	mov	r5, r0
 800391a:	2800      	cmp	r0, #0
 800391c:	d0f2      	beq.n	8003904 <_realloc_r+0x1c>
 800391e:	4631      	mov	r1, r6
 8003920:	4622      	mov	r2, r4
 8003922:	f7ff fbd7 	bl	80030d4 <memcpy>
 8003926:	4631      	mov	r1, r6
 8003928:	4638      	mov	r0, r7
 800392a:	f7ff ff37 	bl	800379c <_free_r>
 800392e:	e7e9      	b.n	8003904 <_realloc_r+0x1c>
 8003930:	4635      	mov	r5, r6
 8003932:	e7e7      	b.n	8003904 <_realloc_r+0x1c>

08003934 <_sbrk_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	2300      	movs	r3, #0
 8003938:	4d05      	ldr	r5, [pc, #20]	; (8003950 <_sbrk_r+0x1c>)
 800393a:	4604      	mov	r4, r0
 800393c:	4608      	mov	r0, r1
 800393e:	602b      	str	r3, [r5, #0]
 8003940:	f7fd fca6 	bl	8001290 <_sbrk>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_sbrk_r+0x1a>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b103      	cbz	r3, 800394e <_sbrk_r+0x1a>
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	20000148 	.word	0x20000148

08003954 <__malloc_lock>:
 8003954:	4801      	ldr	r0, [pc, #4]	; (800395c <__malloc_lock+0x8>)
 8003956:	f000 b811 	b.w	800397c <__retarget_lock_acquire_recursive>
 800395a:	bf00      	nop
 800395c:	20000150 	.word	0x20000150

08003960 <__malloc_unlock>:
 8003960:	4801      	ldr	r0, [pc, #4]	; (8003968 <__malloc_unlock+0x8>)
 8003962:	f000 b80c 	b.w	800397e <__retarget_lock_release_recursive>
 8003966:	bf00      	nop
 8003968:	20000150 	.word	0x20000150

0800396c <_malloc_usable_size_r>:
 800396c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003970:	1f18      	subs	r0, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	bfbc      	itt	lt
 8003976:	580b      	ldrlt	r3, [r1, r0]
 8003978:	18c0      	addlt	r0, r0, r3
 800397a:	4770      	bx	lr

0800397c <__retarget_lock_acquire_recursive>:
 800397c:	4770      	bx	lr

0800397e <__retarget_lock_release_recursive>:
 800397e:	4770      	bx	lr

08003980 <_init>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr

0800398c <_fini>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr
