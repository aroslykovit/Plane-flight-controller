
Ground_LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007db0  08007db0  00017db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e20  08007e20  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08007e20  08007e20  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e20  08007e20  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e20  08007e20  00017e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e24  08007e24  00017e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08007e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001248  2000017c  08007fa4  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013c4  08007fa4  000213c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144d7  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003255  00000000  00000000  0003467c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  000378d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  000385d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001990f  00000000  00000000  000391a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010809  00000000  00000000  00052aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008501c  00000000  00000000  000632b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e82d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003364  00000000  00000000  000e8328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d98 	.word	0x08007d98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08007d98 	.word	0x08007d98

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9ec 	bl	800052c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81a 	bl	800018c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f89c 	bl	8000294 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f870 	bl	8000240 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000160:	f007 f924 	bl	80073ac <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(COMdataAvailable){
 8000164:	4b06      	ldr	r3, [pc, #24]	; (8000180 <main+0x34>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d0fb      	beq.n	8000164 <main+0x18>
		  COMdataAvailable = 0;
 800016c:	4b04      	ldr	r3, [pc, #16]	; (8000180 <main+0x34>)
 800016e:	2200      	movs	r2, #0
 8000170:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(buffer, length_of_packet);
 8000172:	4b04      	ldr	r3, [pc, #16]	; (8000184 <main+0x38>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	4619      	mov	r1, r3
 8000178:	4803      	ldr	r0, [pc, #12]	; (8000188 <main+0x3c>)
 800017a:	f007 f9f5 	bl	8007568 <CDC_Transmit_FS>
	  if(COMdataAvailable){
 800017e:	e7f1      	b.n	8000164 <main+0x18>
 8000180:	20000199 	.word	0x20000199
 8000184:	20000198 	.word	0x20000198
 8000188:	20000400 	.word	0x20000400

0800018c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b094      	sub	sp, #80	; 0x50
 8000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000196:	2228      	movs	r2, #40	; 0x28
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f007 fdf4 	bl	8007d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a0:	f107 0314 	add.w	r3, r7, #20
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
 80001a8:	605a      	str	r2, [r3, #4]
 80001aa:	609a      	str	r2, [r3, #8]
 80001ac:	60da      	str	r2, [r3, #12]
 80001ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001bc:	2301      	movs	r3, #1
 80001be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	2301      	movs	r3, #1
 80001cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ce:	2302      	movs	r3, #2
 80001d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fa1a 	bl	800261c <HAL_RCC_OscConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001ee:	f000 f8a9 	bl	8000344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f2:	230f      	movs	r3, #15
 80001f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f6:	2302      	movs	r3, #2
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000202:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000208:	f107 0314 	add.w	r3, r7, #20
 800020c:	2102      	movs	r1, #2
 800020e:	4618      	mov	r0, r3
 8000210:	f002 fc84 	bl	8002b1c <HAL_RCC_ClockConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800021a:	f000 f893 	bl	8000344 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800021e:	2310      	movs	r3, #16
 8000220:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000222:	2300      	movs	r3, #0
 8000224:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f002 fe11 	bl	8002e50 <HAL_RCCEx_PeriphCLKConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000234:	f000 f886 	bl	8000344 <Error_Handler>
  }
}
 8000238:	bf00      	nop
 800023a:	3750      	adds	r7, #80	; 0x50
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <MX_USART1_UART_Init+0x4c>)
 8000246:	4a12      	ldr	r2, [pc, #72]	; (8000290 <MX_USART1_UART_Init+0x50>)
 8000248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <MX_USART1_UART_Init+0x4c>)
 800024c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000250:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <MX_USART1_UART_Init+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <MX_USART1_UART_Init+0x4c>)
 800025a:	2200      	movs	r2, #0
 800025c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800025e:	4b0b      	ldr	r3, [pc, #44]	; (800028c <MX_USART1_UART_Init+0x4c>)
 8000260:	2200      	movs	r2, #0
 8000262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <MX_USART1_UART_Init+0x4c>)
 8000266:	220c      	movs	r2, #12
 8000268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800026a:	4b08      	ldr	r3, [pc, #32]	; (800028c <MX_USART1_UART_Init+0x4c>)
 800026c:	2200      	movs	r2, #0
 800026e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <MX_USART1_UART_Init+0x4c>)
 8000272:	2200      	movs	r2, #0
 8000274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000276:	4805      	ldr	r0, [pc, #20]	; (800028c <MX_USART1_UART_Init+0x4c>)
 8000278:	f002 fea0 	bl	8002fbc <HAL_UART_Init>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000282:	f000 f85f 	bl	8000344 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	200003bc 	.word	0x200003bc
 8000290:	40013800 	.word	0x40013800

08000294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b088      	sub	sp, #32
 8000298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029a:	f107 0310 	add.w	r3, r7, #16
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a8:	4b24      	ldr	r3, [pc, #144]	; (800033c <MX_GPIO_Init+0xa8>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a23      	ldr	r2, [pc, #140]	; (800033c <MX_GPIO_Init+0xa8>)
 80002ae:	f043 0320 	orr.w	r3, r3, #32
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b21      	ldr	r3, [pc, #132]	; (800033c <MX_GPIO_Init+0xa8>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0320 	and.w	r3, r3, #32
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c0:	4b1e      	ldr	r3, [pc, #120]	; (800033c <MX_GPIO_Init+0xa8>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a1d      	ldr	r2, [pc, #116]	; (800033c <MX_GPIO_Init+0xa8>)
 80002c6:	f043 0308 	orr.w	r3, r3, #8
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <MX_GPIO_Init+0xa8>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0308 	and.w	r3, r3, #8
 80002d4:	60bb      	str	r3, [r7, #8]
 80002d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_GPIO_Init+0xa8>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a17      	ldr	r2, [pc, #92]	; (800033c <MX_GPIO_Init+0xa8>)
 80002de:	f043 0304 	orr.w	r3, r3, #4
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b15      	ldr	r3, [pc, #84]	; (800033c <MX_GPIO_Init+0xa8>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0304 	and.w	r3, r3, #4
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80002f6:	4812      	ldr	r0, [pc, #72]	; (8000340 <MX_GPIO_Init+0xac>)
 80002f8:	f000 fcb2 	bl	8000c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80002fc:	2302      	movs	r3, #2
 80002fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000304:	2300      	movs	r3, #0
 8000306:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000308:	f107 0310 	add.w	r3, r7, #16
 800030c:	4619      	mov	r1, r3
 800030e:	480c      	ldr	r0, [pc, #48]	; (8000340 <MX_GPIO_Init+0xac>)
 8000310:	f000 fb2c 	bl	800096c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000314:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800031e:	2302      	movs	r3, #2
 8000320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000322:	2302      	movs	r3, #2
 8000324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	4619      	mov	r1, r3
 800032c:	4804      	ldr	r0, [pc, #16]	; (8000340 <MX_GPIO_Init+0xac>)
 800032e:	f000 fb1d 	bl	800096c <HAL_GPIO_Init>

}
 8000332:	bf00      	nop
 8000334:	3720      	adds	r7, #32
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000
 8000340:	40010c00 	.word	0x40010c00

08000344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
}
 800034a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034c:	e7fe      	b.n	800034c <Error_Handler+0x8>
	...

08000350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <HAL_MspInit+0x5c>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a14      	ldr	r2, [pc, #80]	; (80003ac <HAL_MspInit+0x5c>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <HAL_MspInit+0x5c>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <HAL_MspInit+0x5c>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <HAL_MspInit+0x5c>)
 8000374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000378:	61d3      	str	r3, [r2, #28]
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <HAL_MspInit+0x5c>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <HAL_MspInit+0x60>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <HAL_MspInit+0x60>)
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40010000 	.word	0x40010000

080003b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a20      	ldr	r2, [pc, #128]	; (8000450 <HAL_UART_MspInit+0x9c>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d139      	bne.n	8000448 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80003d4:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <HAL_UART_MspInit+0xa0>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a1e      	ldr	r2, [pc, #120]	; (8000454 <HAL_UART_MspInit+0xa0>)
 80003da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <HAL_UART_MspInit+0xa0>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <HAL_UART_MspInit+0xa0>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a18      	ldr	r2, [pc, #96]	; (8000454 <HAL_UART_MspInit+0xa0>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b16      	ldr	r3, [pc, #88]	; (8000454 <HAL_UART_MspInit+0xa0>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000408:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800040a:	2302      	movs	r3, #2
 800040c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800040e:	2303      	movs	r3, #3
 8000410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	4619      	mov	r1, r3
 8000418:	480f      	ldr	r0, [pc, #60]	; (8000458 <HAL_UART_MspInit+0xa4>)
 800041a:	f000 faa7 	bl	800096c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800041e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	4619      	mov	r1, r3
 8000432:	4809      	ldr	r0, [pc, #36]	; (8000458 <HAL_UART_MspInit+0xa4>)
 8000434:	f000 fa9a 	bl	800096c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000438:	2200      	movs	r2, #0
 800043a:	2100      	movs	r1, #0
 800043c:	2025      	movs	r0, #37	; 0x25
 800043e:	f000 f9ae 	bl	800079e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000442:	2025      	movs	r0, #37	; 0x25
 8000444:	f000 f9c7 	bl	80007d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000448:	bf00      	nop
 800044a:	3720      	adds	r7, #32
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40013800 	.word	0x40013800
 8000454:	40021000 	.word	0x40021000
 8000458:	40010800 	.word	0x40010800

0800045c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <NMI_Handler+0x4>

08000462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000466:	e7fe      	b.n	8000466 <HardFault_Handler+0x4>

08000468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800046c:	e7fe      	b.n	800046c <MemManage_Handler+0x4>

0800046e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000472:	e7fe      	b.n	8000472 <BusFault_Handler+0x4>

08000474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <UsageFault_Handler+0x4>

0800047a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800047e:	bf00      	nop
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr

08000486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr

08000492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr

0800049e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a2:	f000 f889 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004b0:	4802      	ldr	r0, [pc, #8]	; (80004bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004b2:	f000 fd1e 	bl	8000ef2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200010d8 	.word	0x200010d8

080004c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <USART1_IRQHandler+0x10>)
 80004c6:	f002 fdc7 	bl	8003058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200003bc 	.word	0x200003bc

080004d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004e2:	490d      	ldr	r1, [pc, #52]	; (8000518 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004e4:	4a0d      	ldr	r2, [pc, #52]	; (800051c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004f8:	4c0a      	ldr	r4, [pc, #40]	; (8000524 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000506:	f7ff ffe5 	bl	80004d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050a:	f007 fc0b 	bl	8007d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050e:	f7ff fe1d 	bl	800014c <main>
  bx lr
 8000512:	4770      	bx	lr
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800051c:	08007e28 	.word	0x08007e28
  ldr r2, =_sbss
 8000520:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000524:	200013c4 	.word	0x200013c4

08000528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC1_2_IRQHandler>
	...

0800052c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x28>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <HAL_Init+0x28>)
 8000536:	f043 0310 	orr.w	r3, r3, #16
 800053a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f923 	bl	8000788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	200f      	movs	r0, #15
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f7ff ff02 	bl	8000350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40022000 	.word	0x40022000

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f93b 	bl	80007f2 <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f903 	bl	800079e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000008 	.word	0x20000008
 80005b4:	20000004 	.word	0x20000004

080005b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_IncTick+0x1c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_IncTick+0x20>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a03      	ldr	r2, [pc, #12]	; (80005d8 <HAL_IncTick+0x20>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	20000008 	.word	0x20000008
 80005d8:	20000440 	.word	0x20000440

080005dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b02      	ldr	r3, [pc, #8]	; (80005ec <HAL_GetTick+0x10>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000440 	.word	0x20000440

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4906      	ldr	r1, [pc, #24]	; (8000688 <__NVIC_EnableIRQ+0x34>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	e000e100 	.word	0xe000e100

0800068c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	db0a      	blt.n	80006b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	490c      	ldr	r1, [pc, #48]	; (80006d8 <__NVIC_SetPriority+0x4c>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b4:	e00a      	b.n	80006cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4908      	ldr	r1, [pc, #32]	; (80006dc <__NVIC_SetPriority+0x50>)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	3b04      	subs	r3, #4
 80006c4:	0112      	lsls	r2, r2, #4
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	440b      	add	r3, r1
 80006ca:	761a      	strb	r2, [r3, #24]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e100 	.word	0xe000e100
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b089      	sub	sp, #36	; 0x24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	f1c3 0307 	rsb	r3, r3, #7
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	bf28      	it	cs
 80006fe:	2304      	movcs	r3, #4
 8000700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3304      	adds	r3, #4
 8000706:	2b06      	cmp	r3, #6
 8000708:	d902      	bls.n	8000710 <NVIC_EncodePriority+0x30>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3b03      	subs	r3, #3
 800070e:	e000      	b.n	8000712 <NVIC_EncodePriority+0x32>
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	f04f 32ff 	mov.w	r2, #4294967295
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43da      	mvns	r2, r3
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	401a      	ands	r2, r3
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000728:	f04f 31ff 	mov.w	r1, #4294967295
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	43d9      	mvns	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	4313      	orrs	r3, r2
         );
}
 800073a:	4618      	mov	r0, r3
 800073c:	3724      	adds	r7, #36	; 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000754:	d301      	bcc.n	800075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2301      	movs	r3, #1
 8000758:	e00f      	b.n	800077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SysTick_Config+0x40>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000762:	210f      	movs	r1, #15
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f7ff ff90 	bl	800068c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SysTick_Config+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SysTick_Config+0x40>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff2d 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b0:	f7ff ff42 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	6978      	ldr	r0, [r7, #20]
 80007bc:	f7ff ff90 	bl	80006e0 <NVIC_EncodePriority>
 80007c0:	4602      	mov	r2, r0
 80007c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff5f 	bl	800068c <__NVIC_SetPriority>
}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff35 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ffa2 	bl	8000744 <SysTick_Config>
 8000800:	4603      	mov	r3, r0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800080a:	b480      	push	{r7}
 800080c:	b085      	sub	sp, #20
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800081c:	2b02      	cmp	r3, #2
 800081e:	d008      	beq.n	8000832 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2204      	movs	r2, #4
 8000824:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e020      	b.n	8000874 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f022 020e 	bic.w	r2, r2, #14
 8000840:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f022 0201 	bic.w	r2, r2, #1
 8000850:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800085a:	2101      	movs	r1, #1
 800085c:	fa01 f202 	lsl.w	r2, r1, r2
 8000860:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2201      	movs	r2, #1
 8000866:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000872:	7bfb      	ldrb	r3, [r7, #15]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
	...

08000880 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000892:	2b02      	cmp	r3, #2
 8000894:	d005      	beq.n	80008a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2204      	movs	r2, #4
 800089a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	73fb      	strb	r3, [r7, #15]
 80008a0:	e051      	b.n	8000946 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f022 020e 	bic.w	r2, r2, #14
 80008b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f022 0201 	bic.w	r2, r2, #1
 80008c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a22      	ldr	r2, [pc, #136]	; (8000950 <HAL_DMA_Abort_IT+0xd0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d029      	beq.n	8000920 <HAL_DMA_Abort_IT+0xa0>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a20      	ldr	r2, [pc, #128]	; (8000954 <HAL_DMA_Abort_IT+0xd4>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d022      	beq.n	800091c <HAL_DMA_Abort_IT+0x9c>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <HAL_DMA_Abort_IT+0xd8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d01a      	beq.n	8000916 <HAL_DMA_Abort_IT+0x96>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a1d      	ldr	r2, [pc, #116]	; (800095c <HAL_DMA_Abort_IT+0xdc>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d012      	beq.n	8000910 <HAL_DMA_Abort_IT+0x90>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <HAL_DMA_Abort_IT+0xe0>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d00a      	beq.n	800090a <HAL_DMA_Abort_IT+0x8a>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a1a      	ldr	r2, [pc, #104]	; (8000964 <HAL_DMA_Abort_IT+0xe4>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d102      	bne.n	8000904 <HAL_DMA_Abort_IT+0x84>
 80008fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000902:	e00e      	b.n	8000922 <HAL_DMA_Abort_IT+0xa2>
 8000904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000908:	e00b      	b.n	8000922 <HAL_DMA_Abort_IT+0xa2>
 800090a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090e:	e008      	b.n	8000922 <HAL_DMA_Abort_IT+0xa2>
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	e005      	b.n	8000922 <HAL_DMA_Abort_IT+0xa2>
 8000916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091a:	e002      	b.n	8000922 <HAL_DMA_Abort_IT+0xa2>
 800091c:	2310      	movs	r3, #16
 800091e:	e000      	b.n	8000922 <HAL_DMA_Abort_IT+0xa2>
 8000920:	2301      	movs	r3, #1
 8000922:	4a11      	ldr	r2, [pc, #68]	; (8000968 <HAL_DMA_Abort_IT+0xe8>)
 8000924:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2201      	movs	r2, #1
 800092a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093a:	2b00      	cmp	r3, #0
 800093c:	d003      	beq.n	8000946 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	4798      	blx	r3
    } 
  }
  return status;
 8000946:	7bfb      	ldrb	r3, [r7, #15]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40020008 	.word	0x40020008
 8000954:	4002001c 	.word	0x4002001c
 8000958:	40020030 	.word	0x40020030
 800095c:	40020044 	.word	0x40020044
 8000960:	40020058 	.word	0x40020058
 8000964:	4002006c 	.word	0x4002006c
 8000968:	40020000 	.word	0x40020000

0800096c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800096c:	b480      	push	{r7}
 800096e:	b08b      	sub	sp, #44	; 0x2c
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800097e:	e148      	b.n	8000c12 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000980:	2201      	movs	r2, #1
 8000982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	69fa      	ldr	r2, [r7, #28]
 8000990:	4013      	ands	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	429a      	cmp	r2, r3
 800099a:	f040 8137 	bne.w	8000c0c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	4aa3      	ldr	r2, [pc, #652]	; (8000c30 <HAL_GPIO_Init+0x2c4>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d05e      	beq.n	8000a66 <HAL_GPIO_Init+0xfa>
 80009a8:	4aa1      	ldr	r2, [pc, #644]	; (8000c30 <HAL_GPIO_Init+0x2c4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d875      	bhi.n	8000a9a <HAL_GPIO_Init+0x12e>
 80009ae:	4aa1      	ldr	r2, [pc, #644]	; (8000c34 <HAL_GPIO_Init+0x2c8>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d058      	beq.n	8000a66 <HAL_GPIO_Init+0xfa>
 80009b4:	4a9f      	ldr	r2, [pc, #636]	; (8000c34 <HAL_GPIO_Init+0x2c8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d86f      	bhi.n	8000a9a <HAL_GPIO_Init+0x12e>
 80009ba:	4a9f      	ldr	r2, [pc, #636]	; (8000c38 <HAL_GPIO_Init+0x2cc>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d052      	beq.n	8000a66 <HAL_GPIO_Init+0xfa>
 80009c0:	4a9d      	ldr	r2, [pc, #628]	; (8000c38 <HAL_GPIO_Init+0x2cc>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d869      	bhi.n	8000a9a <HAL_GPIO_Init+0x12e>
 80009c6:	4a9d      	ldr	r2, [pc, #628]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d04c      	beq.n	8000a66 <HAL_GPIO_Init+0xfa>
 80009cc:	4a9b      	ldr	r2, [pc, #620]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d863      	bhi.n	8000a9a <HAL_GPIO_Init+0x12e>
 80009d2:	4a9b      	ldr	r2, [pc, #620]	; (8000c40 <HAL_GPIO_Init+0x2d4>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d046      	beq.n	8000a66 <HAL_GPIO_Init+0xfa>
 80009d8:	4a99      	ldr	r2, [pc, #612]	; (8000c40 <HAL_GPIO_Init+0x2d4>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d85d      	bhi.n	8000a9a <HAL_GPIO_Init+0x12e>
 80009de:	2b12      	cmp	r3, #18
 80009e0:	d82a      	bhi.n	8000a38 <HAL_GPIO_Init+0xcc>
 80009e2:	2b12      	cmp	r3, #18
 80009e4:	d859      	bhi.n	8000a9a <HAL_GPIO_Init+0x12e>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <HAL_GPIO_Init+0x80>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a67 	.word	0x08000a67
 80009f0:	08000a41 	.word	0x08000a41
 80009f4:	08000a53 	.word	0x08000a53
 80009f8:	08000a95 	.word	0x08000a95
 80009fc:	08000a9b 	.word	0x08000a9b
 8000a00:	08000a9b 	.word	0x08000a9b
 8000a04:	08000a9b 	.word	0x08000a9b
 8000a08:	08000a9b 	.word	0x08000a9b
 8000a0c:	08000a9b 	.word	0x08000a9b
 8000a10:	08000a9b 	.word	0x08000a9b
 8000a14:	08000a9b 	.word	0x08000a9b
 8000a18:	08000a9b 	.word	0x08000a9b
 8000a1c:	08000a9b 	.word	0x08000a9b
 8000a20:	08000a9b 	.word	0x08000a9b
 8000a24:	08000a9b 	.word	0x08000a9b
 8000a28:	08000a9b 	.word	0x08000a9b
 8000a2c:	08000a9b 	.word	0x08000a9b
 8000a30:	08000a49 	.word	0x08000a49
 8000a34:	08000a5d 	.word	0x08000a5d
 8000a38:	4a82      	ldr	r2, [pc, #520]	; (8000c44 <HAL_GPIO_Init+0x2d8>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d013      	beq.n	8000a66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a3e:	e02c      	b.n	8000a9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	623b      	str	r3, [r7, #32]
          break;
 8000a46:	e029      	b.n	8000a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	623b      	str	r3, [r7, #32]
          break;
 8000a50:	e024      	b.n	8000a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	3308      	adds	r3, #8
 8000a58:	623b      	str	r3, [r7, #32]
          break;
 8000a5a:	e01f      	b.n	8000a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	330c      	adds	r3, #12
 8000a62:	623b      	str	r3, [r7, #32]
          break;
 8000a64:	e01a      	b.n	8000a9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d102      	bne.n	8000a74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	623b      	str	r3, [r7, #32]
          break;
 8000a72:	e013      	b.n	8000a9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d105      	bne.n	8000a88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	611a      	str	r2, [r3, #16]
          break;
 8000a86:	e009      	b.n	8000a9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	69fa      	ldr	r2, [r7, #28]
 8000a90:	615a      	str	r2, [r3, #20]
          break;
 8000a92:	e003      	b.n	8000a9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
          break;
 8000a98:	e000      	b.n	8000a9c <HAL_GPIO_Init+0x130>
          break;
 8000a9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	2bff      	cmp	r3, #255	; 0xff
 8000aa0:	d801      	bhi.n	8000aa6 <HAL_GPIO_Init+0x13a>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	e001      	b.n	8000aaa <HAL_GPIO_Init+0x13e>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	2bff      	cmp	r3, #255	; 0xff
 8000ab0:	d802      	bhi.n	8000ab8 <HAL_GPIO_Init+0x14c>
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	e002      	b.n	8000abe <HAL_GPIO_Init+0x152>
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	3b08      	subs	r3, #8
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	210f      	movs	r1, #15
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	401a      	ands	r2, r3
 8000ad0:	6a39      	ldr	r1, [r7, #32]
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 8090 	beq.w	8000c0c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aec:	4b56      	ldr	r3, [pc, #344]	; (8000c48 <HAL_GPIO_Init+0x2dc>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a55      	ldr	r2, [pc, #340]	; (8000c48 <HAL_GPIO_Init+0x2dc>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b53      	ldr	r3, [pc, #332]	; (8000c48 <HAL_GPIO_Init+0x2dc>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b04:	4a51      	ldr	r2, [pc, #324]	; (8000c4c <HAL_GPIO_Init+0x2e0>)
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	f003 0303 	and.w	r3, r3, #3
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	220f      	movs	r2, #15
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	4013      	ands	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a49      	ldr	r2, [pc, #292]	; (8000c50 <HAL_GPIO_Init+0x2e4>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d00d      	beq.n	8000b4c <HAL_GPIO_Init+0x1e0>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a48      	ldr	r2, [pc, #288]	; (8000c54 <HAL_GPIO_Init+0x2e8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d007      	beq.n	8000b48 <HAL_GPIO_Init+0x1dc>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a47      	ldr	r2, [pc, #284]	; (8000c58 <HAL_GPIO_Init+0x2ec>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d101      	bne.n	8000b44 <HAL_GPIO_Init+0x1d8>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e004      	b.n	8000b4e <HAL_GPIO_Init+0x1e2>
 8000b44:	2303      	movs	r3, #3
 8000b46:	e002      	b.n	8000b4e <HAL_GPIO_Init+0x1e2>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <HAL_GPIO_Init+0x1e2>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b50:	f002 0203 	and.w	r2, r2, #3
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	4093      	lsls	r3, r2
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b5e:	493b      	ldr	r1, [pc, #236]	; (8000c4c <HAL_GPIO_Init+0x2e0>)
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	3302      	adds	r3, #2
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d006      	beq.n	8000b86 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b78:	4b38      	ldr	r3, [pc, #224]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4937      	ldr	r1, [pc, #220]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	600b      	str	r3, [r1, #0]
 8000b84:	e006      	b.n	8000b94 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b86:	4b35      	ldr	r3, [pc, #212]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	4933      	ldr	r1, [pc, #204]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d006      	beq.n	8000bae <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	492d      	ldr	r1, [pc, #180]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	604b      	str	r3, [r1, #4]
 8000bac:	e006      	b.n	8000bbc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	4929      	ldr	r1, [pc, #164]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d006      	beq.n	8000bd6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	4923      	ldr	r1, [pc, #140]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	608b      	str	r3, [r1, #8]
 8000bd4:	e006      	b.n	8000be4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	491f      	ldr	r1, [pc, #124]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	4919      	ldr	r1, [pc, #100]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	60cb      	str	r3, [r1, #12]
 8000bfc:	e006      	b.n	8000c0c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	4915      	ldr	r1, [pc, #84]	; (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	3301      	adds	r3, #1
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c18:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f47f aeaf 	bne.w	8000980 <HAL_GPIO_Init+0x14>
  }
}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	372c      	adds	r7, #44	; 0x2c
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	10320000 	.word	0x10320000
 8000c34:	10310000 	.word	0x10310000
 8000c38:	10220000 	.word	0x10220000
 8000c3c:	10210000 	.word	0x10210000
 8000c40:	10120000 	.word	0x10120000
 8000c44:	10110000 	.word	0x10110000
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010000 	.word	0x40010000
 8000c50:	40010800 	.word	0x40010800
 8000c54:	40010c00 	.word	0x40010c00
 8000c58:	40011000 	.word	0x40011000
 8000c5c:	40010400 	.word	0x40010400

08000c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c70:	787b      	ldrb	r3, [r7, #1]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c7c:	e003      	b.n	8000c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	041a      	lsls	r2, r3, #16
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	611a      	str	r2, [r3, #16]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c92:	b08b      	sub	sp, #44	; 0x2c
 8000c94:	af06      	add	r7, sp, #24
 8000c96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e0fd      	b.n	8000e9e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d106      	bne.n	8000cbc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f006 fd8a 	bl	80077d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 fd99 	bl	8003800 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	687e      	ldr	r6, [r7, #4]
 8000cd6:	466d      	mov	r5, sp
 8000cd8:	f106 0410 	add.w	r4, r6, #16
 8000cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	602b      	str	r3, [r5, #0]
 8000ce4:	1d33      	adds	r3, r6, #4
 8000ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ce8:	6838      	ldr	r0, [r7, #0]
 8000cea:	f002 fd63 	bl	80037b4 <USB_CoreInit>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d005      	beq.n	8000d00 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e0ce      	b.n	8000e9e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fd94 	bl	8003834 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]
 8000d10:	e04c      	b.n	8000dac <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	440b      	add	r3, r1
 8000d22:	3301      	adds	r3, #1
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	440b      	add	r3, r1
 8000d38:	7bfa      	ldrb	r2, [r7, #15]
 8000d3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	b298      	uxth	r0, r3
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	440b      	add	r3, r1
 8000d4e:	3336      	adds	r3, #54	; 0x36
 8000d50:	4602      	mov	r2, r0
 8000d52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	440b      	add	r3, r1
 8000d64:	3303      	adds	r3, #3
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d6a:	7bfa      	ldrb	r2, [r7, #15]
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	440b      	add	r3, r1
 8000d78:	3338      	adds	r3, #56	; 0x38
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	440b      	add	r3, r1
 8000d8c:	333c      	adds	r3, #60	; 0x3c
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	440b      	add	r3, r1
 8000da0:	3340      	adds	r3, #64	; 0x40
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	3301      	adds	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	7bfa      	ldrb	r2, [r7, #15]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d3ad      	bcc.n	8000d12 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	e044      	b.n	8000e46 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000dbc:	7bfa      	ldrb	r2, [r7, #15]
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	440b      	add	r3, r1
 8000dca:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000dd2:	7bfa      	ldrb	r2, [r7, #15]
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	440b      	add	r3, r1
 8000de0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000de4:	7bfa      	ldrb	r2, [r7, #15]
 8000de6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000de8:	7bfa      	ldrb	r2, [r7, #15]
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	440b      	add	r3, r1
 8000df6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000dfe:	7bfa      	ldrb	r2, [r7, #15]
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e14:	7bfa      	ldrb	r2, [r7, #15]
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	440b      	add	r3, r1
 8000e22:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e2a:	7bfa      	ldrb	r2, [r7, #15]
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	440b      	add	r3, r1
 8000e38:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	3301      	adds	r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d3b5      	bcc.n	8000dbc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	687e      	ldr	r6, [r7, #4]
 8000e58:	466d      	mov	r5, sp
 8000e5a:	f106 0410 	add.w	r4, r6, #16
 8000e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e62:	6823      	ldr	r3, [r4, #0]
 8000e64:	602b      	str	r3, [r5, #0]
 8000e66:	1d33      	adds	r3, r6, #4
 8000e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e6a:	6838      	ldr	r0, [r7, #0]
 8000e6c:	f002 fcee 	bl	800384c <USB_DevInit>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d005      	beq.n	8000e82 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2202      	movs	r2, #2
 8000e7a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00d      	b.n	8000e9e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f004 fe5f 	bl	8005b5a <USB_DevDisconnect>

  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ea6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d101      	bne.n	8000ebc <HAL_PCD_Start+0x16>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e016      	b.n	8000eea <HAL_PCD_Start+0x44>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f002 fc83 	bl	80037d4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000ece:	2101      	movs	r1, #1
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f006 fef0 	bl	8007cb6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f004 fe33 	bl	8005b46 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b088      	sub	sp, #32
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f004 fe35 	bl	8005b6e <USB_ReadInterrupts>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f0e:	d102      	bne.n	8000f16 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 fb61 	bl	80015d8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 fe27 	bl	8005b6e <USB_ReadInterrupts>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f2a:	d112      	bne.n	8000f52 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f006 fcbe 	bl	80078c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f925 	bl	800119c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 fe09 	bl	8005b6e <USB_ReadInterrupts>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f66:	d10b      	bne.n	8000f80 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f7a:	b292      	uxth	r2, r2
 8000f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f004 fdf2 	bl	8005b6e <USB_ReadInterrupts>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f94:	d10b      	bne.n	8000fae <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f004 fddb 	bl	8005b6e <USB_ReadInterrupts>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fc2:	d126      	bne.n	8001012 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0204 	bic.w	r2, r2, #4
 8000fd6:	b292      	uxth	r2, r2
 8000fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0208 	bic.w	r2, r2, #8
 8000fee:	b292      	uxth	r2, r2
 8000ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f006 fc9f 	bl	8007938 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001002:	b29a      	uxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800100c:	b292      	uxth	r2, r2
 800100e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f004 fda9 	bl	8005b6e <USB_ReadInterrupts>
 800101c:	4603      	mov	r3, r0
 800101e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001026:	f040 8084 	bne.w	8001132 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800102a:	2300      	movs	r3, #0
 800102c:	77fb      	strb	r3, [r7, #31]
 800102e:	e011      	b.n	8001054 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	7ffb      	ldrb	r3, [r7, #31]
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	441a      	add	r2, r3
 800103c:	7ffb      	ldrb	r3, [r7, #31]
 800103e:	8812      	ldrh	r2, [r2, #0]
 8001040:	b292      	uxth	r2, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	f107 0120 	add.w	r1, r7, #32
 8001048:	440b      	add	r3, r1
 800104a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800104e:	7ffb      	ldrb	r3, [r7, #31]
 8001050:	3301      	adds	r3, #1
 8001052:	77fb      	strb	r3, [r7, #31]
 8001054:	7ffb      	ldrb	r3, [r7, #31]
 8001056:	2b07      	cmp	r3, #7
 8001058:	d9ea      	bls.n	8001030 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001062:	b29a      	uxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 0201 	orr.w	r2, r2, #1
 800106c:	b292      	uxth	r2, r2
 800106e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800107a:	b29a      	uxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	b292      	uxth	r2, r2
 8001086:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800108a:	bf00      	nop
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001094:	b29b      	uxth	r3, r3
 8001096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f6      	beq.n	800108c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010b0:	b292      	uxth	r2, r2
 80010b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	77fb      	strb	r3, [r7, #31]
 80010ba:	e010      	b.n	80010de <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80010bc:	7ffb      	ldrb	r3, [r7, #31]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	4611      	mov	r1, r2
 80010c4:	7ffa      	ldrb	r2, [r7, #31]
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	440a      	add	r2, r1
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	f107 0120 	add.w	r1, r7, #32
 80010d0:	440b      	add	r3, r1
 80010d2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80010d6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80010d8:	7ffb      	ldrb	r3, [r7, #31]
 80010da:	3301      	adds	r3, #1
 80010dc:	77fb      	strb	r3, [r7, #31]
 80010de:	7ffb      	ldrb	r3, [r7, #31]
 80010e0:	2b07      	cmp	r3, #7
 80010e2:	d9eb      	bls.n	80010bc <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0208 	orr.w	r2, r2, #8
 80010f6:	b292      	uxth	r2, r2
 80010f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001104:	b29a      	uxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800110e:	b292      	uxth	r2, r2
 8001110:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800111c:	b29a      	uxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0204 	orr.w	r2, r2, #4
 8001126:	b292      	uxth	r2, r2
 8001128:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f006 fbe9 	bl	8007904 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f004 fd19 	bl	8005b6e <USB_ReadInterrupts>
 800113c:	4603      	mov	r3, r0
 800113e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001146:	d10e      	bne.n	8001166 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800115a:	b292      	uxth	r2, r2
 800115c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f006 fba2 	bl	80078aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f004 fcff 	bl	8005b6e <USB_ReadInterrupts>
 8001170:	4603      	mov	r3, r0
 8001172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800117a:	d10b      	bne.n	8001194 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001184:	b29a      	uxth	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800118e:	b292      	uxth	r2, r2
 8001190:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d101      	bne.n	80011b6 <HAL_PCD_SetAddress+0x1a>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e013      	b.n	80011de <HAL_PCD_SetAddress+0x42>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	78fa      	ldrb	r2, [r7, #3]
 80011c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	78fa      	ldrb	r2, [r7, #3]
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fca6 	bl	8005b20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	4608      	mov	r0, r1
 80011f0:	4611      	mov	r1, r2
 80011f2:	461a      	mov	r2, r3
 80011f4:	4603      	mov	r3, r0
 80011f6:	70fb      	strb	r3, [r7, #3]
 80011f8:	460b      	mov	r3, r1
 80011fa:	803b      	strh	r3, [r7, #0]
 80011fc:	4613      	mov	r3, r2
 80011fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001208:	2b00      	cmp	r3, #0
 800120a:	da0e      	bge.n	800122a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	705a      	strb	r2, [r3, #1]
 8001228:	e00e      	b.n	8001248 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	f003 0207 	and.w	r2, r3, #7
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	b2da      	uxtb	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001254:	883a      	ldrh	r2, [r7, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	78ba      	ldrb	r2, [r7, #2]
 800125e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	785b      	ldrb	r3, [r3, #1]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b29a      	uxth	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001272:	78bb      	ldrb	r3, [r7, #2]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d102      	bne.n	800127e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001284:	2b01      	cmp	r3, #1
 8001286:	d101      	bne.n	800128c <HAL_PCD_EP_Open+0xa6>
 8001288:	2302      	movs	r3, #2
 800128a:	e00e      	b.n	80012aa <HAL_PCD_EP_Open+0xc4>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68f9      	ldr	r1, [r7, #12]
 800129a:	4618      	mov	r0, r3
 800129c:	f002 faf6 	bl	800388c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80012a8:	7afb      	ldrb	r3, [r7, #11]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	da0e      	bge.n	80012e4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2201      	movs	r2, #1
 80012e0:	705a      	strb	r2, [r3, #1]
 80012e2:	e00e      	b.n	8001302 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	f003 0207 	and.w	r2, r3, #7
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	b2da      	uxtb	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <HAL_PCD_EP_Close+0x6a>
 8001318:	2302      	movs	r3, #2
 800131a:	e00e      	b.n	800133a <HAL_PCD_EP_Close+0x88>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68f9      	ldr	r1, [r7, #12]
 800132a:	4618      	mov	r0, r3
 800132c:	f002 fe18 	bl	8003f60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	460b      	mov	r3, r1
 8001350:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001352:	7afb      	ldrb	r3, [r7, #11]
 8001354:	f003 0207 	and.w	r2, r3, #7
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2200      	movs	r2, #0
 8001380:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001382:	7afb      	ldrb	r3, [r7, #11]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	b2da      	uxtb	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800138e:	7afb      	ldrb	r3, [r7, #11]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	2b00      	cmp	r3, #0
 8001396:	d106      	bne.n	80013a6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6979      	ldr	r1, [r7, #20]
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 ffca 	bl	8004338 <USB_EPStartXfer>
 80013a4:	e005      	b.n	80013b2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6979      	ldr	r1, [r7, #20]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 ffc3 	bl	8004338 <USB_EPStartXfer>
  }

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	f003 0207 	and.w	r2, r3, #7
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	460b      	mov	r3, r1
 80013f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013fa:	7afb      	ldrb	r3, [r7, #11]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4413      	add	r3, r2
 800140e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2200      	movs	r2, #0
 800142e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2201      	movs	r2, #1
 8001434:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001436:	7afb      	ldrb	r3, [r7, #11]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	b2da      	uxtb	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001442:	7afb      	ldrb	r3, [r7, #11]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	2b00      	cmp	r3, #0
 800144a:	d106      	bne.n	800145a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6979      	ldr	r1, [r7, #20]
 8001452:	4618      	mov	r0, r3
 8001454:	f002 ff70 	bl	8004338 <USB_EPStartXfer>
 8001458:	e005      	b.n	8001466 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6979      	ldr	r1, [r7, #20]
 8001460:	4618      	mov	r0, r3
 8001462:	f002 ff69 	bl	8004338 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	f003 0207 	and.w	r2, r3, #7
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	d901      	bls.n	800148e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e04c      	b.n	8001528 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800148e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001492:	2b00      	cmp	r3, #0
 8001494:	da0e      	bge.n	80014b4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2201      	movs	r2, #1
 80014b0:	705a      	strb	r2, [r3, #1]
 80014b2:	e00c      	b.n	80014ce <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014b4:	78fa      	ldrb	r2, [r7, #3]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2201      	movs	r2, #1
 80014d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_PCD_EP_SetStall+0x7e>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e01c      	b.n	8001528 <HAL_PCD_EP_SetStall+0xb8>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68f9      	ldr	r1, [r7, #12]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f004 fa12 	bl	8005926 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	2b00      	cmp	r3, #0
 800150a:	d108      	bne.n	800151e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001516:	4619      	mov	r1, r3
 8001518:	4610      	mov	r0, r2
 800151a:	f004 fb37 	bl	8005b8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	f003 020f 	and.w	r2, r3, #15
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d901      	bls.n	800154e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e040      	b.n	80015d0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800154e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001552:	2b00      	cmp	r3, #0
 8001554:	da0e      	bge.n	8001574 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2201      	movs	r2, #1
 8001570:	705a      	strb	r2, [r3, #1]
 8001572:	e00e      	b.n	8001592 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	f003 0207 	and.w	r2, r3, #7
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_PCD_EP_ClrStall+0x82>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e00e      	b.n	80015d0 <HAL_PCD_EP_ClrStall+0xa0>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68f9      	ldr	r1, [r7, #12]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 fa00 	bl	80059c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08e      	sub	sp, #56	; 0x38
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015e0:	e2ec      	b.n	8001bbc <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ea:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80015ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80015f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f040 8161 	bne.w	80018c4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001602:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	2b00      	cmp	r3, #0
 800160a:	d152      	bne.n	80016b2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800161c:	81fb      	strh	r3, [r7, #14]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800162c:	b29b      	uxth	r3, r3
 800162e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3328      	adds	r3, #40	; 0x28
 8001634:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800163e:	b29b      	uxth	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4413      	add	r3, r2
 800164a:	3302      	adds	r3, #2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	4413      	add	r3, r2
 8001654:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	441a      	add	r2, r3
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001670:	2100      	movs	r1, #0
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f006 f8ff 	bl	8007876 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 829b 	beq.w	8001bbc <PCD_EP_ISR_Handler+0x5e4>
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 8296 	bne.w	8001bbc <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800169c:	b2da      	uxtb	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	b292      	uxth	r2, r2
 80016a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80016b0:	e284      	b.n	8001bbc <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80016c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80016c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d034      	beq.n	8001736 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4413      	add	r3, r2
 80016e0:	3306      	adds	r3, #6
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800170a:	b29b      	uxth	r3, r3
 800170c:	f004 fa8e 	bl	8005c2c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	b29a      	uxth	r2, r3
 8001718:	f640 738f 	movw	r3, #3983	; 0xf8f
 800171c:	4013      	ands	r3, r2
 800171e:	823b      	strh	r3, [r7, #16]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	8a3a      	ldrh	r2, [r7, #16]
 8001726:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800172a:	b292      	uxth	r2, r2
 800172c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f006 f874 	bl	800781c <HAL_PCD_SetupStageCallback>
 8001734:	e242      	b.n	8001bbc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001736:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800173a:	2b00      	cmp	r3, #0
 800173c:	f280 823e 	bge.w	8001bbc <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b29a      	uxth	r2, r3
 8001748:	f640 738f 	movw	r3, #3983	; 0xf8f
 800174c:	4013      	ands	r3, r2
 800174e:	83bb      	strh	r3, [r7, #28]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	8bba      	ldrh	r2, [r7, #28]
 8001756:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800175a:	b292      	uxth	r2, r2
 800175c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001766:	b29b      	uxth	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4413      	add	r3, r2
 8001772:	3306      	adds	r3, #6
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	4413      	add	r3, r2
 800177c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d019      	beq.n	80017c6 <PCD_EP_ISR_Handler+0x1ee>
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d015      	beq.n	80017c6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	6959      	ldr	r1, [r3, #20]
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	f004 fa3e 	bl	8005c2c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	441a      	add	r2, r3
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80017be:	2100      	movs	r1, #0
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f006 f83d 	bl	8007840 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 81f2 	bne.w	8001bbc <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4413      	add	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d112      	bne.n	8001826 <PCD_EP_ISR_Handler+0x24e>
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	b29b      	uxth	r3, r3
 8001806:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800180a:	b29a      	uxth	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	801a      	strh	r2, [r3, #0]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b29b      	uxth	r3, r3
 8001816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800181a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800181e:	b29a      	uxth	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	801a      	strh	r2, [r3, #0]
 8001824:	e02f      	b.n	8001886 <PCD_EP_ISR_Handler+0x2ae>
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b3e      	cmp	r3, #62	; 0x3e
 800182c:	d813      	bhi.n	8001856 <PCD_EP_ISR_Handler+0x27e>
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	085b      	lsrs	r3, r3, #1
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <PCD_EP_ISR_Handler+0x270>
 8001842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001844:	3301      	adds	r3, #1
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
 8001848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184a:	b29b      	uxth	r3, r3
 800184c:	029b      	lsls	r3, r3, #10
 800184e:	b29a      	uxth	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	801a      	strh	r2, [r3, #0]
 8001854:	e017      	b.n	8001886 <PCD_EP_ISR_Handler+0x2ae>
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <PCD_EP_ISR_Handler+0x298>
 800186a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800186c:	3b01      	subs	r3, #1
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
 8001870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001872:	b29b      	uxth	r3, r3
 8001874:	029b      	lsls	r3, r3, #10
 8001876:	b29b      	uxth	r3, r3
 8001878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800187c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001880:	b29a      	uxth	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	b29b      	uxth	r3, r3
 800188e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001896:	827b      	strh	r3, [r7, #18]
 8001898:	8a7b      	ldrh	r3, [r7, #18]
 800189a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800189e:	827b      	strh	r3, [r7, #18]
 80018a0:	8a7b      	ldrh	r3, [r7, #18]
 80018a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80018a6:	827b      	strh	r3, [r7, #18]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	8a7b      	ldrh	r3, [r7, #18]
 80018ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018be:	b29b      	uxth	r3, r3
 80018c0:	8013      	strh	r3, [r2, #0]
 80018c2:	e17b      	b.n	8001bbc <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018d6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f280 80ea 	bge.w	8001ab4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018f6:	4013      	ands	r3, r2
 80018f8:	853b      	strh	r3, [r7, #40]	; 0x28
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800190a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800190e:	b292      	uxth	r2, r2
 8001910:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001912:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	7b1b      	ldrb	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d122      	bne.n	8001976 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001938:	b29b      	uxth	r3, r3
 800193a:	461a      	mov	r2, r3
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4413      	add	r3, r2
 8001944:	3306      	adds	r3, #6
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	4413      	add	r3, r2
 800194e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001958:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800195a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 8087 	beq.w	8001a70 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	6959      	ldr	r1, [r3, #20]
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	88da      	ldrh	r2, [r3, #6]
 800196e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001970:	f004 f95c 	bl	8005c2c <USB_ReadPMA>
 8001974:	e07c      	b.n	8001a70 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	78db      	ldrb	r3, [r3, #3]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d108      	bne.n	8001990 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800197e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001980:	461a      	mov	r2, r3
 8001982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f927 	bl	8001bd8 <HAL_PCD_EP_DB_Receive>
 800198a:	4603      	mov	r3, r0
 800198c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800198e:	e06f      	b.n	8001a70 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	441a      	add	r2, r3
 80019ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d021      	beq.n	8001a2e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	3302      	adds	r3, #2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a12:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001a14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d02a      	beq.n	8001a70 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	6959      	ldr	r1, [r3, #20]
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	891a      	ldrh	r2, [r3, #8]
 8001a26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a28:	f004 f900 	bl	8005c2c <USB_ReadPMA>
 8001a2c:	e020      	b.n	8001a70 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4413      	add	r3, r2
 8001a42:	3306      	adds	r3, #6
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a56:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001a58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d008      	beq.n	8001a70 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	6959      	ldr	r1, [r3, #20]
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	895a      	ldrh	r2, [r3, #10]
 8001a6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a6c:	f004 f8de 	bl	8005c2c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	69da      	ldr	r2, [r3, #28]
 8001a74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a76:	441a      	add	r2, r3
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a82:	441a      	add	r2, r3
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <PCD_EP_ISR_Handler+0x4c2>
 8001a90:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d206      	bcs.n	8001aa8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f005 fecd 	bl	8007840 <HAL_PCD_DataOutStageCallback>
 8001aa6:	e005      	b.n	8001ab4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 fc42 	bl	8004338 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ab4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d07e      	beq.n	8001bbc <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001abe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aec:	843b      	strh	r3, [r7, #32]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	441a      	add	r2, r3
 8001afc:	8c3b      	ldrh	r3, [r7, #32]
 8001afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	78db      	ldrb	r3, [r3, #3]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d00c      	beq.n	8001b2c <PCD_EP_ISR_Handler+0x554>
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	78db      	ldrb	r3, [r3, #3]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d008      	beq.n	8001b2c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d146      	bne.n	8001bb0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001b22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d141      	bne.n	8001bb0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	3302      	adds	r3, #2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b54:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	8bfb      	ldrh	r3, [r7, #30]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d906      	bls.n	8001b6e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	8bfb      	ldrh	r3, [r7, #30]
 8001b66:	1ad2      	subs	r2, r2, r3
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	619a      	str	r2, [r3, #24]
 8001b6c:	e002      	b.n	8001b74 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d106      	bne.n	8001b8a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f005 fe77 	bl	8007876 <HAL_PCD_DataInStageCallback>
 8001b88:	e018      	b.n	8001bbc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	8bfb      	ldrh	r3, [r7, #30]
 8001b90:	441a      	add	r2, r3
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	69da      	ldr	r2, [r3, #28]
 8001b9a:	8bfb      	ldrh	r3, [r7, #30]
 8001b9c:	441a      	add	r2, r3
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 fbc5 	bl	8004338 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001bae:	e005      	b.n	8001bbc <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001bb0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f91b 	bl	8001df2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f6ff ad0a 	blt.w	80015e2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3738      	adds	r7, #56	; 0x38
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	4613      	mov	r3, r2
 8001be4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d07e      	beq.n	8001cee <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	3302      	adds	r3, #2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c18:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	8b7b      	ldrh	r3, [r7, #26]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d306      	bcc.n	8001c32 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	699a      	ldr	r2, [r3, #24]
 8001c28:	8b7b      	ldrh	r3, [r7, #26]
 8001c2a:	1ad2      	subs	r2, r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	619a      	str	r2, [r3, #24]
 8001c30:	e002      	b.n	8001c38 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d123      	bne.n	8001c88 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c5a:	833b      	strh	r3, [r7, #24]
 8001c5c:	8b3b      	ldrh	r3, [r7, #24]
 8001c5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c62:	833b      	strh	r3, [r7, #24]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	441a      	add	r2, r3
 8001c72:	8b3b      	ldrh	r3, [r7, #24]
 8001c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d01f      	beq.n	8001cd2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cac:	82fb      	strh	r3, [r7, #22]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	441a      	add	r2, r3
 8001cbc:	8afb      	ldrh	r3, [r7, #22]
 8001cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001cd2:	8b7b      	ldrh	r3, [r7, #26]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 8087 	beq.w	8001de8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	6959      	ldr	r1, [r3, #20]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	891a      	ldrh	r2, [r3, #8]
 8001ce6:	8b7b      	ldrh	r3, [r7, #26]
 8001ce8:	f003 ffa0 	bl	8005c2c <USB_ReadPMA>
 8001cec:	e07c      	b.n	8001de8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	3306      	adds	r3, #6
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d16:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	699a      	ldr	r2, [r3, #24]
 8001d1c:	8b7b      	ldrh	r3, [r7, #26]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d306      	bcc.n	8001d30 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	699a      	ldr	r2, [r3, #24]
 8001d26:	8b7b      	ldrh	r3, [r7, #26]
 8001d28:	1ad2      	subs	r2, r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	619a      	str	r2, [r3, #24]
 8001d2e:	e002      	b.n	8001d36 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d123      	bne.n	8001d86 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d58:	83fb      	strh	r3, [r7, #30]
 8001d5a:	8bfb      	ldrh	r3, [r7, #30]
 8001d5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d60:	83fb      	strh	r3, [r7, #30]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	441a      	add	r2, r3
 8001d70:	8bfb      	ldrh	r3, [r7, #30]
 8001d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d11f      	bne.n	8001dd0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001daa:	83bb      	strh	r3, [r7, #28]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	441a      	add	r2, r3
 8001dba:	8bbb      	ldrh	r3, [r7, #28]
 8001dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001dd0:	8b7b      	ldrh	r3, [r7, #26]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d008      	beq.n	8001de8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	6959      	ldr	r1, [r3, #20]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	895a      	ldrh	r2, [r3, #10]
 8001de2:	8b7b      	ldrh	r3, [r7, #26]
 8001de4:	f003 ff22 	bl	8005c2c <USB_ReadPMA>
    }
  }

  return count;
 8001de8:	8b7b      	ldrh	r3, [r7, #26]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b0a2      	sub	sp, #136	; 0x88
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 81c7 	beq.w	800219a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4413      	add	r3, r2
 8001e20:	3302      	adds	r3, #2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	699a      	ldr	r2, [r3, #24]
 8001e3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d907      	bls.n	8001e54 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e4c:	1ad2      	subs	r2, r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	619a      	str	r2, [r3, #24]
 8001e52:	e002      	b.n	8001e5a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 80b9 	bne.w	8001fd6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	785b      	ldrb	r3, [r3, #1]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d126      	bne.n	8001eba <HAL_PCD_EP_DB_Transmit+0xc8>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e80:	4413      	add	r3, r2
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	011a      	lsls	r2, r3, #4
 8001e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	801a      	strh	r2, [r3, #0]
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	801a      	strh	r2, [r3, #0]
 8001eb8:	e01a      	b.n	8001ef0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	785b      	ldrb	r3, [r3, #1]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d116      	bne.n	8001ef0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed6:	4413      	add	r3, r2
 8001ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	011a      	lsls	r2, r3, #4
 8001ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eec:	2200      	movs	r2, #0
 8001eee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	623b      	str	r3, [r7, #32]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d126      	bne.n	8001f4c <HAL_PCD_EP_DB_Transmit+0x15a>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	4413      	add	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	011a      	lsls	r2, r3, #4
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	801a      	strh	r2, [r3, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	801a      	strh	r2, [r3, #0]
 8001f4a:	e017      	b.n	8001f7c <HAL_PCD_EP_DB_Transmit+0x18a>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	785b      	ldrb	r3, [r3, #1]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d113      	bne.n	8001f7c <HAL_PCD_EP_DB_Transmit+0x18a>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	4413      	add	r3, r2
 8001f64:	623b      	str	r3, [r7, #32]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	011a      	lsls	r2, r3, #4
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f005 fc77 	bl	8007876 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 82d4 	beq.w	800253c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fae:	827b      	strh	r3, [r7, #18]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	441a      	add	r2, r3
 8001fbe:	8a7b      	ldrh	r3, [r7, #18]
 8001fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	8013      	strh	r3, [r2, #0]
 8001fd4:	e2b2      	b.n	800253c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d021      	beq.n	8002024 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	441a      	add	r2, r3
 800200c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800201c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002020:	b29b      	uxth	r3, r3
 8002022:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800202a:	2b01      	cmp	r3, #1
 800202c:	f040 8286 	bne.w	800253c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002038:	441a      	add	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002046:	441a      	add	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	6a1a      	ldr	r2, [r3, #32]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	429a      	cmp	r2, r3
 8002056:	d309      	bcc.n	800206c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	6a1a      	ldr	r2, [r3, #32]
 8002062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002064:	1ad2      	subs	r2, r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	621a      	str	r2, [r3, #32]
 800206a:	e015      	b.n	8002098 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d107      	bne.n	8002084 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002074:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002078:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002082:	e009      	b.n	8002098 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2200      	movs	r2, #0
 8002096:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	785b      	ldrb	r3, [r3, #1]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d155      	bne.n	800214c <HAL_PCD_EP_DB_Transmit+0x35a>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b4:	4413      	add	r3, r2
 80020b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	011a      	lsls	r2, r3, #4
 80020be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c0:	4413      	add	r3, r2
 80020c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
 80020c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d112      	bne.n	80020f4 <HAL_PCD_EP_DB_Transmit+0x302>
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020d8:	b29a      	uxth	r2, r3
 80020da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f0:	801a      	strh	r2, [r3, #0]
 80020f2:	e047      	b.n	8002184 <HAL_PCD_EP_DB_Transmit+0x392>
 80020f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020f6:	2b3e      	cmp	r3, #62	; 0x3e
 80020f8:	d811      	bhi.n	800211e <HAL_PCD_EP_DB_Transmit+0x32c>
 80020fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_PCD_EP_DB_Transmit+0x31e>
 800210a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800210c:	3301      	adds	r3, #1
 800210e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002112:	b29b      	uxth	r3, r3
 8002114:	029b      	lsls	r3, r3, #10
 8002116:	b29a      	uxth	r2, r3
 8002118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211a:	801a      	strh	r2, [r3, #0]
 800211c:	e032      	b.n	8002184 <HAL_PCD_EP_DB_Transmit+0x392>
 800211e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	64bb      	str	r3, [r7, #72]	; 0x48
 8002124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <HAL_PCD_EP_DB_Transmit+0x342>
 800212e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002130:	3b01      	subs	r3, #1
 8002132:	64bb      	str	r3, [r7, #72]	; 0x48
 8002134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002136:	b29b      	uxth	r3, r3
 8002138:	029b      	lsls	r3, r3, #10
 800213a:	b29b      	uxth	r3, r3
 800213c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002144:	b29a      	uxth	r2, r3
 8002146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002148:	801a      	strh	r2, [r3, #0]
 800214a:	e01b      	b.n	8002184 <HAL_PCD_EP_DB_Transmit+0x392>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	785b      	ldrb	r3, [r3, #1]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d117      	bne.n	8002184 <HAL_PCD_EP_DB_Transmit+0x392>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	643b      	str	r3, [r7, #64]	; 0x40
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002162:	b29b      	uxth	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002168:	4413      	add	r3, r2
 800216a:	643b      	str	r3, [r7, #64]	; 0x40
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	011a      	lsls	r2, r3, #4
 8002172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002174:	4413      	add	r3, r2
 8002176:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800217a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800217e:	b29a      	uxth	r2, r3
 8002180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002182:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	6959      	ldr	r1, [r3, #20]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	891a      	ldrh	r2, [r3, #8]
 8002190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002192:	b29b      	uxth	r3, r3
 8002194:	f003 fd05 	bl	8005ba2 <USB_WritePMA>
 8002198:	e1d0      	b.n	800253c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	3306      	adds	r3, #6
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d307      	bcc.n	80021e2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021da:	1ad2      	subs	r2, r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	619a      	str	r2, [r3, #24]
 80021e0:	e002      	b.n	80021e8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f040 80c4 	bne.w	800237a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	785b      	ldrb	r3, [r3, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d126      	bne.n	8002248 <HAL_PCD_EP_DB_Transmit+0x456>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002208:	b29b      	uxth	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220e:	4413      	add	r3, r2
 8002210:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	011a      	lsls	r2, r3, #4
 8002218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800221a:	4413      	add	r3, r2
 800221c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002220:	66bb      	str	r3, [r7, #104]	; 0x68
 8002222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800222c:	b29a      	uxth	r2, r3
 800222e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002230:	801a      	strh	r2, [r3, #0]
 8002232:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	b29b      	uxth	r3, r3
 8002238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800223c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002240:	b29a      	uxth	r2, r3
 8002242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002244:	801a      	strh	r2, [r3, #0]
 8002246:	e01a      	b.n	800227e <HAL_PCD_EP_DB_Transmit+0x48c>
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	785b      	ldrb	r3, [r3, #1]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d116      	bne.n	800227e <HAL_PCD_EP_DB_Transmit+0x48c>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	677b      	str	r3, [r7, #116]	; 0x74
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002264:	4413      	add	r3, r2
 8002266:	677b      	str	r3, [r7, #116]	; 0x74
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	011a      	lsls	r2, r3, #4
 800226e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002270:	4413      	add	r3, r2
 8002272:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002276:	673b      	str	r3, [r7, #112]	; 0x70
 8002278:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800227a:	2200      	movs	r2, #0
 800227c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	67bb      	str	r3, [r7, #120]	; 0x78
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	785b      	ldrb	r3, [r3, #1]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d12f      	bne.n	80022ec <HAL_PCD_EP_DB_Transmit+0x4fa>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229c:	b29b      	uxth	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022a4:	4413      	add	r3, r2
 80022a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	011a      	lsls	r2, r3, #4
 80022b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022b4:	4413      	add	r3, r2
 80022b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022d0:	801a      	strh	r2, [r3, #0]
 80022d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022e8:	801a      	strh	r2, [r3, #0]
 80022ea:	e017      	b.n	800231c <HAL_PCD_EP_DB_Transmit+0x52a>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	785b      	ldrb	r3, [r3, #1]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d113      	bne.n	800231c <HAL_PCD_EP_DB_Transmit+0x52a>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002302:	4413      	add	r3, r2
 8002304:	67bb      	str	r3, [r7, #120]	; 0x78
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	011a      	lsls	r2, r3, #4
 800230c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800230e:	4413      	add	r3, r2
 8002310:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002314:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002316:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002318:	2200      	movs	r2, #0
 800231a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f005 faa7 	bl	8007876 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 8104 	bne.w	800253c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800234a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800234e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	441a      	add	r2, r3
 8002360:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800236c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002374:	b29b      	uxth	r3, r3
 8002376:	8013      	strh	r3, [r2, #0]
 8002378:	e0e0      	b.n	800253c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d121      	bne.n	80023c8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800239a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	441a      	add	r2, r3
 80023b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80023b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	f040 80b4 	bne.w	800253c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023dc:	441a      	add	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023ea:	441a      	add	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	6a1a      	ldr	r2, [r3, #32]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d309      	bcc.n	8002410 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	6a1a      	ldr	r2, [r3, #32]
 8002406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002408:	1ad2      	subs	r2, r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	621a      	str	r2, [r3, #32]
 800240e:	e015      	b.n	800243c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d107      	bne.n	8002428 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002418:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800241c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002426:	e009      	b.n	800243c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2200      	movs	r2, #0
 8002432:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	667b      	str	r3, [r7, #100]	; 0x64
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	785b      	ldrb	r3, [r3, #1]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d155      	bne.n	80024f6 <HAL_PCD_EP_DB_Transmit+0x704>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002458:	b29b      	uxth	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800245e:	4413      	add	r3, r2
 8002460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	011a      	lsls	r2, r3, #4
 8002468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800246a:	4413      	add	r3, r2
 800246c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002470:	65bb      	str	r3, [r7, #88]	; 0x58
 8002472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002474:	2b00      	cmp	r3, #0
 8002476:	d112      	bne.n	800249e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002482:	b29a      	uxth	r2, r3
 8002484:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002486:	801a      	strh	r2, [r3, #0]
 8002488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	b29b      	uxth	r3, r3
 800248e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002496:	b29a      	uxth	r2, r3
 8002498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800249a:	801a      	strh	r2, [r3, #0]
 800249c:	e044      	b.n	8002528 <HAL_PCD_EP_DB_Transmit+0x736>
 800249e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a0:	2b3e      	cmp	r3, #62	; 0x3e
 80024a2:	d811      	bhi.n	80024c8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80024a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	657b      	str	r3, [r7, #84]	; 0x54
 80024aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <HAL_PCD_EP_DB_Transmit+0x6c8>
 80024b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b6:	3301      	adds	r3, #1
 80024b8:	657b      	str	r3, [r7, #84]	; 0x54
 80024ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024bc:	b29b      	uxth	r3, r3
 80024be:	029b      	lsls	r3, r3, #10
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024c4:	801a      	strh	r2, [r3, #0]
 80024c6:	e02f      	b.n	8002528 <HAL_PCD_EP_DB_Transmit+0x736>
 80024c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	657b      	str	r3, [r7, #84]	; 0x54
 80024ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <HAL_PCD_EP_DB_Transmit+0x6ec>
 80024d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024da:	3b01      	subs	r3, #1
 80024dc:	657b      	str	r3, [r7, #84]	; 0x54
 80024de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	029b      	lsls	r3, r3, #10
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f2:	801a      	strh	r2, [r3, #0]
 80024f4:	e018      	b.n	8002528 <HAL_PCD_EP_DB_Transmit+0x736>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	785b      	ldrb	r3, [r3, #1]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d114      	bne.n	8002528 <HAL_PCD_EP_DB_Transmit+0x736>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800250c:	4413      	add	r3, r2
 800250e:	667b      	str	r3, [r7, #100]	; 0x64
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	011a      	lsls	r2, r3, #4
 8002516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002518:	4413      	add	r3, r2
 800251a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800251e:	663b      	str	r3, [r7, #96]	; 0x60
 8002520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002522:	b29a      	uxth	r2, r3
 8002524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002526:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	6959      	ldr	r1, [r3, #20]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	895a      	ldrh	r2, [r3, #10]
 8002534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002536:	b29b      	uxth	r3, r3
 8002538:	f003 fb33 	bl	8005ba2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002556:	823b      	strh	r3, [r7, #16]
 8002558:	8a3b      	ldrh	r3, [r7, #16]
 800255a:	f083 0310 	eor.w	r3, r3, #16
 800255e:	823b      	strh	r3, [r7, #16]
 8002560:	8a3b      	ldrh	r3, [r7, #16]
 8002562:	f083 0320 	eor.w	r3, r3, #32
 8002566:	823b      	strh	r3, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	441a      	add	r2, r3
 8002576:	8a3b      	ldrh	r3, [r7, #16]
 8002578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800257c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002588:	b29b      	uxth	r3, r3
 800258a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3788      	adds	r7, #136	; 0x88
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002596:	b480      	push	{r7}
 8002598:	b087      	sub	sp, #28
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	817b      	strh	r3, [r7, #10]
 80025a4:	4613      	mov	r3, r2
 80025a6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80025a8:	897b      	ldrh	r3, [r7, #10]
 80025aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00b      	beq.n	80025cc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b4:	897b      	ldrh	r3, [r7, #10]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e009      	b.n	80025e0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025cc:	897a      	ldrh	r2, [r7, #10]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4413      	add	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80025e0:	893b      	ldrh	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d107      	bne.n	80025f6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2200      	movs	r2, #0
 80025ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	80da      	strh	r2, [r3, #6]
 80025f4:	e00b      	b.n	800260e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2201      	movs	r2, #1
 80025fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	b29a      	uxth	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	0c1b      	lsrs	r3, r3, #16
 8002608:	b29a      	uxth	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
	...

0800261c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e26c      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8087 	beq.w	800274a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800263c:	4b92      	ldr	r3, [pc, #584]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b04      	cmp	r3, #4
 8002646:	d00c      	beq.n	8002662 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002648:	4b8f      	ldr	r3, [pc, #572]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b08      	cmp	r3, #8
 8002652:	d112      	bne.n	800267a <HAL_RCC_OscConfig+0x5e>
 8002654:	4b8c      	ldr	r3, [pc, #560]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002660:	d10b      	bne.n	800267a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002662:	4b89      	ldr	r3, [pc, #548]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d06c      	beq.n	8002748 <HAL_RCC_OscConfig+0x12c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d168      	bne.n	8002748 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e246      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002682:	d106      	bne.n	8002692 <HAL_RCC_OscConfig+0x76>
 8002684:	4b80      	ldr	r3, [pc, #512]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a7f      	ldr	r2, [pc, #508]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 800268a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	e02e      	b.n	80026f0 <HAL_RCC_OscConfig+0xd4>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x98>
 800269a:	4b7b      	ldr	r3, [pc, #492]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a7a      	ldr	r2, [pc, #488]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b78      	ldr	r3, [pc, #480]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a77      	ldr	r2, [pc, #476]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e01d      	b.n	80026f0 <HAL_RCC_OscConfig+0xd4>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0xbc>
 80026be:	4b72      	ldr	r3, [pc, #456]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a71      	ldr	r2, [pc, #452]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a6e      	ldr	r2, [pc, #440]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0xd4>
 80026d8:	4b6b      	ldr	r3, [pc, #428]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a6a      	ldr	r2, [pc, #424]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b68      	ldr	r3, [pc, #416]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a67      	ldr	r2, [pc, #412]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d013      	beq.n	8002720 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fd ff70 	bl	80005dc <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7fd ff6c 	bl	80005dc <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1fa      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b5d      	ldr	r3, [pc, #372]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0xe4>
 800271e:	e014      	b.n	800274a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fd ff5c 	bl	80005dc <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7fd ff58 	bl	80005dc <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e1e6      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273a:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x10c>
 8002746:	e000      	b.n	800274a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d063      	beq.n	800281e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002756:	4b4c      	ldr	r3, [pc, #304]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002762:	4b49      	ldr	r3, [pc, #292]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b08      	cmp	r3, #8
 800276c:	d11c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x18c>
 800276e:	4b46      	ldr	r3, [pc, #280]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d116      	bne.n	80027a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277a:	4b43      	ldr	r3, [pc, #268]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_RCC_OscConfig+0x176>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e1ba      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	4b3d      	ldr	r3, [pc, #244]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4939      	ldr	r1, [pc, #228]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	e03a      	b.n	800281e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d020      	beq.n	80027f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b0:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b6:	f7fd ff11 	bl	80005dc <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027be:	f7fd ff0d 	bl	80005dc <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e19b      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d0:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027dc:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4927      	ldr	r1, [pc, #156]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
 80027f0:	e015      	b.n	800281e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f2:	4b26      	ldr	r3, [pc, #152]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fd fef0 	bl	80005dc <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002800:	f7fd feec 	bl	80005dc <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e17a      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d03a      	beq.n	80028a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d019      	beq.n	8002866 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002832:	4b17      	ldr	r3, [pc, #92]	; (8002890 <HAL_RCC_OscConfig+0x274>)
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002838:	f7fd fed0 	bl	80005dc <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002840:	f7fd fecc 	bl	80005dc <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e15a      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_RCC_OscConfig+0x26c>)
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800285e:	2001      	movs	r0, #1
 8002860:	f000 fad8 	bl	8002e14 <RCC_Delay>
 8002864:	e01c      	b.n	80028a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_RCC_OscConfig+0x274>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286c:	f7fd feb6 	bl	80005dc <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002872:	e00f      	b.n	8002894 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002874:	f7fd feb2 	bl	80005dc <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d908      	bls.n	8002894 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e140      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	42420000 	.word	0x42420000
 8002890:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002894:	4b9e      	ldr	r3, [pc, #632]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1e9      	bne.n	8002874 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80a6 	beq.w	80029fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b2:	4b97      	ldr	r3, [pc, #604]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10d      	bne.n	80028da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	4b94      	ldr	r3, [pc, #592]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4a93      	ldr	r2, [pc, #588]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c8:	61d3      	str	r3, [r2, #28]
 80028ca:	4b91      	ldr	r3, [pc, #580]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d6:	2301      	movs	r3, #1
 80028d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	4b8e      	ldr	r3, [pc, #568]	; (8002b14 <HAL_RCC_OscConfig+0x4f8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d118      	bne.n	8002918 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e6:	4b8b      	ldr	r3, [pc, #556]	; (8002b14 <HAL_RCC_OscConfig+0x4f8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a8a      	ldr	r2, [pc, #552]	; (8002b14 <HAL_RCC_OscConfig+0x4f8>)
 80028ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f2:	f7fd fe73 	bl	80005dc <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fa:	f7fd fe6f 	bl	80005dc <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b64      	cmp	r3, #100	; 0x64
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0fd      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290c:	4b81      	ldr	r3, [pc, #516]	; (8002b14 <HAL_RCC_OscConfig+0x4f8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d106      	bne.n	800292e <HAL_RCC_OscConfig+0x312>
 8002920:	4b7b      	ldr	r3, [pc, #492]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4a7a      	ldr	r2, [pc, #488]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6213      	str	r3, [r2, #32]
 800292c:	e02d      	b.n	800298a <HAL_RCC_OscConfig+0x36e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0x334>
 8002936:	4b76      	ldr	r3, [pc, #472]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	4a75      	ldr	r2, [pc, #468]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6213      	str	r3, [r2, #32]
 8002942:	4b73      	ldr	r3, [pc, #460]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	4a72      	ldr	r2, [pc, #456]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002948:	f023 0304 	bic.w	r3, r3, #4
 800294c:	6213      	str	r3, [r2, #32]
 800294e:	e01c      	b.n	800298a <HAL_RCC_OscConfig+0x36e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b05      	cmp	r3, #5
 8002956:	d10c      	bne.n	8002972 <HAL_RCC_OscConfig+0x356>
 8002958:	4b6d      	ldr	r3, [pc, #436]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4a6c      	ldr	r2, [pc, #432]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	6213      	str	r3, [r2, #32]
 8002964:	4b6a      	ldr	r3, [pc, #424]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4a69      	ldr	r2, [pc, #420]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6213      	str	r3, [r2, #32]
 8002970:	e00b      	b.n	800298a <HAL_RCC_OscConfig+0x36e>
 8002972:	4b67      	ldr	r3, [pc, #412]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4a66      	ldr	r2, [pc, #408]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	6213      	str	r3, [r2, #32]
 800297e:	4b64      	ldr	r3, [pc, #400]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	4a63      	ldr	r2, [pc, #396]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002984:	f023 0304 	bic.w	r3, r3, #4
 8002988:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d015      	beq.n	80029be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002992:	f7fd fe23 	bl	80005dc <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002998:	e00a      	b.n	80029b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299a:	f7fd fe1f 	bl	80005dc <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e0ab      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b0:	4b57      	ldr	r3, [pc, #348]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0ee      	beq.n	800299a <HAL_RCC_OscConfig+0x37e>
 80029bc:	e014      	b.n	80029e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7fd fe0d 	bl	80005dc <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fd fe09 	bl	80005dc <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e095      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029dc:	4b4c      	ldr	r3, [pc, #304]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1ee      	bne.n	80029c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029e8:	7dfb      	ldrb	r3, [r7, #23]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d105      	bne.n	80029fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ee:	4b48      	ldr	r3, [pc, #288]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4a47      	ldr	r2, [pc, #284]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 80029f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8081 	beq.w	8002b06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a04:	4b42      	ldr	r3, [pc, #264]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d061      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d146      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a18:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <HAL_RCC_OscConfig+0x4fc>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fd fddd 	bl	80005dc <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a26:	f7fd fdd9 	bl	80005dc <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e067      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a38:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4c:	d108      	bne.n	8002a60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a4e:	4b30      	ldr	r3, [pc, #192]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	492d      	ldr	r1, [pc, #180]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a60:	4b2b      	ldr	r3, [pc, #172]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a19      	ldr	r1, [r3, #32]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	430b      	orrs	r3, r1
 8002a72:	4927      	ldr	r1, [pc, #156]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <HAL_RCC_OscConfig+0x4fc>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7fd fdad 	bl	80005dc <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fd fda9 	bl	80005dc <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e037      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a98:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x46a>
 8002aa4:	e02f      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <HAL_RCC_OscConfig+0x4fc>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fd fd96 	bl	80005dc <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fd fd92 	bl	80005dc <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e020      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x498>
 8002ad2:	e018      	b.n	8002b06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e013      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d106      	bne.n	8002b02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d001      	beq.n	8002b06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40007000 	.word	0x40007000
 8002b18:	42420060 	.word	0x42420060

08002b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0d0      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b30:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d910      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b67      	ldr	r3, [pc, #412]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 0207 	bic.w	r2, r3, #7
 8002b46:	4965      	ldr	r1, [pc, #404]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b63      	ldr	r3, [pc, #396]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0b8      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b78:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b90:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a52      	ldr	r2, [pc, #328]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	494d      	ldr	r1, [pc, #308]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d040      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d115      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e07f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bda:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e073      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e06b      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfa:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4936      	ldr	r1, [pc, #216]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c0c:	f7fd fce6 	bl	80005dc <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7fd fce2 	bl	80005dc <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e053      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 020c 	and.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1eb      	bne.n	8002c14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d210      	bcs.n	8002c6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 0207 	bic.w	r2, r3, #7
 8002c52:	4922      	ldr	r1, [pc, #136]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e032      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4916      	ldr	r1, [pc, #88]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002caa:	f000 f821 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	490a      	ldr	r1, [pc, #40]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	5ccb      	ldrb	r3, [r1, r3]
 8002cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_RCC_ClockConfig+0x1d0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fc44 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40022000 	.word	0x40022000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	08007e08 	.word	0x08007e08
 8002ce8:	20000000 	.word	0x20000000
 8002cec:	20000004 	.word	0x20000004

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	b490      	push	{r4, r7}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cf6:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cf8:	1d3c      	adds	r4, r7, #4
 8002cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d00:	f240 2301 	movw	r3, #513	; 0x201
 8002d04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d1a:	4b22      	ldr	r3, [pc, #136]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d002      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x40>
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d003      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x46>
 8002d2e:	e02d      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d32:	623b      	str	r3, [r7, #32]
      break;
 8002d34:	e02d      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	0c9b      	lsrs	r3, r3, #18
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d42:	4413      	add	r3, r2
 8002d44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0c5b      	lsrs	r3, r3, #17
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d62:	4413      	add	r3, r2
 8002d64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	4a0e      	ldr	r2, [pc, #56]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d6e:	fb02 f203 	mul.w	r2, r2, r3
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7a:	e004      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	4a0b      	ldr	r2, [pc, #44]	; (8002dac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d80:	fb02 f303 	mul.w	r3, r2, r3
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	623b      	str	r3, [r7, #32]
      break;
 8002d8a:	e002      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d8e:	623b      	str	r3, [r7, #32]
      break;
 8002d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d92:	6a3b      	ldr	r3, [r7, #32]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3728      	adds	r7, #40	; 0x28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc90      	pop	{r4, r7}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	08007db0 	.word	0x08007db0
 8002da4:	40021000 	.word	0x40021000
 8002da8:	007a1200 	.word	0x007a1200
 8002dac:	003d0900 	.word	0x003d0900

08002db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db4:	4b02      	ldr	r3, [pc, #8]	; (8002dc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	20000000 	.word	0x20000000

08002dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc8:	f7ff fff2 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	4903      	ldr	r1, [pc, #12]	; (8002de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000
 8002de8:	08007e18 	.word	0x08007e18

08002dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df0:	f7ff ffde 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	0adb      	lsrs	r3, r3, #11
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4903      	ldr	r1, [pc, #12]	; (8002e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08007e18 	.word	0x08007e18

08002e14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <RCC_Delay+0x34>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <RCC_Delay+0x38>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0a5b      	lsrs	r3, r3, #9
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e30:	bf00      	nop
  }
  while (Delay --);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1e5a      	subs	r2, r3, #1
 8002e36:	60fa      	str	r2, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f9      	bne.n	8002e30 <RCC_Delay+0x1c>
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	10624dd3 	.word	0x10624dd3

08002e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d07d      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e70:	4b4f      	ldr	r3, [pc, #316]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10d      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7c:	4b4c      	ldr	r3, [pc, #304]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	4a4b      	ldr	r2, [pc, #300]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e86:	61d3      	str	r3, [r2, #28]
 8002e88:	4b49      	ldr	r3, [pc, #292]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e94:	2301      	movs	r3, #1
 8002e96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	4b46      	ldr	r3, [pc, #280]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d118      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea4:	4b43      	ldr	r3, [pc, #268]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a42      	ldr	r2, [pc, #264]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb0:	f7fd fb94 	bl	80005dc <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb6:	e008      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb8:	f7fd fb90 	bl	80005dc <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	; 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e06d      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eca:	4b3a      	ldr	r3, [pc, #232]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ed6:	4b36      	ldr	r3, [pc, #216]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ede:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d02e      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d027      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ef4:	4b2e      	ldr	r3, [pc, #184]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002efe:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f04:	4b2c      	ldr	r3, [pc, #176]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f0a:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d014      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fd fb5f 	bl	80005dc <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fd fb5b 	bl	80005dc <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e036      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f38:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ee      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f44:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4917      	ldr	r1, [pc, #92]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d105      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5c:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	490b      	ldr	r1, [pc, #44]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	4904      	ldr	r1, [pc, #16]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	42420440 	.word	0x42420440

08002fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e03f      	b.n	800304e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fd f9e6 	bl	80003b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2224      	movs	r2, #36	; 0x24
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fb49 	bl	8003698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	; 0x28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10d      	bne.n	80030aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_UART_IRQHandler+0x52>
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fa4f 	bl	8003546 <UART_Receive_IT>
      return;
 80030a8:	e17b      	b.n	80033a2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80b1 	beq.w	8003214 <HAL_UART_IRQHandler+0x1bc>
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d105      	bne.n	80030c8 <HAL_UART_IRQHandler+0x70>
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 80a6 	beq.w	8003214 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_UART_IRQHandler+0x90>
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f043 0201 	orr.w	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_UART_IRQHandler+0xb0>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	f043 0202 	orr.w	r2, r3, #2
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_UART_IRQHandler+0xd0>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	f043 0204 	orr.w	r2, r3, #4
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00f      	beq.n	8003152 <HAL_UART_IRQHandler+0xfa>
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d104      	bne.n	8003146 <HAL_UART_IRQHandler+0xee>
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f043 0208 	orr.w	r2, r3, #8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 811e 	beq.w	8003398 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <HAL_UART_IRQHandler+0x11e>
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f9e8 	bl	8003546 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf14      	ite	ne
 8003184:	2301      	movne	r3, #1
 8003186:	2300      	moveq	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <HAL_UART_IRQHandler+0x146>
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d031      	beq.n	8003202 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f92a 	bl	80033f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d023      	beq.n	80031fa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695a      	ldr	r2, [r3, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d013      	beq.n	80031f2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	4a76      	ldr	r2, [pc, #472]	; (80033a8 <HAL_UART_IRQHandler+0x350>)
 80031d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd fb52 	bl	8000880 <HAL_DMA_Abort_IT>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d016      	beq.n	8003210 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031ec:	4610      	mov	r0, r2
 80031ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f0:	e00e      	b.n	8003210 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f8ec 	bl	80033d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f8:	e00a      	b.n	8003210 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f8e8 	bl	80033d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003200:	e006      	b.n	8003210 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f8e4 	bl	80033d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800320e:	e0c3      	b.n	8003398 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003210:	bf00      	nop
    return;
 8003212:	e0c1      	b.n	8003398 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	2b01      	cmp	r3, #1
 800321a:	f040 80a1 	bne.w	8003360 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 809b 	beq.w	8003360 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8095 	beq.w	8003360 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d04e      	beq.n	80032f8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003264:	8a3b      	ldrh	r3, [r7, #16]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 8098 	beq.w	800339c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003270:	8a3a      	ldrh	r2, [r7, #16]
 8003272:	429a      	cmp	r2, r3
 8003274:	f080 8092 	bcs.w	800339c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8a3a      	ldrh	r2, [r7, #16]
 800327c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	2b20      	cmp	r3, #32
 8003286:	d02b      	beq.n	80032e0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003296:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0210 	bic.w	r2, r2, #16
 80032d4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd fa95 	bl	800080a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	4619      	mov	r1, r3
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f876 	bl	80033e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80032f6:	e051      	b.n	800339c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003300:	b29b      	uxth	r3, r3
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d047      	beq.n	80033a0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003310:	8a7b      	ldrh	r3, [r7, #18]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d044      	beq.n	80033a0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003324:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0210 	bic.w	r2, r2, #16
 8003352:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003354:	8a7b      	ldrh	r3, [r7, #18]
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f842 	bl	80033e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800335e:	e01f      	b.n	80033a0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <HAL_UART_IRQHandler+0x324>
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f87f 	bl	8003478 <UART_Transmit_IT>
    return;
 800337a:	e012      	b.n	80033a2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <HAL_UART_IRQHandler+0x34a>
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f8c0 	bl	8003516 <UART_EndTransmit_IT>
    return;
 8003396:	e004      	b.n	80033a2 <HAL_UART_IRQHandler+0x34a>
    return;
 8003398:	bf00      	nop
 800339a:	e002      	b.n	80033a2 <HAL_UART_IRQHandler+0x34a>
      return;
 800339c:	bf00      	nop
 800339e:	e000      	b.n	80033a2 <HAL_UART_IRQHandler+0x34a>
      return;
 80033a0:	bf00      	nop
  }
}
 80033a2:	3728      	adds	r7, #40	; 0x28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	08003451 	.word	0x08003451

080033ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr

080033be <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	460b      	mov	r3, r1
 80033ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800340e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	2b01      	cmp	r3, #1
 8003426:	d107      	bne.n	8003438 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0210 	bic.w	r2, r2, #16
 8003436:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7ff ffb0 	bl	80033d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b21      	cmp	r3, #33	; 0x21
 800348a:	d13e      	bne.n	800350a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003494:	d114      	bne.n	80034c0 <UART_Transmit_IT+0x48>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d110      	bne.n	80034c0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	1c9a      	adds	r2, r3, #2
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	621a      	str	r2, [r3, #32]
 80034be:	e008      	b.n	80034d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	1c59      	adds	r1, r3, #1
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6211      	str	r1, [r2, #32]
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29b      	uxth	r3, r3
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	4619      	mov	r1, r3
 80034e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10f      	bne.n	8003506 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003504:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e000      	b.n	800350c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800350a:	2302      	movs	r3, #2
  }
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800352c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ff38 	bl	80033ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b086      	sub	sp, #24
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b22      	cmp	r3, #34	; 0x22
 8003558:	f040 8099 	bne.w	800368e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003564:	d117      	bne.n	8003596 <UART_Receive_IT+0x50>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d113      	bne.n	8003596 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	b29b      	uxth	r3, r3
 8003580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003584:	b29a      	uxth	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	1c9a      	adds	r2, r3, #2
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
 8003594:	e026      	b.n	80035e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a8:	d007      	beq.n	80035ba <UART_Receive_IT+0x74>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <UART_Receive_IT+0x82>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	e008      	b.n	80035da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4619      	mov	r1, r3
 80035f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d148      	bne.n	800368a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0220 	bic.w	r2, r2, #32
 8003606:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003616:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695a      	ldr	r2, [r3, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	2b01      	cmp	r3, #1
 8003636:	d123      	bne.n	8003680 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0210 	bic.w	r2, r2, #16
 800364c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b10      	cmp	r3, #16
 800365a:	d10a      	bne.n	8003672 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003676:	4619      	mov	r1, r3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff feb2 	bl	80033e2 <HAL_UARTEx_RxEventCallback>
 800367e:	e002      	b.n	8003686 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff fe9c 	bl	80033be <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e002      	b.n	8003690 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800368e:	2302      	movs	r3, #2
  }
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036d2:	f023 030c 	bic.w	r3, r3, #12
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	430b      	orrs	r3, r1
 80036de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a2c      	ldr	r2, [pc, #176]	; (80037ac <UART_SetConfig+0x114>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d103      	bne.n	8003708 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003700:	f7ff fb74 	bl	8002dec <HAL_RCC_GetPCLK2Freq>
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	e002      	b.n	800370e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003708:	f7ff fb5c 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 800370c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009a      	lsls	r2, r3, #2
 8003718:	441a      	add	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <UART_SetConfig+0x118>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	0119      	lsls	r1, r3, #4
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009a      	lsls	r2, r3, #2
 8003738:	441a      	add	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	fbb2 f2f3 	udiv	r2, r2, r3
 8003744:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <UART_SetConfig+0x118>)
 8003746:	fba3 0302 	umull	r0, r3, r3, r2
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	2064      	movs	r0, #100	; 0x64
 800374e:	fb00 f303 	mul.w	r3, r0, r3
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	3332      	adds	r3, #50	; 0x32
 8003758:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <UART_SetConfig+0x118>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003764:	4419      	add	r1, r3
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	009a      	lsls	r2, r3, #2
 8003770:	441a      	add	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	fbb2 f2f3 	udiv	r2, r2, r3
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <UART_SetConfig+0x118>)
 800377e:	fba3 0302 	umull	r0, r3, r3, r2
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	2064      	movs	r0, #100	; 0x64
 8003786:	fb00 f303 	mul.w	r3, r0, r3
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	3332      	adds	r3, #50	; 0x32
 8003790:	4a07      	ldr	r2, [pc, #28]	; (80037b0 <UART_SetConfig+0x118>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	f003 020f 	and.w	r2, r3, #15
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	440a      	add	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40013800 	.word	0x40013800
 80037b0:	51eb851f 	.word	0x51eb851f

080037b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80037b4:	b084      	sub	sp, #16
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	f107 0014 	add.w	r0, r7, #20
 80037c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	b004      	add	sp, #16
 80037d2:	4770      	bx	lr

080037d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80037e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80037e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003808:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800380c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	b29b      	uxth	r3, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	b29b      	uxth	r3, r3
 800381e:	4013      	ands	r3, r2
 8003820:	b29a      	uxth	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800384c:	b084      	sub	sp, #16
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	f107 0014 	add.w	r0, r7, #20
 800385a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	b004      	add	sp, #16
 800388a:	4770      	bx	lr

0800388c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800388c:	b480      	push	{r7}
 800388e:	b09b      	sub	sp, #108	; 0x6c
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80038ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	78db      	ldrb	r3, [r3, #3]
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d81f      	bhi.n	80038fe <USB_ActivateEndpoint+0x72>
 80038be:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <USB_ActivateEndpoint+0x38>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	080038d5 	.word	0x080038d5
 80038c8:	080038f1 	.word	0x080038f1
 80038cc:	08003907 	.word	0x08003907
 80038d0:	080038e3 	.word	0x080038e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80038d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80038e0:	e012      	b.n	8003908 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80038e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80038ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80038ee:	e00b      	b.n	8003908 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80038f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80038fc:	e004      	b.n	8003908 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003904:	e000      	b.n	8003908 <USB_ActivateEndpoint+0x7c>
      break;
 8003906:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	441a      	add	r2, r3
 8003912:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800391a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800391e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003926:	b29b      	uxth	r3, r3
 8003928:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003940:	b29a      	uxth	r2, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	4313      	orrs	r3, r2
 800394a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	441a      	add	r2, r3
 8003958:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800395c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396c:	b29b      	uxth	r3, r3
 800396e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	7b1b      	ldrb	r3, [r3, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f040 8149 	bne.w	8003c0c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	785b      	ldrb	r3, [r3, #1]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8084 	beq.w	8003a8c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800398e:	b29b      	uxth	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	4413      	add	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	011a      	lsls	r2, r3, #4
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	88db      	ldrh	r3, [r3, #6]
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	81fb      	strh	r3, [r7, #14]
 80039c6:	89fb      	ldrh	r3, [r7, #14]
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01b      	beq.n	8003a08 <USB_ActivateEndpoint+0x17c>
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	81bb      	strh	r3, [r7, #12]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	89bb      	ldrh	r3, [r7, #12]
 80039f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	78db      	ldrb	r3, [r3, #3]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d020      	beq.n	8003a52 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a26:	813b      	strh	r3, [r7, #8]
 8003a28:	893b      	ldrh	r3, [r7, #8]
 8003a2a:	f083 0320 	eor.w	r3, r3, #32
 8003a2e:	813b      	strh	r3, [r7, #8]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	441a      	add	r2, r3
 8003a3a:	893b      	ldrh	r3, [r7, #8]
 8003a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	8013      	strh	r3, [r2, #0]
 8003a50:	e27f      	b.n	8003f52 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a68:	817b      	strh	r3, [r7, #10]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	441a      	add	r2, r3
 8003a74:	897b      	ldrh	r3, [r7, #10]
 8003a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	8013      	strh	r3, [r2, #0]
 8003a8a:	e262      	b.n	8003f52 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	4413      	add	r3, r2
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	011a      	lsls	r2, r3, #4
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	88db      	ldrh	r3, [r3, #6]
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	4413      	add	r3, r2
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	011a      	lsls	r2, r3, #4
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	4413      	add	r3, r2
 8003ade:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d112      	bne.n	8003b12 <USB_ActivateEndpoint+0x286>
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	801a      	strh	r2, [r3, #0]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	e02f      	b.n	8003b72 <USB_ActivateEndpoint+0x2e6>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b3e      	cmp	r3, #62	; 0x3e
 8003b18:	d813      	bhi.n	8003b42 <USB_ActivateEndpoint+0x2b6>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	663b      	str	r3, [r7, #96]	; 0x60
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <USB_ActivateEndpoint+0x2a8>
 8003b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b30:	3301      	adds	r3, #1
 8003b32:	663b      	str	r3, [r7, #96]	; 0x60
 8003b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	029b      	lsls	r3, r3, #10
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	e017      	b.n	8003b72 <USB_ActivateEndpoint+0x2e6>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	663b      	str	r3, [r7, #96]	; 0x60
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <USB_ActivateEndpoint+0x2d0>
 8003b56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	029b      	lsls	r3, r3, #10
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	83fb      	strh	r3, [r7, #30]
 8003b80:	8bfb      	ldrh	r3, [r7, #30]
 8003b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d01b      	beq.n	8003bc2 <USB_ActivateEndpoint+0x336>
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba0:	83bb      	strh	r3, [r7, #28]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	441a      	add	r2, r3
 8003bac:	8bbb      	ldrh	r3, [r7, #28]
 8003bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd8:	837b      	strh	r3, [r7, #26]
 8003bda:	8b7b      	ldrh	r3, [r7, #26]
 8003bdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003be0:	837b      	strh	r3, [r7, #26]
 8003be2:	8b7b      	ldrh	r3, [r7, #26]
 8003be4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003be8:	837b      	strh	r3, [r7, #26]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	441a      	add	r2, r3
 8003bf4:	8b7b      	ldrh	r3, [r7, #26]
 8003bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	8013      	strh	r3, [r2, #0]
 8003c0a:	e1a2      	b.n	8003f52 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c22:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	441a      	add	r2, r3
 8003c30:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c3c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	461a      	mov	r2, r3
 8003c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c58:	4413      	add	r3, r2
 8003c5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	011a      	lsls	r2, r3, #4
 8003c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	891b      	ldrh	r3, [r3, #8]
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c7a:	801a      	strh	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c8c:	4413      	add	r3, r2
 8003c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	011a      	lsls	r2, r3, #4
 8003c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	895b      	ldrh	r3, [r3, #10]
 8003ca4:	085b      	lsrs	r3, r3, #1
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	785b      	ldrb	r3, [r3, #1]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f040 8091 	bne.w	8003ddc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003cc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d01b      	beq.n	8003d0a <USB_ActivateEndpoint+0x47e>
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	441a      	add	r2, r3
 8003cf4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	873b      	strh	r3, [r7, #56]	; 0x38
 8003d18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01b      	beq.n	8003d5a <USB_ActivateEndpoint+0x4ce>
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d38:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	441a      	add	r2, r3
 8003d44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d70:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d78:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d80:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	441a      	add	r2, r3
 8003d8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db8:	867b      	strh	r3, [r7, #50]	; 0x32
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	441a      	add	r2, r3
 8003dc4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	8013      	strh	r3, [r2, #0]
 8003dda:	e0ba      	b.n	8003f52 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003dec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01d      	beq.n	8003e34 <USB_ActivateEndpoint+0x5a8>
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	441a      	add	r2, r3
 8003e1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003e44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01d      	beq.n	8003e8c <USB_ActivateEndpoint+0x600>
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e66:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	441a      	add	r2, r3
 8003e74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	78db      	ldrb	r3, [r3, #3]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d024      	beq.n	8003ede <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eaa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003eae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003eb2:	f083 0320 	eor.w	r3, r3, #32
 8003eb6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	441a      	add	r2, r3
 8003ec4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	8013      	strh	r3, [r2, #0]
 8003edc:	e01d      	b.n	8003f1a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	441a      	add	r2, r3
 8003f02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f30:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003f52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	376c      	adds	r7, #108	; 0x6c
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b08d      	sub	sp, #52	; 0x34
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	7b1b      	ldrb	r3, [r3, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f040 808e 	bne.w	8004090 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d044      	beq.n	8004006 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	81bb      	strh	r3, [r7, #12]
 8003f8a:	89bb      	ldrh	r3, [r7, #12]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01b      	beq.n	8003fcc <USB_DeactivateEndpoint+0x6c>
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003faa:	817b      	strh	r3, [r7, #10]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	441a      	add	r2, r3
 8003fb6:	897b      	ldrh	r3, [r7, #10]
 8003fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe2:	813b      	strh	r3, [r7, #8]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	441a      	add	r2, r3
 8003fee:	893b      	ldrh	r3, [r7, #8]
 8003ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004000:	b29b      	uxth	r3, r3
 8004002:	8013      	strh	r3, [r2, #0]
 8004004:	e192      	b.n	800432c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	827b      	strh	r3, [r7, #18]
 8004014:	8a7b      	ldrh	r3, [r7, #18]
 8004016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01b      	beq.n	8004056 <USB_DeactivateEndpoint+0xf6>
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004034:	823b      	strh	r3, [r7, #16]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	441a      	add	r2, r3
 8004040:	8a3b      	ldrh	r3, [r7, #16]
 8004042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800404a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800404e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004052:	b29b      	uxth	r3, r3
 8004054:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406c:	81fb      	strh	r3, [r7, #14]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	441a      	add	r2, r3
 8004078:	89fb      	ldrh	r3, [r7, #14]
 800407a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408a:	b29b      	uxth	r3, r3
 800408c:	8013      	strh	r3, [r2, #0]
 800408e:	e14d      	b.n	800432c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	785b      	ldrb	r3, [r3, #1]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f040 80a5 	bne.w	80041e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	843b      	strh	r3, [r7, #32]
 80040a8:	8c3b      	ldrh	r3, [r7, #32]
 80040aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01b      	beq.n	80040ea <USB_DeactivateEndpoint+0x18a>
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c8:	83fb      	strh	r3, [r7, #30]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	441a      	add	r2, r3
 80040d4:	8bfb      	ldrh	r3, [r7, #30]
 80040d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	83bb      	strh	r3, [r7, #28]
 80040f8:	8bbb      	ldrh	r3, [r7, #28]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d01b      	beq.n	800413a <USB_DeactivateEndpoint+0x1da>
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b29b      	uxth	r3, r3
 8004110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004118:	837b      	strh	r3, [r7, #26]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	441a      	add	r2, r3
 8004124:	8b7b      	ldrh	r3, [r7, #26]
 8004126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800412a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800412e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004132:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004136:	b29b      	uxth	r3, r3
 8004138:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004150:	833b      	strh	r3, [r7, #24]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	441a      	add	r2, r3
 800415c:	8b3b      	ldrh	r3, [r7, #24]
 800415e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800416a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800416e:	b29b      	uxth	r3, r3
 8004170:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004188:	82fb      	strh	r3, [r7, #22]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	441a      	add	r2, r3
 8004194:	8afb      	ldrh	r3, [r7, #22]
 8004196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800419e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c0:	82bb      	strh	r3, [r7, #20]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	441a      	add	r2, r3
 80041cc:	8abb      	ldrh	r3, [r7, #20]
 80041ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8013      	strh	r3, [r2, #0]
 80041e2:	e0a3      	b.n	800432c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01b      	beq.n	8004234 <USB_DeactivateEndpoint+0x2d4>
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29b      	uxth	r3, r3
 800420a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800422c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004230:	b29b      	uxth	r3, r3
 8004232:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004242:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01b      	beq.n	8004284 <USB_DeactivateEndpoint+0x324>
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	b29b      	uxth	r3, r3
 800425a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004262:	853b      	strh	r3, [r7, #40]	; 0x28
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	441a      	add	r2, r3
 800426e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800427c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004280:	b29b      	uxth	r3, r3
 8004282:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	441a      	add	r2, r3
 80042a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80042a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	441a      	add	r2, r3
 80042de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	847b      	strh	r3, [r7, #34]	; 0x22
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	441a      	add	r2, r3
 8004316:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004328:	b29b      	uxth	r3, r3
 800432a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3734      	adds	r7, #52	; 0x34
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b0cc      	sub	sp, #304	; 0x130
 800433c:	af00      	add	r7, sp, #0
 800433e:	1d3b      	adds	r3, r7, #4
 8004340:	6018      	str	r0, [r3, #0]
 8004342:	463b      	mov	r3, r7
 8004344:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004346:	463b      	mov	r3, r7
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	785b      	ldrb	r3, [r3, #1]
 800434c:	2b01      	cmp	r3, #1
 800434e:	f040 872e 	bne.w	80051ae <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004352:	463b      	mov	r3, r7
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699a      	ldr	r2, [r3, #24]
 8004358:	463b      	mov	r3, r7
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	429a      	cmp	r2, r3
 8004360:	d905      	bls.n	800436e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004362:	463b      	mov	r3, r7
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800436c:	e004      	b.n	8004378 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800436e:	463b      	mov	r3, r7
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004378:	463b      	mov	r3, r7
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	7b1b      	ldrb	r3, [r3, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d134      	bne.n	80043ec <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004382:	463b      	mov	r3, r7
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6959      	ldr	r1, [r3, #20]
 8004388:	463b      	mov	r3, r7
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	88da      	ldrh	r2, [r3, #6]
 800438e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004392:	b29b      	uxth	r3, r3
 8004394:	1d38      	adds	r0, r7, #4
 8004396:	6800      	ldr	r0, [r0, #0]
 8004398:	f001 fc03 	bl	8005ba2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800439c:	f107 0310 	add.w	r3, r7, #16
 80043a0:	1d3a      	adds	r2, r7, #4
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	1d3b      	adds	r3, r7, #4
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	4619      	mov	r1, r3
 80043b2:	f107 0310 	add.w	r3, r7, #16
 80043b6:	f107 0210 	add.w	r2, r7, #16
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	440a      	add	r2, r1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	463b      	mov	r3, r7
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	011a      	lsls	r2, r3, #4
 80043c8:	f107 0310 	add.w	r3, r7, #16
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4413      	add	r3, r2
 80043d0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80043d4:	f107 030c 	add.w	r3, r7, #12
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043de:	b29a      	uxth	r2, r3
 80043e0:	f107 030c 	add.w	r3, r7, #12
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	f000 beac 	b.w	8005144 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80043ec:	463b      	mov	r3, r7
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	78db      	ldrb	r3, [r3, #3]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	f040 838c 	bne.w	8004b10 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80043f8:	463b      	mov	r3, r7
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6a1a      	ldr	r2, [r3, #32]
 80043fe:	463b      	mov	r3, r7
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	429a      	cmp	r2, r3
 8004406:	f240 8330 	bls.w	8004a6a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800440a:	1d3b      	adds	r3, r7, #4
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	463b      	mov	r3, r7
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004424:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004428:	1d3b      	adds	r3, r7, #4
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	463b      	mov	r3, r7
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800443a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800443e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004442:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444a:	b29b      	uxth	r3, r3
 800444c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800444e:	463b      	mov	r3, r7
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6a1a      	ldr	r2, [r3, #32]
 8004454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004458:	1ad2      	subs	r2, r2, r3
 800445a:	463b      	mov	r3, r7
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004460:	1d3b      	adds	r3, r7, #4
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	463b      	mov	r3, r7
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 819e 	beq.w	80047b8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800447c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004480:	1d3a      	adds	r2, r7, #4
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	463b      	mov	r3, r7
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	785b      	ldrb	r3, [r3, #1]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d17a      	bne.n	8004586 <USB_EPStartXfer+0x24e>
 8004490:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004494:	1d3a      	adds	r2, r7, #4
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	1d3b      	adds	r3, r7, #4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	4619      	mov	r1, r3
 80044a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	440a      	add	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	463b      	mov	r3, r7
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	011a      	lsls	r2, r3, #4
 80044bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4413      	add	r3, r2
 80044c4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80044c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d11a      	bne.n	800450c <USB_EPStartXfer+0x1d4>
 80044d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004500:	b29a      	uxth	r2, r3
 8004502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	801a      	strh	r2, [r3, #0]
 800450a:	e062      	b.n	80045d2 <USB_EPStartXfer+0x29a>
 800450c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004510:	2b3e      	cmp	r3, #62	; 0x3e
 8004512:	d819      	bhi.n	8004548 <USB_EPStartXfer+0x210>
 8004514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800451e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d004      	beq.n	8004534 <USB_EPStartXfer+0x1fc>
 800452a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800452e:	3301      	adds	r3, #1
 8004530:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004534:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004538:	b29b      	uxth	r3, r3
 800453a:	029b      	lsls	r3, r3, #10
 800453c:	b29a      	uxth	r2, r3
 800453e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	801a      	strh	r2, [r3, #0]
 8004546:	e044      	b.n	80045d2 <USB_EPStartXfer+0x29a>
 8004548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	2b00      	cmp	r3, #0
 800455c:	d104      	bne.n	8004568 <USB_EPStartXfer+0x230>
 800455e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004562:	3b01      	subs	r3, #1
 8004564:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004568:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800456c:	b29b      	uxth	r3, r3
 800456e:	029b      	lsls	r3, r3, #10
 8004570:	b29b      	uxth	r3, r3
 8004572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800457a:	b29a      	uxth	r2, r3
 800457c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	801a      	strh	r2, [r3, #0]
 8004584:	e025      	b.n	80045d2 <USB_EPStartXfer+0x29a>
 8004586:	463b      	mov	r3, r7
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	785b      	ldrb	r3, [r3, #1]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d120      	bne.n	80045d2 <USB_EPStartXfer+0x29a>
 8004590:	1d3b      	adds	r3, r7, #4
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004598:	b29b      	uxth	r3, r3
 800459a:	4619      	mov	r1, r3
 800459c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	440a      	add	r2, r1
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	463b      	mov	r3, r7
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	011a      	lsls	r2, r3, #4
 80045b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4413      	add	r3, r2
 80045ba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80045be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80045d2:	463b      	mov	r3, r7
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	895b      	ldrh	r3, [r3, #10]
 80045d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045dc:	463b      	mov	r3, r7
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6959      	ldr	r1, [r3, #20]
 80045e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80045ec:	1d38      	adds	r0, r7, #4
 80045ee:	6800      	ldr	r0, [r0, #0]
 80045f0:	f001 fad7 	bl	8005ba2 <USB_WritePMA>
            ep->xfer_buff += len;
 80045f4:	463b      	mov	r3, r7
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045fe:	441a      	add	r2, r3
 8004600:	463b      	mov	r3, r7
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004606:	463b      	mov	r3, r7
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6a1a      	ldr	r2, [r3, #32]
 800460c:	463b      	mov	r3, r7
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	429a      	cmp	r2, r3
 8004614:	d909      	bls.n	800462a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8004616:	463b      	mov	r3, r7
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6a1a      	ldr	r2, [r3, #32]
 800461c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004620:	1ad2      	subs	r2, r2, r3
 8004622:	463b      	mov	r3, r7
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	621a      	str	r2, [r3, #32]
 8004628:	e008      	b.n	800463c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800462a:	463b      	mov	r3, r7
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004634:	463b      	mov	r3, r7
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2200      	movs	r2, #0
 800463a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800463c:	463b      	mov	r3, r7
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	785b      	ldrb	r3, [r3, #1]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d17a      	bne.n	800473c <USB_EPStartXfer+0x404>
 8004646:	f107 0318 	add.w	r3, r7, #24
 800464a:	1d3a      	adds	r2, r7, #4
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	1d3b      	adds	r3, r7, #4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004658:	b29b      	uxth	r3, r3
 800465a:	4619      	mov	r1, r3
 800465c:	f107 0318 	add.w	r3, r7, #24
 8004660:	f107 0218 	add.w	r2, r7, #24
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	440a      	add	r2, r1
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	463b      	mov	r3, r7
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	011a      	lsls	r2, r3, #4
 8004672:	f107 0318 	add.w	r3, r7, #24
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4413      	add	r3, r2
 800467a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800467e:	f107 0314 	add.w	r3, r7, #20
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d11a      	bne.n	80046c2 <USB_EPStartXfer+0x38a>
 800468c:	f107 0314 	add.w	r3, r7, #20
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800469a:	b29a      	uxth	r2, r3
 800469c:	f107 0314 	add.w	r3, r7, #20
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	801a      	strh	r2, [r3, #0]
 80046a4:	f107 0314 	add.w	r3, r7, #20
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	f107 0314 	add.w	r3, r7, #20
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	801a      	strh	r2, [r3, #0]
 80046c0:	e067      	b.n	8004792 <USB_EPStartXfer+0x45a>
 80046c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046c6:	2b3e      	cmp	r3, #62	; 0x3e
 80046c8:	d819      	bhi.n	80046fe <USB_EPStartXfer+0x3c6>
 80046ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80046d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <USB_EPStartXfer+0x3b2>
 80046e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80046e4:	3301      	adds	r3, #1
 80046e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80046ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	029b      	lsls	r3, r3, #10
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	f107 0314 	add.w	r3, r7, #20
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	801a      	strh	r2, [r3, #0]
 80046fc:	e049      	b.n	8004792 <USB_EPStartXfer+0x45a>
 80046fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <USB_EPStartXfer+0x3e6>
 8004714:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004718:	3b01      	subs	r3, #1
 800471a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800471e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004722:	b29b      	uxth	r3, r3
 8004724:	029b      	lsls	r3, r3, #10
 8004726:	b29b      	uxth	r3, r3
 8004728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800472c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004730:	b29a      	uxth	r2, r3
 8004732:	f107 0314 	add.w	r3, r7, #20
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	801a      	strh	r2, [r3, #0]
 800473a:	e02a      	b.n	8004792 <USB_EPStartXfer+0x45a>
 800473c:	463b      	mov	r3, r7
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d125      	bne.n	8004792 <USB_EPStartXfer+0x45a>
 8004746:	f107 0320 	add.w	r3, r7, #32
 800474a:	1d3a      	adds	r2, r7, #4
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	1d3b      	adds	r3, r7, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004758:	b29b      	uxth	r3, r3
 800475a:	4619      	mov	r1, r3
 800475c:	f107 0320 	add.w	r3, r7, #32
 8004760:	f107 0220 	add.w	r2, r7, #32
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	440a      	add	r2, r1
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	463b      	mov	r3, r7
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	011a      	lsls	r2, r3, #4
 8004772:	f107 0320 	add.w	r3, r7, #32
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4413      	add	r3, r2
 800477a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800477e:	f107 031c 	add.w	r3, r7, #28
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004788:	b29a      	uxth	r2, r3
 800478a:	f107 031c 	add.w	r3, r7, #28
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004792:	463b      	mov	r3, r7
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	891b      	ldrh	r3, [r3, #8]
 8004798:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800479c:	463b      	mov	r3, r7
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6959      	ldr	r1, [r3, #20]
 80047a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80047ac:	1d38      	adds	r0, r7, #4
 80047ae:	6800      	ldr	r0, [r0, #0]
 80047b0:	f001 f9f7 	bl	8005ba2 <USB_WritePMA>
 80047b4:	f000 bcc6 	b.w	8005144 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047b8:	463b      	mov	r3, r7
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	785b      	ldrb	r3, [r3, #1]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d164      	bne.n	800488c <USB_EPStartXfer+0x554>
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c8:	1d3b      	adds	r3, r7, #4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d6:	4413      	add	r3, r2
 80047d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80047da:	463b      	mov	r3, r7
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	011a      	lsls	r2, r3, #4
 80047e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e4:	4413      	add	r3, r2
 80047e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047ea:	647b      	str	r3, [r7, #68]	; 0x44
 80047ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d112      	bne.n	800481a <USB_EPStartXfer+0x4e2>
 80047f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047fe:	b29a      	uxth	r2, r3
 8004800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004802:	801a      	strh	r2, [r3, #0]
 8004804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004812:	b29a      	uxth	r2, r3
 8004814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004816:	801a      	strh	r2, [r3, #0]
 8004818:	e057      	b.n	80048ca <USB_EPStartXfer+0x592>
 800481a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800481e:	2b3e      	cmp	r3, #62	; 0x3e
 8004820:	d817      	bhi.n	8004852 <USB_EPStartXfer+0x51a>
 8004822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800482c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d004      	beq.n	8004842 <USB_EPStartXfer+0x50a>
 8004838:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800483c:	3301      	adds	r3, #1
 800483e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004842:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004846:	b29b      	uxth	r3, r3
 8004848:	029b      	lsls	r3, r3, #10
 800484a:	b29a      	uxth	r2, r3
 800484c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800484e:	801a      	strh	r2, [r3, #0]
 8004850:	e03b      	b.n	80048ca <USB_EPStartXfer+0x592>
 8004852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800485c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <USB_EPStartXfer+0x53a>
 8004868:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800486c:	3b01      	subs	r3, #1
 800486e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004872:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004876:	b29b      	uxth	r3, r3
 8004878:	029b      	lsls	r3, r3, #10
 800487a:	b29b      	uxth	r3, r3
 800487c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004884:	b29a      	uxth	r2, r3
 8004886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	e01e      	b.n	80048ca <USB_EPStartXfer+0x592>
 800488c:	463b      	mov	r3, r7
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	785b      	ldrb	r3, [r3, #1]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d119      	bne.n	80048ca <USB_EPStartXfer+0x592>
 8004896:	1d3b      	adds	r3, r7, #4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	653b      	str	r3, [r7, #80]	; 0x50
 800489c:	1d3b      	adds	r3, r7, #4
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	461a      	mov	r2, r3
 80048a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048aa:	4413      	add	r3, r2
 80048ac:	653b      	str	r3, [r7, #80]	; 0x50
 80048ae:	463b      	mov	r3, r7
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	011a      	lsls	r2, r3, #4
 80048b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b8:	4413      	add	r3, r2
 80048ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80048ca:	463b      	mov	r3, r7
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	891b      	ldrh	r3, [r3, #8]
 80048d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048d4:	463b      	mov	r3, r7
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6959      	ldr	r1, [r3, #20]
 80048da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80048e4:	1d38      	adds	r0, r7, #4
 80048e6:	6800      	ldr	r0, [r0, #0]
 80048e8:	f001 f95b 	bl	8005ba2 <USB_WritePMA>
            ep->xfer_buff += len;
 80048ec:	463b      	mov	r3, r7
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f6:	441a      	add	r2, r3
 80048f8:	463b      	mov	r3, r7
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048fe:	463b      	mov	r3, r7
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6a1a      	ldr	r2, [r3, #32]
 8004904:	463b      	mov	r3, r7
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	429a      	cmp	r2, r3
 800490c:	d909      	bls.n	8004922 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800490e:	463b      	mov	r3, r7
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6a1a      	ldr	r2, [r3, #32]
 8004914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004918:	1ad2      	subs	r2, r2, r3
 800491a:	463b      	mov	r3, r7
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	621a      	str	r2, [r3, #32]
 8004920:	e008      	b.n	8004934 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004922:	463b      	mov	r3, r7
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800492c:	463b      	mov	r3, r7
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2200      	movs	r2, #0
 8004932:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004934:	1d3b      	adds	r3, r7, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	643b      	str	r3, [r7, #64]	; 0x40
 800493a:	463b      	mov	r3, r7
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	785b      	ldrb	r3, [r3, #1]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d164      	bne.n	8004a0e <USB_EPStartXfer+0x6d6>
 8004944:	1d3b      	adds	r3, r7, #4
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	63bb      	str	r3, [r7, #56]	; 0x38
 800494a:	1d3b      	adds	r3, r7, #4
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004952:	b29b      	uxth	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	4413      	add	r3, r2
 800495a:	63bb      	str	r3, [r7, #56]	; 0x38
 800495c:	463b      	mov	r3, r7
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	011a      	lsls	r2, r3, #4
 8004964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004966:	4413      	add	r3, r2
 8004968:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800496c:	637b      	str	r3, [r7, #52]	; 0x34
 800496e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d112      	bne.n	800499c <USB_EPStartXfer+0x664>
 8004976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004980:	b29a      	uxth	r2, r3
 8004982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004984:	801a      	strh	r2, [r3, #0]
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004994:	b29a      	uxth	r2, r3
 8004996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004998:	801a      	strh	r2, [r3, #0]
 800499a:	e054      	b.n	8004a46 <USB_EPStartXfer+0x70e>
 800499c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a0:	2b3e      	cmp	r3, #62	; 0x3e
 80049a2:	d817      	bhi.n	80049d4 <USB_EPStartXfer+0x69c>
 80049a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d004      	beq.n	80049c4 <USB_EPStartXfer+0x68c>
 80049ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049be:	3301      	adds	r3, #1
 80049c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	029b      	lsls	r3, r3, #10
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d0:	801a      	strh	r2, [r3, #0]
 80049d2:	e038      	b.n	8004a46 <USB_EPStartXfer+0x70e>
 80049d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d104      	bne.n	80049f4 <USB_EPStartXfer+0x6bc>
 80049ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049ee:	3b01      	subs	r3, #1
 80049f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	029b      	lsls	r3, r3, #10
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0a:	801a      	strh	r2, [r3, #0]
 8004a0c:	e01b      	b.n	8004a46 <USB_EPStartXfer+0x70e>
 8004a0e:	463b      	mov	r3, r7
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d116      	bne.n	8004a46 <USB_EPStartXfer+0x70e>
 8004a18:	1d3b      	adds	r3, r7, #4
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a26:	4413      	add	r3, r2
 8004a28:	643b      	str	r3, [r7, #64]	; 0x40
 8004a2a:	463b      	mov	r3, r7
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	011a      	lsls	r2, r3, #4
 8004a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a34:	4413      	add	r3, r2
 8004a36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a46:	463b      	mov	r3, r7
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	895b      	ldrh	r3, [r3, #10]
 8004a4c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a50:	463b      	mov	r3, r7
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6959      	ldr	r1, [r3, #20]
 8004a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a60:	1d38      	adds	r0, r7, #4
 8004a62:	6800      	ldr	r0, [r0, #0]
 8004a64:	f001 f89d 	bl	8005ba2 <USB_WritePMA>
 8004a68:	e36c      	b.n	8005144 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004a6a:	463b      	mov	r3, r7
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004a74:	1d3b      	adds	r3, r7, #4
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	463b      	mov	r3, r7
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004a92:	1d3b      	adds	r3, r7, #4
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	463b      	mov	r3, r7
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ab8:	1d3b      	adds	r3, r7, #4
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004abe:	1d3b      	adds	r3, r7, #4
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004acc:	4413      	add	r3, r2
 8004ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ad0:	463b      	mov	r3, r7
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	011a      	lsls	r2, r3, #4
 8004ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ada:	4413      	add	r3, r2
 8004adc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ae0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004aec:	463b      	mov	r3, r7
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	891b      	ldrh	r3, [r3, #8]
 8004af2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004af6:	463b      	mov	r3, r7
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6959      	ldr	r1, [r3, #20]
 8004afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b06:	1d38      	adds	r0, r7, #4
 8004b08:	6800      	ldr	r0, [r0, #0]
 8004b0a:	f001 f84a 	bl	8005ba2 <USB_WritePMA>
 8004b0e:	e319      	b.n	8005144 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004b10:	1d3b      	adds	r3, r7, #4
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	463b      	mov	r3, r7
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004b2e:	1d3b      	adds	r3, r7, #4
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	463b      	mov	r3, r7
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	441a      	add	r2, r3
 8004b3c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b48:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004b54:	463b      	mov	r3, r7
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6a1a      	ldr	r2, [r3, #32]
 8004b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b5e:	1ad2      	subs	r2, r2, r3
 8004b60:	463b      	mov	r3, r7
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b66:	1d3b      	adds	r3, r7, #4
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	463b      	mov	r3, r7
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8162 	beq.w	8004e46 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b82:	1d3b      	adds	r3, r7, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	785b      	ldrb	r3, [r3, #1]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d164      	bne.n	8004c5e <USB_EPStartXfer+0x926>
 8004b94:	1d3b      	adds	r3, r7, #4
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b9a:	1d3b      	adds	r3, r7, #4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ba8:	4413      	add	r3, r2
 8004baa:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bac:	463b      	mov	r3, r7
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	011a      	lsls	r2, r3, #4
 8004bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bbc:	677b      	str	r3, [r7, #116]	; 0x74
 8004bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d112      	bne.n	8004bec <USB_EPStartXfer+0x8b4>
 8004bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd4:	801a      	strh	r2, [r3, #0]
 8004bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be8:	801a      	strh	r2, [r3, #0]
 8004bea:	e057      	b.n	8004c9c <USB_EPStartXfer+0x964>
 8004bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bf0:	2b3e      	cmp	r3, #62	; 0x3e
 8004bf2:	d817      	bhi.n	8004c24 <USB_EPStartXfer+0x8ec>
 8004bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <USB_EPStartXfer+0x8dc>
 8004c0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004c14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	029b      	lsls	r3, r3, #10
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c20:	801a      	strh	r2, [r3, #0]
 8004c22:	e03b      	b.n	8004c9c <USB_EPStartXfer+0x964>
 8004c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c32:	f003 031f 	and.w	r3, r3, #31
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <USB_EPStartXfer+0x90c>
 8004c3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004c44:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	029b      	lsls	r3, r3, #10
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c5a:	801a      	strh	r2, [r3, #0]
 8004c5c:	e01e      	b.n	8004c9c <USB_EPStartXfer+0x964>
 8004c5e:	463b      	mov	r3, r7
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	785b      	ldrb	r3, [r3, #1]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d119      	bne.n	8004c9c <USB_EPStartXfer+0x964>
 8004c68:	1d3b      	adds	r3, r7, #4
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c78:	4413      	add	r3, r2
 8004c7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c7e:	463b      	mov	r3, r7
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	011a      	lsls	r2, r3, #4
 8004c86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004c9c:	463b      	mov	r3, r7
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	895b      	ldrh	r3, [r3, #10]
 8004ca2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ca6:	463b      	mov	r3, r7
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6959      	ldr	r1, [r3, #20]
 8004cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004cb6:	1d38      	adds	r0, r7, #4
 8004cb8:	6800      	ldr	r0, [r0, #0]
 8004cba:	f000 ff72 	bl	8005ba2 <USB_WritePMA>
          ep->xfer_buff += len;
 8004cbe:	463b      	mov	r3, r7
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695a      	ldr	r2, [r3, #20]
 8004cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc8:	441a      	add	r2, r3
 8004cca:	463b      	mov	r3, r7
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004cd0:	463b      	mov	r3, r7
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6a1a      	ldr	r2, [r3, #32]
 8004cd6:	463b      	mov	r3, r7
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d909      	bls.n	8004cf4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8004ce0:	463b      	mov	r3, r7
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6a1a      	ldr	r2, [r3, #32]
 8004ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cea:	1ad2      	subs	r2, r2, r3
 8004cec:	463b      	mov	r3, r7
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	621a      	str	r2, [r3, #32]
 8004cf2:	e008      	b.n	8004d06 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004cfe:	463b      	mov	r3, r7
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2200      	movs	r2, #0
 8004d04:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 821a 	beq.w	8005144 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d10:	463b      	mov	r3, r7
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	785b      	ldrb	r3, [r3, #1]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d164      	bne.n	8004de4 <USB_EPStartXfer+0xaac>
 8004d1a:	1d3b      	adds	r3, r7, #4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d20:	1d3b      	adds	r3, r7, #4
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d2e:	4413      	add	r3, r2
 8004d30:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d32:	463b      	mov	r3, r7
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	011a      	lsls	r2, r3, #4
 8004d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d42:	667b      	str	r3, [r7, #100]	; 0x64
 8004d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d112      	bne.n	8004d72 <USB_EPStartXfer+0xa3a>
 8004d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d6e:	801a      	strh	r2, [r3, #0]
 8004d70:	e057      	b.n	8004e22 <USB_EPStartXfer+0xaea>
 8004d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d76:	2b3e      	cmp	r3, #62	; 0x3e
 8004d78:	d817      	bhi.n	8004daa <USB_EPStartXfer+0xa72>
 8004d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d7e:	085b      	lsrs	r3, r3, #1
 8004d80:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d004      	beq.n	8004d9a <USB_EPStartXfer+0xa62>
 8004d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d94:	3301      	adds	r3, #1
 8004d96:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	029b      	lsls	r3, r3, #10
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	e03b      	b.n	8004e22 <USB_EPStartXfer+0xaea>
 8004daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d104      	bne.n	8004dca <USB_EPStartXfer+0xa92>
 8004dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	029b      	lsls	r3, r3, #10
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	e01e      	b.n	8004e22 <USB_EPStartXfer+0xaea>
 8004de4:	463b      	mov	r3, r7
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d119      	bne.n	8004e22 <USB_EPStartXfer+0xaea>
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	673b      	str	r3, [r7, #112]	; 0x70
 8004df4:	1d3b      	adds	r3, r7, #4
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e02:	4413      	add	r3, r2
 8004e04:	673b      	str	r3, [r7, #112]	; 0x70
 8004e06:	463b      	mov	r3, r7
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	011a      	lsls	r2, r3, #4
 8004e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e10:	4413      	add	r3, r2
 8004e12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e22:	463b      	mov	r3, r7
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	891b      	ldrh	r3, [r3, #8]
 8004e28:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e2c:	463b      	mov	r3, r7
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6959      	ldr	r1, [r3, #20]
 8004e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e3c:	1d38      	adds	r0, r7, #4
 8004e3e:	6800      	ldr	r0, [r0, #0]
 8004e40:	f000 feaf 	bl	8005ba2 <USB_WritePMA>
 8004e44:	e17e      	b.n	8005144 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e46:	463b      	mov	r3, r7
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	785b      	ldrb	r3, [r3, #1]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d16f      	bne.n	8004f30 <USB_EPStartXfer+0xbf8>
 8004e50:	1d3b      	adds	r3, r7, #4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e58:	1d3b      	adds	r3, r7, #4
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e68:	4413      	add	r3, r2
 8004e6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e6e:	463b      	mov	r3, r7
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	011a      	lsls	r2, r3, #4
 8004e76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d116      	bne.n	8004eba <USB_EPStartXfer+0xb82>
 8004e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e9e:	801a      	strh	r2, [r3, #0]
 8004ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004eb6:	801a      	strh	r2, [r3, #0]
 8004eb8:	e05f      	b.n	8004f7a <USB_EPStartXfer+0xc42>
 8004eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ebe:	2b3e      	cmp	r3, #62	; 0x3e
 8004ec0:	d818      	bhi.n	8004ef4 <USB_EPStartXfer+0xbbc>
 8004ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec6:	085b      	lsrs	r3, r3, #1
 8004ec8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d004      	beq.n	8004ee2 <USB_EPStartXfer+0xbaa>
 8004ed8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004edc:	3301      	adds	r3, #1
 8004ede:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004ee2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	029b      	lsls	r3, r3, #10
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ef0:	801a      	strh	r2, [r3, #0]
 8004ef2:	e042      	b.n	8004f7a <USB_EPStartXfer+0xc42>
 8004ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <USB_EPStartXfer+0xbdc>
 8004f0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004f14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	029b      	lsls	r3, r3, #10
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f2c:	801a      	strh	r2, [r3, #0]
 8004f2e:	e024      	b.n	8004f7a <USB_EPStartXfer+0xc42>
 8004f30:	463b      	mov	r3, r7
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	785b      	ldrb	r3, [r3, #1]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d11f      	bne.n	8004f7a <USB_EPStartXfer+0xc42>
 8004f3a:	1d3b      	adds	r3, r7, #4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f52:	4413      	add	r3, r2
 8004f54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f58:	463b      	mov	r3, r7
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	011a      	lsls	r2, r3, #4
 8004f60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f64:	4413      	add	r3, r2
 8004f66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004f7a:	463b      	mov	r3, r7
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	891b      	ldrh	r3, [r3, #8]
 8004f80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f84:	463b      	mov	r3, r7
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6959      	ldr	r1, [r3, #20]
 8004f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004f94:	1d38      	adds	r0, r7, #4
 8004f96:	6800      	ldr	r0, [r0, #0]
 8004f98:	f000 fe03 	bl	8005ba2 <USB_WritePMA>
          ep->xfer_buff += len;
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa6:	441a      	add	r2, r3
 8004fa8:	463b      	mov	r3, r7
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004fae:	463b      	mov	r3, r7
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6a1a      	ldr	r2, [r3, #32]
 8004fb4:	463b      	mov	r3, r7
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d909      	bls.n	8004fd2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8004fbe:	463b      	mov	r3, r7
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a1a      	ldr	r2, [r3, #32]
 8004fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc8:	1ad2      	subs	r2, r2, r3
 8004fca:	463b      	mov	r3, r7
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	621a      	str	r2, [r3, #32]
 8004fd0:	e008      	b.n	8004fe4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004fdc:	463b      	mov	r3, r7
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 80ab 	beq.w	8005144 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fee:	1d3b      	adds	r3, r7, #4
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ff6:	463b      	mov	r3, r7
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	785b      	ldrb	r3, [r3, #1]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d16f      	bne.n	80050e0 <USB_EPStartXfer+0xda8>
 8005000:	1d3b      	adds	r3, r7, #4
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005008:	1d3b      	adds	r3, r7, #4
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005010:	b29b      	uxth	r3, r3
 8005012:	461a      	mov	r2, r3
 8005014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005018:	4413      	add	r3, r2
 800501a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800501e:	463b      	mov	r3, r7
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	011a      	lsls	r2, r3, #4
 8005026:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800502a:	4413      	add	r3, r2
 800502c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d116      	bne.n	800506a <USB_EPStartXfer+0xd32>
 800503c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29b      	uxth	r3, r3
 8005044:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005048:	b29a      	uxth	r2, r3
 800504a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800504e:	801a      	strh	r2, [r3, #0]
 8005050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800505c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005060:	b29a      	uxth	r2, r3
 8005062:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005066:	801a      	strh	r2, [r3, #0]
 8005068:	e05b      	b.n	8005122 <USB_EPStartXfer+0xdea>
 800506a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800506e:	2b3e      	cmp	r3, #62	; 0x3e
 8005070:	d818      	bhi.n	80050a4 <USB_EPStartXfer+0xd6c>
 8005072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005076:	085b      	lsrs	r3, r3, #1
 8005078:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800507c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d004      	beq.n	8005092 <USB_EPStartXfer+0xd5a>
 8005088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508c:	3301      	adds	r3, #1
 800508e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005096:	b29b      	uxth	r3, r3
 8005098:	029b      	lsls	r3, r3, #10
 800509a:	b29a      	uxth	r2, r3
 800509c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050a0:	801a      	strh	r2, [r3, #0]
 80050a2:	e03e      	b.n	8005122 <USB_EPStartXfer+0xdea>
 80050a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80050ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b2:	f003 031f 	and.w	r3, r3, #31
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d104      	bne.n	80050c4 <USB_EPStartXfer+0xd8c>
 80050ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050be:	3b01      	subs	r3, #1
 80050c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80050c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	029b      	lsls	r3, r3, #10
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050dc:	801a      	strh	r2, [r3, #0]
 80050de:	e020      	b.n	8005122 <USB_EPStartXfer+0xdea>
 80050e0:	463b      	mov	r3, r7
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d11b      	bne.n	8005122 <USB_EPStartXfer+0xdea>
 80050ea:	1d3b      	adds	r3, r7, #4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050fa:	4413      	add	r3, r2
 80050fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005100:	463b      	mov	r3, r7
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	011a      	lsls	r2, r3, #4
 8005108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800510c:	4413      	add	r3, r2
 800510e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511a:	b29a      	uxth	r2, r3
 800511c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005120:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005122:	463b      	mov	r3, r7
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	895b      	ldrh	r3, [r3, #10]
 8005128:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800512c:	463b      	mov	r3, r7
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6959      	ldr	r1, [r3, #20]
 8005132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005136:	b29b      	uxth	r3, r3
 8005138:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800513c:	1d38      	adds	r0, r7, #4
 800513e:	6800      	ldr	r0, [r0, #0]
 8005140:	f000 fd2f 	bl	8005ba2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005144:	1d3b      	adds	r3, r7, #4
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	463b      	mov	r3, r7
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	f107 020a 	add.w	r2, r7, #10
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005162:	8013      	strh	r3, [r2, #0]
 8005164:	f107 030a 	add.w	r3, r7, #10
 8005168:	f107 020a 	add.w	r2, r7, #10
 800516c:	8812      	ldrh	r2, [r2, #0]
 800516e:	f082 0210 	eor.w	r2, r2, #16
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	f107 030a 	add.w	r3, r7, #10
 8005178:	f107 020a 	add.w	r2, r7, #10
 800517c:	8812      	ldrh	r2, [r2, #0]
 800517e:	f082 0220 	eor.w	r2, r2, #32
 8005182:	801a      	strh	r2, [r3, #0]
 8005184:	1d3b      	adds	r3, r7, #4
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	463b      	mov	r3, r7
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	441a      	add	r2, r3
 8005192:	f107 030a 	add.w	r3, r7, #10
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	8013      	strh	r3, [r2, #0]
 80051ac:	e3b5      	b.n	800591a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80051ae:	463b      	mov	r3, r7
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	7b1b      	ldrb	r3, [r3, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f040 8090 	bne.w	80052da <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80051ba:	463b      	mov	r3, r7
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699a      	ldr	r2, [r3, #24]
 80051c0:	463b      	mov	r3, r7
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d90e      	bls.n	80051e8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80051ca:	463b      	mov	r3, r7
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80051d4:	463b      	mov	r3, r7
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	463b      	mov	r3, r7
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	619a      	str	r2, [r3, #24]
 80051e6:	e008      	b.n	80051fa <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80051e8:	463b      	mov	r3, r7
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80051f2:	463b      	mov	r3, r7
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2200      	movs	r2, #0
 80051f8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80051fa:	1d3b      	adds	r3, r7, #4
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005202:	1d3b      	adds	r3, r7, #4
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800520a:	b29b      	uxth	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005212:	4413      	add	r3, r2
 8005214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005218:	463b      	mov	r3, r7
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	011a      	lsls	r2, r3, #4
 8005220:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005224:	4413      	add	r3, r2
 8005226:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800522a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800522e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d116      	bne.n	8005264 <USB_EPStartXfer+0xf2c>
 8005236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005242:	b29a      	uxth	r2, r3
 8005244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005248:	801a      	strh	r2, [r3, #0]
 800524a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525a:	b29a      	uxth	r2, r3
 800525c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	e32c      	b.n	80058be <USB_EPStartXfer+0x1586>
 8005264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005268:	2b3e      	cmp	r3, #62	; 0x3e
 800526a:	d818      	bhi.n	800529e <USB_EPStartXfer+0xf66>
 800526c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d004      	beq.n	800528c <USB_EPStartXfer+0xf54>
 8005282:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005286:	3301      	adds	r3, #1
 8005288:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800528c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005290:	b29b      	uxth	r3, r3
 8005292:	029b      	lsls	r3, r3, #10
 8005294:	b29a      	uxth	r2, r3
 8005296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	e30f      	b.n	80058be <USB_EPStartXfer+0x1586>
 800529e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80052a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d104      	bne.n	80052be <USB_EPStartXfer+0xf86>
 80052b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052b8:	3b01      	subs	r3, #1
 80052ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80052be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	029b      	lsls	r3, r3, #10
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052d6:	801a      	strh	r2, [r3, #0]
 80052d8:	e2f1      	b.n	80058be <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80052da:	463b      	mov	r3, r7
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	78db      	ldrb	r3, [r3, #3]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	f040 818f 	bne.w	8005604 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80052e6:	463b      	mov	r3, r7
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d175      	bne.n	80053dc <USB_EPStartXfer+0x10a4>
 80052f0:	1d3b      	adds	r3, r7, #4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052f8:	1d3b      	adds	r3, r7, #4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005300:	b29b      	uxth	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005308:	4413      	add	r3, r2
 800530a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800530e:	463b      	mov	r3, r7
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	011a      	lsls	r2, r3, #4
 8005316:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800531a:	4413      	add	r3, r2
 800531c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005320:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005324:	463b      	mov	r3, r7
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d116      	bne.n	800535c <USB_EPStartXfer+0x1024>
 800532e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800533a:	b29a      	uxth	r2, r3
 800533c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005340:	801a      	strh	r2, [r3, #0]
 8005342:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005352:	b29a      	uxth	r2, r3
 8005354:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005358:	801a      	strh	r2, [r3, #0]
 800535a:	e065      	b.n	8005428 <USB_EPStartXfer+0x10f0>
 800535c:	463b      	mov	r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b3e      	cmp	r3, #62	; 0x3e
 8005364:	d81a      	bhi.n	800539c <USB_EPStartXfer+0x1064>
 8005366:	463b      	mov	r3, r7
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	085b      	lsrs	r3, r3, #1
 800536e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005372:	463b      	mov	r3, r7
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d004      	beq.n	800538a <USB_EPStartXfer+0x1052>
 8005380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005384:	3301      	adds	r3, #1
 8005386:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800538a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800538e:	b29b      	uxth	r3, r3
 8005390:	029b      	lsls	r3, r3, #10
 8005392:	b29a      	uxth	r2, r3
 8005394:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005398:	801a      	strh	r2, [r3, #0]
 800539a:	e045      	b.n	8005428 <USB_EPStartXfer+0x10f0>
 800539c:	463b      	mov	r3, r7
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053a8:	463b      	mov	r3, r7
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 031f 	and.w	r3, r3, #31
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d104      	bne.n	80053c0 <USB_EPStartXfer+0x1088>
 80053b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ba:	3b01      	subs	r3, #1
 80053bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	029b      	lsls	r3, r3, #10
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	e025      	b.n	8005428 <USB_EPStartXfer+0x10f0>
 80053dc:	463b      	mov	r3, r7
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	785b      	ldrb	r3, [r3, #1]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d120      	bne.n	8005428 <USB_EPStartXfer+0x10f0>
 80053e6:	1d3b      	adds	r3, r7, #4
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053fe:	4413      	add	r3, r2
 8005400:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005404:	463b      	mov	r3, r7
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	011a      	lsls	r2, r3, #4
 800540c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005410:	4413      	add	r3, r2
 8005412:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005416:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800541a:	463b      	mov	r3, r7
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	b29a      	uxth	r2, r3
 8005422:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005426:	801a      	strh	r2, [r3, #0]
 8005428:	1d3b      	adds	r3, r7, #4
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005430:	463b      	mov	r3, r7
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	785b      	ldrb	r3, [r3, #1]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d175      	bne.n	8005526 <USB_EPStartXfer+0x11ee>
 800543a:	1d3b      	adds	r3, r7, #4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005442:	1d3b      	adds	r3, r7, #4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544a:	b29b      	uxth	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005452:	4413      	add	r3, r2
 8005454:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005458:	463b      	mov	r3, r7
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	011a      	lsls	r2, r3, #4
 8005460:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005464:	4413      	add	r3, r2
 8005466:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800546a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800546e:	463b      	mov	r3, r7
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d116      	bne.n	80054a6 <USB_EPStartXfer+0x116e>
 8005478:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005484:	b29a      	uxth	r2, r3
 8005486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800548a:	801a      	strh	r2, [r3, #0]
 800548c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800549c:	b29a      	uxth	r2, r3
 800549e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054a2:	801a      	strh	r2, [r3, #0]
 80054a4:	e061      	b.n	800556a <USB_EPStartXfer+0x1232>
 80054a6:	463b      	mov	r3, r7
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	2b3e      	cmp	r3, #62	; 0x3e
 80054ae:	d81a      	bhi.n	80054e6 <USB_EPStartXfer+0x11ae>
 80054b0:	463b      	mov	r3, r7
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80054bc:	463b      	mov	r3, r7
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d004      	beq.n	80054d4 <USB_EPStartXfer+0x119c>
 80054ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054ce:	3301      	adds	r3, #1
 80054d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80054d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054d8:	b29b      	uxth	r3, r3
 80054da:	029b      	lsls	r3, r3, #10
 80054dc:	b29a      	uxth	r2, r3
 80054de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	e041      	b.n	800556a <USB_EPStartXfer+0x1232>
 80054e6:	463b      	mov	r3, r7
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80054f2:	463b      	mov	r3, r7
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 031f 	and.w	r3, r3, #31
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <USB_EPStartXfer+0x11d2>
 8005500:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005504:	3b01      	subs	r3, #1
 8005506:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800550a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800550e:	b29b      	uxth	r3, r3
 8005510:	029b      	lsls	r3, r3, #10
 8005512:	b29b      	uxth	r3, r3
 8005514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551c:	b29a      	uxth	r2, r3
 800551e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005522:	801a      	strh	r2, [r3, #0]
 8005524:	e021      	b.n	800556a <USB_EPStartXfer+0x1232>
 8005526:	463b      	mov	r3, r7
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d11c      	bne.n	800556a <USB_EPStartXfer+0x1232>
 8005530:	1d3b      	adds	r3, r7, #4
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005538:	b29b      	uxth	r3, r3
 800553a:	461a      	mov	r2, r3
 800553c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005540:	4413      	add	r3, r2
 8005542:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005546:	463b      	mov	r3, r7
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	011a      	lsls	r2, r3, #4
 800554e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005552:	4413      	add	r3, r2
 8005554:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005558:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	b29a      	uxth	r2, r3
 8005564:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005568:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800556a:	463b      	mov	r3, r7
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 81a4 	beq.w	80058be <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800558a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800558e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <USB_EPStartXfer+0x126a>
 8005596:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800559a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10d      	bne.n	80055be <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80055a2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80055a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f040 8187 	bne.w	80058be <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80055b0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f040 8180 	bne.w	80058be <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80055be:	1d3b      	adds	r3, r7, #4
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	463b      	mov	r3, r7
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80055dc:	1d3b      	adds	r3, r7, #4
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	463b      	mov	r3, r7
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	441a      	add	r2, r3
 80055ea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80055ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055fe:	b29b      	uxth	r3, r3
 8005600:	8013      	strh	r3, [r2, #0]
 8005602:	e15c      	b.n	80058be <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005604:	463b      	mov	r3, r7
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	78db      	ldrb	r3, [r3, #3]
 800560a:	2b01      	cmp	r3, #1
 800560c:	f040 8155 	bne.w	80058ba <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005610:	463b      	mov	r3, r7
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	463b      	mov	r3, r7
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	429a      	cmp	r2, r3
 800561e:	d90e      	bls.n	800563e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005620:	463b      	mov	r3, r7
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800562a:	463b      	mov	r3, r7
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699a      	ldr	r2, [r3, #24]
 8005630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005634:	1ad2      	subs	r2, r2, r3
 8005636:	463b      	mov	r3, r7
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	619a      	str	r2, [r3, #24]
 800563c:	e008      	b.n	8005650 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800563e:	463b      	mov	r3, r7
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005648:	463b      	mov	r3, r7
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2200      	movs	r2, #0
 800564e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005650:	463b      	mov	r3, r7
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	785b      	ldrb	r3, [r3, #1]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d16f      	bne.n	800573a <USB_EPStartXfer+0x1402>
 800565a:	1d3b      	adds	r3, r7, #4
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005662:	1d3b      	adds	r3, r7, #4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800566a:	b29b      	uxth	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005672:	4413      	add	r3, r2
 8005674:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005678:	463b      	mov	r3, r7
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	011a      	lsls	r2, r3, #4
 8005680:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005684:	4413      	add	r3, r2
 8005686:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800568a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800568e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d116      	bne.n	80056c4 <USB_EPStartXfer+0x138c>
 8005696:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056a8:	801a      	strh	r2, [r3, #0]
 80056aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056c0:	801a      	strh	r2, [r3, #0]
 80056c2:	e05f      	b.n	8005784 <USB_EPStartXfer+0x144c>
 80056c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c8:	2b3e      	cmp	r3, #62	; 0x3e
 80056ca:	d818      	bhi.n	80056fe <USB_EPStartXfer+0x13c6>
 80056cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d0:	085b      	lsrs	r3, r3, #1
 80056d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d004      	beq.n	80056ec <USB_EPStartXfer+0x13b4>
 80056e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056e6:	3301      	adds	r3, #1
 80056e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	029b      	lsls	r3, r3, #10
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056fa:	801a      	strh	r2, [r3, #0]
 80056fc:	e042      	b.n	8005784 <USB_EPStartXfer+0x144c>
 80056fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570c:	f003 031f 	and.w	r3, r3, #31
 8005710:	2b00      	cmp	r3, #0
 8005712:	d104      	bne.n	800571e <USB_EPStartXfer+0x13e6>
 8005714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005718:	3b01      	subs	r3, #1
 800571a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800571e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005722:	b29b      	uxth	r3, r3
 8005724:	029b      	lsls	r3, r3, #10
 8005726:	b29b      	uxth	r3, r3
 8005728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005730:	b29a      	uxth	r2, r3
 8005732:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	e024      	b.n	8005784 <USB_EPStartXfer+0x144c>
 800573a:	463b      	mov	r3, r7
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d11f      	bne.n	8005784 <USB_EPStartXfer+0x144c>
 8005744:	1d3b      	adds	r3, r7, #4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800574c:	1d3b      	adds	r3, r7, #4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005754:	b29b      	uxth	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575c:	4413      	add	r3, r2
 800575e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005762:	463b      	mov	r3, r7
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	011a      	lsls	r2, r3, #4
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576e:	4413      	add	r3, r2
 8005770:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005774:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577c:	b29a      	uxth	r2, r3
 800577e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	1d3b      	adds	r3, r7, #4
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800578c:	463b      	mov	r3, r7
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	785b      	ldrb	r3, [r3, #1]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d16f      	bne.n	8005876 <USB_EPStartXfer+0x153e>
 8005796:	1d3b      	adds	r3, r7, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	461a      	mov	r2, r3
 80057aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ae:	4413      	add	r3, r2
 80057b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80057b4:	463b      	mov	r3, r7
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	011a      	lsls	r2, r3, #4
 80057bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057c0:	4413      	add	r3, r2
 80057c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d116      	bne.n	8005800 <USB_EPStartXfer+0x14c8>
 80057d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057de:	b29a      	uxth	r2, r3
 80057e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057e4:	801a      	strh	r2, [r3, #0]
 80057e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057fc:	801a      	strh	r2, [r3, #0]
 80057fe:	e05e      	b.n	80058be <USB_EPStartXfer+0x1586>
 8005800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005804:	2b3e      	cmp	r3, #62	; 0x3e
 8005806:	d818      	bhi.n	800583a <USB_EPStartXfer+0x1502>
 8005808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d004      	beq.n	8005828 <USB_EPStartXfer+0x14f0>
 800581e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005822:	3301      	adds	r3, #1
 8005824:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005828:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800582c:	b29b      	uxth	r3, r3
 800582e:	029b      	lsls	r3, r3, #10
 8005830:	b29a      	uxth	r2, r3
 8005832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005836:	801a      	strh	r2, [r3, #0]
 8005838:	e041      	b.n	80058be <USB_EPStartXfer+0x1586>
 800583a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	2b00      	cmp	r3, #0
 800584e:	d104      	bne.n	800585a <USB_EPStartXfer+0x1522>
 8005850:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005854:	3b01      	subs	r3, #1
 8005856:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800585a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800585e:	b29b      	uxth	r3, r3
 8005860:	029b      	lsls	r3, r3, #10
 8005862:	b29b      	uxth	r3, r3
 8005864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586c:	b29a      	uxth	r2, r3
 800586e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	e023      	b.n	80058be <USB_EPStartXfer+0x1586>
 8005876:	463b      	mov	r3, r7
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d11e      	bne.n	80058be <USB_EPStartXfer+0x1586>
 8005880:	1d3b      	adds	r3, r7, #4
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005888:	b29b      	uxth	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005890:	4413      	add	r3, r2
 8005892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005896:	463b      	mov	r3, r7
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	011a      	lsls	r2, r3, #4
 800589e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a2:	4413      	add	r3, r2
 80058a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	e001      	b.n	80058be <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e02e      	b.n	800591c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	463b      	mov	r3, r7
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80058dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80058e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058e4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80058e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80058ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058f0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80058f4:	1d3b      	adds	r3, r7, #4
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	463b      	mov	r3, r7
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	441a      	add	r2, r3
 8005902:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800590a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800590e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005916:	b29b      	uxth	r3, r3
 8005918:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	785b      	ldrb	r3, [r3, #1]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d020      	beq.n	800597a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	b29b      	uxth	r3, r3
 8005946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800594e:	81bb      	strh	r3, [r7, #12]
 8005950:	89bb      	ldrh	r3, [r7, #12]
 8005952:	f083 0310 	eor.w	r3, r3, #16
 8005956:	81bb      	strh	r3, [r7, #12]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	89bb      	ldrh	r3, [r7, #12]
 8005964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005974:	b29b      	uxth	r3, r3
 8005976:	8013      	strh	r3, [r2, #0]
 8005978:	e01f      	b.n	80059ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800598c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005990:	81fb      	strh	r3, [r7, #14]
 8005992:	89fb      	ldrh	r3, [r7, #14]
 8005994:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005998:	81fb      	strh	r3, [r7, #14]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	441a      	add	r2, r3
 80059a4:	89fb      	ldrh	r3, [r7, #14]
 80059a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr

080059c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b087      	sub	sp, #28
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	7b1b      	ldrb	r3, [r3, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f040 809d 	bne.w	8005b14 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	785b      	ldrb	r3, [r3, #1]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d04c      	beq.n	8005a7c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	823b      	strh	r3, [r7, #16]
 80059f0:	8a3b      	ldrh	r3, [r7, #16]
 80059f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01b      	beq.n	8005a32 <USB_EPClearStall+0x6c>
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a10:	81fb      	strh	r3, [r7, #14]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	441a      	add	r2, r3
 8005a1c:	89fb      	ldrh	r3, [r7, #14]
 8005a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	78db      	ldrb	r3, [r3, #3]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d06c      	beq.n	8005b14 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a50:	81bb      	strh	r3, [r7, #12]
 8005a52:	89bb      	ldrh	r3, [r7, #12]
 8005a54:	f083 0320 	eor.w	r3, r3, #32
 8005a58:	81bb      	strh	r3, [r7, #12]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	441a      	add	r2, r3
 8005a64:	89bb      	ldrh	r3, [r7, #12]
 8005a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	8013      	strh	r3, [r2, #0]
 8005a7a:	e04b      	b.n	8005b14 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	82fb      	strh	r3, [r7, #22]
 8005a8a:	8afb      	ldrh	r3, [r7, #22]
 8005a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d01b      	beq.n	8005acc <USB_EPClearStall+0x106>
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	82bb      	strh	r3, [r7, #20]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	441a      	add	r2, r3
 8005ab6:	8abb      	ldrh	r3, [r7, #20]
 8005ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae2:	827b      	strh	r3, [r7, #18]
 8005ae4:	8a7b      	ldrh	r3, [r7, #18]
 8005ae6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005aea:	827b      	strh	r3, [r7, #18]
 8005aec:	8a7b      	ldrh	r3, [r7, #18]
 8005aee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005af2:	827b      	strh	r3, [r7, #18]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	441a      	add	r2, r3
 8005afe:	8a7b      	ldrh	r3, [r7, #18]
 8005b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr

08005b20 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d103      	bne.n	8005b3a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2280      	movs	r2, #128	; 0x80
 8005b36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc80      	pop	{r7}
 8005b58:	4770      	bx	lr

08005b5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr

08005b6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005b80:	68fb      	ldr	r3, [r7, #12]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bc80      	pop	{r7}
 8005b8a:	4770      	bx	lr

08005b8c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr

08005ba2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b08d      	sub	sp, #52	; 0x34
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	4611      	mov	r1, r2
 8005bae:	461a      	mov	r2, r3
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	80fb      	strh	r3, [r7, #6]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005bb8:	88bb      	ldrh	r3, [r7, #4]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005bc8:	88fb      	ldrh	r3, [r7, #6]
 8005bca:	005a      	lsls	r2, r3, #1
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bda:	e01e      	b.n	8005c1a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	3301      	adds	r3, #1
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	3302      	adds	r3, #2
 8005c06:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	3302      	adds	r3, #2
 8005c0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	3301      	adds	r3, #1
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c16:	3b01      	subs	r3, #1
 8005c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1dd      	bne.n	8005bdc <USB_WritePMA+0x3a>
  }
}
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
 8005c24:	3734      	adds	r7, #52	; 0x34
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr

08005c2c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b08b      	sub	sp, #44	; 0x2c
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	4611      	mov	r1, r2
 8005c38:	461a      	mov	r2, r3
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	80fb      	strh	r3, [r7, #6]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005c42:	88bb      	ldrh	r3, [r7, #4]
 8005c44:	085b      	lsrs	r3, r3, #1
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	005a      	lsls	r2, r3, #1
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c5e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
 8005c64:	e01b      	b.n	8005c9e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	3302      	adds	r3, #2
 8005c72:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	0a1b      	lsrs	r3, r3, #8
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	3302      	adds	r3, #2
 8005c96:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e0      	bne.n	8005c66 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005ca4:	88bb      	ldrh	r3, [r7, #4]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	701a      	strb	r2, [r3, #0]
  }
}
 8005cc0:	bf00      	nop
 8005cc2:	372c      	adds	r7, #44	; 0x2c
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr

08005cca <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	7c1b      	ldrb	r3, [r3, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d115      	bne.n	8005d0e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	2181      	movs	r1, #129	; 0x81
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f001 fea7 	bl	8007a3e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f001 fe9d 	bl	8007a3e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005d0c:	e012      	b.n	8005d34 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d0e:	2340      	movs	r3, #64	; 0x40
 8005d10:	2202      	movs	r2, #2
 8005d12:	2181      	movs	r1, #129	; 0x81
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f001 fe92 	bl	8007a3e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d20:	2340      	movs	r3, #64	; 0x40
 8005d22:	2202      	movs	r2, #2
 8005d24:	2101      	movs	r1, #1
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f001 fe89 	bl	8007a3e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d34:	2308      	movs	r3, #8
 8005d36:	2203      	movs	r2, #3
 8005d38:	2182      	movs	r1, #130	; 0x82
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f001 fe7f 	bl	8007a3e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d46:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d4a:	f001 ff9f 	bl	8007c8c <USBD_static_malloc>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
 8005d64:	e026      	b.n	8005db4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	7c1b      	ldrb	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d109      	bne.n	8005da4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f001 ff3f 	bl	8007c20 <USBD_LL_PrepareReceive>
 8005da2:	e007      	b.n	8005db4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005daa:	2340      	movs	r3, #64	; 0x40
 8005dac:	2101      	movs	r1, #1
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f001 ff36 	bl	8007c20 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005dce:	2181      	movs	r1, #129	; 0x81
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 fe5a 	bl	8007a8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ddc:	2101      	movs	r1, #1
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f001 fe53 	bl	8007a8a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005dec:	2182      	movs	r1, #130	; 0x82
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 fe4b 	bl	8007a8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00e      	beq.n	8005e22 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 ff45 	bl	8007ca4 <USBD_static_free>
    pdev->pClassData = NULL;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d039      	beq.n	8005eca <USBD_CDC_Setup+0x9e>
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d17f      	bne.n	8005f5a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	88db      	ldrh	r3, [r3, #6]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d029      	beq.n	8005eb6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	b25b      	sxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	da11      	bge.n	8005e90 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005e78:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	88d2      	ldrh	r2, [r2, #6]
 8005e7e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005e80:	6939      	ldr	r1, [r7, #16]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	88db      	ldrh	r3, [r3, #6]
 8005e86:	461a      	mov	r2, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f001 fa0a 	bl	80072a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005e8e:	e06b      	b.n	8005f68 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	785a      	ldrb	r2, [r3, #1]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	88db      	ldrh	r3, [r3, #6]
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005ea6:	6939      	ldr	r1, [r7, #16]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	88db      	ldrh	r3, [r3, #6]
 8005eac:	461a      	mov	r2, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f001 fa25 	bl	80072fe <USBD_CtlPrepareRx>
      break;
 8005eb4:	e058      	b.n	8005f68 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	7850      	ldrb	r0, [r2, #1]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	4798      	blx	r3
      break;
 8005ec8:	e04e      	b.n	8005f68 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	785b      	ldrb	r3, [r3, #1]
 8005ece:	2b0b      	cmp	r3, #11
 8005ed0:	d02e      	beq.n	8005f30 <USBD_CDC_Setup+0x104>
 8005ed2:	2b0b      	cmp	r3, #11
 8005ed4:	dc38      	bgt.n	8005f48 <USBD_CDC_Setup+0x11c>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <USBD_CDC_Setup+0xb4>
 8005eda:	2b0a      	cmp	r3, #10
 8005edc:	d014      	beq.n	8005f08 <USBD_CDC_Setup+0xdc>
 8005ede:	e033      	b.n	8005f48 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d107      	bne.n	8005efa <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005eea:	f107 030c 	add.w	r3, r7, #12
 8005eee:	2202      	movs	r2, #2
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f001 f9d5 	bl	80072a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ef8:	e02e      	b.n	8005f58 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f001 f966 	bl	80071ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005f02:	2302      	movs	r3, #2
 8005f04:	75fb      	strb	r3, [r7, #23]
          break;
 8005f06:	e027      	b.n	8005f58 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d107      	bne.n	8005f22 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f12:	f107 030f 	add.w	r3, r7, #15
 8005f16:	2201      	movs	r2, #1
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 f9c1 	bl	80072a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f20:	e01a      	b.n	8005f58 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f001 f952 	bl	80071ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f2e:	e013      	b.n	8005f58 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d00d      	beq.n	8005f56 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f001 f946 	bl	80071ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005f42:	2302      	movs	r3, #2
 8005f44:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005f46:	e006      	b.n	8005f56 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 f93f 	bl	80071ce <USBD_CtlError>
          ret = USBD_FAIL;
 8005f50:	2302      	movs	r3, #2
 8005f52:	75fb      	strb	r3, [r7, #23]
          break;
 8005f54:	e000      	b.n	8005f58 <USBD_CDC_Setup+0x12c>
          break;
 8005f56:	bf00      	nop
      }
      break;
 8005f58:	e006      	b.n	8005f68 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 f936 	bl	80071ce <USBD_CtlError>
      ret = USBD_FAIL;
 8005f62:	2302      	movs	r3, #2
 8005f64:	75fb      	strb	r3, [r7, #23]
      break;
 8005f66:	bf00      	nop
  }

  return ret;
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f84:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f8c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d03a      	beq.n	800600e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005f98:	78fa      	ldrb	r2, [r7, #3]
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	331c      	adds	r3, #28
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d029      	beq.n	8006002 <USBD_CDC_DataIn+0x90>
 8005fae:	78fa      	ldrb	r2, [r7, #3]
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	331c      	adds	r3, #28
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	78f9      	ldrb	r1, [r7, #3]
 8005fc2:	68b8      	ldr	r0, [r7, #8]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	4403      	add	r3, r0
 8005fce:	3338      	adds	r3, #56	; 0x38
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	fbb2 f1f3 	udiv	r1, r2, r3
 8005fd6:	fb03 f301 	mul.w	r3, r3, r1
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d110      	bne.n	8006002 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005fe0:	78fa      	ldrb	r2, [r7, #3]
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	331c      	adds	r3, #28
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005ff4:	78f9      	ldrb	r1, [r7, #3]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f001 fded 	bl	8007bda <USBD_LL_Transmit>
 8006000:	e003      	b.n	800600a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	e000      	b.n	8006010 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800600e:	2302      	movs	r3, #2
  }
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f001 fe18 	bl	8007c66 <USBD_LL_GetRxDataSize>
 8006036:	4602      	mov	r2, r0
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00d      	beq.n	8006064 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800605c:	4611      	mov	r1, r2
 800605e:	4798      	blx	r3

    return USBD_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	e000      	b.n	8006066 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006064:	2302      	movs	r3, #2
  }
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b084      	sub	sp, #16
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006084:	2b00      	cmp	r3, #0
 8006086:	d015      	beq.n	80060b4 <USBD_CDC_EP0_RxReady+0x46>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800608e:	2bff      	cmp	r3, #255	; 0xff
 8006090:	d010      	beq.n	80060b4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80060a0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80060a8:	b292      	uxth	r2, r2
 80060aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	22ff      	movs	r2, #255	; 0xff
 80060b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2243      	movs	r2, #67	; 0x43
 80060cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80060ce:	4b03      	ldr	r3, [pc, #12]	; (80060dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000094 	.word	0x20000094

080060e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2243      	movs	r2, #67	; 0x43
 80060ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80060ee:	4b03      	ldr	r3, [pc, #12]	; (80060fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	20000050 	.word	0x20000050

08006100 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2243      	movs	r2, #67	; 0x43
 800610c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800610e:	4b03      	ldr	r3, [pc, #12]	; (800611c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006110:	4618      	mov	r0, r3
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	bc80      	pop	{r7}
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	200000d8 	.word	0x200000d8

08006120 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	220a      	movs	r2, #10
 800612c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800612e:	4b03      	ldr	r3, [pc, #12]	; (800613c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	2000000c 	.word	0x2000000c

08006140 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800614a:	2302      	movs	r3, #2
 800614c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr

0800616c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006180:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800618a:	88fa      	ldrh	r2, [r7, #6]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	371c      	adds	r7, #28
 8006198:	46bd      	mov	sp, r7
 800619a:	bc80      	pop	{r7}
 800619c:	4770      	bx	lr

0800619e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr

080061c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d01c      	beq.n	8006218 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d115      	bne.n	8006214 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006206:	b29b      	uxth	r3, r3
 8006208:	2181      	movs	r1, #129	; 0x81
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 fce5 	bl	8007bda <USBD_LL_Transmit>

      return USBD_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	e002      	b.n	800621a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006218:	2302      	movs	r3, #2
  }
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006230:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006238:	2b00      	cmp	r3, #0
 800623a:	d017      	beq.n	800626c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	7c1b      	ldrb	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d109      	bne.n	8006258 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800624a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800624e:	2101      	movs	r1, #1
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 fce5 	bl	8007c20 <USBD_LL_PrepareReceive>
 8006256:	e007      	b.n	8006268 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800625e:	2340      	movs	r3, #64	; 0x40
 8006260:	2101      	movs	r1, #1
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 fcdc 	bl	8007c20 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	e000      	b.n	800626e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800626c:	2302      	movs	r3, #2
  }
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	4613      	mov	r3, r2
 8006282:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800628a:	2302      	movs	r3, #2
 800628c:	e01a      	b.n	80062c4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	79fa      	ldrb	r2, [r7, #7]
 80062ba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f001 fb49 	bl	8007954 <USBD_LL_Init>

  return USBD_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d006      	beq.n	80062ee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	73fb      	strb	r3, [r7, #15]
 80062ec:	e001      	b.n	80062f2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80062ee:	2302      	movs	r3, #2
 80062f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr

080062fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 fb7e 	bl	8007a08 <USBD_LL_Start>

  return USBD_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	bc80      	pop	{r7}
 8006328:	4770      	bx	lr

0800632a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	460b      	mov	r3, r1
 8006334:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006336:	2302      	movs	r3, #2
 8006338:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00c      	beq.n	800635e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	78fa      	ldrb	r2, [r7, #3]
 800634e:	4611      	mov	r1, r2
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	4798      	blx	r3
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800635e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	78fa      	ldrb	r2, [r7, #3]
 800637e:	4611      	mov	r1, r2
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	4798      	blx	r3

  return USBD_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b082      	sub	sp, #8
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fed8 	bl	8007156 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063b4:	461a      	mov	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063c2:	f003 031f 	and.w	r3, r3, #31
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d016      	beq.n	80063f8 <USBD_LL_SetupStage+0x6a>
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d81c      	bhi.n	8006408 <USBD_LL_SetupStage+0x7a>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <USBD_LL_SetupStage+0x4a>
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d008      	beq.n	80063e8 <USBD_LL_SetupStage+0x5a>
 80063d6:	e017      	b.n	8006408 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f9cb 	bl	800677c <USBD_StdDevReq>
      break;
 80063e6:	e01a      	b.n	800641e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fa2d 	bl	8006850 <USBD_StdItfReq>
      break;
 80063f6:	e012      	b.n	800641e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fa6d 	bl	80068e0 <USBD_StdEPReq>
      break;
 8006406:	e00a      	b.n	800641e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800640e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006412:	b2db      	uxtb	r3, r3
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f001 fb56 	bl	8007ac8 <USBD_LL_StallEP>
      break;
 800641c:	bf00      	nop
  }

  return USBD_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	460b      	mov	r3, r1
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006436:	7afb      	ldrb	r3, [r7, #11]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d14b      	bne.n	80064d4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006442:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800644a:	2b03      	cmp	r3, #3
 800644c:	d134      	bne.n	80064b8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	429a      	cmp	r2, r3
 8006458:	d919      	bls.n	800648e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	1ad2      	subs	r2, r2, r3
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006470:	429a      	cmp	r2, r3
 8006472:	d203      	bcs.n	800647c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006478:	b29b      	uxth	r3, r3
 800647a:	e002      	b.n	8006482 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006480:	b29b      	uxth	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 ff57 	bl	800733a <USBD_CtlContinueRx>
 800648c:	e038      	b.n	8006500 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d105      	bne.n	80064b0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 ff54 	bl	800735e <USBD_CtlSendStatus>
 80064b6:	e023      	b.n	8006500 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064be:	2b05      	cmp	r3, #5
 80064c0:	d11e      	bne.n	8006500 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80064ca:	2100      	movs	r1, #0
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f001 fafb 	bl	8007ac8 <USBD_LL_StallEP>
 80064d2:	e015      	b.n	8006500 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00d      	beq.n	80064fc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d108      	bne.n	80064fc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	7afa      	ldrb	r2, [r7, #11]
 80064f4:	4611      	mov	r1, r2
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	4798      	blx	r3
 80064fa:	e001      	b.n	8006500 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80064fc:	2302      	movs	r3, #2
 80064fe:	e000      	b.n	8006502 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b086      	sub	sp, #24
 800650e:	af00      	add	r7, sp, #0
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	460b      	mov	r3, r1
 8006514:	607a      	str	r2, [r7, #4]
 8006516:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006518:	7afb      	ldrb	r3, [r7, #11]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d17f      	bne.n	800661e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3314      	adds	r3, #20
 8006522:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800652a:	2b02      	cmp	r3, #2
 800652c:	d15c      	bne.n	80065e8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	429a      	cmp	r2, r3
 8006538:	d915      	bls.n	8006566 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	1ad2      	subs	r2, r2, r3
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	b29b      	uxth	r3, r3
 800654e:	461a      	mov	r2, r3
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fec1 	bl	80072da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006558:	2300      	movs	r3, #0
 800655a:	2200      	movs	r2, #0
 800655c:	2100      	movs	r1, #0
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f001 fb5e 	bl	8007c20 <USBD_LL_PrepareReceive>
 8006564:	e04e      	b.n	8006604 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	6912      	ldr	r2, [r2, #16]
 800656e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006572:	fb02 f201 	mul.w	r2, r2, r1
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d11c      	bne.n	80065b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006584:	429a      	cmp	r2, r3
 8006586:	d316      	bcc.n	80065b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006592:	429a      	cmp	r2, r3
 8006594:	d20f      	bcs.n	80065b6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006596:	2200      	movs	r2, #0
 8006598:	2100      	movs	r1, #0
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 fe9d 	bl	80072da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065a8:	2300      	movs	r3, #0
 80065aa:	2200      	movs	r2, #0
 80065ac:	2100      	movs	r1, #0
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f001 fb36 	bl	8007c20 <USBD_LL_PrepareReceive>
 80065b4:	e026      	b.n	8006604 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d105      	bne.n	80065d8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80065d8:	2180      	movs	r1, #128	; 0x80
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f001 fa74 	bl	8007ac8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 fecf 	bl	8007384 <USBD_CtlReceiveStatus>
 80065e6:	e00d      	b.n	8006604 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d004      	beq.n	80065fc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d103      	bne.n	8006604 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80065fc:	2180      	movs	r1, #128	; 0x80
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f001 fa62 	bl	8007ac8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800660a:	2b01      	cmp	r3, #1
 800660c:	d11d      	bne.n	800664a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f7ff fe81 	bl	8006316 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800661c:	e015      	b.n	800664a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00d      	beq.n	8006646 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006630:	2b03      	cmp	r3, #3
 8006632:	d108      	bne.n	8006646 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	7afa      	ldrb	r2, [r7, #11]
 800663e:	4611      	mov	r1, r2
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	4798      	blx	r3
 8006644:	e001      	b.n	800664a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006646:	2302      	movs	r3, #2
 8006648:	e000      	b.n	800664c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800665c:	2340      	movs	r3, #64	; 0x40
 800665e:	2200      	movs	r2, #0
 8006660:	2100      	movs	r1, #0
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 f9eb 	bl	8007a3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2240      	movs	r2, #64	; 0x40
 8006674:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006678:	2340      	movs	r3, #64	; 0x40
 800667a:	2200      	movs	r2, #0
 800667c:	2180      	movs	r1, #128	; 0x80
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 f9dd 	bl	8007a3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2240      	movs	r2, #64	; 0x40
 800668e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d009      	beq.n	80066cc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6852      	ldr	r2, [r2, #4]
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	4611      	mov	r1, r2
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	4798      	blx	r3
  }

  return USBD_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	460b      	mov	r3, r1
 80066e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	78fa      	ldrb	r2, [r7, #3]
 80066e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr

080066f4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2204      	movs	r2, #4
 800670c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800672a:	2b04      	cmp	r3, #4
 800672c:	d105      	bne.n	800673a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	bc80      	pop	{r7}
 8006744:	4770      	bx	lr

08006746 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006754:	2b03      	cmp	r3, #3
 8006756:	d10b      	bne.n	8006770 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006792:	2b40      	cmp	r3, #64	; 0x40
 8006794:	d005      	beq.n	80067a2 <USBD_StdDevReq+0x26>
 8006796:	2b40      	cmp	r3, #64	; 0x40
 8006798:	d84f      	bhi.n	800683a <USBD_StdDevReq+0xbe>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <USBD_StdDevReq+0x36>
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d14b      	bne.n	800683a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	4798      	blx	r3
      break;
 80067b0:	e048      	b.n	8006844 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	785b      	ldrb	r3, [r3, #1]
 80067b6:	2b09      	cmp	r3, #9
 80067b8:	d839      	bhi.n	800682e <USBD_StdDevReq+0xb2>
 80067ba:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <USBD_StdDevReq+0x44>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	08006811 	.word	0x08006811
 80067c4:	08006825 	.word	0x08006825
 80067c8:	0800682f 	.word	0x0800682f
 80067cc:	0800681b 	.word	0x0800681b
 80067d0:	0800682f 	.word	0x0800682f
 80067d4:	080067f3 	.word	0x080067f3
 80067d8:	080067e9 	.word	0x080067e9
 80067dc:	0800682f 	.word	0x0800682f
 80067e0:	08006807 	.word	0x08006807
 80067e4:	080067fd 	.word	0x080067fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f9dc 	bl	8006ba8 <USBD_GetDescriptor>
          break;
 80067f0:	e022      	b.n	8006838 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fb3f 	bl	8006e78 <USBD_SetAddress>
          break;
 80067fa:	e01d      	b.n	8006838 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fb7e 	bl	8006f00 <USBD_SetConfig>
          break;
 8006804:	e018      	b.n	8006838 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fc07 	bl	800701c <USBD_GetConfig>
          break;
 800680e:	e013      	b.n	8006838 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fc37 	bl	8007086 <USBD_GetStatus>
          break;
 8006818:	e00e      	b.n	8006838 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fc65 	bl	80070ec <USBD_SetFeature>
          break;
 8006822:	e009      	b.n	8006838 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fc74 	bl	8007114 <USBD_ClrFeature>
          break;
 800682c:	e004      	b.n	8006838 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fccc 	bl	80071ce <USBD_CtlError>
          break;
 8006836:	bf00      	nop
      }
      break;
 8006838:	e004      	b.n	8006844 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fcc6 	bl	80071ce <USBD_CtlError>
      break;
 8006842:	bf00      	nop
  }

  return ret;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop

08006850 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	d005      	beq.n	8006876 <USBD_StdItfReq+0x26>
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d82e      	bhi.n	80068cc <USBD_StdItfReq+0x7c>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <USBD_StdItfReq+0x26>
 8006872:	2b20      	cmp	r3, #32
 8006874:	d12a      	bne.n	80068cc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687c:	3b01      	subs	r3, #1
 800687e:	2b02      	cmp	r3, #2
 8006880:	d81d      	bhi.n	80068be <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	889b      	ldrh	r3, [r3, #4]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b01      	cmp	r3, #1
 800688a:	d813      	bhi.n	80068b4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	4798      	blx	r3
 800689a:	4603      	mov	r3, r0
 800689c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	88db      	ldrh	r3, [r3, #6]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d110      	bne.n	80068c8 <USBD_StdItfReq+0x78>
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10d      	bne.n	80068c8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fd56 	bl	800735e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80068b2:	e009      	b.n	80068c8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fc89 	bl	80071ce <USBD_CtlError>
          break;
 80068bc:	e004      	b.n	80068c8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fc84 	bl	80071ce <USBD_CtlError>
          break;
 80068c6:	e000      	b.n	80068ca <USBD_StdItfReq+0x7a>
          break;
 80068c8:	bf00      	nop
      }
      break;
 80068ca:	e004      	b.n	80068d6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fc7d 	bl	80071ce <USBD_CtlError>
      break;
 80068d4:	bf00      	nop
  }

  return USBD_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	889b      	ldrh	r3, [r3, #4]
 80068f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068fc:	2b40      	cmp	r3, #64	; 0x40
 80068fe:	d007      	beq.n	8006910 <USBD_StdEPReq+0x30>
 8006900:	2b40      	cmp	r3, #64	; 0x40
 8006902:	f200 8146 	bhi.w	8006b92 <USBD_StdEPReq+0x2b2>
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <USBD_StdEPReq+0x40>
 800690a:	2b20      	cmp	r3, #32
 800690c:	f040 8141 	bne.w	8006b92 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	4798      	blx	r3
      break;
 800691e:	e13d      	b.n	8006b9c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006928:	2b20      	cmp	r3, #32
 800692a:	d10a      	bne.n	8006942 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	4798      	blx	r3
 800693a:	4603      	mov	r3, r0
 800693c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	e12d      	b.n	8006b9e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	785b      	ldrb	r3, [r3, #1]
 8006946:	2b03      	cmp	r3, #3
 8006948:	d007      	beq.n	800695a <USBD_StdEPReq+0x7a>
 800694a:	2b03      	cmp	r3, #3
 800694c:	f300 811b 	bgt.w	8006b86 <USBD_StdEPReq+0x2a6>
 8006950:	2b00      	cmp	r3, #0
 8006952:	d072      	beq.n	8006a3a <USBD_StdEPReq+0x15a>
 8006954:	2b01      	cmp	r3, #1
 8006956:	d03a      	beq.n	80069ce <USBD_StdEPReq+0xee>
 8006958:	e115      	b.n	8006b86 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006960:	2b02      	cmp	r3, #2
 8006962:	d002      	beq.n	800696a <USBD_StdEPReq+0x8a>
 8006964:	2b03      	cmp	r3, #3
 8006966:	d015      	beq.n	8006994 <USBD_StdEPReq+0xb4>
 8006968:	e02b      	b.n	80069c2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800696a:	7bbb      	ldrb	r3, [r7, #14]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00c      	beq.n	800698a <USBD_StdEPReq+0xaa>
 8006970:	7bbb      	ldrb	r3, [r7, #14]
 8006972:	2b80      	cmp	r3, #128	; 0x80
 8006974:	d009      	beq.n	800698a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f001 f8a4 	bl	8007ac8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006980:	2180      	movs	r1, #128	; 0x80
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f001 f8a0 	bl	8007ac8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006988:	e020      	b.n	80069cc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fc1e 	bl	80071ce <USBD_CtlError>
              break;
 8006992:	e01b      	b.n	80069cc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	885b      	ldrh	r3, [r3, #2]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10e      	bne.n	80069ba <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00b      	beq.n	80069ba <USBD_StdEPReq+0xda>
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
 80069a4:	2b80      	cmp	r3, #128	; 0x80
 80069a6:	d008      	beq.n	80069ba <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	88db      	ldrh	r3, [r3, #6]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d104      	bne.n	80069ba <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 f887 	bl	8007ac8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fccf 	bl	800735e <USBD_CtlSendStatus>

              break;
 80069c0:	e004      	b.n	80069cc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fc02 	bl	80071ce <USBD_CtlError>
              break;
 80069ca:	bf00      	nop
          }
          break;
 80069cc:	e0e0      	b.n	8006b90 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d002      	beq.n	80069de <USBD_StdEPReq+0xfe>
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d015      	beq.n	8006a08 <USBD_StdEPReq+0x128>
 80069dc:	e026      	b.n	8006a2c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00c      	beq.n	80069fe <USBD_StdEPReq+0x11e>
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	2b80      	cmp	r3, #128	; 0x80
 80069e8:	d009      	beq.n	80069fe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80069ea:	7bbb      	ldrb	r3, [r7, #14]
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 f86a 	bl	8007ac8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80069f4:	2180      	movs	r1, #128	; 0x80
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f001 f866 	bl	8007ac8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069fc:	e01c      	b.n	8006a38 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fbe4 	bl	80071ce <USBD_CtlError>
              break;
 8006a06:	e017      	b.n	8006a38 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	885b      	ldrh	r3, [r3, #2]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d112      	bne.n	8006a36 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
 8006a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d004      	beq.n	8006a24 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 f871 	bl	8007b06 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fc9a 	bl	800735e <USBD_CtlSendStatus>
              }
              break;
 8006a2a:	e004      	b.n	8006a36 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fbcd 	bl	80071ce <USBD_CtlError>
              break;
 8006a34:	e000      	b.n	8006a38 <USBD_StdEPReq+0x158>
              break;
 8006a36:	bf00      	nop
          }
          break;
 8006a38:	e0aa      	b.n	8006b90 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d002      	beq.n	8006a4a <USBD_StdEPReq+0x16a>
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d032      	beq.n	8006aae <USBD_StdEPReq+0x1ce>
 8006a48:	e097      	b.n	8006b7a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <USBD_StdEPReq+0x180>
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	2b80      	cmp	r3, #128	; 0x80
 8006a54:	d004      	beq.n	8006a60 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fbb8 	bl	80071ce <USBD_CtlError>
                break;
 8006a5e:	e091      	b.n	8006b84 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	da0b      	bge.n	8006a80 <USBD_StdEPReq+0x1a0>
 8006a68:	7bbb      	ldrb	r3, [r7, #14]
 8006a6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a6e:	4613      	mov	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	3310      	adds	r3, #16
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	e00b      	b.n	8006a98 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
 8006a82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	4413      	add	r3, r2
 8006a96:	3304      	adds	r3, #4
 8006a98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fbfb 	bl	80072a2 <USBD_CtlSendData>
              break;
 8006aac:	e06a      	b.n	8006b84 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006aae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	da11      	bge.n	8006ada <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	f003 020f 	and.w	r2, r3, #15
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	3318      	adds	r3, #24
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d117      	bne.n	8006b00 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fb7b 	bl	80071ce <USBD_CtlError>
                  break;
 8006ad8:	e054      	b.n	8006b84 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
 8006adc:	f003 020f 	and.w	r2, r3, #15
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	440b      	add	r3, r1
 8006aec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d104      	bne.n	8006b00 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fb68 	bl	80071ce <USBD_CtlError>
                  break;
 8006afe:	e041      	b.n	8006b84 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	da0b      	bge.n	8006b20 <USBD_StdEPReq+0x240>
 8006b08:	7bbb      	ldrb	r3, [r7, #14]
 8006b0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	3310      	adds	r3, #16
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	e00b      	b.n	8006b38 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b26:	4613      	mov	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	4413      	add	r3, r2
 8006b36:	3304      	adds	r3, #4
 8006b38:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <USBD_StdEPReq+0x266>
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	2b80      	cmp	r3, #128	; 0x80
 8006b44:	d103      	bne.n	8006b4e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	e00e      	b.n	8006b6c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fff6 	bl	8007b44 <USBD_LL_IsStallEP>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2201      	movs	r2, #1
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	e002      	b.n	8006b6c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fb95 	bl	80072a2 <USBD_CtlSendData>
              break;
 8006b78:	e004      	b.n	8006b84 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fb26 	bl	80071ce <USBD_CtlError>
              break;
 8006b82:	bf00      	nop
          }
          break;
 8006b84:	e004      	b.n	8006b90 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fb20 	bl	80071ce <USBD_CtlError>
          break;
 8006b8e:	bf00      	nop
      }
      break;
 8006b90:	e004      	b.n	8006b9c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fb1a 	bl	80071ce <USBD_CtlError>
      break;
 8006b9a:	bf00      	nop
  }

  return ret;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	885b      	ldrh	r3, [r3, #2]
 8006bc2:	0a1b      	lsrs	r3, r3, #8
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	2b06      	cmp	r3, #6
 8006bca:	f200 8128 	bhi.w	8006e1e <USBD_GetDescriptor+0x276>
 8006bce:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <USBD_GetDescriptor+0x2c>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006bf1 	.word	0x08006bf1
 8006bd8:	08006c09 	.word	0x08006c09
 8006bdc:	08006c49 	.word	0x08006c49
 8006be0:	08006e1f 	.word	0x08006e1f
 8006be4:	08006e1f 	.word	0x08006e1f
 8006be8:	08006dbf 	.word	0x08006dbf
 8006bec:	08006deb 	.word	0x08006deb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	7c12      	ldrb	r2, [r2, #16]
 8006bfc:	f107 0108 	add.w	r1, r7, #8
 8006c00:	4610      	mov	r0, r2
 8006c02:	4798      	blx	r3
 8006c04:	60f8      	str	r0, [r7, #12]
      break;
 8006c06:	e112      	b.n	8006e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	7c1b      	ldrb	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10d      	bne.n	8006c2c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	f107 0208 	add.w	r2, r7, #8
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	4798      	blx	r3
 8006c20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3301      	adds	r3, #1
 8006c26:	2202      	movs	r2, #2
 8006c28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c2a:	e100      	b.n	8006e2e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	f107 0208 	add.w	r2, r7, #8
 8006c38:	4610      	mov	r0, r2
 8006c3a:	4798      	blx	r3
 8006c3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3301      	adds	r3, #1
 8006c42:	2202      	movs	r2, #2
 8006c44:	701a      	strb	r2, [r3, #0]
      break;
 8006c46:	e0f2      	b.n	8006e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	885b      	ldrh	r3, [r3, #2]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b05      	cmp	r3, #5
 8006c50:	f200 80ac 	bhi.w	8006dac <USBD_GetDescriptor+0x204>
 8006c54:	a201      	add	r2, pc, #4	; (adr r2, 8006c5c <USBD_GetDescriptor+0xb4>)
 8006c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5a:	bf00      	nop
 8006c5c:	08006c75 	.word	0x08006c75
 8006c60:	08006ca9 	.word	0x08006ca9
 8006c64:	08006cdd 	.word	0x08006cdd
 8006c68:	08006d11 	.word	0x08006d11
 8006c6c:	08006d45 	.word	0x08006d45
 8006c70:	08006d79 	.word	0x08006d79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	7c12      	ldrb	r2, [r2, #16]
 8006c8c:	f107 0108 	add.w	r1, r7, #8
 8006c90:	4610      	mov	r0, r2
 8006c92:	4798      	blx	r3
 8006c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c96:	e091      	b.n	8006dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fa97 	bl	80071ce <USBD_CtlError>
            err++;
 8006ca0:	7afb      	ldrb	r3, [r7, #11]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ca6:	e089      	b.n	8006dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00b      	beq.n	8006ccc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	7c12      	ldrb	r2, [r2, #16]
 8006cc0:	f107 0108 	add.w	r1, r7, #8
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4798      	blx	r3
 8006cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cca:	e077      	b.n	8006dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa7d 	bl	80071ce <USBD_CtlError>
            err++;
 8006cd4:	7afb      	ldrb	r3, [r7, #11]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cda:	e06f      	b.n	8006dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00b      	beq.n	8006d00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	7c12      	ldrb	r2, [r2, #16]
 8006cf4:	f107 0108 	add.w	r1, r7, #8
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4798      	blx	r3
 8006cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cfe:	e05d      	b.n	8006dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa63 	bl	80071ce <USBD_CtlError>
            err++;
 8006d08:	7afb      	ldrb	r3, [r7, #11]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d0e:	e055      	b.n	8006dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00b      	beq.n	8006d34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	7c12      	ldrb	r2, [r2, #16]
 8006d28:	f107 0108 	add.w	r1, r7, #8
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	4798      	blx	r3
 8006d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d32:	e043      	b.n	8006dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fa49 	bl	80071ce <USBD_CtlError>
            err++;
 8006d3c:	7afb      	ldrb	r3, [r7, #11]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	72fb      	strb	r3, [r7, #11]
          break;
 8006d42:	e03b      	b.n	8006dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00b      	beq.n	8006d68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	7c12      	ldrb	r2, [r2, #16]
 8006d5c:	f107 0108 	add.w	r1, r7, #8
 8006d60:	4610      	mov	r0, r2
 8006d62:	4798      	blx	r3
 8006d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d66:	e029      	b.n	8006dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fa2f 	bl	80071ce <USBD_CtlError>
            err++;
 8006d70:	7afb      	ldrb	r3, [r7, #11]
 8006d72:	3301      	adds	r3, #1
 8006d74:	72fb      	strb	r3, [r7, #11]
          break;
 8006d76:	e021      	b.n	8006dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00b      	beq.n	8006d9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	7c12      	ldrb	r2, [r2, #16]
 8006d90:	f107 0108 	add.w	r1, r7, #8
 8006d94:	4610      	mov	r0, r2
 8006d96:	4798      	blx	r3
 8006d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d9a:	e00f      	b.n	8006dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa15 	bl	80071ce <USBD_CtlError>
            err++;
 8006da4:	7afb      	ldrb	r3, [r7, #11]
 8006da6:	3301      	adds	r3, #1
 8006da8:	72fb      	strb	r3, [r7, #11]
          break;
 8006daa:	e007      	b.n	8006dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa0d 	bl	80071ce <USBD_CtlError>
          err++;
 8006db4:	7afb      	ldrb	r3, [r7, #11]
 8006db6:	3301      	adds	r3, #1
 8006db8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006dba:	e038      	b.n	8006e2e <USBD_GetDescriptor+0x286>
 8006dbc:	e037      	b.n	8006e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	7c1b      	ldrb	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d109      	bne.n	8006dda <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dce:	f107 0208 	add.w	r2, r7, #8
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	4798      	blx	r3
 8006dd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dd8:	e029      	b.n	8006e2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f9f6 	bl	80071ce <USBD_CtlError>
        err++;
 8006de2:	7afb      	ldrb	r3, [r7, #11]
 8006de4:	3301      	adds	r3, #1
 8006de6:	72fb      	strb	r3, [r7, #11]
      break;
 8006de8:	e021      	b.n	8006e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	7c1b      	ldrb	r3, [r3, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10d      	bne.n	8006e0e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	f107 0208 	add.w	r2, r7, #8
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4798      	blx	r3
 8006e02:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	3301      	adds	r3, #1
 8006e08:	2207      	movs	r2, #7
 8006e0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e0c:	e00f      	b.n	8006e2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f9dc 	bl	80071ce <USBD_CtlError>
        err++;
 8006e16:	7afb      	ldrb	r3, [r7, #11]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e1c:	e007      	b.n	8006e2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f9d4 	bl	80071ce <USBD_CtlError>
      err++;
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e2c:	bf00      	nop
  }

  if (err != 0U)
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d11c      	bne.n	8006e6e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006e34:	893b      	ldrh	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d011      	beq.n	8006e5e <USBD_GetDescriptor+0x2b6>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	88db      	ldrh	r3, [r3, #6]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00d      	beq.n	8006e5e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	88da      	ldrh	r2, [r3, #6]
 8006e46:	893b      	ldrh	r3, [r7, #8]
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	bf28      	it	cs
 8006e4c:	4613      	movcs	r3, r2
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e52:	893b      	ldrh	r3, [r7, #8]
 8006e54:	461a      	mov	r2, r3
 8006e56:	68f9      	ldr	r1, [r7, #12]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fa22 	bl	80072a2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	88db      	ldrh	r3, [r3, #6]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d104      	bne.n	8006e70 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa79 	bl	800735e <USBD_CtlSendStatus>
 8006e6c:	e000      	b.n	8006e70 <USBD_GetDescriptor+0x2c8>
    return;
 8006e6e:	bf00      	nop
    }
  }
}
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop

08006e78 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	889b      	ldrh	r3, [r3, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d130      	bne.n	8006eec <USBD_SetAddress+0x74>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	88db      	ldrh	r3, [r3, #6]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d12c      	bne.n	8006eec <USBD_SetAddress+0x74>
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	885b      	ldrh	r3, [r3, #2]
 8006e96:	2b7f      	cmp	r3, #127	; 0x7f
 8006e98:	d828      	bhi.n	8006eec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	885b      	ldrh	r3, [r3, #2]
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d104      	bne.n	8006eba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f98b 	bl	80071ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb8:	e01d      	b.n	8006ef6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	7bfa      	ldrb	r2, [r7, #15]
 8006ebe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fe68 	bl	8007b9c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fa46 	bl	800735e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d004      	beq.n	8006ee2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee0:	e009      	b.n	8006ef6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eea:	e004      	b.n	8006ef6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f96d 	bl	80071ce <USBD_CtlError>
  }
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	885b      	ldrh	r3, [r3, #2]
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	4b41      	ldr	r3, [pc, #260]	; (8007018 <USBD_SetConfig+0x118>)
 8006f12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f14:	4b40      	ldr	r3, [pc, #256]	; (8007018 <USBD_SetConfig+0x118>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d904      	bls.n	8006f26 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f955 	bl	80071ce <USBD_CtlError>
 8006f24:	e075      	b.n	8007012 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d002      	beq.n	8006f36 <USBD_SetConfig+0x36>
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d023      	beq.n	8006f7c <USBD_SetConfig+0x7c>
 8006f34:	e062      	b.n	8006ffc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006f36:	4b38      	ldr	r3, [pc, #224]	; (8007018 <USBD_SetConfig+0x118>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d01a      	beq.n	8006f74 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006f3e:	4b36      	ldr	r3, [pc, #216]	; (8007018 <USBD_SetConfig+0x118>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2203      	movs	r2, #3
 8006f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006f50:	4b31      	ldr	r3, [pc, #196]	; (8007018 <USBD_SetConfig+0x118>)
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff f9e7 	bl	800632a <USBD_SetClassConfig>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d104      	bne.n	8006f6c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f932 	bl	80071ce <USBD_CtlError>
            return;
 8006f6a:	e052      	b.n	8007012 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f9f6 	bl	800735e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006f72:	e04e      	b.n	8007012 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f9f2 	bl	800735e <USBD_CtlSendStatus>
        break;
 8006f7a:	e04a      	b.n	8007012 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006f7c:	4b26      	ldr	r3, [pc, #152]	; (8007018 <USBD_SetConfig+0x118>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d112      	bne.n	8006faa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006f8c:	4b22      	ldr	r3, [pc, #136]	; (8007018 <USBD_SetConfig+0x118>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006f96:	4b20      	ldr	r3, [pc, #128]	; (8007018 <USBD_SetConfig+0x118>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff f9e3 	bl	8006368 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f9db 	bl	800735e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006fa8:	e033      	b.n	8007012 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006faa:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <USBD_SetConfig+0x118>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d01d      	beq.n	8006ff4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff f9d1 	bl	8006368 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006fc6:	4b14      	ldr	r3, [pc, #80]	; (8007018 <USBD_SetConfig+0x118>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006fd0:	4b11      	ldr	r3, [pc, #68]	; (8007018 <USBD_SetConfig+0x118>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff f9a7 	bl	800632a <USBD_SetClassConfig>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d104      	bne.n	8006fec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f8f2 	bl	80071ce <USBD_CtlError>
            return;
 8006fea:	e012      	b.n	8007012 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f9b6 	bl	800735e <USBD_CtlSendStatus>
        break;
 8006ff2:	e00e      	b.n	8007012 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f9b2 	bl	800735e <USBD_CtlSendStatus>
        break;
 8006ffa:	e00a      	b.n	8007012 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f8e5 	bl	80071ce <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007004:	4b04      	ldr	r3, [pc, #16]	; (8007018 <USBD_SetConfig+0x118>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff f9ac 	bl	8006368 <USBD_ClrClassConfig>
        break;
 8007010:	bf00      	nop
    }
  }
}
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	2000019a 	.word	0x2000019a

0800701c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	88db      	ldrh	r3, [r3, #6]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d004      	beq.n	8007038 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f8cc 	bl	80071ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007036:	e022      	b.n	800707e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800703e:	2b02      	cmp	r3, #2
 8007040:	dc02      	bgt.n	8007048 <USBD_GetConfig+0x2c>
 8007042:	2b00      	cmp	r3, #0
 8007044:	dc03      	bgt.n	800704e <USBD_GetConfig+0x32>
 8007046:	e015      	b.n	8007074 <USBD_GetConfig+0x58>
 8007048:	2b03      	cmp	r3, #3
 800704a:	d00b      	beq.n	8007064 <USBD_GetConfig+0x48>
 800704c:	e012      	b.n	8007074 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3308      	adds	r3, #8
 8007058:	2201      	movs	r2, #1
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f920 	bl	80072a2 <USBD_CtlSendData>
        break;
 8007062:	e00c      	b.n	800707e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	3304      	adds	r3, #4
 8007068:	2201      	movs	r2, #1
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f918 	bl	80072a2 <USBD_CtlSendData>
        break;
 8007072:	e004      	b.n	800707e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f8a9 	bl	80071ce <USBD_CtlError>
        break;
 800707c:	bf00      	nop
}
 800707e:	bf00      	nop
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b082      	sub	sp, #8
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007096:	3b01      	subs	r3, #1
 8007098:	2b02      	cmp	r3, #2
 800709a:	d81e      	bhi.n	80070da <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	88db      	ldrh	r3, [r3, #6]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d004      	beq.n	80070ae <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f891 	bl	80071ce <USBD_CtlError>
        break;
 80070ac:	e01a      	b.n	80070e4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f043 0202 	orr.w	r2, r3, #2
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	330c      	adds	r3, #12
 80070ce:	2202      	movs	r2, #2
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f8e5 	bl	80072a2 <USBD_CtlSendData>
      break;
 80070d8:	e004      	b.n	80070e4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f876 	bl	80071ce <USBD_CtlError>
      break;
 80070e2:	bf00      	nop
  }
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	885b      	ldrh	r3, [r3, #2]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d106      	bne.n	800710c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f929 	bl	800735e <USBD_CtlSendStatus>
  }
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007124:	3b01      	subs	r3, #1
 8007126:	2b02      	cmp	r3, #2
 8007128:	d80b      	bhi.n	8007142 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	885b      	ldrh	r3, [r3, #2]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d10c      	bne.n	800714c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f90f 	bl	800735e <USBD_CtlSendStatus>
      }
      break;
 8007140:	e004      	b.n	800714c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f842 	bl	80071ce <USBD_CtlError>
      break;
 800714a:	e000      	b.n	800714e <USBD_ClrFeature+0x3a>
      break;
 800714c:	bf00      	nop
  }
}
 800714e:	bf00      	nop
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781a      	ldrb	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	785a      	ldrb	r2, [r3, #1]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	3302      	adds	r3, #2
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	b29a      	uxth	r2, r3
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	3303      	adds	r3, #3
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b29b      	uxth	r3, r3
 8007180:	021b      	lsls	r3, r3, #8
 8007182:	b29b      	uxth	r3, r3
 8007184:	4413      	add	r3, r2
 8007186:	b29a      	uxth	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	3304      	adds	r3, #4
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	b29a      	uxth	r2, r3
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	3305      	adds	r3, #5
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	b29b      	uxth	r3, r3
 800719c:	021b      	lsls	r3, r3, #8
 800719e:	b29b      	uxth	r3, r3
 80071a0:	4413      	add	r3, r2
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	3306      	adds	r3, #6
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	3307      	adds	r3, #7
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	021b      	lsls	r3, r3, #8
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	4413      	add	r3, r2
 80071be:	b29a      	uxth	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	80da      	strh	r2, [r3, #6]

}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bc80      	pop	{r7}
 80071cc:	4770      	bx	lr

080071ce <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80071d8:	2180      	movs	r1, #128	; 0x80
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fc74 	bl	8007ac8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80071e0:	2100      	movs	r1, #0
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fc70 	bl	8007ac8 <USBD_LL_StallEP>
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d032      	beq.n	800726c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 f834 	bl	8007274 <USBD_GetLen>
 800720c:	4603      	mov	r3, r0
 800720e:	3301      	adds	r3, #1
 8007210:	b29b      	uxth	r3, r3
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	b29a      	uxth	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	75fa      	strb	r2, [r7, #23]
 8007220:	461a      	mov	r2, r3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	4413      	add	r3, r2
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	7812      	ldrb	r2, [r2, #0]
 800722a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	75fa      	strb	r2, [r7, #23]
 8007232:	461a      	mov	r2, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4413      	add	r3, r2
 8007238:	2203      	movs	r2, #3
 800723a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800723c:	e012      	b.n	8007264 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	60fa      	str	r2, [r7, #12]
 8007244:	7dfa      	ldrb	r2, [r7, #23]
 8007246:	1c51      	adds	r1, r2, #1
 8007248:	75f9      	strb	r1, [r7, #23]
 800724a:	4611      	mov	r1, r2
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	440a      	add	r2, r1
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	75fa      	strb	r2, [r7, #23]
 800725a:	461a      	mov	r2, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	4413      	add	r3, r2
 8007260:	2200      	movs	r2, #0
 8007262:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e8      	bne.n	800723e <USBD_GetString+0x4e>
    }
  }
}
 800726c:	bf00      	nop
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007280:	e005      	b.n	800728e <USBD_GetLen+0x1a>
  {
    len++;
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	3301      	adds	r3, #1
 8007286:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	3301      	adds	r3, #1
 800728c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1f5      	bne.n	8007282 <USBD_GetLen+0xe>
  }

  return len;
 8007296:	7bfb      	ldrb	r3, [r7, #15]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr

080072a2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	4613      	mov	r3, r2
 80072ae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80072b8:	88fa      	ldrh	r2, [r7, #6]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80072be:	88fa      	ldrh	r2, [r7, #6]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072c4:	88fb      	ldrh	r3, [r7, #6]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	2100      	movs	r1, #0
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 fc85 	bl	8007bda <USBD_LL_Transmit>

  return USBD_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	4613      	mov	r3, r2
 80072e6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072e8:	88fb      	ldrh	r3, [r7, #6]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	2100      	movs	r1, #0
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 fc73 	bl	8007bda <USBD_LL_Transmit>

  return USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	4613      	mov	r3, r2
 800730a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2203      	movs	r2, #3
 8007310:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007314:	88fa      	ldrh	r2, [r7, #6]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800731c:	88fa      	ldrh	r2, [r7, #6]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007324:	88fb      	ldrh	r3, [r7, #6]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	2100      	movs	r1, #0
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 fc78 	bl	8007c20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	4613      	mov	r3, r2
 8007346:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007348:	88fb      	ldrh	r3, [r7, #6]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	2100      	movs	r1, #0
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 fc66 	bl	8007c20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2204      	movs	r2, #4
 800736a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800736e:	2300      	movs	r3, #0
 8007370:	2200      	movs	r2, #0
 8007372:	2100      	movs	r1, #0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fc30 	bl	8007bda <USBD_LL_Transmit>

  return USBD_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2205      	movs	r2, #5
 8007390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007394:	2300      	movs	r3, #0
 8007396:	2200      	movs	r2, #0
 8007398:	2100      	movs	r1, #0
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fc40 	bl	8007c20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073b0:	2200      	movs	r2, #0
 80073b2:	4912      	ldr	r1, [pc, #72]	; (80073fc <MX_USB_DEVICE_Init+0x50>)
 80073b4:	4812      	ldr	r0, [pc, #72]	; (8007400 <MX_USB_DEVICE_Init+0x54>)
 80073b6:	f7fe ff5e 	bl	8006276 <USBD_Init>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80073c0:	f7f8 ffc0 	bl	8000344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80073c4:	490f      	ldr	r1, [pc, #60]	; (8007404 <MX_USB_DEVICE_Init+0x58>)
 80073c6:	480e      	ldr	r0, [pc, #56]	; (8007400 <MX_USB_DEVICE_Init+0x54>)
 80073c8:	f7fe ff80 	bl	80062cc <USBD_RegisterClass>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80073d2:	f7f8 ffb7 	bl	8000344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80073d6:	490c      	ldr	r1, [pc, #48]	; (8007408 <MX_USB_DEVICE_Init+0x5c>)
 80073d8:	4809      	ldr	r0, [pc, #36]	; (8007400 <MX_USB_DEVICE_Init+0x54>)
 80073da:	f7fe feb1 	bl	8006140 <USBD_CDC_RegisterInterface>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80073e4:	f7f8 ffae 	bl	8000344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80073e8:	4805      	ldr	r0, [pc, #20]	; (8007400 <MX_USB_DEVICE_Init+0x54>)
 80073ea:	f7fe ff88 	bl	80062fe <USBD_Start>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80073f4:	f7f8 ffa6 	bl	8000344 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80073f8:	bf00      	nop
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	2000012c 	.word	0x2000012c
 8007400:	20000444 	.word	0x20000444
 8007404:	20000018 	.word	0x20000018
 8007408:	2000011c 	.word	0x2000011c

0800740c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007410:	2200      	movs	r2, #0
 8007412:	4905      	ldr	r1, [pc, #20]	; (8007428 <CDC_Init_FS+0x1c>)
 8007414:	4805      	ldr	r0, [pc, #20]	; (800742c <CDC_Init_FS+0x20>)
 8007416:	f7fe fea9 	bl	800616c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800741a:	4905      	ldr	r1, [pc, #20]	; (8007430 <CDC_Init_FS+0x24>)
 800741c:	4803      	ldr	r0, [pc, #12]	; (800742c <CDC_Init_FS+0x20>)
 800741e:	f7fe febe 	bl	800619e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007422:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007424:	4618      	mov	r0, r3
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20000af0 	.word	0x20000af0
 800742c:	20000444 	.word	0x20000444
 8007430:	20000708 	.word	0x20000708

08007434 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007434:	b480      	push	{r7}
 8007436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007438:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800743a:	4618      	mov	r0, r3
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr
	...

08007444 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	71fb      	strb	r3, [r7, #7]
 8007450:	4613      	mov	r3, r2
 8007452:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	2b23      	cmp	r3, #35	; 0x23
 8007458:	d84a      	bhi.n	80074f0 <CDC_Control_FS+0xac>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <CDC_Control_FS+0x1c>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	080074f1 	.word	0x080074f1
 8007464:	080074f1 	.word	0x080074f1
 8007468:	080074f1 	.word	0x080074f1
 800746c:	080074f1 	.word	0x080074f1
 8007470:	080074f1 	.word	0x080074f1
 8007474:	080074f1 	.word	0x080074f1
 8007478:	080074f1 	.word	0x080074f1
 800747c:	080074f1 	.word	0x080074f1
 8007480:	080074f1 	.word	0x080074f1
 8007484:	080074f1 	.word	0x080074f1
 8007488:	080074f1 	.word	0x080074f1
 800748c:	080074f1 	.word	0x080074f1
 8007490:	080074f1 	.word	0x080074f1
 8007494:	080074f1 	.word	0x080074f1
 8007498:	080074f1 	.word	0x080074f1
 800749c:	080074f1 	.word	0x080074f1
 80074a0:	080074f1 	.word	0x080074f1
 80074a4:	080074f1 	.word	0x080074f1
 80074a8:	080074f1 	.word	0x080074f1
 80074ac:	080074f1 	.word	0x080074f1
 80074b0:	080074f1 	.word	0x080074f1
 80074b4:	080074f1 	.word	0x080074f1
 80074b8:	080074f1 	.word	0x080074f1
 80074bc:	080074f1 	.word	0x080074f1
 80074c0:	080074f1 	.word	0x080074f1
 80074c4:	080074f1 	.word	0x080074f1
 80074c8:	080074f1 	.word	0x080074f1
 80074cc:	080074f1 	.word	0x080074f1
 80074d0:	080074f1 	.word	0x080074f1
 80074d4:	080074f1 	.word	0x080074f1
 80074d8:	080074f1 	.word	0x080074f1
 80074dc:	080074f1 	.word	0x080074f1
 80074e0:	080074f1 	.word	0x080074f1
 80074e4:	080074f1 	.word	0x080074f1
 80074e8:	080074f1 	.word	0x080074f1
 80074ec:	080074f1 	.word	0x080074f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80074f0:	bf00      	nop
  }

  return (USBD_OK);
 80074f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bc80      	pop	{r7}
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop

08007500 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	4812      	ldr	r0, [pc, #72]	; (8007558 <CDC_Receive_FS+0x58>)
 800750e:	f7fe fe46 	bl	800619e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007512:	4811      	ldr	r0, [pc, #68]	; (8007558 <CDC_Receive_FS+0x58>)
 8007514:	f7fe fe85 	bl	8006222 <USBD_CDC_ReceivePacket>

	memset (buffer, '\0', 64);  // clear the buffer
 8007518:	2240      	movs	r2, #64	; 0x40
 800751a:	2100      	movs	r1, #0
 800751c:	480f      	ldr	r0, [pc, #60]	; (800755c <CDC_Receive_FS+0x5c>)
 800751e:	f000 fc33 	bl	8007d88 <memset>
	uint8_t len = (uint8_t)*Len;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	73fb      	strb	r3, [r7, #15]
	length_of_packet = len;
 8007528:	4a0d      	ldr	r2, [pc, #52]	; (8007560 <CDC_Receive_FS+0x60>)
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	7013      	strb	r3, [r2, #0]
	COMdataAvailable = 1;
 800752e:	4b0d      	ldr	r3, [pc, #52]	; (8007564 <CDC_Receive_FS+0x64>)
 8007530:	2201      	movs	r2, #1
 8007532:	701a      	strb	r2, [r3, #0]
	memcpy(buffer, Buf, len);  // copy the data to the buffer
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	461a      	mov	r2, r3
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	4808      	ldr	r0, [pc, #32]	; (800755c <CDC_Receive_FS+0x5c>)
 800753c:	f000 fc16 	bl	8007d6c <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	461a      	mov	r2, r3
 8007544:	2100      	movs	r1, #0
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fc1e 	bl	8007d88 <memset>

	return (USBD_OK);
 800754c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20000444 	.word	0x20000444
 800755c:	20000400 	.word	0x20000400
 8007560:	20000198 	.word	0x20000198
 8007564:	20000199 	.word	0x20000199

08007568 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007578:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <CDC_Transmit_FS+0x48>)
 800757a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800758a:	2301      	movs	r3, #1
 800758c:	e00b      	b.n	80075a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800758e:	887b      	ldrh	r3, [r7, #2]
 8007590:	461a      	mov	r2, r3
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	4806      	ldr	r0, [pc, #24]	; (80075b0 <CDC_Transmit_FS+0x48>)
 8007596:	f7fe fde9 	bl	800616c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800759a:	4805      	ldr	r0, [pc, #20]	; (80075b0 <CDC_Transmit_FS+0x48>)
 800759c:	f7fe fe12 	bl	80061c4 <USBD_CDC_TransmitPacket>
 80075a0:	4603      	mov	r3, r0
 80075a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000444 	.word	0x20000444

080075b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	6039      	str	r1, [r7, #0]
 80075be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2212      	movs	r2, #18
 80075c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80075c6:	4b03      	ldr	r3, [pc, #12]	; (80075d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000148 	.word	0x20000148

080075d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	6039      	str	r1, [r7, #0]
 80075e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2204      	movs	r2, #4
 80075e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80075ea:	4b03      	ldr	r3, [pc, #12]	; (80075f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bc80      	pop	{r7}
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	2000015c 	.word	0x2000015c

080075fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	6039      	str	r1, [r7, #0]
 8007606:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d105      	bne.n	800761a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	4907      	ldr	r1, [pc, #28]	; (8007630 <USBD_FS_ProductStrDescriptor+0x34>)
 8007612:	4808      	ldr	r0, [pc, #32]	; (8007634 <USBD_FS_ProductStrDescriptor+0x38>)
 8007614:	f7ff fdec 	bl	80071f0 <USBD_GetString>
 8007618:	e004      	b.n	8007624 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	4904      	ldr	r1, [pc, #16]	; (8007630 <USBD_FS_ProductStrDescriptor+0x34>)
 800761e:	4805      	ldr	r0, [pc, #20]	; (8007634 <USBD_FS_ProductStrDescriptor+0x38>)
 8007620:	f7ff fde6 	bl	80071f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007624:	4b02      	ldr	r3, [pc, #8]	; (8007630 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007626:	4618      	mov	r0, r3
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20000ed8 	.word	0x20000ed8
 8007634:	08007dc0 	.word	0x08007dc0

08007638 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	6039      	str	r1, [r7, #0]
 8007642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	4904      	ldr	r1, [pc, #16]	; (8007658 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007648:	4804      	ldr	r0, [pc, #16]	; (800765c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800764a:	f7ff fdd1 	bl	80071f0 <USBD_GetString>
  return USBD_StrDesc;
 800764e:	4b02      	ldr	r3, [pc, #8]	; (8007658 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	20000ed8 	.word	0x20000ed8
 800765c:	08007dd8 	.word	0x08007dd8

08007660 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	6039      	str	r1, [r7, #0]
 800766a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	221a      	movs	r2, #26
 8007670:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007672:	f000 f843 	bl	80076fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007676:	4b02      	ldr	r3, [pc, #8]	; (8007680 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000160 	.word	0x20000160

08007684 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	6039      	str	r1, [r7, #0]
 800768e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d105      	bne.n	80076a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	4907      	ldr	r1, [pc, #28]	; (80076b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800769a:	4808      	ldr	r0, [pc, #32]	; (80076bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800769c:	f7ff fda8 	bl	80071f0 <USBD_GetString>
 80076a0:	e004      	b.n	80076ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	4904      	ldr	r1, [pc, #16]	; (80076b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076a6:	4805      	ldr	r0, [pc, #20]	; (80076bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80076a8:	f7ff fda2 	bl	80071f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076ac:	4b02      	ldr	r3, [pc, #8]	; (80076b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20000ed8 	.word	0x20000ed8
 80076bc:	08007dec 	.word	0x08007dec

080076c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4603      	mov	r3, r0
 80076c8:	6039      	str	r1, [r7, #0]
 80076ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d105      	bne.n	80076de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	4907      	ldr	r1, [pc, #28]	; (80076f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076d6:	4808      	ldr	r0, [pc, #32]	; (80076f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076d8:	f7ff fd8a 	bl	80071f0 <USBD_GetString>
 80076dc:	e004      	b.n	80076e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	4904      	ldr	r1, [pc, #16]	; (80076f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076e2:	4805      	ldr	r0, [pc, #20]	; (80076f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076e4:	f7ff fd84 	bl	80071f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076e8:	4b02      	ldr	r3, [pc, #8]	; (80076f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20000ed8 	.word	0x20000ed8
 80076f8:	08007df8 	.word	0x08007df8

080076fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <Get_SerialNum+0x44>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007708:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <Get_SerialNum+0x48>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800770e:	4b0e      	ldr	r3, [pc, #56]	; (8007748 <Get_SerialNum+0x4c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4413      	add	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d009      	beq.n	8007736 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007722:	2208      	movs	r2, #8
 8007724:	4909      	ldr	r1, [pc, #36]	; (800774c <Get_SerialNum+0x50>)
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f814 	bl	8007754 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800772c:	2204      	movs	r2, #4
 800772e:	4908      	ldr	r1, [pc, #32]	; (8007750 <Get_SerialNum+0x54>)
 8007730:	68b8      	ldr	r0, [r7, #8]
 8007732:	f000 f80f 	bl	8007754 <IntToUnicode>
  }
}
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	1ffff7e8 	.word	0x1ffff7e8
 8007744:	1ffff7ec 	.word	0x1ffff7ec
 8007748:	1ffff7f0 	.word	0x1ffff7f0
 800774c:	20000162 	.word	0x20000162
 8007750:	20000172 	.word	0x20000172

08007754 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007766:	2300      	movs	r3, #0
 8007768:	75fb      	strb	r3, [r7, #23]
 800776a:	e027      	b.n	80077bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	0f1b      	lsrs	r3, r3, #28
 8007770:	2b09      	cmp	r3, #9
 8007772:	d80b      	bhi.n	800778c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	0f1b      	lsrs	r3, r3, #28
 8007778:	b2da      	uxtb	r2, r3
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	4619      	mov	r1, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	440b      	add	r3, r1
 8007784:	3230      	adds	r2, #48	; 0x30
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	e00a      	b.n	80077a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	0f1b      	lsrs	r3, r3, #28
 8007790:	b2da      	uxtb	r2, r3
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	4619      	mov	r1, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	440b      	add	r3, r1
 800779c:	3237      	adds	r2, #55	; 0x37
 800779e:	b2d2      	uxtb	r2, r2
 80077a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077a8:	7dfb      	ldrb	r3, [r7, #23]
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	3301      	adds	r3, #1
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4413      	add	r3, r2
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	3301      	adds	r3, #1
 80077ba:	75fb      	strb	r3, [r7, #23]
 80077bc:	7dfa      	ldrb	r2, [r7, #23]
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d3d3      	bcc.n	800776c <IntToUnicode+0x18>
  }
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bc80      	pop	{r7}
 80077ce:	4770      	bx	lr

080077d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a0d      	ldr	r2, [pc, #52]	; (8007814 <HAL_PCD_MspInit+0x44>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d113      	bne.n	800780a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80077e2:	4b0d      	ldr	r3, [pc, #52]	; (8007818 <HAL_PCD_MspInit+0x48>)
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	4a0c      	ldr	r2, [pc, #48]	; (8007818 <HAL_PCD_MspInit+0x48>)
 80077e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077ec:	61d3      	str	r3, [r2, #28]
 80077ee:	4b0a      	ldr	r3, [pc, #40]	; (8007818 <HAL_PCD_MspInit+0x48>)
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80077fa:	2200      	movs	r2, #0
 80077fc:	2100      	movs	r1, #0
 80077fe:	2014      	movs	r0, #20
 8007800:	f7f8 ffcd 	bl	800079e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007804:	2014      	movs	r0, #20
 8007806:	f7f8 ffe6 	bl	80007d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	40005c00 	.word	0x40005c00
 8007818:	40021000 	.word	0x40021000

0800781c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f7fe fdab 	bl	800638e <USBD_LL_SetupStage>
}
 8007838:	bf00      	nop
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007852:	78fa      	ldrb	r2, [r7, #3]
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	440b      	add	r3, r1
 8007860:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	4619      	mov	r1, r3
 800786a:	f7fe fddd 	bl	8006428 <USBD_LL_DataOutStage>
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	460b      	mov	r3, r1
 8007880:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007888:	78fa      	ldrb	r2, [r7, #3]
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	4613      	mov	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	440b      	add	r3, r1
 8007896:	333c      	adds	r3, #60	; 0x3c
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	78fb      	ldrb	r3, [r7, #3]
 800789c:	4619      	mov	r1, r3
 800789e:	f7fe fe34 	bl	800650a <USBD_LL_DataInStage>
}
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe ff44 	bl	8006746 <USBD_LL_SOF>
}
 80078be:	bf00      	nop
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078ce:	2301      	movs	r3, #1
 80078d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d001      	beq.n	80078de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80078da:	f7f8 fd33 	bl	8000344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80078e4:	7bfa      	ldrb	r2, [r7, #15]
 80078e6:	4611      	mov	r1, r2
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fe fef4 	bl	80066d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fe fead 	bl	8006654 <USBD_LL_Reset>
}
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe feee 	bl	80066f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d005      	beq.n	800792c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007920:	4b04      	ldr	r3, [pc, #16]	; (8007934 <HAL_PCD_SuspendCallback+0x30>)
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	4a03      	ldr	r2, [pc, #12]	; (8007934 <HAL_PCD_SuspendCallback+0x30>)
 8007926:	f043 0306 	orr.w	r3, r3, #6
 800792a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	e000ed00 	.word	0xe000ed00

08007938 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fee8 	bl	800671c <USBD_LL_Resume>
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800795c:	4a28      	ldr	r2, [pc, #160]	; (8007a00 <USBD_LL_Init+0xac>)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a26      	ldr	r2, [pc, #152]	; (8007a00 <USBD_LL_Init+0xac>)
 8007968:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800796c:	4b24      	ldr	r3, [pc, #144]	; (8007a00 <USBD_LL_Init+0xac>)
 800796e:	4a25      	ldr	r2, [pc, #148]	; (8007a04 <USBD_LL_Init+0xb0>)
 8007970:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007972:	4b23      	ldr	r3, [pc, #140]	; (8007a00 <USBD_LL_Init+0xac>)
 8007974:	2208      	movs	r2, #8
 8007976:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007978:	4b21      	ldr	r3, [pc, #132]	; (8007a00 <USBD_LL_Init+0xac>)
 800797a:	2202      	movs	r2, #2
 800797c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800797e:	4b20      	ldr	r3, [pc, #128]	; (8007a00 <USBD_LL_Init+0xac>)
 8007980:	2200      	movs	r2, #0
 8007982:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007984:	4b1e      	ldr	r3, [pc, #120]	; (8007a00 <USBD_LL_Init+0xac>)
 8007986:	2200      	movs	r2, #0
 8007988:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800798a:	4b1d      	ldr	r3, [pc, #116]	; (8007a00 <USBD_LL_Init+0xac>)
 800798c:	2200      	movs	r2, #0
 800798e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007990:	481b      	ldr	r0, [pc, #108]	; (8007a00 <USBD_LL_Init+0xac>)
 8007992:	f7f9 f97d 	bl	8000c90 <HAL_PCD_Init>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800799c:	f7f8 fcd2 	bl	8000344 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079a6:	2318      	movs	r3, #24
 80079a8:	2200      	movs	r2, #0
 80079aa:	2100      	movs	r1, #0
 80079ac:	f7fa fdf3 	bl	8002596 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079b6:	2358      	movs	r3, #88	; 0x58
 80079b8:	2200      	movs	r2, #0
 80079ba:	2180      	movs	r1, #128	; 0x80
 80079bc:	f7fa fdeb 	bl	8002596 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079c6:	23c0      	movs	r3, #192	; 0xc0
 80079c8:	2200      	movs	r2, #0
 80079ca:	2181      	movs	r1, #129	; 0x81
 80079cc:	f7fa fde3 	bl	8002596 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80079da:	2200      	movs	r2, #0
 80079dc:	2101      	movs	r1, #1
 80079de:	f7fa fdda 	bl	8002596 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079ec:	2200      	movs	r2, #0
 80079ee:	2182      	movs	r1, #130	; 0x82
 80079f0:	f7fa fdd1 	bl	8002596 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	200010d8 	.word	0x200010d8
 8007a04:	40005c00 	.word	0x40005c00

08007a08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7f9 fa41 	bl	8000ea6 <HAL_PCD_Start>
 8007a24:	4603      	mov	r3, r0
 8007a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 f94e 	bl	8007ccc <USBD_Get_USB_Status>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	4608      	mov	r0, r1
 8007a48:	4611      	mov	r1, r2
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	70fb      	strb	r3, [r7, #3]
 8007a50:	460b      	mov	r3, r1
 8007a52:	70bb      	strb	r3, [r7, #2]
 8007a54:	4613      	mov	r3, r2
 8007a56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a66:	78bb      	ldrb	r3, [r7, #2]
 8007a68:	883a      	ldrh	r2, [r7, #0]
 8007a6a:	78f9      	ldrb	r1, [r7, #3]
 8007a6c:	f7f9 fbbb 	bl	80011e6 <HAL_PCD_EP_Open>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 f928 	bl	8007ccc <USBD_Get_USB_Status>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	460b      	mov	r3, r1
 8007a94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aa4:	78fa      	ldrb	r2, [r7, #3]
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7f9 fc02 	bl	80012b2 <HAL_PCD_EP_Close>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 f909 	bl	8007ccc <USBD_Get_USB_Status>
 8007aba:	4603      	mov	r3, r0
 8007abc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ae2:	78fa      	ldrb	r2, [r7, #3]
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7f9 fcc2 	bl	8001470 <HAL_PCD_EP_SetStall>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 f8ea 	bl	8007ccc <USBD_Get_USB_Status>
 8007af8:	4603      	mov	r3, r0
 8007afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7f9 fd03 	bl	8001530 <HAL_PCD_EP_ClrStall>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 f8cb 	bl	8007ccc <USBD_Get_USB_Status>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	da0c      	bge.n	8007b7a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b66:	68f9      	ldr	r1, [r7, #12]
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	00db      	lsls	r3, r3, #3
 8007b72:	440b      	add	r3, r1
 8007b74:	3302      	adds	r3, #2
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	e00b      	b.n	8007b92 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007b7a:	78fb      	ldrb	r3, [r7, #3]
 8007b7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b80:	68f9      	ldr	r1, [r7, #12]
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	00db      	lsls	r3, r3, #3
 8007b8a:	440b      	add	r3, r1
 8007b8c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007b90:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bc80      	pop	{r7}
 8007b9a:	4770      	bx	lr

08007b9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bb6:	78fa      	ldrb	r2, [r7, #3]
 8007bb8:	4611      	mov	r1, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7f9 faee 	bl	800119c <HAL_PCD_SetAddress>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 f880 	bl	8007ccc <USBD_Get_USB_Status>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b086      	sub	sp, #24
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	607a      	str	r2, [r7, #4]
 8007be4:	461a      	mov	r2, r3
 8007be6:	460b      	mov	r3, r1
 8007be8:	72fb      	strb	r3, [r7, #11]
 8007bea:	4613      	mov	r3, r2
 8007bec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007bfc:	893b      	ldrh	r3, [r7, #8]
 8007bfe:	7af9      	ldrb	r1, [r7, #11]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	f7f9 fbf2 	bl	80013ea <HAL_PCD_EP_Transmit>
 8007c06:	4603      	mov	r3, r0
 8007c08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f000 f85d 	bl	8007ccc <USBD_Get_USB_Status>
 8007c12:	4603      	mov	r3, r0
 8007c14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c16:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3718      	adds	r7, #24
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	607a      	str	r2, [r7, #4]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	72fb      	strb	r3, [r7, #11]
 8007c30:	4613      	mov	r3, r2
 8007c32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c42:	893b      	ldrh	r3, [r7, #8]
 8007c44:	7af9      	ldrb	r1, [r7, #11]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	f7f9 fb7b 	bl	8001342 <HAL_PCD_EP_Receive>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 f83a 	bl	8007ccc <USBD_Get_USB_Status>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c78:	78fa      	ldrb	r2, [r7, #3]
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7f9 fb9d 	bl	80013bc <HAL_PCD_EP_GetRxCount>
 8007c82:	4603      	mov	r3, r0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007c94:	4b02      	ldr	r3, [pc, #8]	; (8007ca0 <USBD_static_malloc+0x14>)
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bc80      	pop	{r7}
 8007c9e:	4770      	bx	lr
 8007ca0:	2000019c 	.word	0x2000019c

08007ca4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]

}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr

08007cb6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007cc2:	bf00      	nop
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bc80      	pop	{r7}
 8007cca:	4770      	bx	lr

08007ccc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d817      	bhi.n	8007d10 <USBD_Get_USB_Status+0x44>
 8007ce0:	a201      	add	r2, pc, #4	; (adr r2, 8007ce8 <USBD_Get_USB_Status+0x1c>)
 8007ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce6:	bf00      	nop
 8007ce8:	08007cf9 	.word	0x08007cf9
 8007cec:	08007cff 	.word	0x08007cff
 8007cf0:	08007d05 	.word	0x08007d05
 8007cf4:	08007d0b 	.word	0x08007d0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8007cfc:	e00b      	b.n	8007d16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007cfe:	2302      	movs	r3, #2
 8007d00:	73fb      	strb	r3, [r7, #15]
    break;
 8007d02:	e008      	b.n	8007d16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d04:	2301      	movs	r3, #1
 8007d06:	73fb      	strb	r3, [r7, #15]
    break;
 8007d08:	e005      	b.n	8007d16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d0e:	e002      	b.n	8007d16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d10:	2302      	movs	r3, #2
 8007d12:	73fb      	strb	r3, [r7, #15]
    break;
 8007d14:	bf00      	nop
  }
  return usb_status;
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop

08007d24 <__libc_init_array>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	2600      	movs	r6, #0
 8007d28:	4d0c      	ldr	r5, [pc, #48]	; (8007d5c <__libc_init_array+0x38>)
 8007d2a:	4c0d      	ldr	r4, [pc, #52]	; (8007d60 <__libc_init_array+0x3c>)
 8007d2c:	1b64      	subs	r4, r4, r5
 8007d2e:	10a4      	asrs	r4, r4, #2
 8007d30:	42a6      	cmp	r6, r4
 8007d32:	d109      	bne.n	8007d48 <__libc_init_array+0x24>
 8007d34:	f000 f830 	bl	8007d98 <_init>
 8007d38:	2600      	movs	r6, #0
 8007d3a:	4d0a      	ldr	r5, [pc, #40]	; (8007d64 <__libc_init_array+0x40>)
 8007d3c:	4c0a      	ldr	r4, [pc, #40]	; (8007d68 <__libc_init_array+0x44>)
 8007d3e:	1b64      	subs	r4, r4, r5
 8007d40:	10a4      	asrs	r4, r4, #2
 8007d42:	42a6      	cmp	r6, r4
 8007d44:	d105      	bne.n	8007d52 <__libc_init_array+0x2e>
 8007d46:	bd70      	pop	{r4, r5, r6, pc}
 8007d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d4c:	4798      	blx	r3
 8007d4e:	3601      	adds	r6, #1
 8007d50:	e7ee      	b.n	8007d30 <__libc_init_array+0xc>
 8007d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d56:	4798      	blx	r3
 8007d58:	3601      	adds	r6, #1
 8007d5a:	e7f2      	b.n	8007d42 <__libc_init_array+0x1e>
 8007d5c:	08007e20 	.word	0x08007e20
 8007d60:	08007e20 	.word	0x08007e20
 8007d64:	08007e20 	.word	0x08007e20
 8007d68:	08007e24 	.word	0x08007e24

08007d6c <memcpy>:
 8007d6c:	440a      	add	r2, r1
 8007d6e:	4291      	cmp	r1, r2
 8007d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d74:	d100      	bne.n	8007d78 <memcpy+0xc>
 8007d76:	4770      	bx	lr
 8007d78:	b510      	push	{r4, lr}
 8007d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d7e:	4291      	cmp	r1, r2
 8007d80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d84:	d1f9      	bne.n	8007d7a <memcpy+0xe>
 8007d86:	bd10      	pop	{r4, pc}

08007d88 <memset>:
 8007d88:	4603      	mov	r3, r0
 8007d8a:	4402      	add	r2, r0
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d100      	bne.n	8007d92 <memset+0xa>
 8007d90:	4770      	bx	lr
 8007d92:	f803 1b01 	strb.w	r1, [r3], #1
 8007d96:	e7f9      	b.n	8007d8c <memset+0x4>

08007d98 <_init>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	bf00      	nop
 8007d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9e:	bc08      	pop	{r3}
 8007da0:	469e      	mov	lr, r3
 8007da2:	4770      	bx	lr

08007da4 <_fini>:
 8007da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da6:	bf00      	nop
 8007da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007daa:	bc08      	pop	{r3}
 8007dac:	469e      	mov	lr, r3
 8007dae:	4770      	bx	lr
