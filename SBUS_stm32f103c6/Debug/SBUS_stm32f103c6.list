
SBUS_stm32f103c6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003098  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080031a4  080031a4  000131a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003208  08003208  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003208  08003208  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003208  08003208  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003208  08003208  00013208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000070  08003280  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08003280  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074ca  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001819  00000000  00000000  00027563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  00028d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  00029450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c46  00000000  00000000  00029a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e04  00000000  00000000  000406ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000804ae  00000000  00000000  000484d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c8980  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df0  00000000  00000000  000c89d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800318c 	.word	0x0800318c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800318c 	.word	0x0800318c

0800014c <CalculateSBUS>:
 *      Author: arosl
 */

#include "SBUS.h"

uint16_t CalculateSBUS(uint8_t buf[25], uint16_t CH[18]){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
if (buf[0] == 0x0F) {
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	781b      	ldrb	r3, [r3, #0]
 800015a:	2b0f      	cmp	r3, #15
 800015c:	f040 818d 	bne.w	800047a <CalculateSBUS+0x32e>
		CH[0] = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	3301      	adds	r3, #1
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	b21a      	sxth	r2, r3
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	3302      	adds	r3, #2
 800016c:	781b      	ldrb	r3, [r3, #0]
 800016e:	021b      	lsls	r3, r3, #8
 8000170:	b21b      	sxth	r3, r3
 8000172:	4313      	orrs	r3, r2
 8000174:	b21b      	sxth	r3, r3
 8000176:	b29b      	uxth	r3, r3
 8000178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800017c:	b29a      	uxth	r2, r3
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	801a      	strh	r2, [r3, #0]
		CH[1] = (buf[2] >> 3 | (buf[3] << 5)) & 0x07FF;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	3302      	adds	r3, #2
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	08db      	lsrs	r3, r3, #3
 800018a:	b2db      	uxtb	r3, r3
 800018c:	b21a      	sxth	r2, r3
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	3303      	adds	r3, #3
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	015b      	lsls	r3, r3, #5
 8000196:	b21b      	sxth	r3, r3
 8000198:	4313      	orrs	r3, r2
 800019a:	b21b      	sxth	r3, r3
 800019c:	b29a      	uxth	r2, r3
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	3302      	adds	r3, #2
 80001a2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80001a6:	b292      	uxth	r2, r2
 80001a8:	801a      	strh	r2, [r3, #0]
		CH[2] = (buf[3] >> 6 | (buf[4] << 2) | buf[5] << 10) & 0x07FF;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	3303      	adds	r3, #3
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	099b      	lsrs	r3, r3, #6
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	b21a      	sxth	r2, r3
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	3304      	adds	r3, #4
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	009b      	lsls	r3, r3, #2
 80001be:	b21b      	sxth	r3, r3
 80001c0:	4313      	orrs	r3, r2
 80001c2:	b21a      	sxth	r2, r3
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	3305      	adds	r3, #5
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	029b      	lsls	r3, r3, #10
 80001cc:	b21b      	sxth	r3, r3
 80001ce:	4313      	orrs	r3, r2
 80001d0:	b21b      	sxth	r3, r3
 80001d2:	b29a      	uxth	r2, r3
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	3304      	adds	r3, #4
 80001d8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80001dc:	b292      	uxth	r2, r2
 80001de:	801a      	strh	r2, [r3, #0]
		CH[3] = (buf[5] >> 1 | (buf[6] << 7)) & 0x07FF;
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3305      	adds	r3, #5
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	085b      	lsrs	r3, r3, #1
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	b21a      	sxth	r2, r3
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	3306      	adds	r3, #6
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	01db      	lsls	r3, r3, #7
 80001f4:	b21b      	sxth	r3, r3
 80001f6:	4313      	orrs	r3, r2
 80001f8:	b21b      	sxth	r3, r3
 80001fa:	b29a      	uxth	r2, r3
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	3306      	adds	r3, #6
 8000200:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000204:	b292      	uxth	r2, r2
 8000206:	801a      	strh	r2, [r3, #0]
		CH[4] = (buf[6] >> 4 | (buf[7] << 4)) & 0x07FF;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	3306      	adds	r3, #6
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	091b      	lsrs	r3, r3, #4
 8000210:	b2db      	uxtb	r3, r3
 8000212:	b21a      	sxth	r2, r3
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	3307      	adds	r3, #7
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	011b      	lsls	r3, r3, #4
 800021c:	b21b      	sxth	r3, r3
 800021e:	4313      	orrs	r3, r2
 8000220:	b21b      	sxth	r3, r3
 8000222:	b29a      	uxth	r2, r3
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	3308      	adds	r3, #8
 8000228:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800022c:	b292      	uxth	r2, r2
 800022e:	801a      	strh	r2, [r3, #0]
		CH[5] = (buf[7] >> 7 | (buf[8] << 1) | buf[9] << 9) & 0x07FF;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	3307      	adds	r3, #7
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	09db      	lsrs	r3, r3, #7
 8000238:	b2db      	uxtb	r3, r3
 800023a:	b21a      	sxth	r2, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3308      	adds	r3, #8
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	005b      	lsls	r3, r3, #1
 8000244:	b21b      	sxth	r3, r3
 8000246:	4313      	orrs	r3, r2
 8000248:	b21a      	sxth	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	3309      	adds	r3, #9
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	025b      	lsls	r3, r3, #9
 8000252:	b21b      	sxth	r3, r3
 8000254:	4313      	orrs	r3, r2
 8000256:	b21b      	sxth	r3, r3
 8000258:	b29a      	uxth	r2, r3
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	330a      	adds	r3, #10
 800025e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000262:	b292      	uxth	r2, r2
 8000264:	801a      	strh	r2, [r3, #0]
		CH[6] = (buf[9] >> 2 | (buf[10] << 6)) & 0x07FF;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	3309      	adds	r3, #9
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	089b      	lsrs	r3, r3, #2
 800026e:	b2db      	uxtb	r3, r3
 8000270:	b21a      	sxth	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	330a      	adds	r3, #10
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	019b      	lsls	r3, r3, #6
 800027a:	b21b      	sxth	r3, r3
 800027c:	4313      	orrs	r3, r2
 800027e:	b21b      	sxth	r3, r3
 8000280:	b29a      	uxth	r2, r3
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	330c      	adds	r3, #12
 8000286:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800028a:	b292      	uxth	r2, r2
 800028c:	801a      	strh	r2, [r3, #0]
		CH[7] = (buf[10] >> 5 | (buf[11] << 3)) & 0x07FF;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	330a      	adds	r3, #10
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	095b      	lsrs	r3, r3, #5
 8000296:	b2db      	uxtb	r3, r3
 8000298:	b21a      	sxth	r2, r3
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	330b      	adds	r3, #11
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	b21b      	sxth	r3, r3
 80002a4:	4313      	orrs	r3, r2
 80002a6:	b21b      	sxth	r3, r3
 80002a8:	b29a      	uxth	r2, r3
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	330e      	adds	r3, #14
 80002ae:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80002b2:	b292      	uxth	r2, r2
 80002b4:	801a      	strh	r2, [r3, #0]
		CH[8] = (buf[12] << 0 | (buf[13] << 8)) & 0x07FF;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	330c      	adds	r3, #12
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	b21a      	sxth	r2, r3
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	330d      	adds	r3, #13
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	021b      	lsls	r3, r3, #8
 80002c6:	b21b      	sxth	r3, r3
 80002c8:	4313      	orrs	r3, r2
 80002ca:	b21b      	sxth	r3, r3
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	3310      	adds	r3, #16
 80002d2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80002d6:	b292      	uxth	r2, r2
 80002d8:	801a      	strh	r2, [r3, #0]
		CH[9] = (buf[13] >> 3 | (buf[14] << 5)) & 0x07FF;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	330d      	adds	r3, #13
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	08db      	lsrs	r3, r3, #3
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	b21a      	sxth	r2, r3
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	330e      	adds	r3, #14
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	015b      	lsls	r3, r3, #5
 80002ee:	b21b      	sxth	r3, r3
 80002f0:	4313      	orrs	r3, r2
 80002f2:	b21b      	sxth	r3, r3
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	3312      	adds	r3, #18
 80002fa:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80002fe:	b292      	uxth	r2, r2
 8000300:	801a      	strh	r2, [r3, #0]
		CH[10] = (buf[14] >> 6 | (buf[15] << 2) | buf[16] << 10) & 0x07FF;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	330e      	adds	r3, #14
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	099b      	lsrs	r3, r3, #6
 800030a:	b2db      	uxtb	r3, r3
 800030c:	b21a      	sxth	r2, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	330f      	adds	r3, #15
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	b21b      	sxth	r3, r3
 8000318:	4313      	orrs	r3, r2
 800031a:	b21a      	sxth	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	3310      	adds	r3, #16
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	029b      	lsls	r3, r3, #10
 8000324:	b21b      	sxth	r3, r3
 8000326:	4313      	orrs	r3, r2
 8000328:	b21b      	sxth	r3, r3
 800032a:	b29a      	uxth	r2, r3
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	3314      	adds	r3, #20
 8000330:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000334:	b292      	uxth	r2, r2
 8000336:	801a      	strh	r2, [r3, #0]
		CH[11] = (buf[16] >> 1 | (buf[17] << 7)) & 0x07FF;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3310      	adds	r3, #16
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	085b      	lsrs	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	b21a      	sxth	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3311      	adds	r3, #17
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	01db      	lsls	r3, r3, #7
 800034c:	b21b      	sxth	r3, r3
 800034e:	4313      	orrs	r3, r2
 8000350:	b21b      	sxth	r3, r3
 8000352:	b29a      	uxth	r2, r3
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	3316      	adds	r3, #22
 8000358:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800035c:	b292      	uxth	r2, r2
 800035e:	801a      	strh	r2, [r3, #0]
		CH[12] = (buf[17] >> 4 | (buf[18] << 4)) & 0x07FF;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3311      	adds	r3, #17
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	091b      	lsrs	r3, r3, #4
 8000368:	b2db      	uxtb	r3, r3
 800036a:	b21a      	sxth	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3312      	adds	r3, #18
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	011b      	lsls	r3, r3, #4
 8000374:	b21b      	sxth	r3, r3
 8000376:	4313      	orrs	r3, r2
 8000378:	b21b      	sxth	r3, r3
 800037a:	b29a      	uxth	r2, r3
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	3318      	adds	r3, #24
 8000380:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000384:	b292      	uxth	r2, r2
 8000386:	801a      	strh	r2, [r3, #0]
		CH[13] = (buf[18] >> 7 | (buf[19] << 1) | buf[20] << 9) & 0x07FF;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3312      	adds	r3, #18
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	09db      	lsrs	r3, r3, #7
 8000390:	b2db      	uxtb	r3, r3
 8000392:	b21a      	sxth	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3313      	adds	r3, #19
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	b21b      	sxth	r3, r3
 800039e:	4313      	orrs	r3, r2
 80003a0:	b21a      	sxth	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3314      	adds	r3, #20
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	025b      	lsls	r3, r3, #9
 80003aa:	b21b      	sxth	r3, r3
 80003ac:	4313      	orrs	r3, r2
 80003ae:	b21b      	sxth	r3, r3
 80003b0:	b29a      	uxth	r2, r3
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	331a      	adds	r3, #26
 80003b6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80003ba:	b292      	uxth	r2, r2
 80003bc:	801a      	strh	r2, [r3, #0]
		CH[14] = (buf[20] >> 2 | (buf[21] << 6)) & 0x07FF;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	3314      	adds	r3, #20
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	089b      	lsrs	r3, r3, #2
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	b21a      	sxth	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	3315      	adds	r3, #21
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	019b      	lsls	r3, r3, #6
 80003d2:	b21b      	sxth	r3, r3
 80003d4:	4313      	orrs	r3, r2
 80003d6:	b21b      	sxth	r3, r3
 80003d8:	b29a      	uxth	r2, r3
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	331c      	adds	r3, #28
 80003de:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80003e2:	b292      	uxth	r2, r2
 80003e4:	801a      	strh	r2, [r3, #0]
		CH[15] = (buf[21] >> 5 | (buf[22] << 3)) & 0x07FF;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	3315      	adds	r3, #21
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	095b      	lsrs	r3, r3, #5
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	b21a      	sxth	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3316      	adds	r3, #22
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	b21b      	sxth	r3, r3
 80003fc:	4313      	orrs	r3, r2
 80003fe:	b21b      	sxth	r3, r3
 8000400:	b29a      	uxth	r2, r3
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	331e      	adds	r3, #30
 8000406:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800040a:	b292      	uxth	r2, r2
 800040c:	801a      	strh	r2, [r3, #0]

		if (buf[23] & (1 << 0)) {
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3317      	adds	r3, #23
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	2b00      	cmp	r3, #0
 800041a:	d004      	beq.n	8000426 <CalculateSBUS+0x2da>
			CH[16] = 1;
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	3320      	adds	r3, #32
 8000420:	2201      	movs	r2, #1
 8000422:	801a      	strh	r2, [r3, #0]
 8000424:	e003      	b.n	800042e <CalculateSBUS+0x2e2>
		} else {
			CH[16] = 0;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	3320      	adds	r3, #32
 800042a:	2200      	movs	r2, #0
 800042c:	801a      	strh	r2, [r3, #0]
		}

		if (buf[23] & (1 << 1)) {
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3317      	adds	r3, #23
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	f003 0302 	and.w	r3, r3, #2
 8000438:	2b00      	cmp	r3, #0
 800043a:	d004      	beq.n	8000446 <CalculateSBUS+0x2fa>
			CH[17] = 1;
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	3322      	adds	r3, #34	; 0x22
 8000440:	2201      	movs	r2, #1
 8000442:	801a      	strh	r2, [r3, #0]
 8000444:	e003      	b.n	800044e <CalculateSBUS+0x302>
		} else {
			CH[17] = 0;
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	3322      	adds	r3, #34	; 0x22
 800044a:	2200      	movs	r2, #0
 800044c:	801a      	strh	r2, [r3, #0]
		}

		// Failsafe
		uint16_t failsafe_status = SBUS_SIGNAL_OK;
 800044e:	2300      	movs	r3, #0
 8000450:	81fb      	strh	r3, [r7, #14]
		if (buf[23] & (1 << 2)) {
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3317      	adds	r3, #23
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	f003 0304 	and.w	r3, r3, #4
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <CalculateSBUS+0x318>
			failsafe_status = SBUS_SIGNAL_LOST;
 8000460:	2301      	movs	r3, #1
 8000462:	81fb      	strh	r3, [r7, #14]
		}

		if (buf[23] & (1 << 3)) {
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	3317      	adds	r3, #23
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	f003 0308 	and.w	r3, r3, #8
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <CalculateSBUS+0x32a>
			failsafe_status = SBUS_SIGNAL_FAILSAFE;
 8000472:	2303      	movs	r3, #3
 8000474:	81fb      	strh	r3, [r7, #14]
		}

		//	SBUS_footer=buf[24];

		return(failsafe_status);
 8000476:	89fb      	ldrh	r3, [r7, #14]
 8000478:	e000      	b.n	800047c <CalculateSBUS+0x330>

	}
else{
	return(0);
 800047a:	2300      	movs	r3, #0
}
}
 800047c:	4618      	mov	r0, r3
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
	...

08000488 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]

	if(huart == &huart2){
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <HAL_UART_RxCpltCallback+0x28>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d107      	bne.n	80004a8 <HAL_UART_RxCpltCallback+0x20>
	failsafe_status = CalculateSBUS(buf, CH);
 8000498:	4906      	ldr	r1, [pc, #24]	; (80004b4 <HAL_UART_RxCpltCallback+0x2c>)
 800049a:	4807      	ldr	r0, [pc, #28]	; (80004b8 <HAL_UART_RxCpltCallback+0x30>)
 800049c:	f7ff fe56 	bl	800014c <CalculateSBUS>
 80004a0:	4603      	mov	r3, r0
 80004a2:	461a      	mov	r2, r3
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <HAL_UART_RxCpltCallback+0x34>)
 80004a6:	801a      	strh	r2, [r3, #0]
	}

}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000188 	.word	0x20000188
 80004b4:	20000100 	.word	0x20000100
 80004b8:	2000016c 	.word	0x2000016c
 80004bc:	20000124 	.word	0x20000124

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 faa5 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f83b 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f8f3 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d2:	f000 f8d3 	bl	800067c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004d6:	f000 f8a5 	bl	8000624 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004da:	f000 f879 	bl	80005d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, buf, 25);
 80004de:	2219      	movs	r2, #25
 80004e0:	4911      	ldr	r1, [pc, #68]	; (8000528 <main+0x68>)
 80004e2:	4812      	ldr	r0, [pc, #72]	; (800052c <main+0x6c>)
 80004e4:	f001 fcc9 	bl	8001e7a <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() - time > 200){
 80004e8:	f000 faec 	bl	8000ac4 <HAL_GetTick>
 80004ec:	4602      	mov	r2, r0
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <main+0x70>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	2bc8      	cmp	r3, #200	; 0xc8
 80004f6:	d9f7      	bls.n	80004e8 <main+0x28>
		  time = HAL_GetTick();
 80004f8:	f000 fae4 	bl	8000ac4 <HAL_GetTick>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <main+0x70>)
 8000500:	6013      	str	r3, [r2, #0]
		  snprintf(outbuf, 29, "%d  %d\n", (uint16_t)CH[0], (uint16_t)CH[1]);
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <main+0x74>)
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	461a      	mov	r2, r3
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <main+0x74>)
 800050a:	885b      	ldrh	r3, [r3, #2]
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	4613      	mov	r3, r2
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <main+0x78>)
 8000512:	211d      	movs	r1, #29
 8000514:	4809      	ldr	r0, [pc, #36]	; (800053c <main+0x7c>)
 8000516:	f002 f9eb 	bl	80028f0 <sniprintf>
		  HAL_UART_Transmit_IT(&huart1, (uint8_t*)outbuf, sizeof(outbuf));
 800051a:	221e      	movs	r2, #30
 800051c:	4907      	ldr	r1, [pc, #28]	; (800053c <main+0x7c>)
 800051e:	4808      	ldr	r0, [pc, #32]	; (8000540 <main+0x80>)
 8000520:	f001 fc67 	bl	8001df2 <HAL_UART_Transmit_IT>
	  if(HAL_GetTick() - time > 200){
 8000524:	e7e0      	b.n	80004e8 <main+0x28>
 8000526:	bf00      	nop
 8000528:	2000016c 	.word	0x2000016c
 800052c:	20000188 	.word	0x20000188
 8000530:	200000ac 	.word	0x200000ac
 8000534:	20000100 	.word	0x20000100
 8000538:	080031a4 	.word	0x080031a4
 800053c:	2000008c 	.word	0x2000008c
 8000540:	20000128 	.word	0x20000128

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b090      	sub	sp, #64	; 0x40
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0318 	add.w	r3, r7, #24
 800054e:	2228      	movs	r2, #40	; 0x28
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f002 f9c4 	bl	80028e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000566:	2301      	movs	r3, #1
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000582:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0318 	add.w	r3, r7, #24
 800058c:	4618      	mov	r0, r3
 800058e:	f000 ffc9 	bl	8001524 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000598:	f000 f8b0 	bl	80006fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2102      	movs	r1, #2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fa34 	bl	8001a24 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005c2:	f000 f89b 	bl	80006fc <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3740      	adds	r7, #64	; 0x40
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_USART1_UART_Init+0x4c>)
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_USART1_UART_Init+0x50>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <MX_USART1_UART_Init+0x4c>)
 80005dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_USART1_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_USART1_UART_Init+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_USART1_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_USART1_UART_Init+0x4c>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_USART1_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_USART1_UART_Init+0x4c>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_USART1_UART_Init+0x4c>)
 8000608:	f001 fba6 	bl	8001d58 <HAL_UART_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000612:	f000 f873 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000128 	.word	0x20000128
 8000620:	40013800 	.word	0x40013800

08000624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_USART2_UART_Init+0x50>)
 800062c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000630:	4a11      	ldr	r2, [pc, #68]	; (8000678 <MX_USART2_UART_Init+0x54>)
 8000632:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800063c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000648:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800064c:	2204      	movs	r2, #4
 800064e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800065e:	f001 fb7b 	bl	8001d58 <HAL_UART_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000668:	f000 f848 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000188 	.word	0x20000188
 8000674:	40004400 	.word	0x40004400
 8000678:	000186a0 	.word	0x000186a0

0800067c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_DMA_Init+0x38>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <MX_DMA_Init+0x38>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_DMA_Init+0x38>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2010      	movs	r0, #16
 80006a0:	f000 faf1 	bl	8000c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006a4:	2010      	movs	r0, #16
 80006a6:	f000 fb0a 	bl	8000cbe <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_GPIO_Init+0x40>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <MX_GPIO_Init+0x40>)
 80006c4:	f043 0320 	orr.w	r3, r3, #32
 80006c8:	6193      	str	r3, [r2, #24]
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_GPIO_Init+0x40>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f003 0320 	and.w	r3, r3, #32
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_GPIO_Init+0x40>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <MX_GPIO_Init+0x40>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6193      	str	r3, [r2, #24]
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <MX_GPIO_Init+0x40>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	40021000 	.word	0x40021000

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	e7fe      	b.n	8000704 <Error_Handler+0x8>
	...

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_MspInit+0x5c>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <HAL_MspInit+0x5c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6193      	str	r3, [r2, #24]
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_MspInit+0x5c>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_MspInit+0x5c>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <HAL_MspInit+0x5c>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	61d3      	str	r3, [r2, #28]
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_MspInit+0x5c>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_MspInit+0x60>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <HAL_MspInit+0x60>)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40021000 	.word	0x40021000
 8000768:	40010000 	.word	0x40010000

0800076c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0318 	add.w	r3, r7, #24
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a4e      	ldr	r2, [pc, #312]	; (80008c0 <HAL_UART_MspInit+0x154>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d13a      	bne.n	8000802 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800078c:	4b4d      	ldr	r3, [pc, #308]	; (80008c4 <HAL_UART_MspInit+0x158>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a4c      	ldr	r2, [pc, #304]	; (80008c4 <HAL_UART_MspInit+0x158>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b4a      	ldr	r3, [pc, #296]	; (80008c4 <HAL_UART_MspInit+0x158>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b47      	ldr	r3, [pc, #284]	; (80008c4 <HAL_UART_MspInit+0x158>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a46      	ldr	r2, [pc, #280]	; (80008c4 <HAL_UART_MspInit+0x158>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b44      	ldr	r3, [pc, #272]	; (80008c4 <HAL_UART_MspInit+0x158>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c6:	2303      	movs	r3, #3
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	4619      	mov	r1, r3
 80007d0:	483d      	ldr	r0, [pc, #244]	; (80008c8 <HAL_UART_MspInit+0x15c>)
 80007d2:	f000 fd2d 	bl	8001230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	4619      	mov	r1, r3
 80007ea:	4837      	ldr	r0, [pc, #220]	; (80008c8 <HAL_UART_MspInit+0x15c>)
 80007ec:	f000 fd20 	bl	8001230 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	2025      	movs	r0, #37	; 0x25
 80007f6:	f000 fa46 	bl	8000c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007fa:	2025      	movs	r0, #37	; 0x25
 80007fc:	f000 fa5f 	bl	8000cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000800:	e05a      	b.n	80008b8 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a31      	ldr	r2, [pc, #196]	; (80008cc <HAL_UART_MspInit+0x160>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d155      	bne.n	80008b8 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800080c:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <HAL_UART_MspInit+0x158>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	4a2c      	ldr	r2, [pc, #176]	; (80008c4 <HAL_UART_MspInit+0x158>)
 8000812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000816:	61d3      	str	r3, [r2, #28]
 8000818:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <HAL_UART_MspInit+0x158>)
 800081a:	69db      	ldr	r3, [r3, #28]
 800081c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <HAL_UART_MspInit+0x158>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a26      	ldr	r2, [pc, #152]	; (80008c4 <HAL_UART_MspInit+0x158>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <HAL_UART_MspInit+0x158>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800083c:	2304      	movs	r3, #4
 800083e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0318 	add.w	r3, r7, #24
 800084c:	4619      	mov	r1, r3
 800084e:	481e      	ldr	r0, [pc, #120]	; (80008c8 <HAL_UART_MspInit+0x15c>)
 8000850:	f000 fcee 	bl	8001230 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000854:	2308      	movs	r3, #8
 8000856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	4619      	mov	r1, r3
 8000866:	4818      	ldr	r0, [pc, #96]	; (80008c8 <HAL_UART_MspInit+0x15c>)
 8000868:	f000 fce2 	bl	8001230 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <HAL_UART_MspInit+0x164>)
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <HAL_UART_MspInit+0x168>)
 8000870:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_UART_MspInit+0x164>)
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_UART_MspInit+0x164>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_UART_MspInit+0x164>)
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_UART_MspInit+0x164>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_UART_MspInit+0x164>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_UART_MspInit+0x164>)
 8000892:	2220      	movs	r2, #32
 8000894:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_UART_MspInit+0x164>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <HAL_UART_MspInit+0x164>)
 800089e:	f000 fa29 	bl	8000cf4 <HAL_DMA_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <HAL_UART_MspInit+0x140>
      Error_Handler();
 80008a8:	f7ff ff28 	bl	80006fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_UART_MspInit+0x164>)
 80008b0:	639a      	str	r2, [r3, #56]	; 0x38
 80008b2:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_UART_MspInit+0x164>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	; 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40013800 	.word	0x40013800
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40010800 	.word	0x40010800
 80008cc:	40004400 	.word	0x40004400
 80008d0:	200000bc 	.word	0x200000bc
 80008d4:	4002006c 	.word	0x4002006c

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091e:	f000 f8bf 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <DMA1_Channel6_IRQHandler+0x10>)
 800092e:	f000 fb4b 	bl	8000fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000bc 	.word	0x200000bc

0800093c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <USART1_IRQHandler+0x10>)
 8000942:	f001 facb 	bl	8001edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000128 	.word	0x20000128

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f001 ff84 	bl	800288c <__errno>
 8000984:	4603      	mov	r3, r0
 8000986:	220c      	movs	r2, #12
 8000988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20002800 	.word	0x20002800
 80009b0:	00000400 	.word	0x00000400
 80009b4:	200000b0 	.word	0x200000b0
 80009b8:	200001e0 	.word	0x200001e0

080009bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ca:	490d      	ldr	r1, [pc, #52]	; (8000a00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009e0:	4c0a      	ldr	r4, [pc, #40]	; (8000a0c <LoopFillZerobss+0x22>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ee:	f7ff ffe5 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f001 ff51 	bl	8002898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f6:	f7ff fd63 	bl	80004c0 <main>
  bx lr
 80009fa:	4770      	bx	lr
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a04:	08003210 	.word	0x08003210
  ldr r2, =_sbss
 8000a08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a0c:	200001e0 	.word	0x200001e0

08000a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_2_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_Init+0x28>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_Init+0x28>)
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f923 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f000 f808 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a30:	f7ff fe6a 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40022000 	.word	0x40022000

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x54>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x58>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f93b 	bl	8000cda <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00e      	b.n	8000a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d80a      	bhi.n	8000a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f000 f903 	bl	8000c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_InitTick+0x5c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x1c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a03      	ldr	r2, [pc, #12]	; (8000ac0 <HAL_IncTick+0x20>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	200001cc 	.word	0x200001cc

08000ac4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <HAL_GetTick+0x10>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	200001cc 	.word	0x200001cc

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db0b      	blt.n	8000b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 021f 	and.w	r2, r3, #31
 8000b54:	4906      	ldr	r1, [pc, #24]	; (8000b70 <__NVIC_EnableIRQ+0x34>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	; 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c3c:	d301      	bcc.n	8000c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00f      	b.n	8000c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <SysTick_Config+0x40>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f7ff ff90 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <SysTick_Config+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SysTick_Config+0x40>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff2d 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff42 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff90 	bl	8000bc8 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5f 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff35 	bl	8000b3c <__NVIC_EnableIRQ>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffa2 	bl	8000c2c <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e043      	b.n	8000d92 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <HAL_DMA_Init+0xa8>)
 8000d12:	4413      	add	r3, r2
 8000d14:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <HAL_DMA_Init+0xac>)
 8000d16:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1a:	091b      	lsrs	r3, r3, #4
 8000d1c:	009a      	lsls	r2, r3, #2
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <HAL_DMA_Init+0xb0>)
 8000d26:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d3e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2201      	movs	r2, #1
 8000d84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	bffdfff8 	.word	0xbffdfff8
 8000da0:	cccccccd 	.word	0xcccccccd
 8000da4:	40020000 	.word	0x40020000

08000da8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d101      	bne.n	8000dc8 <HAL_DMA_Start_IT+0x20>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e04a      	b.n	8000e5e <HAL_DMA_Start_IT+0xb6>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d13a      	bne.n	8000e50 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2202      	movs	r2, #2
 8000dde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2200      	movs	r2, #0
 8000de6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 0201 	bic.w	r2, r2, #1
 8000df6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f000 f9e8 	bl	80011d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d008      	beq.n	8000e1e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f042 020e 	orr.w	r2, r2, #14
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e00f      	b.n	8000e3e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0204 	bic.w	r2, r2, #4
 8000e2c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f042 020a 	orr.w	r2, r2, #10
 8000e3c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f042 0201 	orr.w	r2, r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	e005      	b.n	8000e5c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b085      	sub	sp, #20
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d008      	beq.n	8000e8e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2204      	movs	r2, #4
 8000e80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e020      	b.n	8000ed0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 020e 	bic.w	r2, r2, #14
 8000e9c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0201 	bic.w	r2, r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
	...

08000edc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d005      	beq.n	8000efe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e051      	b.n	8000fa2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 020e 	bic.w	r2, r2, #14
 8000f0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 0201 	bic.w	r2, r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a22      	ldr	r2, [pc, #136]	; (8000fac <HAL_DMA_Abort_IT+0xd0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d029      	beq.n	8000f7c <HAL_DMA_Abort_IT+0xa0>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <HAL_DMA_Abort_IT+0xd4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d022      	beq.n	8000f78 <HAL_DMA_Abort_IT+0x9c>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <HAL_DMA_Abort_IT+0xd8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d01a      	beq.n	8000f72 <HAL_DMA_Abort_IT+0x96>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <HAL_DMA_Abort_IT+0xdc>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d012      	beq.n	8000f6c <HAL_DMA_Abort_IT+0x90>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <HAL_DMA_Abort_IT+0xe0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d00a      	beq.n	8000f66 <HAL_DMA_Abort_IT+0x8a>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a1a      	ldr	r2, [pc, #104]	; (8000fc0 <HAL_DMA_Abort_IT+0xe4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d102      	bne.n	8000f60 <HAL_DMA_Abort_IT+0x84>
 8000f5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f5e:	e00e      	b.n	8000f7e <HAL_DMA_Abort_IT+0xa2>
 8000f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f64:	e00b      	b.n	8000f7e <HAL_DMA_Abort_IT+0xa2>
 8000f66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f6a:	e008      	b.n	8000f7e <HAL_DMA_Abort_IT+0xa2>
 8000f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f70:	e005      	b.n	8000f7e <HAL_DMA_Abort_IT+0xa2>
 8000f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f76:	e002      	b.n	8000f7e <HAL_DMA_Abort_IT+0xa2>
 8000f78:	2310      	movs	r3, #16
 8000f7a:	e000      	b.n	8000f7e <HAL_DMA_Abort_IT+0xa2>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <HAL_DMA_Abort_IT+0xe8>)
 8000f80:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	4798      	blx	r3
    } 
  }
  return status;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40020008 	.word	0x40020008
 8000fb0:	4002001c 	.word	0x4002001c
 8000fb4:	40020030 	.word	0x40020030
 8000fb8:	40020044 	.word	0x40020044
 8000fbc:	40020058 	.word	0x40020058
 8000fc0:	4002006c 	.word	0x4002006c
 8000fc4:	40020000 	.word	0x40020000

08000fc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d04f      	beq.n	8001090 <HAL_DMA_IRQHandler+0xc8>
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d04a      	beq.n	8001090 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0320 	and.w	r3, r3, #32
 8001004:	2b00      	cmp	r3, #0
 8001006:	d107      	bne.n	8001018 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0204 	bic.w	r2, r2, #4
 8001016:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a66      	ldr	r2, [pc, #408]	; (80011b8 <HAL_DMA_IRQHandler+0x1f0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d029      	beq.n	8001076 <HAL_DMA_IRQHandler+0xae>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a65      	ldr	r2, [pc, #404]	; (80011bc <HAL_DMA_IRQHandler+0x1f4>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d022      	beq.n	8001072 <HAL_DMA_IRQHandler+0xaa>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a63      	ldr	r2, [pc, #396]	; (80011c0 <HAL_DMA_IRQHandler+0x1f8>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d01a      	beq.n	800106c <HAL_DMA_IRQHandler+0xa4>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a62      	ldr	r2, [pc, #392]	; (80011c4 <HAL_DMA_IRQHandler+0x1fc>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d012      	beq.n	8001066 <HAL_DMA_IRQHandler+0x9e>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a60      	ldr	r2, [pc, #384]	; (80011c8 <HAL_DMA_IRQHandler+0x200>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00a      	beq.n	8001060 <HAL_DMA_IRQHandler+0x98>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a5f      	ldr	r2, [pc, #380]	; (80011cc <HAL_DMA_IRQHandler+0x204>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d102      	bne.n	800105a <HAL_DMA_IRQHandler+0x92>
 8001054:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001058:	e00e      	b.n	8001078 <HAL_DMA_IRQHandler+0xb0>
 800105a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800105e:	e00b      	b.n	8001078 <HAL_DMA_IRQHandler+0xb0>
 8001060:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001064:	e008      	b.n	8001078 <HAL_DMA_IRQHandler+0xb0>
 8001066:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800106a:	e005      	b.n	8001078 <HAL_DMA_IRQHandler+0xb0>
 800106c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001070:	e002      	b.n	8001078 <HAL_DMA_IRQHandler+0xb0>
 8001072:	2340      	movs	r3, #64	; 0x40
 8001074:	e000      	b.n	8001078 <HAL_DMA_IRQHandler+0xb0>
 8001076:	2304      	movs	r3, #4
 8001078:	4a55      	ldr	r2, [pc, #340]	; (80011d0 <HAL_DMA_IRQHandler+0x208>)
 800107a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 8094 	beq.w	80011ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800108e:	e08e      	b.n	80011ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	2202      	movs	r2, #2
 8001096:	409a      	lsls	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4013      	ands	r3, r2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d056      	beq.n	800114e <HAL_DMA_IRQHandler+0x186>
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d051      	beq.n	800114e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0320 	and.w	r3, r3, #32
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10b      	bne.n	80010d0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 020a 	bic.w	r2, r2, #10
 80010c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a38      	ldr	r2, [pc, #224]	; (80011b8 <HAL_DMA_IRQHandler+0x1f0>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d029      	beq.n	800112e <HAL_DMA_IRQHandler+0x166>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a37      	ldr	r2, [pc, #220]	; (80011bc <HAL_DMA_IRQHandler+0x1f4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d022      	beq.n	800112a <HAL_DMA_IRQHandler+0x162>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a35      	ldr	r2, [pc, #212]	; (80011c0 <HAL_DMA_IRQHandler+0x1f8>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01a      	beq.n	8001124 <HAL_DMA_IRQHandler+0x15c>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a34      	ldr	r2, [pc, #208]	; (80011c4 <HAL_DMA_IRQHandler+0x1fc>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d012      	beq.n	800111e <HAL_DMA_IRQHandler+0x156>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a32      	ldr	r2, [pc, #200]	; (80011c8 <HAL_DMA_IRQHandler+0x200>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00a      	beq.n	8001118 <HAL_DMA_IRQHandler+0x150>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a31      	ldr	r2, [pc, #196]	; (80011cc <HAL_DMA_IRQHandler+0x204>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d102      	bne.n	8001112 <HAL_DMA_IRQHandler+0x14a>
 800110c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001110:	e00e      	b.n	8001130 <HAL_DMA_IRQHandler+0x168>
 8001112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001116:	e00b      	b.n	8001130 <HAL_DMA_IRQHandler+0x168>
 8001118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111c:	e008      	b.n	8001130 <HAL_DMA_IRQHandler+0x168>
 800111e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001122:	e005      	b.n	8001130 <HAL_DMA_IRQHandler+0x168>
 8001124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001128:	e002      	b.n	8001130 <HAL_DMA_IRQHandler+0x168>
 800112a:	2320      	movs	r3, #32
 800112c:	e000      	b.n	8001130 <HAL_DMA_IRQHandler+0x168>
 800112e:	2302      	movs	r3, #2
 8001130:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <HAL_DMA_IRQHandler+0x208>)
 8001132:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001140:	2b00      	cmp	r3, #0
 8001142:	d034      	beq.n	80011ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800114c:	e02f      	b.n	80011ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	2208      	movs	r2, #8
 8001154:	409a      	lsls	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4013      	ands	r3, r2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d028      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x1e8>
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	2b00      	cmp	r3, #0
 8001166:	d023      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 020e 	bic.w	r2, r2, #14
 8001176:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001180:	2101      	movs	r1, #1
 8001182:	fa01 f202 	lsl.w	r2, r1, r2
 8001186:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	4798      	blx	r3
    }
  }
  return;
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
}
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40020008 	.word	0x40020008
 80011bc:	4002001c 	.word	0x4002001c
 80011c0:	40020030 	.word	0x40020030
 80011c4:	40020044 	.word	0x40020044
 80011c8:	40020058 	.word	0x40020058
 80011cc:	4002006c 	.word	0x4002006c
 80011d0:	40020000 	.word	0x40020000

080011d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f202 	lsl.w	r2, r1, r2
 80011f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b10      	cmp	r3, #16
 8001200:	d108      	bne.n	8001214 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001212:	e007      	b.n	8001224 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	60da      	str	r2, [r3, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
	...

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b08b      	sub	sp, #44	; 0x2c
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001242:	e148      	b.n	80014d6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001244:	2201      	movs	r2, #1
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	429a      	cmp	r2, r3
 800125e:	f040 8137 	bne.w	80014d0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	4aa3      	ldr	r2, [pc, #652]	; (80014f4 <HAL_GPIO_Init+0x2c4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d05e      	beq.n	800132a <HAL_GPIO_Init+0xfa>
 800126c:	4aa1      	ldr	r2, [pc, #644]	; (80014f4 <HAL_GPIO_Init+0x2c4>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d875      	bhi.n	800135e <HAL_GPIO_Init+0x12e>
 8001272:	4aa1      	ldr	r2, [pc, #644]	; (80014f8 <HAL_GPIO_Init+0x2c8>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d058      	beq.n	800132a <HAL_GPIO_Init+0xfa>
 8001278:	4a9f      	ldr	r2, [pc, #636]	; (80014f8 <HAL_GPIO_Init+0x2c8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d86f      	bhi.n	800135e <HAL_GPIO_Init+0x12e>
 800127e:	4a9f      	ldr	r2, [pc, #636]	; (80014fc <HAL_GPIO_Init+0x2cc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d052      	beq.n	800132a <HAL_GPIO_Init+0xfa>
 8001284:	4a9d      	ldr	r2, [pc, #628]	; (80014fc <HAL_GPIO_Init+0x2cc>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d869      	bhi.n	800135e <HAL_GPIO_Init+0x12e>
 800128a:	4a9d      	ldr	r2, [pc, #628]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d04c      	beq.n	800132a <HAL_GPIO_Init+0xfa>
 8001290:	4a9b      	ldr	r2, [pc, #620]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d863      	bhi.n	800135e <HAL_GPIO_Init+0x12e>
 8001296:	4a9b      	ldr	r2, [pc, #620]	; (8001504 <HAL_GPIO_Init+0x2d4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d046      	beq.n	800132a <HAL_GPIO_Init+0xfa>
 800129c:	4a99      	ldr	r2, [pc, #612]	; (8001504 <HAL_GPIO_Init+0x2d4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d85d      	bhi.n	800135e <HAL_GPIO_Init+0x12e>
 80012a2:	2b12      	cmp	r3, #18
 80012a4:	d82a      	bhi.n	80012fc <HAL_GPIO_Init+0xcc>
 80012a6:	2b12      	cmp	r3, #18
 80012a8:	d859      	bhi.n	800135e <HAL_GPIO_Init+0x12e>
 80012aa:	a201      	add	r2, pc, #4	; (adr r2, 80012b0 <HAL_GPIO_Init+0x80>)
 80012ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b0:	0800132b 	.word	0x0800132b
 80012b4:	08001305 	.word	0x08001305
 80012b8:	08001317 	.word	0x08001317
 80012bc:	08001359 	.word	0x08001359
 80012c0:	0800135f 	.word	0x0800135f
 80012c4:	0800135f 	.word	0x0800135f
 80012c8:	0800135f 	.word	0x0800135f
 80012cc:	0800135f 	.word	0x0800135f
 80012d0:	0800135f 	.word	0x0800135f
 80012d4:	0800135f 	.word	0x0800135f
 80012d8:	0800135f 	.word	0x0800135f
 80012dc:	0800135f 	.word	0x0800135f
 80012e0:	0800135f 	.word	0x0800135f
 80012e4:	0800135f 	.word	0x0800135f
 80012e8:	0800135f 	.word	0x0800135f
 80012ec:	0800135f 	.word	0x0800135f
 80012f0:	0800135f 	.word	0x0800135f
 80012f4:	0800130d 	.word	0x0800130d
 80012f8:	08001321 	.word	0x08001321
 80012fc:	4a82      	ldr	r2, [pc, #520]	; (8001508 <HAL_GPIO_Init+0x2d8>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d013      	beq.n	800132a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001302:	e02c      	b.n	800135e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	623b      	str	r3, [r7, #32]
          break;
 800130a:	e029      	b.n	8001360 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	3304      	adds	r3, #4
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	e024      	b.n	8001360 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	3308      	adds	r3, #8
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e01f      	b.n	8001360 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	330c      	adds	r3, #12
 8001326:	623b      	str	r3, [r7, #32]
          break;
 8001328:	e01a      	b.n	8001360 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d102      	bne.n	8001338 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001332:	2304      	movs	r3, #4
 8001334:	623b      	str	r3, [r7, #32]
          break;
 8001336:	e013      	b.n	8001360 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d105      	bne.n	800134c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001340:	2308      	movs	r3, #8
 8001342:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	611a      	str	r2, [r3, #16]
          break;
 800134a:	e009      	b.n	8001360 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800134c:	2308      	movs	r3, #8
 800134e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	615a      	str	r2, [r3, #20]
          break;
 8001356:	e003      	b.n	8001360 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
          break;
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x130>
          break;
 800135e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2bff      	cmp	r3, #255	; 0xff
 8001364:	d801      	bhi.n	800136a <HAL_GPIO_Init+0x13a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	e001      	b.n	800136e <HAL_GPIO_Init+0x13e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3304      	adds	r3, #4
 800136e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2bff      	cmp	r3, #255	; 0xff
 8001374:	d802      	bhi.n	800137c <HAL_GPIO_Init+0x14c>
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	e002      	b.n	8001382 <HAL_GPIO_Init+0x152>
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	3b08      	subs	r3, #8
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	210f      	movs	r1, #15
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	401a      	ands	r2, r3
 8001394:	6a39      	ldr	r1, [r7, #32]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	431a      	orrs	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8090 	beq.w	80014d0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013b0:	4b56      	ldr	r3, [pc, #344]	; (800150c <HAL_GPIO_Init+0x2dc>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a55      	ldr	r2, [pc, #340]	; (800150c <HAL_GPIO_Init+0x2dc>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b53      	ldr	r3, [pc, #332]	; (800150c <HAL_GPIO_Init+0x2dc>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013c8:	4a51      	ldr	r2, [pc, #324]	; (8001510 <HAL_GPIO_Init+0x2e0>)
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	4013      	ands	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a49      	ldr	r2, [pc, #292]	; (8001514 <HAL_GPIO_Init+0x2e4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d00d      	beq.n	8001410 <HAL_GPIO_Init+0x1e0>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a48      	ldr	r2, [pc, #288]	; (8001518 <HAL_GPIO_Init+0x2e8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d007      	beq.n	800140c <HAL_GPIO_Init+0x1dc>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a47      	ldr	r2, [pc, #284]	; (800151c <HAL_GPIO_Init+0x2ec>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d101      	bne.n	8001408 <HAL_GPIO_Init+0x1d8>
 8001404:	2302      	movs	r3, #2
 8001406:	e004      	b.n	8001412 <HAL_GPIO_Init+0x1e2>
 8001408:	2303      	movs	r3, #3
 800140a:	e002      	b.n	8001412 <HAL_GPIO_Init+0x1e2>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <HAL_GPIO_Init+0x1e2>
 8001410:	2300      	movs	r3, #0
 8001412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001414:	f002 0203 	and.w	r2, r2, #3
 8001418:	0092      	lsls	r2, r2, #2
 800141a:	4093      	lsls	r3, r2
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001422:	493b      	ldr	r1, [pc, #236]	; (8001510 <HAL_GPIO_Init+0x2e0>)
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3302      	adds	r3, #2
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800143c:	4b38      	ldr	r3, [pc, #224]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4937      	ldr	r1, [pc, #220]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800144a:	4b35      	ldr	r3, [pc, #212]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	43db      	mvns	r3, r3
 8001452:	4933      	ldr	r1, [pc, #204]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 8001454:	4013      	ands	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001464:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	492d      	ldr	r1, [pc, #180]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001472:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	43db      	mvns	r3, r3
 800147a:	4929      	ldr	r1, [pc, #164]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 800147c:	4013      	ands	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d006      	beq.n	800149a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	4923      	ldr	r1, [pc, #140]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	608b      	str	r3, [r1, #8]
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	491f      	ldr	r1, [pc, #124]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d006      	beq.n	80014c2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	4919      	ldr	r1, [pc, #100]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	60cb      	str	r3, [r1, #12]
 80014c0:	e006      	b.n	80014d0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4915      	ldr	r1, [pc, #84]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	3301      	adds	r3, #1
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f47f aeaf 	bne.w	8001244 <HAL_GPIO_Init+0x14>
  }
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	372c      	adds	r7, #44	; 0x2c
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	10320000 	.word	0x10320000
 80014f8:	10310000 	.word	0x10310000
 80014fc:	10220000 	.word	0x10220000
 8001500:	10210000 	.word	0x10210000
 8001504:	10120000 	.word	0x10120000
 8001508:	10110000 	.word	0x10110000
 800150c:	40021000 	.word	0x40021000
 8001510:	40010000 	.word	0x40010000
 8001514:	40010800 	.word	0x40010800
 8001518:	40010c00 	.word	0x40010c00
 800151c:	40011000 	.word	0x40011000
 8001520:	40010400 	.word	0x40010400

08001524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e26c      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8087 	beq.w	8001652 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001544:	4b92      	ldr	r3, [pc, #584]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b04      	cmp	r3, #4
 800154e:	d00c      	beq.n	800156a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001550:	4b8f      	ldr	r3, [pc, #572]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	2b08      	cmp	r3, #8
 800155a:	d112      	bne.n	8001582 <HAL_RCC_OscConfig+0x5e>
 800155c:	4b8c      	ldr	r3, [pc, #560]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001568:	d10b      	bne.n	8001582 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156a:	4b89      	ldr	r3, [pc, #548]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d06c      	beq.n	8001650 <HAL_RCC_OscConfig+0x12c>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d168      	bne.n	8001650 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e246      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158a:	d106      	bne.n	800159a <HAL_RCC_OscConfig+0x76>
 800158c:	4b80      	ldr	r3, [pc, #512]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a7f      	ldr	r2, [pc, #508]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	e02e      	b.n	80015f8 <HAL_RCC_OscConfig+0xd4>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x98>
 80015a2:	4b7b      	ldr	r3, [pc, #492]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a7a      	ldr	r2, [pc, #488]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b78      	ldr	r3, [pc, #480]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a77      	ldr	r2, [pc, #476]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e01d      	b.n	80015f8 <HAL_RCC_OscConfig+0xd4>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0xbc>
 80015c6:	4b72      	ldr	r3, [pc, #456]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a71      	ldr	r2, [pc, #452]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b6f      	ldr	r3, [pc, #444]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a6e      	ldr	r2, [pc, #440]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e00b      	b.n	80015f8 <HAL_RCC_OscConfig+0xd4>
 80015e0:	4b6b      	ldr	r3, [pc, #428]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a6a      	ldr	r2, [pc, #424]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b68      	ldr	r3, [pc, #416]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a67      	ldr	r2, [pc, #412]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d013      	beq.n	8001628 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fa60 	bl	8000ac4 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fa5c 	bl	8000ac4 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1fa      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	4b5d      	ldr	r3, [pc, #372]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0xe4>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fa4c 	bl	8000ac4 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fa48 	bl	8000ac4 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1e6      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	4b53      	ldr	r3, [pc, #332]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x10c>
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d063      	beq.n	8001726 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800165e:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00b      	beq.n	8001682 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800166a:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b08      	cmp	r3, #8
 8001674:	d11c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x18c>
 8001676:	4b46      	ldr	r3, [pc, #280]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d116      	bne.n	80016b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	4b43      	ldr	r3, [pc, #268]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <HAL_RCC_OscConfig+0x176>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d001      	beq.n	800169a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e1ba      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4939      	ldr	r1, [pc, #228]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	e03a      	b.n	8001726 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d020      	beq.n	80016fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b8:	4b36      	ldr	r3, [pc, #216]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff fa01 	bl	8000ac4 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff f9fd 	bl	8000ac4 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e19b      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e4:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4927      	ldr	r1, [pc, #156]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]
 80016f8:	e015      	b.n	8001726 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff f9e0 	bl	8000ac4 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001708:	f7ff f9dc 	bl	8000ac4 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e17a      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d03a      	beq.n	80017a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d019      	beq.n	800176e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff f9c0 	bl	8000ac4 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001748:	f7ff f9bc 	bl	8000ac4 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e15a      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001766:	2001      	movs	r0, #1
 8001768:	f000 fad8 	bl	8001d1c <RCC_Delay>
 800176c:	e01c      	b.n	80017a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7ff f9a6 	bl	8000ac4 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177a:	e00f      	b.n	800179c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177c:	f7ff f9a2 	bl	8000ac4 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d908      	bls.n	800179c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e140      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000
 8001794:	42420000 	.word	0x42420000
 8001798:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	4b9e      	ldr	r3, [pc, #632]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1e9      	bne.n	800177c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80a6 	beq.w	8001902 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ba:	4b97      	ldr	r3, [pc, #604]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10d      	bne.n	80017e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	4b94      	ldr	r3, [pc, #592]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a93      	ldr	r2, [pc, #588]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	61d3      	str	r3, [r2, #28]
 80017d2:	4b91      	ldr	r3, [pc, #580]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017de:	2301      	movs	r3, #1
 80017e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e2:	4b8e      	ldr	r3, [pc, #568]	; (8001a1c <HAL_RCC_OscConfig+0x4f8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d118      	bne.n	8001820 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ee:	4b8b      	ldr	r3, [pc, #556]	; (8001a1c <HAL_RCC_OscConfig+0x4f8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a8a      	ldr	r2, [pc, #552]	; (8001a1c <HAL_RCC_OscConfig+0x4f8>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fa:	f7ff f963 	bl	8000ac4 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001802:	f7ff f95f 	bl	8000ac4 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b64      	cmp	r3, #100	; 0x64
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e0fd      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	4b81      	ldr	r3, [pc, #516]	; (8001a1c <HAL_RCC_OscConfig+0x4f8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x312>
 8001828:	4b7b      	ldr	r3, [pc, #492]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4a7a      	ldr	r2, [pc, #488]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6213      	str	r3, [r2, #32]
 8001834:	e02d      	b.n	8001892 <HAL_RCC_OscConfig+0x36e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x334>
 800183e:	4b76      	ldr	r3, [pc, #472]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4a75      	ldr	r2, [pc, #468]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	6213      	str	r3, [r2, #32]
 800184a:	4b73      	ldr	r3, [pc, #460]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4a72      	ldr	r2, [pc, #456]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001850:	f023 0304 	bic.w	r3, r3, #4
 8001854:	6213      	str	r3, [r2, #32]
 8001856:	e01c      	b.n	8001892 <HAL_RCC_OscConfig+0x36e>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d10c      	bne.n	800187a <HAL_RCC_OscConfig+0x356>
 8001860:	4b6d      	ldr	r3, [pc, #436]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4a6c      	ldr	r2, [pc, #432]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6213      	str	r3, [r2, #32]
 800186c:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4a69      	ldr	r2, [pc, #420]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6213      	str	r3, [r2, #32]
 8001878:	e00b      	b.n	8001892 <HAL_RCC_OscConfig+0x36e>
 800187a:	4b67      	ldr	r3, [pc, #412]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a66      	ldr	r2, [pc, #408]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	4b64      	ldr	r3, [pc, #400]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4a63      	ldr	r2, [pc, #396]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d015      	beq.n	80018c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189a:	f7ff f913 	bl	8000ac4 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a0:	e00a      	b.n	80018b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff f90f 	bl	8000ac4 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e0ab      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	4b57      	ldr	r3, [pc, #348]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0ee      	beq.n	80018a2 <HAL_RCC_OscConfig+0x37e>
 80018c4:	e014      	b.n	80018f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff f8fd 	bl	8000ac4 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7ff f8f9 	bl	8000ac4 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e095      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	4b4c      	ldr	r3, [pc, #304]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ee      	bne.n	80018ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d105      	bne.n	8001902 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f6:	4b48      	ldr	r3, [pc, #288]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	4a47      	ldr	r2, [pc, #284]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001900:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8081 	beq.w	8001a0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800190c:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d061      	beq.n	80019dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d146      	bne.n	80019ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <HAL_RCC_OscConfig+0x4fc>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff f8cd 	bl	8000ac4 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff f8c9 	bl	8000ac4 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e067      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001940:	4b35      	ldr	r3, [pc, #212]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001954:	d108      	bne.n	8001968 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	492d      	ldr	r1, [pc, #180]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a19      	ldr	r1, [r3, #32]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	430b      	orrs	r3, r1
 800197a:	4927      	ldr	r1, [pc, #156]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_RCC_OscConfig+0x4fc>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff f89d 	bl	8000ac4 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff f899 	bl	8000ac4 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e037      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x46a>
 80019ac:	e02f      	b.n	8001a0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HAL_RCC_OscConfig+0x4fc>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff f886 	bl	8000ac4 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff f882 	bl	8000ac4 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e020      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x498>
 80019da:	e018      	b.n	8001a0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e013      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	42420060 	.word	0x42420060

08001a24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0d0      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a38:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d910      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b67      	ldr	r3, [pc, #412]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0207 	bic.w	r2, r3, #7
 8001a4e:	4965      	ldr	r1, [pc, #404]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b63      	ldr	r3, [pc, #396]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0b8      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d020      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a80:	4b59      	ldr	r3, [pc, #356]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aa2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa4:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	494d      	ldr	r1, [pc, #308]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d040      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d115      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e07f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae2:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e073      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e06b      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 0203 	bic.w	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4936      	ldr	r1, [pc, #216]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b14:	f7fe ffd6 	bl	8000ac4 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1c:	f7fe ffd2 	bl	8000ac4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e053      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 020c 	and.w	r2, r3, #12
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d1eb      	bne.n	8001b1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d210      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 0207 	bic.w	r2, r3, #7
 8001b5a:	4922      	ldr	r1, [pc, #136]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e032      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4916      	ldr	r1, [pc, #88]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	490e      	ldr	r1, [pc, #56]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bb2:	f000 f821 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	490a      	ldr	r1, [pc, #40]	; (8001bec <HAL_RCC_ClockConfig+0x1c8>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_RCC_ClockConfig+0x1cc>)
 8001bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1d0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe ff34 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40022000 	.word	0x40022000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	080031bc 	.word	0x080031bc
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000004 	.word	0x20000004

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	b490      	push	{r4, r7}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c00:	1d3c      	adds	r4, r7, #4
 8001c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c08:	f240 2301 	movw	r3, #513	; 0x201
 8001c0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d002      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x40>
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d003      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x46>
 8001c36:	e02d      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3a:	623b      	str	r3, [r7, #32]
      break;
 8001c3c:	e02d      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	0c9b      	lsrs	r3, r3, #18
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c5c:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	0c5b      	lsrs	r3, r3, #17
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c76:	fb02 f203 	mul.w	r2, r2, r3
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
 8001c82:	e004      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	623b      	str	r3, [r7, #32]
      break;
 8001c92:	e002      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c96:	623b      	str	r3, [r7, #32]
      break;
 8001c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3728      	adds	r7, #40	; 0x28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc90      	pop	{r4, r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	080031ac 	.word	0x080031ac
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	007a1200 	.word	0x007a1200
 8001cb4:	003d0900 	.word	0x003d0900

08001cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cbc:	4b02      	ldr	r3, [pc, #8]	; (8001cc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	20000000 	.word	0x20000000

08001ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cd0:	f7ff fff2 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4903      	ldr	r1, [pc, #12]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	080031cc 	.word	0x080031cc

08001cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf8:	f7ff ffde 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0adb      	lsrs	r3, r3, #11
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	4903      	ldr	r1, [pc, #12]	; (8001d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	080031cc 	.word	0x080031cc

08001d1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <RCC_Delay+0x34>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <RCC_Delay+0x38>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	0a5b      	lsrs	r3, r3, #9
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	fb02 f303 	mul.w	r3, r2, r3
 8001d36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d38:	bf00      	nop
  }
  while (Delay --);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1e5a      	subs	r2, r3, #1
 8001d3e:	60fa      	str	r2, [r7, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f9      	bne.n	8001d38 <RCC_Delay+0x1c>
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	20000000 	.word	0x20000000
 8001d54:	10624dd3 	.word	0x10624dd3

08001d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e03f      	b.n	8001dea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fcf4 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2224      	movs	r2, #36	; 0x24
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fce7 	bl	8002770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	d130      	bne.n	8001e6e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_UART_Transmit_IT+0x26>
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e029      	b.n	8001e70 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_UART_Transmit_IT+0x38>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e022      	b.n	8001e70 <HAL_UART_Transmit_IT+0x7e>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	88fa      	ldrh	r2, [r7, #6]
 8001e3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	88fa      	ldrh	r2, [r7, #6]
 8001e42:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2221      	movs	r2, #33	; 0x21
 8001e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e68:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001e6e:	2302      	movs	r3, #2
  }
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	4613      	mov	r3, r2
 8001e86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	d11d      	bne.n	8001ed0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <HAL_UART_Receive_DMA+0x26>
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e016      	b.n	8001ed2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_UART_Receive_DMA+0x38>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e00f      	b.n	8001ed2 <HAL_UART_Receive_DMA+0x58>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fa88 	bl	80023dc <UART_Start_Receive_DMA>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	e000      	b.n	8001ed2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001ed0:	2302      	movs	r3, #2
  }
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10d      	bne.n	8001f2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_UART_IRQHandler+0x52>
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fb78 	bl	800261c <UART_Receive_IT>
      return;
 8001f2c:	e17b      	b.n	8002226 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80b1 	beq.w	8002098 <HAL_UART_IRQHandler+0x1bc>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <HAL_UART_IRQHandler+0x70>
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80a6 	beq.w	8002098 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00a      	beq.n	8001f6c <HAL_UART_IRQHandler+0x90>
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f043 0201 	orr.w	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <HAL_UART_IRQHandler+0xb0>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f043 0202 	orr.w	r2, r3, #2
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00a      	beq.n	8001fac <HAL_UART_IRQHandler+0xd0>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f043 0204 	orr.w	r2, r3, #4
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00f      	beq.n	8001fd6 <HAL_UART_IRQHandler+0xfa>
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d104      	bne.n	8001fca <HAL_UART_IRQHandler+0xee>
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f043 0208 	orr.w	r2, r3, #8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 811e 	beq.w	800221c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_UART_IRQHandler+0x11e>
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fb11 	bl	800261c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <HAL_UART_IRQHandler+0x146>
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d031      	beq.n	8002086 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fa53 	bl	80024ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d023      	beq.n	800207e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695a      	ldr	r2, [r3, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002044:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204a:	2b00      	cmp	r3, #0
 800204c:	d013      	beq.n	8002076 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	4a76      	ldr	r2, [pc, #472]	; (800222c <HAL_UART_IRQHandler+0x350>)
 8002054:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe ff3e 	bl	8000edc <HAL_DMA_Abort_IT>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d016      	beq.n	8002094 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002070:	4610      	mov	r0, r2
 8002072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002074:	e00e      	b.n	8002094 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8ec 	bl	8002254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800207c:	e00a      	b.n	8002094 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8e8 	bl	8002254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002084:	e006      	b.n	8002094 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8e4 	bl	8002254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002092:	e0c3      	b.n	800221c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002094:	bf00      	nop
    return;
 8002096:	e0c1      	b.n	800221c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	2b01      	cmp	r3, #1
 800209e:	f040 80a1 	bne.w	80021e4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 809b 	beq.w	80021e4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8095 	beq.w	80021e4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d04e      	beq.n	800217c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80020e8:	8a3b      	ldrh	r3, [r7, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8098 	beq.w	8002220 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80020f4:	8a3a      	ldrh	r2, [r7, #16]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	f080 8092 	bcs.w	8002220 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8a3a      	ldrh	r2, [r7, #16]
 8002100:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2b20      	cmp	r3, #32
 800210a:	d02b      	beq.n	8002164 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800211a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0201 	bic.w	r2, r2, #1
 800212a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0210 	bic.w	r2, r2, #16
 8002158:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fe81 	bl	8000e66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800216c:	b29b      	uxth	r3, r3
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	b29b      	uxth	r3, r3
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f876 	bl	8002266 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800217a:	e051      	b.n	8002220 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002184:	b29b      	uxth	r3, r3
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d047      	beq.n	8002224 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002194:	8a7b      	ldrh	r3, [r7, #18]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d044      	beq.n	8002224 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021a8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0210 	bic.w	r2, r2, #16
 80021d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021d8:	8a7b      	ldrh	r3, [r7, #18]
 80021da:	4619      	mov	r1, r3
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f842 	bl	8002266 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80021e2:	e01f      	b.n	8002224 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_UART_IRQHandler+0x324>
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f9a8 	bl	800254e <UART_Transmit_IT>
    return;
 80021fe:	e012      	b.n	8002226 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00d      	beq.n	8002226 <HAL_UART_IRQHandler+0x34a>
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f9e9 	bl	80025ec <UART_EndTransmit_IT>
    return;
 800221a:	e004      	b.n	8002226 <HAL_UART_IRQHandler+0x34a>
    return;
 800221c:	bf00      	nop
 800221e:	e002      	b.n	8002226 <HAL_UART_IRQHandler+0x34a>
      return;
 8002220:	bf00      	nop
 8002222:	e000      	b.n	8002226 <HAL_UART_IRQHandler+0x34a>
      return;
 8002224:	bf00      	nop
  }
}
 8002226:	3728      	adds	r7, #40	; 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	08002527 	.word	0x08002527

08002230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d12a      	bne.n	80022ee <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ac:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0201 	bic.w	r2, r2, #1
 80022bc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022cc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d107      	bne.n	80022ee <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0210 	bic.w	r2, r2, #16
 80022ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d106      	bne.n	8002304 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022fa:	4619      	mov	r1, r3
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f7ff ffb2 	bl	8002266 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002302:	e002      	b.n	800230a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7fe f8bf 	bl	8000488 <HAL_UART_RxCpltCallback>
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	2b01      	cmp	r3, #1
 8002326:	d108      	bne.n	800233a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800232c:	085b      	lsrs	r3, r3, #1
 800232e:	b29b      	uxth	r3, r3
 8002330:	4619      	mov	r1, r3
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f7ff ff97 	bl	8002266 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002338:	e002      	b.n	8002340 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f7ff ff81 	bl	8002242 <HAL_UART_RxHalfCpltCallback>
}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf14      	ite	ne
 8002368:	2301      	movne	r3, #1
 800236a:	2300      	moveq	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b21      	cmp	r3, #33	; 0x21
 800237a:	d108      	bne.n	800238e <UART_DMAError+0x46>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2200      	movs	r2, #0
 8002386:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002388:	68b8      	ldr	r0, [r7, #8]
 800238a:	f000 f88b 	bl	80024a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf14      	ite	ne
 800239c:	2301      	movne	r3, #1
 800239e:	2300      	moveq	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b22      	cmp	r3, #34	; 0x22
 80023ae:	d108      	bne.n	80023c2 <UART_DMAError+0x7a>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2200      	movs	r2, #0
 80023ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80023bc:	68b8      	ldr	r0, [r7, #8]
 80023be:	f000 f886 	bl	80024ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f043 0210 	orr.w	r2, r3, #16
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80023ce:	68b8      	ldr	r0, [r7, #8]
 80023d0:	f7ff ff40 	bl	8002254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	4613      	mov	r3, r2
 80023e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	88fa      	ldrh	r2, [r7, #6]
 80023f4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2222      	movs	r2, #34	; 0x22
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	4a23      	ldr	r2, [pc, #140]	; (8002498 <UART_Start_Receive_DMA+0xbc>)
 800240a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002410:	4a22      	ldr	r2, [pc, #136]	; (800249c <UART_Start_Receive_DMA+0xc0>)
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	4a21      	ldr	r2, [pc, #132]	; (80024a0 <UART_Start_Receive_DMA+0xc4>)
 800241a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	2200      	movs	r2, #0
 8002422:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002424:	f107 0308 	add.w	r3, r7, #8
 8002428:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3304      	adds	r3, #4
 8002434:	4619      	mov	r1, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	f7fe fcb4 	bl	8000da8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0201 	orr.w	r2, r2, #1
 800247c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	0800227d 	.word	0x0800227d
 800249c:	08002313 	.word	0x08002313
 80024a0:	08002349 	.word	0x08002349

080024a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80024ba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80024e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d107      	bne.n	800250e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0210 	bic.w	r2, r2, #16
 800250c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f7ff fe87 	bl	8002254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b21      	cmp	r3, #33	; 0x21
 8002560:	d13e      	bne.n	80025e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256a:	d114      	bne.n	8002596 <UART_Transmit_IT+0x48>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d110      	bne.n	8002596 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002588:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	1c9a      	adds	r2, r3, #2
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	621a      	str	r2, [r3, #32]
 8002594:	e008      	b.n	80025a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	1c59      	adds	r1, r3, #1
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6211      	str	r1, [r2, #32]
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	4619      	mov	r1, r3
 80025b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10f      	bne.n	80025dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	e000      	b.n	80025e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80025e0:	2302      	movs	r3, #2
  }
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002602:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff fe0f 	bl	8002230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b22      	cmp	r3, #34	; 0x22
 800262e:	f040 8099 	bne.w	8002764 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800263a:	d117      	bne.n	800266c <UART_Receive_IT+0x50>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d113      	bne.n	800266c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	b29b      	uxth	r3, r3
 8002656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265a:	b29a      	uxth	r2, r3
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	1c9a      	adds	r2, r3, #2
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	629a      	str	r2, [r3, #40]	; 0x28
 800266a:	e026      	b.n	80026ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267e:	d007      	beq.n	8002690 <UART_Receive_IT+0x74>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <UART_Receive_IT+0x82>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d106      	bne.n	800269e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e008      	b.n	80026b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	4619      	mov	r1, r3
 80026c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d148      	bne.n	8002760 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0220 	bic.w	r2, r2, #32
 80026dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0201 	bic.w	r2, r2, #1
 80026fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2220      	movs	r2, #32
 8002702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	2b01      	cmp	r3, #1
 800270c:	d123      	bne.n	8002756 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0210 	bic.w	r2, r2, #16
 8002722:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b10      	cmp	r3, #16
 8002730:	d10a      	bne.n	8002748 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800274c:	4619      	mov	r1, r3
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff fd89 	bl	8002266 <HAL_UARTEx_RxEventCallback>
 8002754:	e002      	b.n	800275c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fd fe96 	bl	8000488 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e002      	b.n	8002766 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027aa:	f023 030c 	bic.w	r3, r3, #12
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	430b      	orrs	r3, r1
 80027b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a2c      	ldr	r2, [pc, #176]	; (8002884 <UART_SetConfig+0x114>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d103      	bne.n	80027e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027d8:	f7ff fa8c 	bl	8001cf4 <HAL_RCC_GetPCLK2Freq>
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	e002      	b.n	80027e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027e0:	f7ff fa74 	bl	8001ccc <HAL_RCC_GetPCLK1Freq>
 80027e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	009a      	lsls	r2, r3, #2
 80027f0:	441a      	add	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	4a22      	ldr	r2, [pc, #136]	; (8002888 <UART_SetConfig+0x118>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	0119      	lsls	r1, r3, #4
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	009a      	lsls	r2, r3, #2
 8002810:	441a      	add	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	fbb2 f2f3 	udiv	r2, r2, r3
 800281c:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <UART_SetConfig+0x118>)
 800281e:	fba3 0302 	umull	r0, r3, r3, r2
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2064      	movs	r0, #100	; 0x64
 8002826:	fb00 f303 	mul.w	r3, r0, r3
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	3332      	adds	r3, #50	; 0x32
 8002830:	4a15      	ldr	r2, [pc, #84]	; (8002888 <UART_SetConfig+0x118>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800283c:	4419      	add	r1, r3
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	009a      	lsls	r2, r3, #2
 8002848:	441a      	add	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	fbb2 f2f3 	udiv	r2, r2, r3
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <UART_SetConfig+0x118>)
 8002856:	fba3 0302 	umull	r0, r3, r3, r2
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	2064      	movs	r0, #100	; 0x64
 800285e:	fb00 f303 	mul.w	r3, r0, r3
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	3332      	adds	r3, #50	; 0x32
 8002868:	4a07      	ldr	r2, [pc, #28]	; (8002888 <UART_SetConfig+0x118>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	f003 020f 	and.w	r2, r3, #15
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	440a      	add	r2, r1
 800287a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40013800 	.word	0x40013800
 8002888:	51eb851f 	.word	0x51eb851f

0800288c <__errno>:
 800288c:	4b01      	ldr	r3, [pc, #4]	; (8002894 <__errno+0x8>)
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	2000000c 	.word	0x2000000c

08002898 <__libc_init_array>:
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	2600      	movs	r6, #0
 800289c:	4d0c      	ldr	r5, [pc, #48]	; (80028d0 <__libc_init_array+0x38>)
 800289e:	4c0d      	ldr	r4, [pc, #52]	; (80028d4 <__libc_init_array+0x3c>)
 80028a0:	1b64      	subs	r4, r4, r5
 80028a2:	10a4      	asrs	r4, r4, #2
 80028a4:	42a6      	cmp	r6, r4
 80028a6:	d109      	bne.n	80028bc <__libc_init_array+0x24>
 80028a8:	f000 fc70 	bl	800318c <_init>
 80028ac:	2600      	movs	r6, #0
 80028ae:	4d0a      	ldr	r5, [pc, #40]	; (80028d8 <__libc_init_array+0x40>)
 80028b0:	4c0a      	ldr	r4, [pc, #40]	; (80028dc <__libc_init_array+0x44>)
 80028b2:	1b64      	subs	r4, r4, r5
 80028b4:	10a4      	asrs	r4, r4, #2
 80028b6:	42a6      	cmp	r6, r4
 80028b8:	d105      	bne.n	80028c6 <__libc_init_array+0x2e>
 80028ba:	bd70      	pop	{r4, r5, r6, pc}
 80028bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c0:	4798      	blx	r3
 80028c2:	3601      	adds	r6, #1
 80028c4:	e7ee      	b.n	80028a4 <__libc_init_array+0xc>
 80028c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ca:	4798      	blx	r3
 80028cc:	3601      	adds	r6, #1
 80028ce:	e7f2      	b.n	80028b6 <__libc_init_array+0x1e>
 80028d0:	08003208 	.word	0x08003208
 80028d4:	08003208 	.word	0x08003208
 80028d8:	08003208 	.word	0x08003208
 80028dc:	0800320c 	.word	0x0800320c

080028e0 <memset>:
 80028e0:	4603      	mov	r3, r0
 80028e2:	4402      	add	r2, r0
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d100      	bne.n	80028ea <memset+0xa>
 80028e8:	4770      	bx	lr
 80028ea:	f803 1b01 	strb.w	r1, [r3], #1
 80028ee:	e7f9      	b.n	80028e4 <memset+0x4>

080028f0 <sniprintf>:
 80028f0:	b40c      	push	{r2, r3}
 80028f2:	b530      	push	{r4, r5, lr}
 80028f4:	4b17      	ldr	r3, [pc, #92]	; (8002954 <sniprintf+0x64>)
 80028f6:	1e0c      	subs	r4, r1, #0
 80028f8:	681d      	ldr	r5, [r3, #0]
 80028fa:	b09d      	sub	sp, #116	; 0x74
 80028fc:	da08      	bge.n	8002910 <sniprintf+0x20>
 80028fe:	238b      	movs	r3, #139	; 0x8b
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	602b      	str	r3, [r5, #0]
 8002906:	b01d      	add	sp, #116	; 0x74
 8002908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800290c:	b002      	add	sp, #8
 800290e:	4770      	bx	lr
 8002910:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002914:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002918:	bf0c      	ite	eq
 800291a:	4623      	moveq	r3, r4
 800291c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002920:	9304      	str	r3, [sp, #16]
 8002922:	9307      	str	r3, [sp, #28]
 8002924:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002928:	9002      	str	r0, [sp, #8]
 800292a:	9006      	str	r0, [sp, #24]
 800292c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002930:	4628      	mov	r0, r5
 8002932:	ab21      	add	r3, sp, #132	; 0x84
 8002934:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002936:	a902      	add	r1, sp, #8
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	f000 f869 	bl	8002a10 <_svfiprintf_r>
 800293e:	1c43      	adds	r3, r0, #1
 8002940:	bfbc      	itt	lt
 8002942:	238b      	movlt	r3, #139	; 0x8b
 8002944:	602b      	strlt	r3, [r5, #0]
 8002946:	2c00      	cmp	r4, #0
 8002948:	d0dd      	beq.n	8002906 <sniprintf+0x16>
 800294a:	2200      	movs	r2, #0
 800294c:	9b02      	ldr	r3, [sp, #8]
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	e7d9      	b.n	8002906 <sniprintf+0x16>
 8002952:	bf00      	nop
 8002954:	2000000c 	.word	0x2000000c

08002958 <__ssputs_r>:
 8002958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800295c:	688e      	ldr	r6, [r1, #8]
 800295e:	4682      	mov	sl, r0
 8002960:	429e      	cmp	r6, r3
 8002962:	460c      	mov	r4, r1
 8002964:	4690      	mov	r8, r2
 8002966:	461f      	mov	r7, r3
 8002968:	d838      	bhi.n	80029dc <__ssputs_r+0x84>
 800296a:	898a      	ldrh	r2, [r1, #12]
 800296c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002970:	d032      	beq.n	80029d8 <__ssputs_r+0x80>
 8002972:	6825      	ldr	r5, [r4, #0]
 8002974:	6909      	ldr	r1, [r1, #16]
 8002976:	3301      	adds	r3, #1
 8002978:	eba5 0901 	sub.w	r9, r5, r1
 800297c:	6965      	ldr	r5, [r4, #20]
 800297e:	444b      	add	r3, r9
 8002980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002984:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002988:	106d      	asrs	r5, r5, #1
 800298a:	429d      	cmp	r5, r3
 800298c:	bf38      	it	cc
 800298e:	461d      	movcc	r5, r3
 8002990:	0553      	lsls	r3, r2, #21
 8002992:	d531      	bpl.n	80029f8 <__ssputs_r+0xa0>
 8002994:	4629      	mov	r1, r5
 8002996:	f000 fb53 	bl	8003040 <_malloc_r>
 800299a:	4606      	mov	r6, r0
 800299c:	b950      	cbnz	r0, 80029b4 <__ssputs_r+0x5c>
 800299e:	230c      	movs	r3, #12
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f8ca 3000 	str.w	r3, [sl]
 80029a8:	89a3      	ldrh	r3, [r4, #12]
 80029aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ae:	81a3      	strh	r3, [r4, #12]
 80029b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029b4:	464a      	mov	r2, r9
 80029b6:	6921      	ldr	r1, [r4, #16]
 80029b8:	f000 face 	bl	8002f58 <memcpy>
 80029bc:	89a3      	ldrh	r3, [r4, #12]
 80029be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c6:	81a3      	strh	r3, [r4, #12]
 80029c8:	6126      	str	r6, [r4, #16]
 80029ca:	444e      	add	r6, r9
 80029cc:	6026      	str	r6, [r4, #0]
 80029ce:	463e      	mov	r6, r7
 80029d0:	6165      	str	r5, [r4, #20]
 80029d2:	eba5 0509 	sub.w	r5, r5, r9
 80029d6:	60a5      	str	r5, [r4, #8]
 80029d8:	42be      	cmp	r6, r7
 80029da:	d900      	bls.n	80029de <__ssputs_r+0x86>
 80029dc:	463e      	mov	r6, r7
 80029de:	4632      	mov	r2, r6
 80029e0:	4641      	mov	r1, r8
 80029e2:	6820      	ldr	r0, [r4, #0]
 80029e4:	f000 fac6 	bl	8002f74 <memmove>
 80029e8:	68a3      	ldr	r3, [r4, #8]
 80029ea:	6822      	ldr	r2, [r4, #0]
 80029ec:	1b9b      	subs	r3, r3, r6
 80029ee:	4432      	add	r2, r6
 80029f0:	2000      	movs	r0, #0
 80029f2:	60a3      	str	r3, [r4, #8]
 80029f4:	6022      	str	r2, [r4, #0]
 80029f6:	e7db      	b.n	80029b0 <__ssputs_r+0x58>
 80029f8:	462a      	mov	r2, r5
 80029fa:	f000 fb7b 	bl	80030f4 <_realloc_r>
 80029fe:	4606      	mov	r6, r0
 8002a00:	2800      	cmp	r0, #0
 8002a02:	d1e1      	bne.n	80029c8 <__ssputs_r+0x70>
 8002a04:	4650      	mov	r0, sl
 8002a06:	6921      	ldr	r1, [r4, #16]
 8002a08:	f000 face 	bl	8002fa8 <_free_r>
 8002a0c:	e7c7      	b.n	800299e <__ssputs_r+0x46>
	...

08002a10 <_svfiprintf_r>:
 8002a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a14:	4698      	mov	r8, r3
 8002a16:	898b      	ldrh	r3, [r1, #12]
 8002a18:	4607      	mov	r7, r0
 8002a1a:	061b      	lsls	r3, r3, #24
 8002a1c:	460d      	mov	r5, r1
 8002a1e:	4614      	mov	r4, r2
 8002a20:	b09d      	sub	sp, #116	; 0x74
 8002a22:	d50e      	bpl.n	8002a42 <_svfiprintf_r+0x32>
 8002a24:	690b      	ldr	r3, [r1, #16]
 8002a26:	b963      	cbnz	r3, 8002a42 <_svfiprintf_r+0x32>
 8002a28:	2140      	movs	r1, #64	; 0x40
 8002a2a:	f000 fb09 	bl	8003040 <_malloc_r>
 8002a2e:	6028      	str	r0, [r5, #0]
 8002a30:	6128      	str	r0, [r5, #16]
 8002a32:	b920      	cbnz	r0, 8002a3e <_svfiprintf_r+0x2e>
 8002a34:	230c      	movs	r3, #12
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	e0d1      	b.n	8002be2 <_svfiprintf_r+0x1d2>
 8002a3e:	2340      	movs	r3, #64	; 0x40
 8002a40:	616b      	str	r3, [r5, #20]
 8002a42:	2300      	movs	r3, #0
 8002a44:	9309      	str	r3, [sp, #36]	; 0x24
 8002a46:	2320      	movs	r3, #32
 8002a48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a4c:	2330      	movs	r3, #48	; 0x30
 8002a4e:	f04f 0901 	mov.w	r9, #1
 8002a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002bfc <_svfiprintf_r+0x1ec>
 8002a5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a5e:	4623      	mov	r3, r4
 8002a60:	469a      	mov	sl, r3
 8002a62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a66:	b10a      	cbz	r2, 8002a6c <_svfiprintf_r+0x5c>
 8002a68:	2a25      	cmp	r2, #37	; 0x25
 8002a6a:	d1f9      	bne.n	8002a60 <_svfiprintf_r+0x50>
 8002a6c:	ebba 0b04 	subs.w	fp, sl, r4
 8002a70:	d00b      	beq.n	8002a8a <_svfiprintf_r+0x7a>
 8002a72:	465b      	mov	r3, fp
 8002a74:	4622      	mov	r2, r4
 8002a76:	4629      	mov	r1, r5
 8002a78:	4638      	mov	r0, r7
 8002a7a:	f7ff ff6d 	bl	8002958 <__ssputs_r>
 8002a7e:	3001      	adds	r0, #1
 8002a80:	f000 80aa 	beq.w	8002bd8 <_svfiprintf_r+0x1c8>
 8002a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a86:	445a      	add	r2, fp
 8002a88:	9209      	str	r2, [sp, #36]	; 0x24
 8002a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80a2 	beq.w	8002bd8 <_svfiprintf_r+0x1c8>
 8002a94:	2300      	movs	r3, #0
 8002a96:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a9e:	f10a 0a01 	add.w	sl, sl, #1
 8002aa2:	9304      	str	r3, [sp, #16]
 8002aa4:	9307      	str	r3, [sp, #28]
 8002aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8002aac:	4654      	mov	r4, sl
 8002aae:	2205      	movs	r2, #5
 8002ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ab4:	4851      	ldr	r0, [pc, #324]	; (8002bfc <_svfiprintf_r+0x1ec>)
 8002ab6:	f000 fa41 	bl	8002f3c <memchr>
 8002aba:	9a04      	ldr	r2, [sp, #16]
 8002abc:	b9d8      	cbnz	r0, 8002af6 <_svfiprintf_r+0xe6>
 8002abe:	06d0      	lsls	r0, r2, #27
 8002ac0:	bf44      	itt	mi
 8002ac2:	2320      	movmi	r3, #32
 8002ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ac8:	0711      	lsls	r1, r2, #28
 8002aca:	bf44      	itt	mi
 8002acc:	232b      	movmi	r3, #43	; 0x2b
 8002ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8002ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ad8:	d015      	beq.n	8002b06 <_svfiprintf_r+0xf6>
 8002ada:	4654      	mov	r4, sl
 8002adc:	2000      	movs	r0, #0
 8002ade:	f04f 0c0a 	mov.w	ip, #10
 8002ae2:	9a07      	ldr	r2, [sp, #28]
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002aea:	3b30      	subs	r3, #48	; 0x30
 8002aec:	2b09      	cmp	r3, #9
 8002aee:	d94e      	bls.n	8002b8e <_svfiprintf_r+0x17e>
 8002af0:	b1b0      	cbz	r0, 8002b20 <_svfiprintf_r+0x110>
 8002af2:	9207      	str	r2, [sp, #28]
 8002af4:	e014      	b.n	8002b20 <_svfiprintf_r+0x110>
 8002af6:	eba0 0308 	sub.w	r3, r0, r8
 8002afa:	fa09 f303 	lsl.w	r3, r9, r3
 8002afe:	4313      	orrs	r3, r2
 8002b00:	46a2      	mov	sl, r4
 8002b02:	9304      	str	r3, [sp, #16]
 8002b04:	e7d2      	b.n	8002aac <_svfiprintf_r+0x9c>
 8002b06:	9b03      	ldr	r3, [sp, #12]
 8002b08:	1d19      	adds	r1, r3, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	9103      	str	r1, [sp, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bfbb      	ittet	lt
 8002b12:	425b      	neglt	r3, r3
 8002b14:	f042 0202 	orrlt.w	r2, r2, #2
 8002b18:	9307      	strge	r3, [sp, #28]
 8002b1a:	9307      	strlt	r3, [sp, #28]
 8002b1c:	bfb8      	it	lt
 8002b1e:	9204      	strlt	r2, [sp, #16]
 8002b20:	7823      	ldrb	r3, [r4, #0]
 8002b22:	2b2e      	cmp	r3, #46	; 0x2e
 8002b24:	d10c      	bne.n	8002b40 <_svfiprintf_r+0x130>
 8002b26:	7863      	ldrb	r3, [r4, #1]
 8002b28:	2b2a      	cmp	r3, #42	; 0x2a
 8002b2a:	d135      	bne.n	8002b98 <_svfiprintf_r+0x188>
 8002b2c:	9b03      	ldr	r3, [sp, #12]
 8002b2e:	3402      	adds	r4, #2
 8002b30:	1d1a      	adds	r2, r3, #4
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	9203      	str	r2, [sp, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bfb8      	it	lt
 8002b3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b3e:	9305      	str	r3, [sp, #20]
 8002b40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002c0c <_svfiprintf_r+0x1fc>
 8002b44:	2203      	movs	r2, #3
 8002b46:	4650      	mov	r0, sl
 8002b48:	7821      	ldrb	r1, [r4, #0]
 8002b4a:	f000 f9f7 	bl	8002f3c <memchr>
 8002b4e:	b140      	cbz	r0, 8002b62 <_svfiprintf_r+0x152>
 8002b50:	2340      	movs	r3, #64	; 0x40
 8002b52:	eba0 000a 	sub.w	r0, r0, sl
 8002b56:	fa03 f000 	lsl.w	r0, r3, r0
 8002b5a:	9b04      	ldr	r3, [sp, #16]
 8002b5c:	3401      	adds	r4, #1
 8002b5e:	4303      	orrs	r3, r0
 8002b60:	9304      	str	r3, [sp, #16]
 8002b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b66:	2206      	movs	r2, #6
 8002b68:	4825      	ldr	r0, [pc, #148]	; (8002c00 <_svfiprintf_r+0x1f0>)
 8002b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b6e:	f000 f9e5 	bl	8002f3c <memchr>
 8002b72:	2800      	cmp	r0, #0
 8002b74:	d038      	beq.n	8002be8 <_svfiprintf_r+0x1d8>
 8002b76:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <_svfiprintf_r+0x1f4>)
 8002b78:	bb1b      	cbnz	r3, 8002bc2 <_svfiprintf_r+0x1b2>
 8002b7a:	9b03      	ldr	r3, [sp, #12]
 8002b7c:	3307      	adds	r3, #7
 8002b7e:	f023 0307 	bic.w	r3, r3, #7
 8002b82:	3308      	adds	r3, #8
 8002b84:	9303      	str	r3, [sp, #12]
 8002b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b88:	4433      	add	r3, r6
 8002b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b8c:	e767      	b.n	8002a5e <_svfiprintf_r+0x4e>
 8002b8e:	460c      	mov	r4, r1
 8002b90:	2001      	movs	r0, #1
 8002b92:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b96:	e7a5      	b.n	8002ae4 <_svfiprintf_r+0xd4>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f04f 0c0a 	mov.w	ip, #10
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	3401      	adds	r4, #1
 8002ba2:	9305      	str	r3, [sp, #20]
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002baa:	3a30      	subs	r2, #48	; 0x30
 8002bac:	2a09      	cmp	r2, #9
 8002bae:	d903      	bls.n	8002bb8 <_svfiprintf_r+0x1a8>
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0c5      	beq.n	8002b40 <_svfiprintf_r+0x130>
 8002bb4:	9105      	str	r1, [sp, #20]
 8002bb6:	e7c3      	b.n	8002b40 <_svfiprintf_r+0x130>
 8002bb8:	4604      	mov	r4, r0
 8002bba:	2301      	movs	r3, #1
 8002bbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bc0:	e7f0      	b.n	8002ba4 <_svfiprintf_r+0x194>
 8002bc2:	ab03      	add	r3, sp, #12
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	462a      	mov	r2, r5
 8002bc8:	4638      	mov	r0, r7
 8002bca:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <_svfiprintf_r+0x1f8>)
 8002bcc:	a904      	add	r1, sp, #16
 8002bce:	f3af 8000 	nop.w
 8002bd2:	1c42      	adds	r2, r0, #1
 8002bd4:	4606      	mov	r6, r0
 8002bd6:	d1d6      	bne.n	8002b86 <_svfiprintf_r+0x176>
 8002bd8:	89ab      	ldrh	r3, [r5, #12]
 8002bda:	065b      	lsls	r3, r3, #25
 8002bdc:	f53f af2c 	bmi.w	8002a38 <_svfiprintf_r+0x28>
 8002be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002be2:	b01d      	add	sp, #116	; 0x74
 8002be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002be8:	ab03      	add	r3, sp, #12
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	462a      	mov	r2, r5
 8002bee:	4638      	mov	r0, r7
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <_svfiprintf_r+0x1f8>)
 8002bf2:	a904      	add	r1, sp, #16
 8002bf4:	f000 f87c 	bl	8002cf0 <_printf_i>
 8002bf8:	e7eb      	b.n	8002bd2 <_svfiprintf_r+0x1c2>
 8002bfa:	bf00      	nop
 8002bfc:	080031d4 	.word	0x080031d4
 8002c00:	080031de 	.word	0x080031de
 8002c04:	00000000 	.word	0x00000000
 8002c08:	08002959 	.word	0x08002959
 8002c0c:	080031da 	.word	0x080031da

08002c10 <_printf_common>:
 8002c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c14:	4616      	mov	r6, r2
 8002c16:	4699      	mov	r9, r3
 8002c18:	688a      	ldr	r2, [r1, #8]
 8002c1a:	690b      	ldr	r3, [r1, #16]
 8002c1c:	4607      	mov	r7, r0
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	bfb8      	it	lt
 8002c22:	4613      	movlt	r3, r2
 8002c24:	6033      	str	r3, [r6, #0]
 8002c26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c2a:	460c      	mov	r4, r1
 8002c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c30:	b10a      	cbz	r2, 8002c36 <_printf_common+0x26>
 8002c32:	3301      	adds	r3, #1
 8002c34:	6033      	str	r3, [r6, #0]
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	0699      	lsls	r1, r3, #26
 8002c3a:	bf42      	ittt	mi
 8002c3c:	6833      	ldrmi	r3, [r6, #0]
 8002c3e:	3302      	addmi	r3, #2
 8002c40:	6033      	strmi	r3, [r6, #0]
 8002c42:	6825      	ldr	r5, [r4, #0]
 8002c44:	f015 0506 	ands.w	r5, r5, #6
 8002c48:	d106      	bne.n	8002c58 <_printf_common+0x48>
 8002c4a:	f104 0a19 	add.w	sl, r4, #25
 8002c4e:	68e3      	ldr	r3, [r4, #12]
 8002c50:	6832      	ldr	r2, [r6, #0]
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	42ab      	cmp	r3, r5
 8002c56:	dc28      	bgt.n	8002caa <_printf_common+0x9a>
 8002c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c5c:	1e13      	subs	r3, r2, #0
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	bf18      	it	ne
 8002c62:	2301      	movne	r3, #1
 8002c64:	0692      	lsls	r2, r2, #26
 8002c66:	d42d      	bmi.n	8002cc4 <_printf_common+0xb4>
 8002c68:	4649      	mov	r1, r9
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c70:	47c0      	blx	r8
 8002c72:	3001      	adds	r0, #1
 8002c74:	d020      	beq.n	8002cb8 <_printf_common+0xa8>
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	68e5      	ldr	r5, [r4, #12]
 8002c7a:	f003 0306 	and.w	r3, r3, #6
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	bf18      	it	ne
 8002c82:	2500      	movne	r5, #0
 8002c84:	6832      	ldr	r2, [r6, #0]
 8002c86:	f04f 0600 	mov.w	r6, #0
 8002c8a:	68a3      	ldr	r3, [r4, #8]
 8002c8c:	bf08      	it	eq
 8002c8e:	1aad      	subeq	r5, r5, r2
 8002c90:	6922      	ldr	r2, [r4, #16]
 8002c92:	bf08      	it	eq
 8002c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	bfc4      	itt	gt
 8002c9c:	1a9b      	subgt	r3, r3, r2
 8002c9e:	18ed      	addgt	r5, r5, r3
 8002ca0:	341a      	adds	r4, #26
 8002ca2:	42b5      	cmp	r5, r6
 8002ca4:	d11a      	bne.n	8002cdc <_printf_common+0xcc>
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	e008      	b.n	8002cbc <_printf_common+0xac>
 8002caa:	2301      	movs	r3, #1
 8002cac:	4652      	mov	r2, sl
 8002cae:	4649      	mov	r1, r9
 8002cb0:	4638      	mov	r0, r7
 8002cb2:	47c0      	blx	r8
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	d103      	bne.n	8002cc0 <_printf_common+0xb0>
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc0:	3501      	adds	r5, #1
 8002cc2:	e7c4      	b.n	8002c4e <_printf_common+0x3e>
 8002cc4:	2030      	movs	r0, #48	; 0x30
 8002cc6:	18e1      	adds	r1, r4, r3
 8002cc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cd2:	4422      	add	r2, r4
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cda:	e7c5      	b.n	8002c68 <_printf_common+0x58>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	4622      	mov	r2, r4
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	4638      	mov	r0, r7
 8002ce4:	47c0      	blx	r8
 8002ce6:	3001      	adds	r0, #1
 8002ce8:	d0e6      	beq.n	8002cb8 <_printf_common+0xa8>
 8002cea:	3601      	adds	r6, #1
 8002cec:	e7d9      	b.n	8002ca2 <_printf_common+0x92>
	...

08002cf0 <_printf_i>:
 8002cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cf4:	460c      	mov	r4, r1
 8002cf6:	7e27      	ldrb	r7, [r4, #24]
 8002cf8:	4691      	mov	r9, r2
 8002cfa:	2f78      	cmp	r7, #120	; 0x78
 8002cfc:	4680      	mov	r8, r0
 8002cfe:	469a      	mov	sl, r3
 8002d00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d06:	d807      	bhi.n	8002d18 <_printf_i+0x28>
 8002d08:	2f62      	cmp	r7, #98	; 0x62
 8002d0a:	d80a      	bhi.n	8002d22 <_printf_i+0x32>
 8002d0c:	2f00      	cmp	r7, #0
 8002d0e:	f000 80d9 	beq.w	8002ec4 <_printf_i+0x1d4>
 8002d12:	2f58      	cmp	r7, #88	; 0x58
 8002d14:	f000 80a4 	beq.w	8002e60 <_printf_i+0x170>
 8002d18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d20:	e03a      	b.n	8002d98 <_printf_i+0xa8>
 8002d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d26:	2b15      	cmp	r3, #21
 8002d28:	d8f6      	bhi.n	8002d18 <_printf_i+0x28>
 8002d2a:	a001      	add	r0, pc, #4	; (adr r0, 8002d30 <_printf_i+0x40>)
 8002d2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002d30:	08002d89 	.word	0x08002d89
 8002d34:	08002d9d 	.word	0x08002d9d
 8002d38:	08002d19 	.word	0x08002d19
 8002d3c:	08002d19 	.word	0x08002d19
 8002d40:	08002d19 	.word	0x08002d19
 8002d44:	08002d19 	.word	0x08002d19
 8002d48:	08002d9d 	.word	0x08002d9d
 8002d4c:	08002d19 	.word	0x08002d19
 8002d50:	08002d19 	.word	0x08002d19
 8002d54:	08002d19 	.word	0x08002d19
 8002d58:	08002d19 	.word	0x08002d19
 8002d5c:	08002eab 	.word	0x08002eab
 8002d60:	08002dcd 	.word	0x08002dcd
 8002d64:	08002e8d 	.word	0x08002e8d
 8002d68:	08002d19 	.word	0x08002d19
 8002d6c:	08002d19 	.word	0x08002d19
 8002d70:	08002ecd 	.word	0x08002ecd
 8002d74:	08002d19 	.word	0x08002d19
 8002d78:	08002dcd 	.word	0x08002dcd
 8002d7c:	08002d19 	.word	0x08002d19
 8002d80:	08002d19 	.word	0x08002d19
 8002d84:	08002e95 	.word	0x08002e95
 8002d88:	680b      	ldr	r3, [r1, #0]
 8002d8a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002d8e:	1d1a      	adds	r2, r3, #4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	600a      	str	r2, [r1, #0]
 8002d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0a4      	b.n	8002ee6 <_printf_i+0x1f6>
 8002d9c:	6825      	ldr	r5, [r4, #0]
 8002d9e:	6808      	ldr	r0, [r1, #0]
 8002da0:	062e      	lsls	r6, r5, #24
 8002da2:	f100 0304 	add.w	r3, r0, #4
 8002da6:	d50a      	bpl.n	8002dbe <_printf_i+0xce>
 8002da8:	6805      	ldr	r5, [r0, #0]
 8002daa:	600b      	str	r3, [r1, #0]
 8002dac:	2d00      	cmp	r5, #0
 8002dae:	da03      	bge.n	8002db8 <_printf_i+0xc8>
 8002db0:	232d      	movs	r3, #45	; 0x2d
 8002db2:	426d      	negs	r5, r5
 8002db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002db8:	230a      	movs	r3, #10
 8002dba:	485e      	ldr	r0, [pc, #376]	; (8002f34 <_printf_i+0x244>)
 8002dbc:	e019      	b.n	8002df2 <_printf_i+0x102>
 8002dbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002dc2:	6805      	ldr	r5, [r0, #0]
 8002dc4:	600b      	str	r3, [r1, #0]
 8002dc6:	bf18      	it	ne
 8002dc8:	b22d      	sxthne	r5, r5
 8002dca:	e7ef      	b.n	8002dac <_printf_i+0xbc>
 8002dcc:	680b      	ldr	r3, [r1, #0]
 8002dce:	6825      	ldr	r5, [r4, #0]
 8002dd0:	1d18      	adds	r0, r3, #4
 8002dd2:	6008      	str	r0, [r1, #0]
 8002dd4:	0628      	lsls	r0, r5, #24
 8002dd6:	d501      	bpl.n	8002ddc <_printf_i+0xec>
 8002dd8:	681d      	ldr	r5, [r3, #0]
 8002dda:	e002      	b.n	8002de2 <_printf_i+0xf2>
 8002ddc:	0669      	lsls	r1, r5, #25
 8002dde:	d5fb      	bpl.n	8002dd8 <_printf_i+0xe8>
 8002de0:	881d      	ldrh	r5, [r3, #0]
 8002de2:	2f6f      	cmp	r7, #111	; 0x6f
 8002de4:	bf0c      	ite	eq
 8002de6:	2308      	moveq	r3, #8
 8002de8:	230a      	movne	r3, #10
 8002dea:	4852      	ldr	r0, [pc, #328]	; (8002f34 <_printf_i+0x244>)
 8002dec:	2100      	movs	r1, #0
 8002dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002df2:	6866      	ldr	r6, [r4, #4]
 8002df4:	2e00      	cmp	r6, #0
 8002df6:	bfa8      	it	ge
 8002df8:	6821      	ldrge	r1, [r4, #0]
 8002dfa:	60a6      	str	r6, [r4, #8]
 8002dfc:	bfa4      	itt	ge
 8002dfe:	f021 0104 	bicge.w	r1, r1, #4
 8002e02:	6021      	strge	r1, [r4, #0]
 8002e04:	b90d      	cbnz	r5, 8002e0a <_printf_i+0x11a>
 8002e06:	2e00      	cmp	r6, #0
 8002e08:	d04d      	beq.n	8002ea6 <_printf_i+0x1b6>
 8002e0a:	4616      	mov	r6, r2
 8002e0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e10:	fb03 5711 	mls	r7, r3, r1, r5
 8002e14:	5dc7      	ldrb	r7, [r0, r7]
 8002e16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e1a:	462f      	mov	r7, r5
 8002e1c:	42bb      	cmp	r3, r7
 8002e1e:	460d      	mov	r5, r1
 8002e20:	d9f4      	bls.n	8002e0c <_printf_i+0x11c>
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d10b      	bne.n	8002e3e <_printf_i+0x14e>
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	07df      	lsls	r7, r3, #31
 8002e2a:	d508      	bpl.n	8002e3e <_printf_i+0x14e>
 8002e2c:	6923      	ldr	r3, [r4, #16]
 8002e2e:	6861      	ldr	r1, [r4, #4]
 8002e30:	4299      	cmp	r1, r3
 8002e32:	bfde      	ittt	le
 8002e34:	2330      	movle	r3, #48	; 0x30
 8002e36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e3e:	1b92      	subs	r2, r2, r6
 8002e40:	6122      	str	r2, [r4, #16]
 8002e42:	464b      	mov	r3, r9
 8002e44:	4621      	mov	r1, r4
 8002e46:	4640      	mov	r0, r8
 8002e48:	f8cd a000 	str.w	sl, [sp]
 8002e4c:	aa03      	add	r2, sp, #12
 8002e4e:	f7ff fedf 	bl	8002c10 <_printf_common>
 8002e52:	3001      	adds	r0, #1
 8002e54:	d14c      	bne.n	8002ef0 <_printf_i+0x200>
 8002e56:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5a:	b004      	add	sp, #16
 8002e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e60:	4834      	ldr	r0, [pc, #208]	; (8002f34 <_printf_i+0x244>)
 8002e62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e66:	680e      	ldr	r6, [r1, #0]
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002e6e:	061f      	lsls	r7, r3, #24
 8002e70:	600e      	str	r6, [r1, #0]
 8002e72:	d514      	bpl.n	8002e9e <_printf_i+0x1ae>
 8002e74:	07d9      	lsls	r1, r3, #31
 8002e76:	bf44      	itt	mi
 8002e78:	f043 0320 	orrmi.w	r3, r3, #32
 8002e7c:	6023      	strmi	r3, [r4, #0]
 8002e7e:	b91d      	cbnz	r5, 8002e88 <_printf_i+0x198>
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	f023 0320 	bic.w	r3, r3, #32
 8002e86:	6023      	str	r3, [r4, #0]
 8002e88:	2310      	movs	r3, #16
 8002e8a:	e7af      	b.n	8002dec <_printf_i+0xfc>
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	f043 0320 	orr.w	r3, r3, #32
 8002e92:	6023      	str	r3, [r4, #0]
 8002e94:	2378      	movs	r3, #120	; 0x78
 8002e96:	4828      	ldr	r0, [pc, #160]	; (8002f38 <_printf_i+0x248>)
 8002e98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e9c:	e7e3      	b.n	8002e66 <_printf_i+0x176>
 8002e9e:	065e      	lsls	r6, r3, #25
 8002ea0:	bf48      	it	mi
 8002ea2:	b2ad      	uxthmi	r5, r5
 8002ea4:	e7e6      	b.n	8002e74 <_printf_i+0x184>
 8002ea6:	4616      	mov	r6, r2
 8002ea8:	e7bb      	b.n	8002e22 <_printf_i+0x132>
 8002eaa:	680b      	ldr	r3, [r1, #0]
 8002eac:	6826      	ldr	r6, [r4, #0]
 8002eae:	1d1d      	adds	r5, r3, #4
 8002eb0:	6960      	ldr	r0, [r4, #20]
 8002eb2:	600d      	str	r5, [r1, #0]
 8002eb4:	0635      	lsls	r5, r6, #24
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	d501      	bpl.n	8002ebe <_printf_i+0x1ce>
 8002eba:	6018      	str	r0, [r3, #0]
 8002ebc:	e002      	b.n	8002ec4 <_printf_i+0x1d4>
 8002ebe:	0671      	lsls	r1, r6, #25
 8002ec0:	d5fb      	bpl.n	8002eba <_printf_i+0x1ca>
 8002ec2:	8018      	strh	r0, [r3, #0]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	4616      	mov	r6, r2
 8002ec8:	6123      	str	r3, [r4, #16]
 8002eca:	e7ba      	b.n	8002e42 <_printf_i+0x152>
 8002ecc:	680b      	ldr	r3, [r1, #0]
 8002ece:	1d1a      	adds	r2, r3, #4
 8002ed0:	600a      	str	r2, [r1, #0]
 8002ed2:	681e      	ldr	r6, [r3, #0]
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4630      	mov	r0, r6
 8002ed8:	6862      	ldr	r2, [r4, #4]
 8002eda:	f000 f82f 	bl	8002f3c <memchr>
 8002ede:	b108      	cbz	r0, 8002ee4 <_printf_i+0x1f4>
 8002ee0:	1b80      	subs	r0, r0, r6
 8002ee2:	6060      	str	r0, [r4, #4]
 8002ee4:	6863      	ldr	r3, [r4, #4]
 8002ee6:	6123      	str	r3, [r4, #16]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eee:	e7a8      	b.n	8002e42 <_printf_i+0x152>
 8002ef0:	4632      	mov	r2, r6
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	4640      	mov	r0, r8
 8002ef6:	6923      	ldr	r3, [r4, #16]
 8002ef8:	47d0      	blx	sl
 8002efa:	3001      	adds	r0, #1
 8002efc:	d0ab      	beq.n	8002e56 <_printf_i+0x166>
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	079b      	lsls	r3, r3, #30
 8002f02:	d413      	bmi.n	8002f2c <_printf_i+0x23c>
 8002f04:	68e0      	ldr	r0, [r4, #12]
 8002f06:	9b03      	ldr	r3, [sp, #12]
 8002f08:	4298      	cmp	r0, r3
 8002f0a:	bfb8      	it	lt
 8002f0c:	4618      	movlt	r0, r3
 8002f0e:	e7a4      	b.n	8002e5a <_printf_i+0x16a>
 8002f10:	2301      	movs	r3, #1
 8002f12:	4632      	mov	r2, r6
 8002f14:	4649      	mov	r1, r9
 8002f16:	4640      	mov	r0, r8
 8002f18:	47d0      	blx	sl
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	d09b      	beq.n	8002e56 <_printf_i+0x166>
 8002f1e:	3501      	adds	r5, #1
 8002f20:	68e3      	ldr	r3, [r4, #12]
 8002f22:	9903      	ldr	r1, [sp, #12]
 8002f24:	1a5b      	subs	r3, r3, r1
 8002f26:	42ab      	cmp	r3, r5
 8002f28:	dcf2      	bgt.n	8002f10 <_printf_i+0x220>
 8002f2a:	e7eb      	b.n	8002f04 <_printf_i+0x214>
 8002f2c:	2500      	movs	r5, #0
 8002f2e:	f104 0619 	add.w	r6, r4, #25
 8002f32:	e7f5      	b.n	8002f20 <_printf_i+0x230>
 8002f34:	080031e5 	.word	0x080031e5
 8002f38:	080031f6 	.word	0x080031f6

08002f3c <memchr>:
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	b510      	push	{r4, lr}
 8002f40:	b2c9      	uxtb	r1, r1
 8002f42:	4402      	add	r2, r0
 8002f44:	4293      	cmp	r3, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	d101      	bne.n	8002f4e <memchr+0x12>
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	e003      	b.n	8002f56 <memchr+0x1a>
 8002f4e:	7804      	ldrb	r4, [r0, #0]
 8002f50:	3301      	adds	r3, #1
 8002f52:	428c      	cmp	r4, r1
 8002f54:	d1f6      	bne.n	8002f44 <memchr+0x8>
 8002f56:	bd10      	pop	{r4, pc}

08002f58 <memcpy>:
 8002f58:	440a      	add	r2, r1
 8002f5a:	4291      	cmp	r1, r2
 8002f5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f60:	d100      	bne.n	8002f64 <memcpy+0xc>
 8002f62:	4770      	bx	lr
 8002f64:	b510      	push	{r4, lr}
 8002f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f6a:	4291      	cmp	r1, r2
 8002f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f70:	d1f9      	bne.n	8002f66 <memcpy+0xe>
 8002f72:	bd10      	pop	{r4, pc}

08002f74 <memmove>:
 8002f74:	4288      	cmp	r0, r1
 8002f76:	b510      	push	{r4, lr}
 8002f78:	eb01 0402 	add.w	r4, r1, r2
 8002f7c:	d902      	bls.n	8002f84 <memmove+0x10>
 8002f7e:	4284      	cmp	r4, r0
 8002f80:	4623      	mov	r3, r4
 8002f82:	d807      	bhi.n	8002f94 <memmove+0x20>
 8002f84:	1e43      	subs	r3, r0, #1
 8002f86:	42a1      	cmp	r1, r4
 8002f88:	d008      	beq.n	8002f9c <memmove+0x28>
 8002f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f92:	e7f8      	b.n	8002f86 <memmove+0x12>
 8002f94:	4601      	mov	r1, r0
 8002f96:	4402      	add	r2, r0
 8002f98:	428a      	cmp	r2, r1
 8002f9a:	d100      	bne.n	8002f9e <memmove+0x2a>
 8002f9c:	bd10      	pop	{r4, pc}
 8002f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fa6:	e7f7      	b.n	8002f98 <memmove+0x24>

08002fa8 <_free_r>:
 8002fa8:	b538      	push	{r3, r4, r5, lr}
 8002faa:	4605      	mov	r5, r0
 8002fac:	2900      	cmp	r1, #0
 8002fae:	d043      	beq.n	8003038 <_free_r+0x90>
 8002fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fb4:	1f0c      	subs	r4, r1, #4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bfb8      	it	lt
 8002fba:	18e4      	addlt	r4, r4, r3
 8002fbc:	f000 f8d0 	bl	8003160 <__malloc_lock>
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	; (800303c <_free_r+0x94>)
 8002fc2:	6813      	ldr	r3, [r2, #0]
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	b933      	cbnz	r3, 8002fd6 <_free_r+0x2e>
 8002fc8:	6063      	str	r3, [r4, #4]
 8002fca:	6014      	str	r4, [r2, #0]
 8002fcc:	4628      	mov	r0, r5
 8002fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fd2:	f000 b8cb 	b.w	800316c <__malloc_unlock>
 8002fd6:	42a3      	cmp	r3, r4
 8002fd8:	d90a      	bls.n	8002ff0 <_free_r+0x48>
 8002fda:	6821      	ldr	r1, [r4, #0]
 8002fdc:	1862      	adds	r2, r4, r1
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	bf01      	itttt	eq
 8002fe2:	681a      	ldreq	r2, [r3, #0]
 8002fe4:	685b      	ldreq	r3, [r3, #4]
 8002fe6:	1852      	addeq	r2, r2, r1
 8002fe8:	6022      	streq	r2, [r4, #0]
 8002fea:	6063      	str	r3, [r4, #4]
 8002fec:	6004      	str	r4, [r0, #0]
 8002fee:	e7ed      	b.n	8002fcc <_free_r+0x24>
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	b10b      	cbz	r3, 8002ffa <_free_r+0x52>
 8002ff6:	42a3      	cmp	r3, r4
 8002ff8:	d9fa      	bls.n	8002ff0 <_free_r+0x48>
 8002ffa:	6811      	ldr	r1, [r2, #0]
 8002ffc:	1850      	adds	r0, r2, r1
 8002ffe:	42a0      	cmp	r0, r4
 8003000:	d10b      	bne.n	800301a <_free_r+0x72>
 8003002:	6820      	ldr	r0, [r4, #0]
 8003004:	4401      	add	r1, r0
 8003006:	1850      	adds	r0, r2, r1
 8003008:	4283      	cmp	r3, r0
 800300a:	6011      	str	r1, [r2, #0]
 800300c:	d1de      	bne.n	8002fcc <_free_r+0x24>
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4401      	add	r1, r0
 8003014:	6011      	str	r1, [r2, #0]
 8003016:	6053      	str	r3, [r2, #4]
 8003018:	e7d8      	b.n	8002fcc <_free_r+0x24>
 800301a:	d902      	bls.n	8003022 <_free_r+0x7a>
 800301c:	230c      	movs	r3, #12
 800301e:	602b      	str	r3, [r5, #0]
 8003020:	e7d4      	b.n	8002fcc <_free_r+0x24>
 8003022:	6820      	ldr	r0, [r4, #0]
 8003024:	1821      	adds	r1, r4, r0
 8003026:	428b      	cmp	r3, r1
 8003028:	bf01      	itttt	eq
 800302a:	6819      	ldreq	r1, [r3, #0]
 800302c:	685b      	ldreq	r3, [r3, #4]
 800302e:	1809      	addeq	r1, r1, r0
 8003030:	6021      	streq	r1, [r4, #0]
 8003032:	6063      	str	r3, [r4, #4]
 8003034:	6054      	str	r4, [r2, #4]
 8003036:	e7c9      	b.n	8002fcc <_free_r+0x24>
 8003038:	bd38      	pop	{r3, r4, r5, pc}
 800303a:	bf00      	nop
 800303c:	200000b4 	.word	0x200000b4

08003040 <_malloc_r>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	1ccd      	adds	r5, r1, #3
 8003044:	f025 0503 	bic.w	r5, r5, #3
 8003048:	3508      	adds	r5, #8
 800304a:	2d0c      	cmp	r5, #12
 800304c:	bf38      	it	cc
 800304e:	250c      	movcc	r5, #12
 8003050:	2d00      	cmp	r5, #0
 8003052:	4606      	mov	r6, r0
 8003054:	db01      	blt.n	800305a <_malloc_r+0x1a>
 8003056:	42a9      	cmp	r1, r5
 8003058:	d903      	bls.n	8003062 <_malloc_r+0x22>
 800305a:	230c      	movs	r3, #12
 800305c:	6033      	str	r3, [r6, #0]
 800305e:	2000      	movs	r0, #0
 8003060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003062:	f000 f87d 	bl	8003160 <__malloc_lock>
 8003066:	4921      	ldr	r1, [pc, #132]	; (80030ec <_malloc_r+0xac>)
 8003068:	680a      	ldr	r2, [r1, #0]
 800306a:	4614      	mov	r4, r2
 800306c:	b99c      	cbnz	r4, 8003096 <_malloc_r+0x56>
 800306e:	4f20      	ldr	r7, [pc, #128]	; (80030f0 <_malloc_r+0xb0>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	b923      	cbnz	r3, 800307e <_malloc_r+0x3e>
 8003074:	4621      	mov	r1, r4
 8003076:	4630      	mov	r0, r6
 8003078:	f000 f862 	bl	8003140 <_sbrk_r>
 800307c:	6038      	str	r0, [r7, #0]
 800307e:	4629      	mov	r1, r5
 8003080:	4630      	mov	r0, r6
 8003082:	f000 f85d 	bl	8003140 <_sbrk_r>
 8003086:	1c43      	adds	r3, r0, #1
 8003088:	d123      	bne.n	80030d2 <_malloc_r+0x92>
 800308a:	230c      	movs	r3, #12
 800308c:	4630      	mov	r0, r6
 800308e:	6033      	str	r3, [r6, #0]
 8003090:	f000 f86c 	bl	800316c <__malloc_unlock>
 8003094:	e7e3      	b.n	800305e <_malloc_r+0x1e>
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	1b5b      	subs	r3, r3, r5
 800309a:	d417      	bmi.n	80030cc <_malloc_r+0x8c>
 800309c:	2b0b      	cmp	r3, #11
 800309e:	d903      	bls.n	80030a8 <_malloc_r+0x68>
 80030a0:	6023      	str	r3, [r4, #0]
 80030a2:	441c      	add	r4, r3
 80030a4:	6025      	str	r5, [r4, #0]
 80030a6:	e004      	b.n	80030b2 <_malloc_r+0x72>
 80030a8:	6863      	ldr	r3, [r4, #4]
 80030aa:	42a2      	cmp	r2, r4
 80030ac:	bf0c      	ite	eq
 80030ae:	600b      	streq	r3, [r1, #0]
 80030b0:	6053      	strne	r3, [r2, #4]
 80030b2:	4630      	mov	r0, r6
 80030b4:	f000 f85a 	bl	800316c <__malloc_unlock>
 80030b8:	f104 000b 	add.w	r0, r4, #11
 80030bc:	1d23      	adds	r3, r4, #4
 80030be:	f020 0007 	bic.w	r0, r0, #7
 80030c2:	1ac2      	subs	r2, r0, r3
 80030c4:	d0cc      	beq.n	8003060 <_malloc_r+0x20>
 80030c6:	1a1b      	subs	r3, r3, r0
 80030c8:	50a3      	str	r3, [r4, r2]
 80030ca:	e7c9      	b.n	8003060 <_malloc_r+0x20>
 80030cc:	4622      	mov	r2, r4
 80030ce:	6864      	ldr	r4, [r4, #4]
 80030d0:	e7cc      	b.n	800306c <_malloc_r+0x2c>
 80030d2:	1cc4      	adds	r4, r0, #3
 80030d4:	f024 0403 	bic.w	r4, r4, #3
 80030d8:	42a0      	cmp	r0, r4
 80030da:	d0e3      	beq.n	80030a4 <_malloc_r+0x64>
 80030dc:	1a21      	subs	r1, r4, r0
 80030de:	4630      	mov	r0, r6
 80030e0:	f000 f82e 	bl	8003140 <_sbrk_r>
 80030e4:	3001      	adds	r0, #1
 80030e6:	d1dd      	bne.n	80030a4 <_malloc_r+0x64>
 80030e8:	e7cf      	b.n	800308a <_malloc_r+0x4a>
 80030ea:	bf00      	nop
 80030ec:	200000b4 	.word	0x200000b4
 80030f0:	200000b8 	.word	0x200000b8

080030f4 <_realloc_r>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	4607      	mov	r7, r0
 80030f8:	4614      	mov	r4, r2
 80030fa:	460e      	mov	r6, r1
 80030fc:	b921      	cbnz	r1, 8003108 <_realloc_r+0x14>
 80030fe:	4611      	mov	r1, r2
 8003100:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003104:	f7ff bf9c 	b.w	8003040 <_malloc_r>
 8003108:	b922      	cbnz	r2, 8003114 <_realloc_r+0x20>
 800310a:	f7ff ff4d 	bl	8002fa8 <_free_r>
 800310e:	4625      	mov	r5, r4
 8003110:	4628      	mov	r0, r5
 8003112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003114:	f000 f830 	bl	8003178 <_malloc_usable_size_r>
 8003118:	42a0      	cmp	r0, r4
 800311a:	d20f      	bcs.n	800313c <_realloc_r+0x48>
 800311c:	4621      	mov	r1, r4
 800311e:	4638      	mov	r0, r7
 8003120:	f7ff ff8e 	bl	8003040 <_malloc_r>
 8003124:	4605      	mov	r5, r0
 8003126:	2800      	cmp	r0, #0
 8003128:	d0f2      	beq.n	8003110 <_realloc_r+0x1c>
 800312a:	4631      	mov	r1, r6
 800312c:	4622      	mov	r2, r4
 800312e:	f7ff ff13 	bl	8002f58 <memcpy>
 8003132:	4631      	mov	r1, r6
 8003134:	4638      	mov	r0, r7
 8003136:	f7ff ff37 	bl	8002fa8 <_free_r>
 800313a:	e7e9      	b.n	8003110 <_realloc_r+0x1c>
 800313c:	4635      	mov	r5, r6
 800313e:	e7e7      	b.n	8003110 <_realloc_r+0x1c>

08003140 <_sbrk_r>:
 8003140:	b538      	push	{r3, r4, r5, lr}
 8003142:	2300      	movs	r3, #0
 8003144:	4d05      	ldr	r5, [pc, #20]	; (800315c <_sbrk_r+0x1c>)
 8003146:	4604      	mov	r4, r0
 8003148:	4608      	mov	r0, r1
 800314a:	602b      	str	r3, [r5, #0]
 800314c:	f7fd fc00 	bl	8000950 <_sbrk>
 8003150:	1c43      	adds	r3, r0, #1
 8003152:	d102      	bne.n	800315a <_sbrk_r+0x1a>
 8003154:	682b      	ldr	r3, [r5, #0]
 8003156:	b103      	cbz	r3, 800315a <_sbrk_r+0x1a>
 8003158:	6023      	str	r3, [r4, #0]
 800315a:	bd38      	pop	{r3, r4, r5, pc}
 800315c:	200001d0 	.word	0x200001d0

08003160 <__malloc_lock>:
 8003160:	4801      	ldr	r0, [pc, #4]	; (8003168 <__malloc_lock+0x8>)
 8003162:	f000 b811 	b.w	8003188 <__retarget_lock_acquire_recursive>
 8003166:	bf00      	nop
 8003168:	200001d8 	.word	0x200001d8

0800316c <__malloc_unlock>:
 800316c:	4801      	ldr	r0, [pc, #4]	; (8003174 <__malloc_unlock+0x8>)
 800316e:	f000 b80c 	b.w	800318a <__retarget_lock_release_recursive>
 8003172:	bf00      	nop
 8003174:	200001d8 	.word	0x200001d8

08003178 <_malloc_usable_size_r>:
 8003178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800317c:	1f18      	subs	r0, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	bfbc      	itt	lt
 8003182:	580b      	ldrlt	r3, [r1, r0]
 8003184:	18c0      	addlt	r0, r0, r3
 8003186:	4770      	bx	lr

08003188 <__retarget_lock_acquire_recursive>:
 8003188:	4770      	bx	lr

0800318a <__retarget_lock_release_recursive>:
 800318a:	4770      	bx	lr

0800318c <_init>:
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	bf00      	nop
 8003190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003192:	bc08      	pop	{r3}
 8003194:	469e      	mov	lr, r3
 8003196:	4770      	bx	lr

08003198 <_fini>:
 8003198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319a:	bf00      	nop
 800319c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319e:	bc08      	pop	{r3}
 80031a0:	469e      	mov	lr, r3
 80031a2:	4770      	bx	lr
