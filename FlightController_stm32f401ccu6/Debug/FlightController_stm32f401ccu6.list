
FlightController_stm32f401ccu6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013020  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  080131c0  080131c0  000231c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a7c  08013a7c  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  08013a7c  08013a7c  00023a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a84  08013a84  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a84  08013a84  00023a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a88  08013a88  00023a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08013a8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  20000238  08013cc0  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a5c  08013cc0  00030a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db28  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000392d  00000000  00000000  0004dd8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  000516c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  00052b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047c6  00000000  00000000  00053e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ba5  00000000  00000000  00058626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094d03  00000000  00000000  000711cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00105ece  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007400  00000000  00000000  00105f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080131a8 	.word	0x080131a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	080131a8 	.word	0x080131a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9ef 	b.w	8001098 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9a4 	b.w	8001098 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	4604      	mov	r4, r0
 8000ddc:	468c      	mov	ip, r1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8083 	bne.w	8000eea <__udivmoddi4+0x116>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4617      	mov	r7, r2
 8000de8:	d947      	bls.n	8000e7a <__udivmoddi4+0xa6>
 8000dea:	fab2 f282 	clz	r2, r2
 8000dee:	b142      	cbz	r2, 8000e02 <__udivmoddi4+0x2e>
 8000df0:	f1c2 0020 	rsb	r0, r2, #32
 8000df4:	fa24 f000 	lsr.w	r0, r4, r0
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4097      	lsls	r7, r2
 8000dfc:	ea40 0c01 	orr.w	ip, r0, r1
 8000e00:	4094      	lsls	r4, r2
 8000e02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e06:	0c23      	lsrs	r3, r4, #16
 8000e08:	fbbc f6f8 	udiv	r6, ip, r8
 8000e0c:	fa1f fe87 	uxth.w	lr, r7
 8000e10:	fb08 c116 	mls	r1, r8, r6, ip
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f10e 	mul.w	r1, r6, lr
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x60>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e26:	f080 8119 	bcs.w	800105c <__udivmoddi4+0x288>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 8116 	bls.w	800105c <__udivmoddi4+0x288>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d909      	bls.n	8000e60 <__udivmoddi4+0x8c>
 8000e4c:	193c      	adds	r4, r7, r4
 8000e4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e52:	f080 8105 	bcs.w	8001060 <__udivmoddi4+0x28c>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	f240 8102 	bls.w	8001060 <__udivmoddi4+0x28c>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	443c      	add	r4, r7
 8000e60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e64:	eba4 040e 	sub.w	r4, r4, lr
 8000e68:	2600      	movs	r6, #0
 8000e6a:	b11d      	cbz	r5, 8000e74 <__udivmoddi4+0xa0>
 8000e6c:	40d4      	lsrs	r4, r2
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e9c5 4300 	strd	r4, r3, [r5]
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	b902      	cbnz	r2, 8000e7e <__udivmoddi4+0xaa>
 8000e7c:	deff      	udf	#255	; 0xff
 8000e7e:	fab2 f282 	clz	r2, r2
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d150      	bne.n	8000f28 <__udivmoddi4+0x154>
 8000e86:	1bcb      	subs	r3, r1, r7
 8000e88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8c:	fa1f f887 	uxth.w	r8, r7
 8000e90:	2601      	movs	r6, #1
 8000e92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e96:	0c21      	lsrs	r1, r4, #16
 8000e98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0xe4>
 8000ea8:	1879      	adds	r1, r7, r1
 8000eaa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0xe2>
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	f200 80e9 	bhi.w	8001088 <__udivmoddi4+0x2b4>
 8000eb6:	4684      	mov	ip, r0
 8000eb8:	1ac9      	subs	r1, r1, r3
 8000eba:	b2a3      	uxth	r3, r4
 8000ebc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ec8:	fb08 f800 	mul.w	r8, r8, r0
 8000ecc:	45a0      	cmp	r8, r4
 8000ece:	d907      	bls.n	8000ee0 <__udivmoddi4+0x10c>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x10a>
 8000ed8:	45a0      	cmp	r8, r4
 8000eda:	f200 80d9 	bhi.w	8001090 <__udivmoddi4+0x2bc>
 8000ede:	4618      	mov	r0, r3
 8000ee0:	eba4 0408 	sub.w	r4, r4, r8
 8000ee4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ee8:	e7bf      	b.n	8000e6a <__udivmoddi4+0x96>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d909      	bls.n	8000f02 <__udivmoddi4+0x12e>
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	f000 80b1 	beq.w	8001056 <__udivmoddi4+0x282>
 8000ef4:	2600      	movs	r6, #0
 8000ef6:	e9c5 0100 	strd	r0, r1, [r5]
 8000efa:	4630      	mov	r0, r6
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	fab3 f683 	clz	r6, r3
 8000f06:	2e00      	cmp	r6, #0
 8000f08:	d14a      	bne.n	8000fa0 <__udivmoddi4+0x1cc>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d302      	bcc.n	8000f14 <__udivmoddi4+0x140>
 8000f0e:	4282      	cmp	r2, r0
 8000f10:	f200 80b8 	bhi.w	8001084 <__udivmoddi4+0x2b0>
 8000f14:	1a84      	subs	r4, r0, r2
 8000f16:	eb61 0103 	sbc.w	r1, r1, r3
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	468c      	mov	ip, r1
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	d0a8      	beq.n	8000e74 <__udivmoddi4+0xa0>
 8000f22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f26:	e7a5      	b.n	8000e74 <__udivmoddi4+0xa0>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f30:	4097      	lsls	r7, r2
 8000f32:	fa01 f002 	lsl.w	r0, r1, r2
 8000f36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f3a:	40d9      	lsrs	r1, r3
 8000f3c:	4330      	orrs	r0, r6
 8000f3e:	0c03      	lsrs	r3, r0, #16
 8000f40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f44:	fa1f f887 	uxth.w	r8, r7
 8000f48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f50:	fb06 f108 	mul.w	r1, r6, r8
 8000f54:	4299      	cmp	r1, r3
 8000f56:	fa04 f402 	lsl.w	r4, r4, r2
 8000f5a:	d909      	bls.n	8000f70 <__udivmoddi4+0x19c>
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f62:	f080 808d 	bcs.w	8001080 <__udivmoddi4+0x2ac>
 8000f66:	4299      	cmp	r1, r3
 8000f68:	f240 808a 	bls.w	8001080 <__udivmoddi4+0x2ac>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	443b      	add	r3, r7
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b281      	uxth	r1, r0
 8000f74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f80:	fb00 f308 	mul.w	r3, r0, r8
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d907      	bls.n	8000f98 <__udivmoddi4+0x1c4>
 8000f88:	1879      	adds	r1, r7, r1
 8000f8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f8e:	d273      	bcs.n	8001078 <__udivmoddi4+0x2a4>
 8000f90:	428b      	cmp	r3, r1
 8000f92:	d971      	bls.n	8001078 <__udivmoddi4+0x2a4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	4439      	add	r1, r7
 8000f98:	1acb      	subs	r3, r1, r3
 8000f9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f9e:	e778      	b.n	8000e92 <__udivmoddi4+0xbe>
 8000fa0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fa4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fa8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fac:	431c      	orrs	r4, r3
 8000fae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	0c3b      	lsrs	r3, r7, #16
 8000fc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc6:	fa1f f884 	uxth.w	r8, r4
 8000fca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fd6:	458a      	cmp	sl, r1
 8000fd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x220>
 8000fe2:	1861      	adds	r1, r4, r1
 8000fe4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fe8:	d248      	bcs.n	800107c <__udivmoddi4+0x2a8>
 8000fea:	458a      	cmp	sl, r1
 8000fec:	d946      	bls.n	800107c <__udivmoddi4+0x2a8>
 8000fee:	f1a9 0902 	sub.w	r9, r9, #2
 8000ff2:	4421      	add	r1, r4
 8000ff4:	eba1 010a 	sub.w	r1, r1, sl
 8000ff8:	b2bf      	uxth	r7, r7
 8000ffa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ffe:	fb0e 1110 	mls	r1, lr, r0, r1
 8001002:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001006:	fb00 f808 	mul.w	r8, r0, r8
 800100a:	45b8      	cmp	r8, r7
 800100c:	d907      	bls.n	800101e <__udivmoddi4+0x24a>
 800100e:	19e7      	adds	r7, r4, r7
 8001010:	f100 31ff 	add.w	r1, r0, #4294967295
 8001014:	d22e      	bcs.n	8001074 <__udivmoddi4+0x2a0>
 8001016:	45b8      	cmp	r8, r7
 8001018:	d92c      	bls.n	8001074 <__udivmoddi4+0x2a0>
 800101a:	3802      	subs	r0, #2
 800101c:	4427      	add	r7, r4
 800101e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001022:	eba7 0708 	sub.w	r7, r7, r8
 8001026:	fba0 8902 	umull	r8, r9, r0, r2
 800102a:	454f      	cmp	r7, r9
 800102c:	46c6      	mov	lr, r8
 800102e:	4649      	mov	r1, r9
 8001030:	d31a      	bcc.n	8001068 <__udivmoddi4+0x294>
 8001032:	d017      	beq.n	8001064 <__udivmoddi4+0x290>
 8001034:	b15d      	cbz	r5, 800104e <__udivmoddi4+0x27a>
 8001036:	ebb3 020e 	subs.w	r2, r3, lr
 800103a:	eb67 0701 	sbc.w	r7, r7, r1
 800103e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001042:	40f2      	lsrs	r2, r6
 8001044:	ea4c 0202 	orr.w	r2, ip, r2
 8001048:	40f7      	lsrs	r7, r6
 800104a:	e9c5 2700 	strd	r2, r7, [r5]
 800104e:	2600      	movs	r6, #0
 8001050:	4631      	mov	r1, r6
 8001052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e70b      	b.n	8000e74 <__udivmoddi4+0xa0>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e9      	b.n	8000e34 <__udivmoddi4+0x60>
 8001060:	4618      	mov	r0, r3
 8001062:	e6fd      	b.n	8000e60 <__udivmoddi4+0x8c>
 8001064:	4543      	cmp	r3, r8
 8001066:	d2e5      	bcs.n	8001034 <__udivmoddi4+0x260>
 8001068:	ebb8 0e02 	subs.w	lr, r8, r2
 800106c:	eb69 0104 	sbc.w	r1, r9, r4
 8001070:	3801      	subs	r0, #1
 8001072:	e7df      	b.n	8001034 <__udivmoddi4+0x260>
 8001074:	4608      	mov	r0, r1
 8001076:	e7d2      	b.n	800101e <__udivmoddi4+0x24a>
 8001078:	4660      	mov	r0, ip
 800107a:	e78d      	b.n	8000f98 <__udivmoddi4+0x1c4>
 800107c:	4681      	mov	r9, r0
 800107e:	e7b9      	b.n	8000ff4 <__udivmoddi4+0x220>
 8001080:	4666      	mov	r6, ip
 8001082:	e775      	b.n	8000f70 <__udivmoddi4+0x19c>
 8001084:	4630      	mov	r0, r6
 8001086:	e74a      	b.n	8000f1e <__udivmoddi4+0x14a>
 8001088:	f1ac 0c02 	sub.w	ip, ip, #2
 800108c:	4439      	add	r1, r7
 800108e:	e713      	b.n	8000eb8 <__udivmoddi4+0xe4>
 8001090:	3802      	subs	r0, #2
 8001092:	443c      	add	r4, r7
 8001094:	e724      	b.n	8000ee0 <__udivmoddi4+0x10c>
 8001096:	bf00      	nop

08001098 <__aeabi_idiv0>:
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <HMC_Init>:
extern int16_t compassX;
extern int16_t compassY;
extern int16_t compassZ;


uint8_t HMC_Init(){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af04      	add	r7, sp, #16
	SetSamplingMode(COMPASS_SAMPLE8 , COMPASS_RATE15, COMPASS_MEASURE_NORMAL);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2110      	movs	r1, #16
 80010a6:	2060      	movs	r0, #96	; 0x60
 80010a8:	f000 f8ac 	bl	8001204 <SetSamplingMode>
	SetScaleMode( COMPASS_SCALE_400);
 80010ac:	2080      	movs	r0, #128	; 0x80
 80010ae:	f000 f8d1 	bl	8001254 <SetScaleMode>
	SetMeasureMode(COMPASS_CONTINUOUS);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 f93c 	bl	8001330 <SetMeasureMode>
	SetDeclination(13, 17, 'E'); // Rybinsk
 80010b8:	2245      	movs	r2, #69	; 0x45
 80010ba:	2111      	movs	r1, #17
 80010bc:	200d      	movs	r0, #13
 80010be:	f000 f85b 	bl	8001178 <SetDeclination>

	HAL_I2C_Mem_Read(HMC5883_I2C, HMC5883L_ADDRESS, COMPASS_CONFIG_REGISTER_A, I2C_MEMADD_SIZE_8BIT, &settings, 1, 1000);
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	2301      	movs	r3, #1
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HMC_Init+0x4c>)
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	2200      	movs	r2, #0
 80010d4:	213c      	movs	r1, #60	; 0x3c
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <HMC_Init+0x50>)
 80010d8:	f005 fd08 	bl	8006aec <HAL_I2C_Mem_Read>
	return settings;
 80010dc:	4b02      	ldr	r3, [pc, #8]	; (80010e8 <HMC_Init+0x4c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000259 	.word	0x20000259
 80010ec:	200004ec 	.word	0x200004ec

080010f0 <HMC_Update>:

uint8_t HMC_Update(float *azimuth){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af04      	add	r7, sp, #16
 80010f6:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick() - last_update_time > COMPASS_TIME_TO_UPDATE){
 80010f8:	f004 fbca 	bl	8005890 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HMC_Update+0x74>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b43      	cmp	r3, #67	; 0x43
 8001106:	d926      	bls.n	8001156 <HMC_Update+0x66>
		last_update_time = HAL_GetTick();
 8001108:	f004 fbc2 	bl	8005890 <HAL_GetTick>
 800110c:	4603      	mov	r3, r0
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <HMC_Update+0x74>)
 8001110:	6013      	str	r3, [r2, #0]

		HAL_I2C_Mem_Read(HMC5883_I2C, HMC5883L_ADDRESS, COMPASS_DATA_READY_REGISER, I2C_MEMADD_SIZE_8BIT, &readyData, 1, 1000);
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2301      	movs	r3, #1
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HMC_Update+0x78>)
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	2209      	movs	r2, #9
 8001124:	213c      	movs	r1, #60	; 0x3c
 8001126:	4811      	ldr	r0, [pc, #68]	; (800116c <HMC_Update+0x7c>)
 8001128:	f005 fce0 	bl	8006aec <HAL_I2C_Mem_Read>
		*azimuth = CompasReadAndCompensate(-MPU6050.AngleX, -MPU6050.AngleY);
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <HMC_Update+0x80>)
 800112e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001132:	eeb1 7a67 	vneg.f32	s14, s15
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HMC_Update+0x80>)
 8001138:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800113c:	eef1 7a67 	vneg.f32	s15, s15
 8001140:	eef0 0a67 	vmov.f32	s1, s15
 8001144:	eeb0 0a47 	vmov.f32	s0, s14
 8001148:	f000 f90a 	bl	8001360 <CompasReadAndCompensate>
 800114c:	eef0 7a40 	vmov.f32	s15, s0
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	edc3 7a00 	vstr	s15, [r3]
			return 0;
		}*/


	}
	return readyData;
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <HMC_Update+0x78>)
 8001158:	781b      	ldrb	r3, [r3, #0]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000254 	.word	0x20000254
 8001168:	20000258 	.word	0x20000258
 800116c:	200004ec 	.word	0x200004ec
 8001170:	200005a0 	.word	0x200005a0
 8001174:	00000000 	.word	0x00000000

08001178 <SetDeclination>:
//   Dunedin     , 25° 8'  EAST
//   Auckland    , 19° 30' EAS
//   SANFINA     , 4°  33' WEST

void SetDeclination( int declination_degs , int declination_mins, char declination_dir )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	4613      	mov	r3, r2
 8001184:	71fb      	strb	r3, [r7, #7]
  // Convert declination to decimal degrees
  switch (declination_dir)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b45      	cmp	r3, #69	; 0x45
 800118a:	d002      	beq.n	8001192 <SetDeclination+0x1a>
 800118c:	2b57      	cmp	r3, #87	; 0x57
 800118e:	d01a      	beq.n	80011c6 <SetDeclination+0x4e>
    // South and West are negative
    case 'W':
      declination_offset_radians =  (( declination_degs + (1 / 60 * declination_mins) ) * (M_PI / 180));
      break;
  }
}
 8001190:	e02b      	b.n	80011ea <SetDeclination+0x72>
      declination_offset_radians = 0 - ( declination_degs + (1 / 60 * declination_mins)) * (M_PI / 180);
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff f9ce 	bl	8000534 <__aeabi_i2d>
 8001198:	a317      	add	r3, pc, #92	; (adr r3, 80011f8 <SetDeclination+0x80>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff fa33 	bl	8000608 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	f04f 0000 	mov.w	r0, #0
 80011aa:	f04f 0100 	mov.w	r1, #0
 80011ae:	f7ff f873 	bl	8000298 <__aeabi_dsub>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fd1d 	bl	8000bf8 <__aeabi_d2f>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <SetDeclination+0x88>)
 80011c2:	6013      	str	r3, [r2, #0]
      break;
 80011c4:	e011      	b.n	80011ea <SetDeclination+0x72>
      declination_offset_radians =  (( declination_degs + (1 / 60 * declination_mins) ) * (M_PI / 180));
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff f9b4 	bl	8000534 <__aeabi_i2d>
 80011cc:	a30a      	add	r3, pc, #40	; (adr r3, 80011f8 <SetDeclination+0x80>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff fa19 	bl	8000608 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fd0b 	bl	8000bf8 <__aeabi_d2f>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a06      	ldr	r2, [pc, #24]	; (8001200 <SetDeclination+0x88>)
 80011e6:	6013      	str	r3, [r2, #0]
      break;
 80011e8:	bf00      	nop
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	f3af 8000 	nop.w
 80011f8:	a2529d39 	.word	0xa2529d39
 80011fc:	3f91df46 	.word	0x3f91df46
 8001200:	200002dc 	.word	0x200002dc

08001204 <SetSamplingMode>:




void SetSamplingMode( uint16_t sampling_mode , uint16_t rate, uint16_t measure)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af04      	add	r7, sp, #16
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
 800120e:	460b      	mov	r3, r1
 8001210:	80bb      	strh	r3, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	807b      	strh	r3, [r7, #2]
  uint8_t data = (sampling_mode | rate | measure);
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b2da      	uxtb	r2, r3
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	b2db      	uxtb	r3, r3
 800122a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(HMC5883_I2C, HMC5883L_ADDRESS, COMPASS_CONFIG_REGISTER_A, 1, &data, 1, HAL_MAX_DELAY);
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	9302      	str	r3, [sp, #8]
 8001232:	2301      	movs	r3, #1
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	f107 030f 	add.w	r3, r7, #15
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	2200      	movs	r2, #0
 8001240:	213c      	movs	r1, #60	; 0x3c
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <SetSamplingMode+0x4c>)
 8001244:	f005 fb58 	bl	80068f8 <HAL_I2C_Mem_Write>
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200004ec 	.word	0x200004ec

08001254 <SetScaleMode>:



void SetScaleMode(uint8_t ScaleMode)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af04      	add	r7, sp, #16
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  switch (ScaleMode) {
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2be0      	cmp	r3, #224	; 0xe0
 8001262:	d036      	beq.n	80012d2 <SetScaleMode+0x7e>
 8001264:	2be0      	cmp	r3, #224	; 0xe0
 8001266:	dc38      	bgt.n	80012da <SetScaleMode+0x86>
 8001268:	2bc0      	cmp	r3, #192	; 0xc0
 800126a:	d02e      	beq.n	80012ca <SetScaleMode+0x76>
 800126c:	2bc0      	cmp	r3, #192	; 0xc0
 800126e:	dc34      	bgt.n	80012da <SetScaleMode+0x86>
 8001270:	2ba0      	cmp	r3, #160	; 0xa0
 8001272:	d026      	beq.n	80012c2 <SetScaleMode+0x6e>
 8001274:	2ba0      	cmp	r3, #160	; 0xa0
 8001276:	dc30      	bgt.n	80012da <SetScaleMode+0x86>
 8001278:	2b80      	cmp	r3, #128	; 0x80
 800127a:	d01e      	beq.n	80012ba <SetScaleMode+0x66>
 800127c:	2b80      	cmp	r3, #128	; 0x80
 800127e:	dc2c      	bgt.n	80012da <SetScaleMode+0x86>
 8001280:	2b60      	cmp	r3, #96	; 0x60
 8001282:	d016      	beq.n	80012b2 <SetScaleMode+0x5e>
 8001284:	2b60      	cmp	r3, #96	; 0x60
 8001286:	dc28      	bgt.n	80012da <SetScaleMode+0x86>
 8001288:	2b40      	cmp	r3, #64	; 0x40
 800128a:	d00e      	beq.n	80012aa <SetScaleMode+0x56>
 800128c:	2b40      	cmp	r3, #64	; 0x40
 800128e:	dc24      	bgt.n	80012da <SetScaleMode+0x86>
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <SetScaleMode+0x46>
 8001294:	2b20      	cmp	r3, #32
 8001296:	d004      	beq.n	80012a2 <SetScaleMode+0x4e>
 8001298:	e01f      	b.n	80012da <SetScaleMode+0x86>
    case COMPASS_SCALE_088:
      scale = 0.73;
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <SetScaleMode+0xb4>)
 800129c:	4a1b      	ldr	r2, [pc, #108]	; (800130c <SetScaleMode+0xb8>)
 800129e:	601a      	str	r2, [r3, #0]
      break;
 80012a0:	e020      	b.n	80012e4 <SetScaleMode+0x90>
    case COMPASS_SCALE_130:
      scale = 0.92;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <SetScaleMode+0xb4>)
 80012a4:	4a1a      	ldr	r2, [pc, #104]	; (8001310 <SetScaleMode+0xbc>)
 80012a6:	601a      	str	r2, [r3, #0]
      break;
 80012a8:	e01c      	b.n	80012e4 <SetScaleMode+0x90>
    case COMPASS_SCALE_190:
      scale = 1.22;
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <SetScaleMode+0xb4>)
 80012ac:	4a19      	ldr	r2, [pc, #100]	; (8001314 <SetScaleMode+0xc0>)
 80012ae:	601a      	str	r2, [r3, #0]
      break;
 80012b0:	e018      	b.n	80012e4 <SetScaleMode+0x90>
    case COMPASS_SCALE_250:
      scale = 1.52;
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <SetScaleMode+0xb4>)
 80012b4:	4a18      	ldr	r2, [pc, #96]	; (8001318 <SetScaleMode+0xc4>)
 80012b6:	601a      	str	r2, [r3, #0]
      break;
 80012b8:	e014      	b.n	80012e4 <SetScaleMode+0x90>
    case COMPASS_SCALE_400:
      scale = 2.27;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <SetScaleMode+0xb4>)
 80012bc:	4a17      	ldr	r2, [pc, #92]	; (800131c <SetScaleMode+0xc8>)
 80012be:	601a      	str	r2, [r3, #0]
      break;
 80012c0:	e010      	b.n	80012e4 <SetScaleMode+0x90>
    case COMPASS_SCALE_470:
      scale = 2.56;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <SetScaleMode+0xb4>)
 80012c4:	4a16      	ldr	r2, [pc, #88]	; (8001320 <SetScaleMode+0xcc>)
 80012c6:	601a      	str	r2, [r3, #0]
      break;
 80012c8:	e00c      	b.n	80012e4 <SetScaleMode+0x90>
    case COMPASS_SCALE_560:
      scale = 3.03;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <SetScaleMode+0xb4>)
 80012cc:	4a15      	ldr	r2, [pc, #84]	; (8001324 <SetScaleMode+0xd0>)
 80012ce:	601a      	str	r2, [r3, #0]
      break;
 80012d0:	e008      	b.n	80012e4 <SetScaleMode+0x90>
    case COMPASS_SCALE_810:
      scale = 4.35;
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <SetScaleMode+0xb4>)
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <SetScaleMode+0xd4>)
 80012d6:	601a      	str	r2, [r3, #0]
      break;
 80012d8:	e004      	b.n	80012e4 <SetScaleMode+0x90>
    default:
      scale = 0.92;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <SetScaleMode+0xb4>)
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <SetScaleMode+0xbc>)
 80012de:	601a      	str	r2, [r3, #0]
      ScaleMode = COMPASS_SCALE_130;
 80012e0:	2320      	movs	r3, #32
 80012e2:	71fb      	strb	r3, [r7, #7]
  }

  HAL_I2C_Mem_Write(HMC5883_I2C, HMC5883L_ADDRESS, COMPASS_CONFIG_REGISTER_B, 1, &ScaleMode, 1, HAL_MAX_DELAY);
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2201      	movs	r2, #1
 80012f6:	213c      	movs	r1, #60	; 0x3c
 80012f8:	480c      	ldr	r0, [pc, #48]	; (800132c <SetScaleMode+0xd8>)
 80012fa:	f005 fafd 	bl	80068f8 <HAL_I2C_Mem_Write>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200002e0 	.word	0x200002e0
 800130c:	3f3ae148 	.word	0x3f3ae148
 8001310:	3f6b851f 	.word	0x3f6b851f
 8001314:	3f9c28f6 	.word	0x3f9c28f6
 8001318:	3fc28f5c 	.word	0x3fc28f5c
 800131c:	401147ae 	.word	0x401147ae
 8001320:	4023d70a 	.word	0x4023d70a
 8001324:	4041eb85 	.word	0x4041eb85
 8001328:	408b3333 	.word	0x408b3333
 800132c:	200004ec 	.word	0x200004ec

08001330 <SetMeasureMode>:



void SetMeasureMode( uint8_t Measure)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af04      	add	r7, sp, #16
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(HMC5883_I2C, HMC5883L_ADDRESS, COMPASS_MODE_REGISTER, 1, &Measure, 1, HAL_MAX_DELAY);
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	2301      	movs	r3, #1
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	1dfb      	adds	r3, r7, #7
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2301      	movs	r3, #1
 800134a:	2202      	movs	r2, #2
 800134c:	213c      	movs	r1, #60	; 0x3c
 800134e:	4803      	ldr	r0, [pc, #12]	; (800135c <SetMeasureMode+0x2c>)
 8001350:	f005 fad2 	bl	80068f8 <HAL_I2C_Mem_Write>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200004ec 	.word	0x200004ec

08001360 <CompasReadAndCompensate>:

float CompasReadAndCompensate(float pitch, float roll)
{
 8001360:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001364:	b090      	sub	sp, #64	; 0x40
 8001366:	af04      	add	r7, sp, #16
 8001368:	ed87 0a01 	vstr	s0, [r7, #4]
 800136c:	edc7 0a00 	vstr	s1, [r7]
  uint8_t buffer[6];
  HAL_I2C_Mem_Read(HMC5883_I2C, HMC5883L_ADDRESS, COMPASS_DATA_REGISTER, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&buffer, 6, HAL_MAX_DELAY);
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	2306      	movs	r3, #6
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2301      	movs	r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	213c      	movs	r1, #60	; 0x3c
 8001386:	48c4      	ldr	r0, [pc, #784]	; (8001698 <CompasReadAndCompensate+0x338>)
 8001388:	f005 fbb0 	bl	8006aec <HAL_I2C_Mem_Read>
  int16_t compass_X = ((buffer[0] << 8) | buffer[1]) * scale;
 800138c:	7b3b      	ldrb	r3, [r7, #12]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	7b7a      	ldrb	r2, [r7, #13]
 8001392:	4313      	orrs	r3, r2
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139c:	4bbf      	ldr	r3, [pc, #764]	; (800169c <CompasReadAndCompensate+0x33c>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013aa:	ee17 3a90 	vmov	r3, s15
 80013ae:	857b      	strh	r3, [r7, #42]	; 0x2a
  int16_t compass_Y = ((buffer[2] << 8) | buffer[3]) * scale;
 80013b0:	7bbb      	ldrb	r3, [r7, #14]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c0:	4bb6      	ldr	r3, [pc, #728]	; (800169c <CompasReadAndCompensate+0x33c>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ce:	ee17 3a90 	vmov	r3, s15
 80013d2:	853b      	strh	r3, [r7, #40]	; 0x28
  int16_t compass_Z = ((buffer[4] << 8) | buffer[5]) * scale;
 80013d4:	7c3b      	ldrb	r3, [r7, #16]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	7c7a      	ldrb	r2, [r7, #17]
 80013da:	4313      	orrs	r3, r2
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e4:	4bad      	ldr	r3, [pc, #692]	; (800169c <CompasReadAndCompensate+0x33c>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f2:	ee17 3a90 	vmov	r3, s15
 80013f6:	84fb      	strh	r3, [r7, #38]	; 0x26

  compassX = compass_X;
 80013f8:	4aa9      	ldr	r2, [pc, #676]	; (80016a0 <CompasReadAndCompensate+0x340>)
 80013fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80013fc:	8013      	strh	r3, [r2, #0]
  compassY = compass_Y;
 80013fe:	4aa9      	ldr	r2, [pc, #676]	; (80016a4 <CompasReadAndCompensate+0x344>)
 8001400:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001402:	8013      	strh	r3, [r2, #0]
  compassZ = compass_Z;
 8001404:	4aa8      	ldr	r2, [pc, #672]	; (80016a8 <CompasReadAndCompensate+0x348>)
 8001406:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001408:	8013      	strh	r3, [r2, #0]

  float IMU_roll = pitch * (M_PI / 180);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff f8a4 	bl	8000558 <__aeabi_f2d>
 8001410:	a39d      	add	r3, pc, #628	; (adr r3, 8001688 <CompasReadAndCompensate+0x328>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff f8f7 	bl	8000608 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fbe9 	bl	8000bf8 <__aeabi_d2f>
 8001426:	4603      	mov	r3, r0
 8001428:	623b      	str	r3, [r7, #32]
    float IMU_pitch = roll * (M_PI / 180);
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f7ff f894 	bl	8000558 <__aeabi_f2d>
 8001430:	a395      	add	r3, pc, #596	; (adr r3, 8001688 <CompasReadAndCompensate+0x328>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8e7 	bl	8000608 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fbd9 	bl	8000bf8 <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	61fb      	str	r3, [r7, #28]

    float XH = compass_X * cos(IMU_pitch) + compass_Y * sin(IMU_roll) * sin(IMU_pitch) - compass_Z * cos(IMU_roll) * sin(IMU_pitch);
 800144a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f870 	bl	8000534 <__aeabi_i2d>
 8001454:	4604      	mov	r4, r0
 8001456:	460d      	mov	r5, r1
 8001458:	69f8      	ldr	r0, [r7, #28]
 800145a:	f7ff f87d 	bl	8000558 <__aeabi_f2d>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	ec43 2b10 	vmov	d0, r2, r3
 8001466:	f00a fb6b 	bl	800bb40 <cos>
 800146a:	ec53 2b10 	vmov	r2, r3, d0
 800146e:	4620      	mov	r0, r4
 8001470:	4629      	mov	r1, r5
 8001472:	f7ff f8c9 	bl	8000608 <__aeabi_dmul>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4690      	mov	r8, r2
 800147c:	4699      	mov	r9, r3
 800147e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f856 	bl	8000534 <__aeabi_i2d>
 8001488:	4604      	mov	r4, r0
 800148a:	460d      	mov	r5, r1
 800148c:	6a38      	ldr	r0, [r7, #32]
 800148e:	f7ff f863 	bl	8000558 <__aeabi_f2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	ec43 2b10 	vmov	d0, r2, r3
 800149a:	f00a fba1 	bl	800bbe0 <sin>
 800149e:	ec53 2b10 	vmov	r2, r3, d0
 80014a2:	4620      	mov	r0, r4
 80014a4:	4629      	mov	r1, r5
 80014a6:	f7ff f8af 	bl	8000608 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4614      	mov	r4, r2
 80014b0:	461d      	mov	r5, r3
 80014b2:	69f8      	ldr	r0, [r7, #28]
 80014b4:	f7ff f850 	bl	8000558 <__aeabi_f2d>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	ec43 2b10 	vmov	d0, r2, r3
 80014c0:	f00a fb8e 	bl	800bbe0 <sin>
 80014c4:	ec53 2b10 	vmov	r2, r3, d0
 80014c8:	4620      	mov	r0, r4
 80014ca:	4629      	mov	r1, r5
 80014cc:	f7ff f89c 	bl	8000608 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4640      	mov	r0, r8
 80014d6:	4649      	mov	r1, r9
 80014d8:	f7fe fee0 	bl	800029c <__adddf3>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4690      	mov	r8, r2
 80014e2:	4699      	mov	r9, r3
 80014e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f823 	bl	8000534 <__aeabi_i2d>
 80014ee:	4604      	mov	r4, r0
 80014f0:	460d      	mov	r5, r1
 80014f2:	6a38      	ldr	r0, [r7, #32]
 80014f4:	f7ff f830 	bl	8000558 <__aeabi_f2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	ec43 2b10 	vmov	d0, r2, r3
 8001500:	f00a fb1e 	bl	800bb40 <cos>
 8001504:	ec53 2b10 	vmov	r2, r3, d0
 8001508:	4620      	mov	r0, r4
 800150a:	4629      	mov	r1, r5
 800150c:	f7ff f87c 	bl	8000608 <__aeabi_dmul>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4614      	mov	r4, r2
 8001516:	461d      	mov	r5, r3
 8001518:	69f8      	ldr	r0, [r7, #28]
 800151a:	f7ff f81d 	bl	8000558 <__aeabi_f2d>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	ec43 2b10 	vmov	d0, r2, r3
 8001526:	f00a fb5b 	bl	800bbe0 <sin>
 800152a:	ec53 2b10 	vmov	r2, r3, d0
 800152e:	4620      	mov	r0, r4
 8001530:	4629      	mov	r1, r5
 8001532:	f7ff f869 	bl	8000608 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4640      	mov	r0, r8
 800153c:	4649      	mov	r1, r9
 800153e:	f7fe feab 	bl	8000298 <__aeabi_dsub>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fb55 	bl	8000bf8 <__aeabi_d2f>
 800154e:	4603      	mov	r3, r0
 8001550:	61bb      	str	r3, [r7, #24]
    float YH = compass_Y * cos(IMU_roll) + compass_Z * sin(IMU_roll);
 8001552:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ffec 	bl	8000534 <__aeabi_i2d>
 800155c:	4604      	mov	r4, r0
 800155e:	460d      	mov	r5, r1
 8001560:	6a38      	ldr	r0, [r7, #32]
 8001562:	f7fe fff9 	bl	8000558 <__aeabi_f2d>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	ec43 2b10 	vmov	d0, r2, r3
 800156e:	f00a fae7 	bl	800bb40 <cos>
 8001572:	ec53 2b10 	vmov	r2, r3, d0
 8001576:	4620      	mov	r0, r4
 8001578:	4629      	mov	r1, r5
 800157a:	f7ff f845 	bl	8000608 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4690      	mov	r8, r2
 8001584:	4699      	mov	r9, r3
 8001586:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffd2 	bl	8000534 <__aeabi_i2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	6a38      	ldr	r0, [r7, #32]
 8001596:	f7fe ffdf 	bl	8000558 <__aeabi_f2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	ec43 2b10 	vmov	d0, r2, r3
 80015a2:	f00a fb1d 	bl	800bbe0 <sin>
 80015a6:	ec53 2b10 	vmov	r2, r3, d0
 80015aa:	4620      	mov	r0, r4
 80015ac:	4629      	mov	r1, r5
 80015ae:	f7ff f82b 	bl	8000608 <__aeabi_dmul>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4640      	mov	r0, r8
 80015b8:	4649      	mov	r1, r9
 80015ba:	f7fe fe6f 	bl	800029c <__adddf3>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff fb17 	bl	8000bf8 <__aeabi_d2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	617b      	str	r3, [r7, #20]
    //float      Azimuth = atan2(compass_Y, compass_X) * 180 / M_PI;
    float Azimuth = atan2(YH, XH) * 180 / M_PI;
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7fe ffc2 	bl	8000558 <__aeabi_f2d>
 80015d4:	4604      	mov	r4, r0
 80015d6:	460d      	mov	r5, r1
 80015d8:	69b8      	ldr	r0, [r7, #24]
 80015da:	f7fe ffbd 	bl	8000558 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	ec43 2b11 	vmov	d1, r2, r3
 80015e6:	ec45 4b10 	vmov	d0, r4, r5
 80015ea:	f00a fb87 	bl	800bcfc <atan2>
 80015ee:	ec51 0b10 	vmov	r0, r1, d0
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <CompasReadAndCompensate+0x34c>)
 80015f8:	f7ff f806 	bl	8000608 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	a322      	add	r3, pc, #136	; (adr r3, 8001690 <CompasReadAndCompensate+0x330>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7ff f927 	bl	800085c <__aeabi_ddiv>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff faef 	bl	8000bf8 <__aeabi_d2f>
 800161a:	4603      	mov	r3, r0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Azimuth += declination_offset_radians; // see https://www.magnetic-declination.com/
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <CompasReadAndCompensate+0x350>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    if (Azimuth < 0) {
 8001630:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	d508      	bpl.n	8001650 <CompasReadAndCompensate+0x2f0>
      Azimuth += 360;
 800163e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001642:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80016b4 <CompasReadAndCompensate+0x354>
 8001646:	ee77 7a87 	vadd.f32	s15, s15, s14
 800164a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800164e:	e010      	b.n	8001672 <CompasReadAndCompensate+0x312>
    }
    else if (Azimuth >= 360) {
 8001650:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001654:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80016b4 <CompasReadAndCompensate+0x354>
 8001658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	db07      	blt.n	8001672 <CompasReadAndCompensate+0x312>
      Azimuth -= 360;
 8001662:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001666:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80016b4 <CompasReadAndCompensate+0x354>
 800166a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800166e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }

    return Azimuth;
 8001672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001674:	ee07 3a90 	vmov	s15, r3
}
 8001678:	eeb0 0a67 	vmov.f32	s0, s15
 800167c:	3730      	adds	r7, #48	; 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001684:	f3af 8000 	nop.w
 8001688:	a2529d39 	.word	0xa2529d39
 800168c:	3f91df46 	.word	0x3f91df46
 8001690:	54442d18 	.word	0x54442d18
 8001694:	400921fb 	.word	0x400921fb
 8001698:	200004ec 	.word	0x200004ec
 800169c:	200002e0 	.word	0x200002e0
 80016a0:	200002be 	.word	0x200002be
 80016a4:	200002c0 	.word	0x200002c0
 80016a8:	200002c2 	.word	0x200002c2
 80016ac:	40668000 	.word	0x40668000
 80016b0:	200002dc 	.word	0x200002dc
 80016b4:	43b40000 	.word	0x43b40000

080016b8 <imuQuaternionComputeProducts>:

// absolute angle inclination in multiple of 0.1 degree    180 deg = 1800
attitudeEulerAngles_t attitude = EULER_INITIALIZE;

static void imuQuaternionComputeProducts(quaternion *quat, quaternionProducts *quatProd)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
    quatProd->ww = quat->w * quat->w;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	ed93 7a00 	vldr	s14, [r3]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	edc3 7a00 	vstr	s15, [r3]
    quatProd->wx = quat->w * quat->x;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	ed93 7a00 	vldr	s14, [r3]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80016e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	edc3 7a01 	vstr	s15, [r3, #4]
    quatProd->wy = quat->w * quat->y;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	ed93 7a00 	vldr	s14, [r3]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80016fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	edc3 7a02 	vstr	s15, [r3, #8]
    quatProd->wz = quat->w * quat->z;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	ed93 7a00 	vldr	s14, [r3]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	edc3 7a03 	vstr	s15, [r3, #12]
    quatProd->xx = quat->x * quat->x;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	edd3 7a01 	vldr	s15, [r3, #4]
 8001726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	edc3 7a04 	vstr	s15, [r3, #16]
    quatProd->xy = quat->x * quat->y;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	ed93 7a01 	vldr	s14, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edd3 7a02 	vldr	s15, [r3, #8]
 800173c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	edc3 7a05 	vstr	s15, [r3, #20]
    quatProd->xz = quat->x * quat->z;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	ed93 7a01 	vldr	s14, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	edc3 7a06 	vstr	s15, [r3, #24]
    quatProd->yy = quat->y * quat->y;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	edd3 7a02 	vldr	s15, [r3, #8]
 8001768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	edc3 7a07 	vstr	s15, [r3, #28]
    quatProd->yz = quat->y * quat->z;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	ed93 7a02 	vldr	s14, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	edd3 7a03 	vldr	s15, [r3, #12]
 800177e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	edc3 7a08 	vstr	s15, [r3, #32]
    quatProd->zz = quat->z * quat->z;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	ed93 7a03 	vldr	s14, [r3, #12]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	edd3 7a03 	vldr	s15, [r3, #12]
 8001794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <imuComputeRotationMatrix>:
 void imuComputeRotationMatrix(void){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
    imuQuaternionComputeProducts(&q, &qP);
 80017b0:	4946      	ldr	r1, [pc, #280]	; (80018cc <imuComputeRotationMatrix+0x120>)
 80017b2:	4847      	ldr	r0, [pc, #284]	; (80018d0 <imuComputeRotationMatrix+0x124>)
 80017b4:	f7ff ff80 	bl	80016b8 <imuQuaternionComputeProducts>

    rMat[0][0] = 1.0f - 2.0f * qP.yy - 2.0f * qP.zz;
 80017b8:	4b44      	ldr	r3, [pc, #272]	; (80018cc <imuComputeRotationMatrix+0x120>)
 80017ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80017be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ca:	4b40      	ldr	r3, [pc, #256]	; (80018cc <imuComputeRotationMatrix+0x120>)
 80017cc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80017d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d8:	4b3e      	ldr	r3, [pc, #248]	; (80018d4 <imuComputeRotationMatrix+0x128>)
 80017da:	edc3 7a00 	vstr	s15, [r3]
    rMat[0][1] = 2.0f * (qP.xy + -qP.wz);
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <imuComputeRotationMatrix+0x120>)
 80017e0:	ed93 7a05 	vldr	s14, [r3, #20]
 80017e4:	4b39      	ldr	r3, [pc, #228]	; (80018cc <imuComputeRotationMatrix+0x120>)
 80017e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80017ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017f2:	4b38      	ldr	r3, [pc, #224]	; (80018d4 <imuComputeRotationMatrix+0x128>)
 80017f4:	edc3 7a01 	vstr	s15, [r3, #4]
    rMat[0][2] = 2.0f * (qP.xz - -qP.wy);
 80017f8:	4b34      	ldr	r3, [pc, #208]	; (80018cc <imuComputeRotationMatrix+0x120>)
 80017fa:	ed93 7a06 	vldr	s14, [r3, #24]
 80017fe:	4b33      	ldr	r3, [pc, #204]	; (80018cc <imuComputeRotationMatrix+0x120>)
 8001800:	edd3 7a02 	vldr	s15, [r3, #8]
 8001804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001808:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800180c:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <imuComputeRotationMatrix+0x128>)
 800180e:	edc3 7a02 	vstr	s15, [r3, #8]

    rMat[1][0] = 2.0f * (qP.xy - -qP.wz);
 8001812:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <imuComputeRotationMatrix+0x120>)
 8001814:	ed93 7a05 	vldr	s14, [r3, #20]
 8001818:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <imuComputeRotationMatrix+0x120>)
 800181a:	edd3 7a03 	vldr	s15, [r3, #12]
 800181e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001822:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <imuComputeRotationMatrix+0x128>)
 8001828:	edc3 7a03 	vstr	s15, [r3, #12]
    rMat[1][1] = 1.0f - 2.0f * qP.xx - 2.0f * qP.zz;
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <imuComputeRotationMatrix+0x120>)
 800182e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001832:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800183a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <imuComputeRotationMatrix+0x120>)
 8001840:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001844:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184c:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <imuComputeRotationMatrix+0x128>)
 800184e:	edc3 7a04 	vstr	s15, [r3, #16]
    rMat[1][2] = 2.0f * (qP.yz + -qP.wx);
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <imuComputeRotationMatrix+0x120>)
 8001854:	ed93 7a08 	vldr	s14, [r3, #32]
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <imuComputeRotationMatrix+0x120>)
 800185a:	edd3 7a01 	vldr	s15, [r3, #4]
 800185e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001862:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <imuComputeRotationMatrix+0x128>)
 8001868:	edc3 7a05 	vstr	s15, [r3, #20]

    rMat[2][0] = 2.0f * (qP.xz + -qP.wy);
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <imuComputeRotationMatrix+0x120>)
 800186e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <imuComputeRotationMatrix+0x120>)
 8001874:	edd3 7a02 	vldr	s15, [r3, #8]
 8001878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <imuComputeRotationMatrix+0x128>)
 8001882:	edc3 7a06 	vstr	s15, [r3, #24]
    rMat[2][1] = 2.0f * (qP.yz - -qP.wx);
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <imuComputeRotationMatrix+0x120>)
 8001888:	ed93 7a08 	vldr	s14, [r3, #32]
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <imuComputeRotationMatrix+0x120>)
 800188e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001896:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <imuComputeRotationMatrix+0x128>)
 800189c:	edc3 7a07 	vstr	s15, [r3, #28]
    rMat[2][2] = 1.0f - 2.0f * qP.xx - 2.0f * qP.yy;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <imuComputeRotationMatrix+0x120>)
 80018a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80018a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <imuComputeRotationMatrix+0x120>)
 80018b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80018b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <imuComputeRotationMatrix+0x128>)
 80018c2:	edc3 7a08 	vstr	s15, [r3, #32]


}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000014 	.word	0x20000014
 80018d0:	20000004 	.word	0x20000004
 80018d4:	200002e4 	.word	0x200002e4

080018d8 <imuConfigure>:
{
    return (1800.0f / M_PIf) * (900.0f / throttle_correction_angle);
}

void imuConfigure(uint16_t throttle_correction_angle, uint8_t throttle_correction_value)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	460a      	mov	r2, r1
 80018e2:	80fb      	strh	r3, [r7, #6]
 80018e4:	4613      	mov	r3, r2
 80018e6:	717b      	strb	r3, [r7, #5]
    imuRuntimeConfig.dcm_kp = imuConfig.dcm_kp / 10000.0f;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <imuConfigure+0x50>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800192c <imuConfigure+0x54>
 80018f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <imuConfigure+0x58>)
 80018fe:	edc3 7a01 	vstr	s15, [r3, #4]
    imuRuntimeConfig.dcm_ki = imuConfig.dcm_ki / 10000.0f;
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <imuConfigure+0x50>)
 8001904:	885b      	ldrh	r3, [r3, #2]
 8001906:	ee07 3a90 	vmov	s15, r3
 800190a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800190e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800192c <imuConfigure+0x54>
 8001912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <imuConfigure+0x58>)
 8001918:	edc3 7a00 	vstr	s15, [r3]

}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	20000308 	.word	0x20000308
 800192c:	461c4000 	.word	0x461c4000
 8001930:	2000025c 	.word	0x2000025c

08001934 <imuInit>:

void imuInit(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	imuConfig.dcm_ki = 5;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <imuInit+0x20>)
 800193a:	2205      	movs	r2, #5
 800193c:	805a      	strh	r2, [r3, #2]
	imuConfigure(1, 1);
 800193e:	2101      	movs	r1, #1
 8001940:	2001      	movs	r0, #1
 8001942:	f7ff ffc9 	bl	80018d8 <imuConfigure>

#ifdef USE_GPS
    canUseGPSHeading = true;
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <imuInit+0x24>)
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
#else
    canUseGPSHeading = false;
#endif

    imuComputeRotationMatrix();
 800194c:	f7ff ff2e 	bl	80017ac <imuComputeRotationMatrix>


}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000308 	.word	0x20000308
 8001958:	20000000 	.word	0x20000000

0800195c <CalculatePitchPid>:
 *      Author: arosl
 */

#include "PID.h"

void CalculatePitchPid(float pitch, float targetPitch) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	ed87 0a01 	vstr	s0, [r7, #4]
 8001966:	edc7 0a00 	vstr	s1, [r7]

	PitchPID.errorCurrent = targetPitch - pitch;
 800196a:	ed97 7a00 	vldr	s14, [r7]
 800196e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001976:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001978:	edc3 7a04 	vstr	s15, [r3, #16]

	if ((((PitchPID.Ki * PitchPID.errorIntegral) <= PID_MAX_VALUE)
 800197c:	4b51      	ldr	r3, [pc, #324]	; (8001ac4 <CalculatePitchPid+0x168>)
 800197e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001982:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001984:	edd3 7a05 	vldr	s15, [r3, #20]
 8001988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800198c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001ac8 <CalculatePitchPid+0x16c>
 8001990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001998:	d807      	bhi.n	80019aa <CalculatePitchPid+0x4e>
			&& (PitchPID.errorCurrent >= 0))
 800199a:	4b4a      	ldr	r3, [pc, #296]	; (8001ac4 <CalculatePitchPid+0x168>)
 800199c:	edd3 7a04 	vldr	s15, [r3, #16]
 80019a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a8:	da16      	bge.n	80019d8 <CalculatePitchPid+0x7c>
			|| (((PitchPID.Ki * PitchPID.errorIntegral) >= PID_MIN_VALUE)
 80019aa:	4b46      	ldr	r3, [pc, #280]	; (8001ac4 <CalculatePitchPid+0x168>)
 80019ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80019b0:	4b44      	ldr	r3, [pc, #272]	; (8001ac4 <CalculatePitchPid+0x168>)
 80019b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80019b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ba:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001acc <CalculatePitchPid+0x170>
 80019be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	db16      	blt.n	80019f6 <CalculatePitchPid+0x9a>
					&& (PitchPID.errorCurrent < 0))) {
 80019c8:	4b3e      	ldr	r3, [pc, #248]	; (8001ac4 <CalculatePitchPid+0x168>)
 80019ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80019ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d6:	d50e      	bpl.n	80019f6 <CalculatePitchPid+0x9a>
		PitchPID.errorIntegral += PitchPID.errorCurrent * PID_dt;
 80019d8:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <CalculatePitchPid+0x168>)
 80019da:	ed93 7a05 	vldr	s14, [r3, #20]
 80019de:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <CalculatePitchPid+0x168>)
 80019e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80019e4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001ad0 <CalculatePitchPid+0x174>
 80019e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f0:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <CalculatePitchPid+0x168>)
 80019f2:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	PitchPID.errorDifferential =
			biquadFilterApplyDF1(&PitchPID.DTermLowpass, (PitchPID.errorCurrent - PitchPID.errorPrevious) / PID_dt);
 80019f6:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <CalculatePitchPid+0x168>)
 80019f8:	ed93 7a04 	vldr	s14, [r3, #16]
 80019fc:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <CalculatePitchPid+0x168>)
 80019fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a06:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001ad0 <CalculatePitchPid+0x174>
 8001a0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a0e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a12:	4830      	ldr	r0, [pc, #192]	; (8001ad4 <CalculatePitchPid+0x178>)
 8001a14:	f001 f808 	bl	8002a28 <biquadFilterApplyDF1>
 8001a18:	eef0 7a40 	vmov.f32	s15, s0
	PitchPID.errorDifferential =
 8001a1c:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001a1e:	edc3 7a06 	vstr	s15, [r3, #24]
	biquadFilterUpdateLPF(&PitchPID.DTermLowpass, 20, 1000);
 8001a22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a26:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001a2a:	482a      	ldr	r0, [pc, #168]	; (8001ad4 <CalculatePitchPid+0x178>)
 8001a2c:	f000 ffe4 	bl	80029f8 <biquadFilterUpdateLPF>

	float value = PitchPID.Kp * PitchPID.errorCurrent
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001a32:	ed93 7a00 	vldr	s14, [r3]
 8001a36:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001a38:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ PitchPID.Ki * PitchPID.errorIntegral
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001a42:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a46:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001a48:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a50:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ PitchPID.Kd * PitchPID.errorDifferential;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001a56:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001a5c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float value = PitchPID.Kp * PitchPID.errorCurrent
 8001a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a68:	edc7 7a03 	vstr	s15, [r7, #12]

	PitchPID.PWM_Duty = 1500 + value;
 8001a6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a70:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001ad8 <CalculatePitchPid+0x17c>
 8001a74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a7c:	ee17 3a90 	vmov	r3, s15
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001a84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	if (PitchPID.PWM_Duty < PID_DUTY_CYCLE_MIN) {
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001a8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a92:	d204      	bcs.n	8001a9e <CalculatePitchPid+0x142>
		PitchPID.PWM_Duty = PID_DUTY_CYCLE_MIN;
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001a96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}
	if (PitchPID.PWM_Duty > PID_DUTY_CYCLE_MAX) {
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001aa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aa4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001aa8:	d904      	bls.n	8001ab4 <CalculatePitchPid+0x158>
		PitchPID.PWM_Duty = PID_DUTY_CYCLE_MAX;
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001aac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ab0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	PitchPID.errorPrevious = PitchPID.errorCurrent;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	4a02      	ldr	r2, [pc, #8]	; (8001ac4 <CalculatePitchPid+0x168>)
 8001aba:	60d3      	str	r3, [r2, #12]

}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000378 	.word	0x20000378
 8001ac8:	43c80000 	.word	0x43c80000
 8001acc:	c3c80000 	.word	0xc3c80000
 8001ad0:	3a83126f 	.word	0x3a83126f
 8001ad4:	20000394 	.word	0x20000394
 8001ad8:	44bb8000 	.word	0x44bb8000

08001adc <CalculateRollPid>:

void CalculateRollPid(float roll, float targetRoll) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ae6:	edc7 0a00 	vstr	s1, [r7]
	RollPID.errorCurrent = targetRoll - roll;
 8001aea:	ed97 7a00 	vldr	s14, [r7]
 8001aee:	edd7 7a01 	vldr	s15, [r7, #4]
 8001af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af6:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <CalculateRollPid+0x168>)
 8001af8:	edc3 7a04 	vstr	s15, [r3, #16]

	if ((((RollPID.Ki * RollPID.errorIntegral) <= PID_MAX_VALUE)
 8001afc:	4b51      	ldr	r3, [pc, #324]	; (8001c44 <CalculateRollPid+0x168>)
 8001afe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b02:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <CalculateRollPid+0x168>)
 8001b04:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001c48 <CalculateRollPid+0x16c>
 8001b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	d807      	bhi.n	8001b2a <CalculateRollPid+0x4e>
			&& (RollPID.errorCurrent >= 0))
 8001b1a:	4b4a      	ldr	r3, [pc, #296]	; (8001c44 <CalculateRollPid+0x168>)
 8001b1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	da16      	bge.n	8001b58 <CalculateRollPid+0x7c>
			|| (((RollPID.Ki * RollPID.errorIntegral) >= PID_MIN_VALUE)
 8001b2a:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <CalculateRollPid+0x168>)
 8001b2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b30:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <CalculateRollPid+0x168>)
 8001b32:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001c4c <CalculateRollPid+0x170>
 8001b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	db16      	blt.n	8001b76 <CalculateRollPid+0x9a>
					&& (RollPID.errorCurrent < 0))) {
 8001b48:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <CalculateRollPid+0x168>)
 8001b4a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b56:	d50e      	bpl.n	8001b76 <CalculateRollPid+0x9a>
		RollPID.errorIntegral += RollPID.errorCurrent * PID_dt;
 8001b58:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <CalculateRollPid+0x168>)
 8001b5a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b5e:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <CalculateRollPid+0x168>)
 8001b60:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b64:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001c50 <CalculateRollPid+0x174>
 8001b68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b70:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <CalculateRollPid+0x168>)
 8001b72:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	RollPID.errorDifferential =
			biquadFilterApplyDF1(&RollPID.DTermLowpass, (RollPID.errorCurrent - RollPID.errorPrevious) / PID_dt);
 8001b76:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <CalculateRollPid+0x168>)
 8001b78:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b7c:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <CalculateRollPid+0x168>)
 8001b7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b86:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001c50 <CalculateRollPid+0x174>
 8001b8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b92:	4830      	ldr	r0, [pc, #192]	; (8001c54 <CalculateRollPid+0x178>)
 8001b94:	f000 ff48 	bl	8002a28 <biquadFilterApplyDF1>
 8001b98:	eef0 7a40 	vmov.f32	s15, s0
	RollPID.errorDifferential =
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <CalculateRollPid+0x168>)
 8001b9e:	edc3 7a06 	vstr	s15, [r3, #24]
	biquadFilterUpdateLPF(&RollPID.DTermLowpass, 20, 1000);
 8001ba2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ba6:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001baa:	482a      	ldr	r0, [pc, #168]	; (8001c54 <CalculateRollPid+0x178>)
 8001bac:	f000 ff24 	bl	80029f8 <biquadFilterUpdateLPF>

	float value = RollPID.Kp * RollPID.errorCurrent
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <CalculateRollPid+0x168>)
 8001bb2:	ed93 7a00 	vldr	s14, [r3]
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <CalculateRollPid+0x168>)
 8001bb8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ RollPID.Ki * RollPID.errorIntegral
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <CalculateRollPid+0x168>)
 8001bc2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <CalculateRollPid+0x168>)
 8001bc8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd0:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ RollPID.Kd * RollPID.errorDifferential;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <CalculateRollPid+0x168>)
 8001bd6:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <CalculateRollPid+0x168>)
 8001bdc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float value = RollPID.Kp * RollPID.errorCurrent
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	edc7 7a03 	vstr	s15, [r7, #12]

	RollPID.PWM_Duty = 1500 + value;
 8001bec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bf0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001c58 <CalculateRollPid+0x17c>
 8001bf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfc:	ee17 3a90 	vmov	r3, s15
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <CalculateRollPid+0x168>)
 8001c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	if (RollPID.PWM_Duty < PID_DUTY_CYCLE_MIN) {
 8001c08:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <CalculateRollPid+0x168>)
 8001c0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c12:	d204      	bcs.n	8001c1e <CalculateRollPid+0x142>
		RollPID.PWM_Duty = PID_DUTY_CYCLE_MIN;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <CalculateRollPid+0x168>)
 8001c16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}
	if (RollPID.PWM_Duty > PID_DUTY_CYCLE_MAX) {
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <CalculateRollPid+0x168>)
 8001c20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c24:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c28:	d904      	bls.n	8001c34 <CalculateRollPid+0x158>
		RollPID.PWM_Duty = PID_DUTY_CYCLE_MAX;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <CalculateRollPid+0x168>)
 8001c2c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}

	RollPID.errorPrevious = RollPID.errorCurrent;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <CalculateRollPid+0x168>)
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	4a02      	ldr	r2, [pc, #8]	; (8001c44 <CalculateRollPid+0x168>)
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000310 	.word	0x20000310
 8001c48:	43c80000 	.word	0x43c80000
 8001c4c:	c3c80000 	.word	0xc3c80000
 8001c50:	3a83126f 	.word	0x3a83126f
 8001c54:	2000032c 	.word	0x2000032c
 8001c58:	44bb8000 	.word	0x44bb8000

08001c5c <CalculatePID>:

void CalculatePID(float pitch, float roll, float targetPitch, float targetRoll) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c66:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c6a:	ed87 1a01 	vstr	s2, [r7, #4]
 8001c6e:	edc7 1a00 	vstr	s3, [r7]
	CalculatePitchPid(pitch, targetPitch);
 8001c72:	edd7 0a01 	vldr	s1, [r7, #4]
 8001c76:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c7a:	f7ff fe6f 	bl	800195c <CalculatePitchPid>
	CalculateRollPid(roll, targetRoll);
 8001c7e:	edd7 0a00 	vldr	s1, [r7]
 8001c82:	ed97 0a02 	vldr	s0, [r7, #8]
 8001c86:	f7ff ff29 	bl	8001adc <CalculateRollPid>
}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <DTermFilterInit>:

void DTermFilterInit(){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	biquadFilterInitLPF(&PitchPID.DTermLowpass, 20, 1000);
 8001c98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c9c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001ca0:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <DTermFilterInit+0x24>)
 8001ca2:	f000 fd73 	bl	800278c <biquadFilterInitLPF>
	biquadFilterInitLPF(&RollPID.DTermLowpass, 20, 1000);
 8001ca6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001caa:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001cae:	4803      	ldr	r0, [pc, #12]	; (8001cbc <DTermFilterInit+0x28>)
 8001cb0:	f000 fd6c 	bl	800278c <biquadFilterInitLPF>
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000394 	.word	0x20000394
 8001cbc:	2000032c 	.word	0x2000032c

08001cc0 <bmp280_init_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_params(bmp280_params_t *params) {
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2203      	movs	r2, #3
 8001ccc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_16;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_ULTRA_HIGH_RES;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_LOW_POWER;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_LOW_POWER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_05;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	715a      	strb	r2, [r3, #5]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af04      	add	r7, sp, #16
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	460b      	mov	r3, r1
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001d12:	7afb      	ldrb	r3, [r7, #11]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	8af9      	ldrh	r1, [r7, #22]
 8001d18:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d1c:	9302      	str	r3, [sp, #8]
 8001d1e:	2302      	movs	r3, #2
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	f004 fedf 	bl	8006aec <HAL_I2C_Mem_Read>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10b      	bne.n	8001d4c <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001d34:	7d7b      	ldrb	r3, [r7, #21]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	7d3b      	ldrb	r3, [r7, #20]
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	801a      	strh	r2, [r3, #0]
		return true;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <read_register16+0x56>
	} else
		return false;
 8001d4c:	2300      	movs	r3, #0

}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001d56:	b590      	push	{r4, r7, lr}
 8001d58:	b08b      	sub	sp, #44	; 0x2c
 8001d5a:	af04      	add	r7, sp, #16
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	461a      	mov	r2, r3
 8001d62:	460b      	mov	r3, r1
 8001d64:	72fb      	strb	r3, [r7, #11]
 8001d66:	4613      	mov	r3, r2
 8001d68:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001d76:	7afb      	ldrb	r3, [r7, #11]
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	7abb      	ldrb	r3, [r7, #10]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	8af9      	ldrh	r1, [r7, #22]
 8001d80:	f241 3488 	movw	r4, #5000	; 0x1388
 8001d84:	9402      	str	r4, [sp, #8]
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f004 fead 	bl	8006aec <HAL_I2C_Mem_Read>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <read_data+0x46>
		return 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	e000      	b.n	8001d9e <read_data+0x48>
	else
		return 1;
 8001d9c:	2301      	movs	r3, #1

}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd90      	pop	{r4, r7, pc}

08001da6 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	461a      	mov	r2, r3
 8001db2:	2188      	movs	r1, #136	; 0x88
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff9f 	bl	8001cf8 <read_register16>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d06f      	beq.n	8001ea0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	218a      	movs	r1, #138	; 0x8a
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff95 	bl	8001cf8 <read_register16>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d065      	beq.n	8001ea0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	461a      	mov	r2, r3
 8001dda:	218c      	movs	r1, #140	; 0x8c
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff8b 	bl	8001cf8 <read_register16>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d05b      	beq.n	8001ea0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3306      	adds	r3, #6
 8001dec:	461a      	mov	r2, r3
 8001dee:	218e      	movs	r1, #142	; 0x8e
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff81 	bl	8001cf8 <read_register16>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d051      	beq.n	8001ea0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3308      	adds	r3, #8
 8001e00:	461a      	mov	r2, r3
 8001e02:	2190      	movs	r1, #144	; 0x90
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff77 	bl	8001cf8 <read_register16>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d047      	beq.n	8001ea0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	330a      	adds	r3, #10
 8001e14:	461a      	mov	r2, r3
 8001e16:	2192      	movs	r1, #146	; 0x92
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff6d 	bl	8001cf8 <read_register16>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d03d      	beq.n	8001ea0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	330c      	adds	r3, #12
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2194      	movs	r1, #148	; 0x94
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff63 	bl	8001cf8 <read_register16>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d033      	beq.n	8001ea0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	330e      	adds	r3, #14
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2196      	movs	r1, #150	; 0x96
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff59 	bl	8001cf8 <read_register16>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d029      	beq.n	8001ea0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3310      	adds	r3, #16
 8001e50:	461a      	mov	r2, r3
 8001e52:	2198      	movs	r1, #152	; 0x98
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff4f 	bl	8001cf8 <read_register16>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01f      	beq.n	8001ea0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3312      	adds	r3, #18
 8001e64:	461a      	mov	r2, r3
 8001e66:	219a      	movs	r1, #154	; 0x9a
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff45 	bl	8001cf8 <read_register16>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d015      	beq.n	8001ea0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3314      	adds	r3, #20
 8001e78:	461a      	mov	r2, r3
 8001e7a:	219c      	movs	r1, #156	; 0x9c
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff3b 	bl	8001cf8 <read_register16>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00b      	beq.n	8001ea0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	219e      	movs	r1, #158	; 0x9e
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff31 	bl	8001cf8 <read_register16>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <read_calibration_data+0xfa>

		return true;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <read_calibration_data+0xfc>
	}

	return false;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f103 0218 	add.w	r2, r3, #24
 8001eb8:	2301      	movs	r3, #1
 8001eba:	21a1      	movs	r1, #161	; 0xa1
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff4a 	bl	8001d56 <read_data>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d14b      	bne.n	8001f60 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	331a      	adds	r3, #26
 8001ecc:	461a      	mov	r2, r3
 8001ece:	21e1      	movs	r1, #225	; 0xe1
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff11 	bl	8001cf8 <read_register16>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d041      	beq.n	8001f60 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f103 021c 	add.w	r2, r3, #28
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	21e3      	movs	r1, #227	; 0xe3
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ff35 	bl	8001d56 <read_data>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d136      	bne.n	8001f60 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001ef2:	f107 030e 	add.w	r3, r7, #14
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	21e4      	movs	r1, #228	; 0xe4
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff fefc 	bl	8001cf8 <read_register16>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d02c      	beq.n	8001f60 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	21e5      	movs	r1, #229	; 0xe5
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fef2 	bl	8001cf8 <read_register16>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d022      	beq.n	8001f60 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001f20:	2301      	movs	r3, #1
 8001f22:	21e7      	movs	r1, #231	; 0xe7
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff16 	bl	8001d56 <read_data>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d117      	bne.n	8001f60 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001f30:	89fb      	ldrh	r3, [r7, #14]
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001f3a:	b21a      	sxth	r2, r3
 8001f3c:	89fb      	ldrh	r3, [r7, #14]
 8001f3e:	121b      	asrs	r3, r3, #8
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b21a      	sxth	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001f50:	89bb      	ldrh	r3, [r7, #12]
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	b21a      	sxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	841a      	strh	r2, [r3, #32]

		return true;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b088      	sub	sp, #32
 8001f6e:	af04      	add	r7, sp, #16
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	70fb      	strb	r3, [r7, #3]
 8001f76:	4613      	mov	r3, r2
 8001f78:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	89f9      	ldrh	r1, [r7, #14]
 8001f8c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001f90:	9302      	str	r3, [sp, #8]
 8001f92:	2301      	movs	r3, #1
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	1cbb      	adds	r3, r7, #2
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f004 fcac 	bl	80068f8 <HAL_I2C_Mem_Write>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <write_register8+0x40>
		return false;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <write_register8+0x42>
	else
		return true;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001fc2:	2b76      	cmp	r3, #118	; 0x76
 8001fc4:	d005      	beq.n	8001fd2 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001fca:	2b77      	cmp	r3, #119	; 0x77
 8001fcc:	d001      	beq.n	8001fd2 <bmp280_init+0x1e>

		return false;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e099      	b.n	8002106 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001fd8:	2301      	movs	r3, #1
 8001fda:	21d0      	movs	r1, #208	; 0xd0
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff feba 	bl	8001d56 <read_data>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <bmp280_init+0x38>
		return false;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e08c      	b.n	8002106 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001ff2:	2b58      	cmp	r3, #88	; 0x58
 8001ff4:	d006      	beq.n	8002004 <bmp280_init+0x50>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001ffc:	2b60      	cmp	r3, #96	; 0x60
 8001ffe:	d001      	beq.n	8002004 <bmp280_init+0x50>

		return false;
 8002000:	2300      	movs	r3, #0
 8002002:	e080      	b.n	8002106 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8002004:	22b6      	movs	r2, #182	; 0xb6
 8002006:	21e0      	movs	r1, #224	; 0xe0
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ffae 	bl	8001f6a <write_register8>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <bmp280_init+0x64>
		return false;
 8002014:	2300      	movs	r3, #0
 8002016:	e076      	b.n	8002106 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8002018:	f107 020c 	add.w	r2, r7, #12
 800201c:	2301      	movs	r3, #1
 800201e:	21f3      	movs	r1, #243	; 0xf3
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff fe98 	bl	8001d56 <read_data>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f5      	bne.n	8002018 <bmp280_init+0x64>
				&& (status & 1) == 0)
 800202c:	7b3b      	ldrb	r3, [r7, #12]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff feb5 	bl	8001da6 <read_calibration_data>
 800203c:	4603      	mov	r3, r0
 800203e:	f083 0301 	eor.w	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d100      	bne.n	800204a <bmp280_init+0x96>
 8002048:	e001      	b.n	800204e <bmp280_init+0x9a>
		return false;
 800204a:	2300      	movs	r3, #0
 800204c:	e05b      	b.n	8002106 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002054:	2b60      	cmp	r3, #96	; 0x60
 8002056:	d10a      	bne.n	800206e <bmp280_init+0xba>
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff26 	bl	8001eaa <read_hum_calibration_data>
 800205e:	4603      	mov	r3, r0
 8002060:	f083 0301 	eor.w	r3, r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <bmp280_init+0xba>
		return false;
 800206a:	2300      	movs	r3, #0
 800206c:	e04b      	b.n	8002106 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	795b      	ldrb	r3, [r3, #5]
 8002072:	015b      	lsls	r3, r3, #5
 8002074:	b25a      	sxtb	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	785b      	ldrb	r3, [r3, #1]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	b25b      	sxtb	r3, r3
 800207e:	4313      	orrs	r3, r2
 8002080:	b25b      	sxtb	r3, r3
 8002082:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	461a      	mov	r2, r3
 8002088:	21f5      	movs	r1, #245	; 0xf5
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ff6d 	bl	8001f6a <write_register8>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <bmp280_init+0xe6>
		return false;
 8002096:	2300      	movs	r3, #0
 8002098:	e035      	b.n	8002106 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	78db      	ldrb	r3, [r3, #3]
 80020ac:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80020ae:	b25a      	sxtb	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	789b      	ldrb	r3, [r3, #2]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	4313      	orrs	r3, r2
 80020ba:	b25a      	sxtb	r2, r3
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b25b      	sxtb	r3, r3
 80020c2:	4313      	orrs	r3, r2
 80020c4:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80020c6:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80020ce:	2b60      	cmp	r3, #96	; 0x60
 80020d0:	d10d      	bne.n	80020ee <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	791b      	ldrb	r3, [r3, #4]
 80020d6:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80020d8:	7b7b      	ldrb	r3, [r7, #13]
 80020da:	461a      	mov	r2, r3
 80020dc:	21f2      	movs	r1, #242	; 0xf2
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ff43 	bl	8001f6a <write_register8>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <bmp280_init+0x13a>
			return false;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e00b      	b.n	8002106 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80020ee:	7bbb      	ldrb	r3, [r7, #14]
 80020f0:	461a      	mov	r2, r3
 80020f2:	21f4      	movs	r1, #244	; 0xf4
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff38 	bl	8001f6a <write_register8>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <bmp280_init+0x150>
		return false;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <bmp280_init+0x152>
	}

	return true;
 8002104:	2301      	movs	r3, #1
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800210e:	b480      	push	{r7}
 8002110:	b087      	sub	sp, #28
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	10da      	asrs	r2, r3, #3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800212c:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8002130:	12db      	asrs	r3, r3, #11
 8002132:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	111b      	asrs	r3, r3, #4
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	8812      	ldrh	r2, [r2, #0]
 800213c:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	1112      	asrs	r2, r2, #4
 8002142:	68f9      	ldr	r1, [r7, #12]
 8002144:	8809      	ldrh	r1, [r1, #0]
 8002146:	1a52      	subs	r2, r2, r1
 8002148:	fb02 f303 	mul.w	r3, r2, r3
 800214c:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002154:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002158:	139b      	asrs	r3, r3, #14
 800215a:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	441a      	add	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3380      	adds	r3, #128	; 0x80
 8002172:	121b      	asrs	r3, r3, #8
}
 8002174:	4618      	mov	r0, r3
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8002180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002184:	b09c      	sub	sp, #112	; 0x70
 8002186:	af00      	add	r7, sp, #0
 8002188:	6578      	str	r0, [r7, #84]	; 0x54
 800218a:	6539      	str	r1, [r7, #80]	; 0x50
 800218c:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800218e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002190:	461a      	mov	r2, r3
 8002192:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002196:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 800219a:	f143 35ff 	adc.w	r5, r3, #4294967295
 800219e:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80021a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021a6:	fb03 f102 	mul.w	r1, r3, r2
 80021aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021ae:	fb03 f302 	mul.w	r3, r3, r2
 80021b2:	18ca      	adds	r2, r1, r3
 80021b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021b6:	fba3 4503 	umull	r4, r5, r3, r3
 80021ba:	1953      	adds	r3, r2, r5
 80021bc:	461d      	mov	r5, r3
 80021be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80021ca:	fb02 f005 	mul.w	r0, r2, r5
 80021ce:	fb04 f103 	mul.w	r1, r4, r3
 80021d2:	4401      	add	r1, r0
 80021d4:	fba4 2302 	umull	r2, r3, r4, r2
 80021d8:	4419      	add	r1, r3
 80021da:	460b      	mov	r3, r1
 80021dc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80021e0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80021e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80021f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80021f2:	fb03 f001 	mul.w	r0, r3, r1
 80021f6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80021f8:	fb02 f101 	mul.w	r1, r2, r1
 80021fc:	4408      	add	r0, r1
 80021fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002200:	fba1 2302 	umull	r2, r3, r1, r2
 8002204:	18c1      	adds	r1, r0, r3
 8002206:	460b      	mov	r3, r1
 8002208:	f04f 0000 	mov.w	r0, #0
 800220c:	f04f 0100 	mov.w	r1, #0
 8002210:	0459      	lsls	r1, r3, #17
 8002212:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8002216:	0450      	lsls	r0, r2, #17
 8002218:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800221c:	eb12 0800 	adds.w	r8, r2, r0
 8002220:	eb43 0901 	adc.w	r9, r3, r1
 8002224:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8002228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800222a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800222e:	b21a      	sxth	r2, r3
 8002230:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002234:	f04f 0000 	mov.w	r0, #0
 8002238:	f04f 0100 	mov.w	r1, #0
 800223c:	00d1      	lsls	r1, r2, #3
 800223e:	2000      	movs	r0, #0
 8002240:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002244:	1814      	adds	r4, r2, r0
 8002246:	61bc      	str	r4, [r7, #24]
 8002248:	414b      	adcs	r3, r1
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002250:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002254:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002258:	fb03 f102 	mul.w	r1, r3, r2
 800225c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800225e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002260:	fb03 f302 	mul.w	r3, r3, r2
 8002264:	18ca      	adds	r2, r1, r3
 8002266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002268:	fba3 4503 	umull	r4, r5, r3, r3
 800226c:	1953      	adds	r3, r2, r5
 800226e:	461d      	mov	r5, r3
 8002270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002272:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002276:	b21a      	sxth	r2, r3
 8002278:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800227c:	fb02 f005 	mul.w	r0, r2, r5
 8002280:	fb04 f103 	mul.w	r1, r4, r3
 8002284:	4401      	add	r1, r0
 8002286:	fba4 2302 	umull	r2, r3, r4, r2
 800228a:	4419      	add	r1, r3
 800228c:	460b      	mov	r3, r1
 800228e:	f04f 0800 	mov.w	r8, #0
 8002292:	f04f 0900 	mov.w	r9, #0
 8002296:	ea4f 2812 	mov.w	r8, r2, lsr #8
 800229a:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 800229e:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80022a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022a8:	b21a      	sxth	r2, r3
 80022aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80022ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80022b0:	fb03 f001 	mul.w	r0, r3, r1
 80022b4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80022b6:	fb02 f101 	mul.w	r1, r2, r1
 80022ba:	1844      	adds	r4, r0, r1
 80022bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80022be:	fba1 0102 	umull	r0, r1, r1, r2
 80022c2:	1863      	adds	r3, r4, r1
 80022c4:	4619      	mov	r1, r3
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	030b      	lsls	r3, r1, #12
 80022d0:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80022d4:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80022d6:	eb18 0102 	adds.w	r1, r8, r2
 80022da:	6139      	str	r1, [r7, #16]
 80022dc:	eb49 0303 	adc.w	r3, r9, r3
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80022e6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80022ea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80022ee:	1c11      	adds	r1, r2, #0
 80022f0:	6439      	str	r1, [r7, #64]	; 0x40
 80022f2:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 80022f6:	647b      	str	r3, [r7, #68]	; 0x44
 80022f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fa:	88db      	ldrh	r3, [r3, #6]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8002306:	4629      	mov	r1, r5
 8002308:	fb02 f001 	mul.w	r0, r2, r1
 800230c:	4621      	mov	r1, r4
 800230e:	fb01 f103 	mul.w	r1, r1, r3
 8002312:	4401      	add	r1, r0
 8002314:	4620      	mov	r0, r4
 8002316:	fba0 2302 	umull	r2, r3, r0, r2
 800231a:	4419      	add	r1, r3
 800231c:	460b      	mov	r3, r1
 800231e:	f04f 0000 	mov.w	r0, #0
 8002322:	f04f 0100 	mov.w	r1, #0
 8002326:	1058      	asrs	r0, r3, #1
 8002328:	17d9      	asrs	r1, r3, #31
 800232a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 800232e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002332:	4313      	orrs	r3, r2
 8002334:	d101      	bne.n	800233a <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 8002336:	2300      	movs	r3, #0
 8002338:	e0e1      	b.n	80024fe <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 800233a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800233c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002340:	461a      	mov	r2, r3
 8002342:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002346:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 800234a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800234c:	105b      	asrs	r3, r3, #1
 800234e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002352:	07db      	lsls	r3, r3, #31
 8002354:	63bb      	str	r3, [r7, #56]	; 0x38
 8002356:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800235a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800235e:	4621      	mov	r1, r4
 8002360:	ebb1 0a02 	subs.w	sl, r1, r2
 8002364:	4629      	mov	r1, r5
 8002366:	eb61 0b03 	sbc.w	fp, r1, r3
 800236a:	4652      	mov	r2, sl
 800236c:	465b      	mov	r3, fp
 800236e:	1891      	adds	r1, r2, r2
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	415b      	adcs	r3, r3
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800237a:	eb12 020a 	adds.w	r2, r2, sl
 800237e:	eb43 030b 	adc.w	r3, r3, fp
 8002382:	f04f 0000 	mov.w	r0, #0
 8002386:	f04f 0100 	mov.w	r1, #0
 800238a:	0199      	lsls	r1, r3, #6
 800238c:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8002390:	0190      	lsls	r0, r2, #6
 8002392:	1812      	adds	r2, r2, r0
 8002394:	eb41 0303 	adc.w	r3, r1, r3
 8002398:	f04f 0000 	mov.w	r0, #0
 800239c:	f04f 0100 	mov.w	r1, #0
 80023a0:	0099      	lsls	r1, r3, #2
 80023a2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80023a6:	0090      	lsls	r0, r2, #2
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	eb12 020a 	adds.w	r2, r2, sl
 80023b0:	eb43 030b 	adc.w	r3, r3, fp
 80023b4:	f04f 0000 	mov.w	r0, #0
 80023b8:	f04f 0100 	mov.w	r1, #0
 80023bc:	0099      	lsls	r1, r3, #2
 80023be:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80023c2:	0090      	lsls	r0, r2, #2
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	eb12 010a 	adds.w	r1, r2, sl
 80023cc:	6339      	str	r1, [r7, #48]	; 0x30
 80023ce:	eb43 030b 	adc.w	r3, r3, fp
 80023d2:	637b      	str	r3, [r7, #52]	; 0x34
 80023d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80023d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80023dc:	f7fe fc5c 	bl	8000c98 <__aeabi_ldivmod>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80023e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ea:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80023ee:	b218      	sxth	r0, r3
 80023f0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80023f4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	0b62      	lsrs	r2, r4, #13
 8002402:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8002406:	136b      	asrs	r3, r5, #13
 8002408:	fb02 f501 	mul.w	r5, r2, r1
 800240c:	fb00 f403 	mul.w	r4, r0, r3
 8002410:	442c      	add	r4, r5
 8002412:	fba0 0102 	umull	r0, r1, r0, r2
 8002416:	1863      	adds	r3, r4, r1
 8002418:	4619      	mov	r1, r3
 800241a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	0b62      	lsrs	r2, r4, #13
 8002428:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 800242c:	136b      	asrs	r3, r5, #13
 800242e:	fb02 f501 	mul.w	r5, r2, r1
 8002432:	fb00 f403 	mul.w	r4, r0, r3
 8002436:	442c      	add	r4, r5
 8002438:	fba0 0102 	umull	r0, r1, r0, r2
 800243c:	1863      	adds	r3, r4, r1
 800243e:	4619      	mov	r1, r3
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	0e42      	lsrs	r2, r0, #25
 800244a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800244e:	164b      	asrs	r3, r1, #25
 8002450:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002456:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800245a:	b21a      	sxth	r2, r3
 800245c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002460:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002462:	fb03 f001 	mul.w	r0, r3, r1
 8002466:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002468:	fb02 f101 	mul.w	r1, r2, r1
 800246c:	1844      	adds	r4, r0, r1
 800246e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002470:	fba1 0102 	umull	r0, r1, r1, r2
 8002474:	1863      	adds	r3, r4, r1
 8002476:	4619      	mov	r1, r3
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	0cc2      	lsrs	r2, r0, #19
 8002482:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002486:	14cb      	asrs	r3, r1, #19
 8002488:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800248c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002490:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002494:	1884      	adds	r4, r0, r2
 8002496:	62bc      	str	r4, [r7, #40]	; 0x28
 8002498:	eb41 0303 	adc.w	r3, r1, r3
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80024a2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80024a6:	4621      	mov	r1, r4
 80024a8:	1889      	adds	r1, r1, r2
 80024aa:	6239      	str	r1, [r7, #32]
 80024ac:	4629      	mov	r1, r5
 80024ae:	eb43 0101 	adc.w	r1, r3, r1
 80024b2:	6279      	str	r1, [r7, #36]	; 0x24
 80024b4:	f04f 0000 	mov.w	r0, #0
 80024b8:	f04f 0100 	mov.w	r1, #0
 80024bc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024c0:	4623      	mov	r3, r4
 80024c2:	0a18      	lsrs	r0, r3, #8
 80024c4:	462b      	mov	r3, r5
 80024c6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80024ca:	462b      	mov	r3, r5
 80024cc:	1219      	asrs	r1, r3, #8
 80024ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80024d4:	b21c      	sxth	r4, r3
 80024d6:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	012b      	lsls	r3, r5, #4
 80024e4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80024e8:	0122      	lsls	r2, r4, #4
 80024ea:	1884      	adds	r4, r0, r2
 80024ec:	603c      	str	r4, [r7, #0]
 80024ee:	eb41 0303 	adc.w	r3, r1, r3
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80024f8:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 80024fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3770      	adds	r7, #112	; 0x70
 8002502:	46bd      	mov	sp, r7
 8002504:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002508 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800251a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	039a      	lsls	r2, r3, #14
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002526:	051b      	lsls	r3, r3, #20
 8002528:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002530:	4619      	mov	r1, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	fb03 f301 	mul.w	r3, r3, r1
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800253e:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8002546:	4611      	mov	r1, r2
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	fb02 f201 	mul.w	r2, r2, r1
 800254e:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	7f09      	ldrb	r1, [r1, #28]
 8002554:	4608      	mov	r0, r1
 8002556:	6979      	ldr	r1, [r7, #20]
 8002558:	fb01 f100 	mul.w	r1, r1, r0
 800255c:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800255e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002562:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002566:	1292      	asrs	r2, r2, #10
 8002568:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800256c:	68f9      	ldr	r1, [r7, #12]
 800256e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8002572:	fb01 f202 	mul.w	r2, r1, r2
 8002576:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800257a:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800257c:	fb02 f303 	mul.w	r3, r2, r3
 8002580:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	13db      	asrs	r3, r3, #15
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	13d2      	asrs	r2, r2, #15
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	7e12      	ldrb	r2, [r2, #24]
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80025a6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80025ae:	bfa8      	it	ge
 80025b0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80025b4:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	131b      	asrs	r3, r3, #12
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b08c      	sub	sp, #48	; 0x30
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80025da:	2b60      	cmp	r3, #96	; 0x60
 80025dc:	d007      	beq.n	80025ee <bmp280_read_fixed+0x28>
		if (humidity)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <bmp280_read_fixed+0x24>
			*humidity = 0;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <bmp280_read_fixed+0x32>
 80025f4:	2308      	movs	r3, #8
 80025f6:	e000      	b.n	80025fa <bmp280_read_fixed+0x34>
 80025f8:	2306      	movs	r3, #6
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	f107 0218 	add.w	r2, r7, #24
 8002604:	21f7      	movs	r1, #247	; 0xf7
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f7ff fba5 	bl	8001d56 <read_data>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <bmp280_read_fixed+0x50>
		return false;
 8002612:	2300      	movs	r3, #0
 8002614:	e038      	b.n	8002688 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002616:	7e3b      	ldrb	r3, [r7, #24]
 8002618:	031a      	lsls	r2, r3, #12
 800261a:	7e7b      	ldrb	r3, [r7, #25]
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	4313      	orrs	r3, r2
 8002620:	7eba      	ldrb	r2, [r7, #26]
 8002622:	0912      	lsrs	r2, r2, #4
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	4313      	orrs	r3, r2
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800262a:	7efb      	ldrb	r3, [r7, #27]
 800262c:	031a      	lsls	r2, r3, #12
 800262e:	7f3b      	ldrb	r3, [r7, #28]
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	4313      	orrs	r3, r2
 8002634:	7f7a      	ldrb	r2, [r7, #29]
 8002636:	0912      	lsrs	r2, r2, #4
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	4313      	orrs	r3, r2
 800263c:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	461a      	mov	r2, r3
 8002644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f7ff fd61 	bl	800210e <compensate_temperature>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	461a      	mov	r2, r3
 8002656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f7ff fd91 	bl	8002180 <compensate_pressure>
 800265e:	4602      	mov	r2, r0
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00d      	beq.n	8002686 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800266a:	7fbb      	ldrb	r3, [r7, #30]
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	7ffa      	ldrb	r2, [r7, #31]
 8002670:	4313      	orrs	r3, r2
 8002672:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	461a      	mov	r2, r3
 8002678:	6a39      	ldr	r1, [r7, #32]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f7ff ff44 	bl	8002508 <compensate_humidity>
 8002680:	4602      	mov	r2, r0
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	3730      	adds	r7, #48	; 0x30
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
			dev -> humidity ? &fixed_humidity : NULL)) {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800269e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a6:	d002      	beq.n	80026ae <bmp280_read_float+0x1e>
 80026a8:	f107 030c 	add.w	r3, r7, #12
 80026ac:	e000      	b.n	80026b0 <bmp280_read_float+0x20>
 80026ae:	2300      	movs	r3, #0
 80026b0:	f107 0210 	add.w	r2, r7, #16
 80026b4:	f107 0114 	add.w	r1, r7, #20
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff84 	bl	80025c6 <bmp280_read_fixed>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d050      	beq.n	8002766 <bmp280_read_float+0xd6>
		dev -> temperature = (float) fixed_temperature / 100;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ce:	eddf 6a28 	vldr	s13, [pc, #160]	; 8002770 <bmp280_read_float+0xe0>
 80026d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		dev -> pressure = (float) fixed_pressure / 256;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026e6:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002774 <bmp280_read_float+0xe4>
 80026ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		dev -> altitude = ((float)powf(101325 / dev -> pressure, 0.190223f) - 1.0f) * (dev -> temperature + 273.15f) / 0.0065f;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80026fa:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002778 <bmp280_read_float+0xe8>
 80026fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002702:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800277c <bmp280_read_float+0xec>
 8002706:	eeb0 0a47 	vmov.f32	s0, s14
 800270a:	f009 fb2d 	bl	800bd68 <powf>
 800270e:	eef0 7a40 	vmov.f32	s15, s0
 8002712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002716:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002720:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002780 <bmp280_read_float+0xf0>
 8002724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002784 <bmp280_read_float+0xf4>
 8002730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		if (dev -> humidity)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002740:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002748:	d00b      	beq.n	8002762 <bmp280_read_float+0xd2>
			dev -> humidity = (float) fixed_humidity / 1024;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	ee07 3a90 	vmov	s15, r3
 8002750:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002754:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002788 <bmp280_read_float+0xf8>
 8002758:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		return true;
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <bmp280_read_float+0xd8>
	}

	return false;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	42c80000 	.word	0x42c80000
 8002774:	43800000 	.word	0x43800000
 8002778:	47c5e680 	.word	0x47c5e680
 800277c:	3e42c9d1 	.word	0x3e42c9d1
 8002780:	43889333 	.word	0x43889333
 8002784:	3bd4fdf4 	.word	0x3bd4fdf4
 8002788:	44800000 	.word	0x44800000

0800278c <biquadFilterInitLPF>:
    return centerFreq * cutoffFreq / (centerFreq * centerFreq - cutoffFreq * cutoffFreq);
}

/* sets up a biquad filter as a 2nd order butterworth LPF */
void biquadFilterInitLPF(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	ed87 0a02 	vstr	s0, [r7, #8]
 8002798:	6079      	str	r1, [r7, #4]
    biquadFilterInit(filter, filterFreq, refreshRate, BIQUAD_Q, FILTER_LPF, 1.0f);
 800279a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800279e:	2200      	movs	r2, #0
 80027a0:	eddf 0a05 	vldr	s1, [pc, #20]	; 80027b8 <biquadFilterInitLPF+0x2c>
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f806 	bl	80027bc <biquadFilterInit>
}
 80027b0:	bf00      	nop
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	3f3504f3 	.word	0x3f3504f3

080027bc <biquadFilterInit>:

void biquadFilterInit(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6178      	str	r0, [r7, #20]
 80027c4:	ed87 0a04 	vstr	s0, [r7, #16]
 80027c8:	60f9      	str	r1, [r7, #12]
 80027ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80027ce:	4613      	mov	r3, r2
 80027d0:	ed87 1a00 	vstr	s2, [r7]
 80027d4:	71fb      	strb	r3, [r7, #7]
    biquadFilterUpdate(filter, filterFreq, refreshRate, Q, filterType, weight);
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	ed97 1a00 	vldr	s2, [r7]
 80027dc:	461a      	mov	r2, r3
 80027de:	edd7 0a02 	vldr	s1, [r7, #8]
 80027e2:	68f9      	ldr	r1, [r7, #12]
 80027e4:	ed97 0a04 	vldr	s0, [r7, #16]
 80027e8:	6978      	ldr	r0, [r7, #20]
 80027ea:	f000 f815 	bl	8002818 <biquadFilterUpdate>

    // zero initial samples
    filter->x1 = filter->x2 = 0;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	615a      	str	r2, [r3, #20]
    filter->y1 = filter->y2 = 0;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	621a      	str	r2, [r3, #32]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	61da      	str	r2, [r3, #28]
}
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <biquadFilterUpdate>:

void biquadFilterUpdate(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af00      	add	r7, sp, #0
 800281e:	6178      	str	r0, [r7, #20]
 8002820:	ed87 0a04 	vstr	s0, [r7, #16]
 8002824:	60f9      	str	r1, [r7, #12]
 8002826:	edc7 0a02 	vstr	s1, [r7, #8]
 800282a:	4613      	mov	r3, r2
 800282c:	ed87 1a00 	vstr	s2, [r7]
 8002830:	71fb      	strb	r3, [r7, #7]
    // setup variables
    const float omega = 2.0f * M_PIf * filterFreq * refreshRate * 0.000001f;
 8002832:	edd7 7a04 	vldr	s15, [r7, #16]
 8002836:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80029f0 <biquadFilterUpdate+0x1d8>
 800283a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800284c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80029f4 <biquadFilterUpdate+0x1dc>
 8002850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002854:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    const float sn = sin_approx(omega);
 8002858:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800285c:	f001 fa9e 	bl	8003d9c <sin_approx>
 8002860:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    const float cs = cos_approx(omega);
 8002864:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8002868:	f001 fb42 	bl	8003ef0 <cos_approx>
 800286c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    const float alpha = sn / (2.0f * Q);
 8002870:	edd7 7a02 	vldr	s15, [r7, #8]
 8002874:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002878:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800287c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002880:	edc7 7a08 	vstr	s15, [r7, #32]

    switch (filterType) {
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d04f      	beq.n	800292a <biquadFilterUpdate+0x112>
 800288a:	2b02      	cmp	r3, #2
 800288c:	dc6e      	bgt.n	800296c <biquadFilterUpdate+0x154>
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <biquadFilterUpdate+0x80>
 8002892:	2b01      	cmp	r3, #1
 8002894:	d02a      	beq.n	80028ec <biquadFilterUpdate+0xd4>
 8002896:	e069      	b.n	800296c <biquadFilterUpdate+0x154>
    case FILTER_LPF:
        // 2nd order Butterworth (with Q=1/sqrt(2)) / Butterworth biquad section with Q
        // described in http://www.ti.com/lit/an/slaa447/slaa447.pdf
        filter->b1 = 1 - cs;
 8002898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800289c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b0 = filter->b1 * 0.5f;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80028b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	edc3 7a00 	vstr	s15, [r3]
        filter->b2 = filter->b0;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	609a      	str	r2, [r3, #8]
        filter->a1 = -2 * cs;
 80028c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028ca:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80028ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 80028d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80028e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 80028ea:	e03f      	b.n	800296c <biquadFilterUpdate+0x154>
    case FILTER_NOTCH:
        filter->b0 = 1;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028f2:	601a      	str	r2, [r3, #0]
        filter->b1 = -2 * cs;
 80028f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028f8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80028fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b2 = 1;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800290c:	609a      	str	r2, [r3, #8]
        filter->a1 = filter->b1;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	60da      	str	r2, [r3, #12]
        filter->a2 = 1 - alpha;
 8002916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800291a:	edd7 7a08 	vldr	s15, [r7, #32]
 800291e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 8002928:	e020      	b.n	800296c <biquadFilterUpdate+0x154>
    case FILTER_BPF:
        filter->b0 = alpha;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	6a3a      	ldr	r2, [r7, #32]
 800292e:	601a      	str	r2, [r3, #0]
        filter->b1 = 0;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	605a      	str	r2, [r3, #4]
        filter->b2 = -alpha;
 8002938:	edd7 7a08 	vldr	s15, [r7, #32]
 800293c:	eef1 7a67 	vneg.f32	s15, s15
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	edc3 7a02 	vstr	s15, [r3, #8]
        filter->a1 = -2 * cs;
 8002946:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800294a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800294e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 8002958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800295c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 800296a:	bf00      	nop
    }

    const float a0 = 1 + alpha;
 800296c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002978:	edc7 7a07 	vstr	s15, [r7, #28]

    // precompute the coefficients
    filter->b0 /= a0;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	edd3 6a00 	vldr	s13, [r3]
 8002982:	ed97 7a07 	vldr	s14, [r7, #28]
 8002986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	edc3 7a00 	vstr	s15, [r3]
    filter->b1 /= a0;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	edd3 6a01 	vldr	s13, [r3, #4]
 8002996:	ed97 7a07 	vldr	s14, [r7, #28]
 800299a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->b2 /= a0;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80029aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80029ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->a1 /= a0;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	edd3 6a03 	vldr	s13, [r3, #12]
 80029be:	ed97 7a07 	vldr	s14, [r7, #28]
 80029c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->a2 /= a0;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	edd3 6a04 	vldr	s13, [r3, #16]
 80029d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80029d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	edc3 7a04 	vstr	s15, [r3, #16]

    // update weight
    filter->weight = weight;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80029e6:	bf00      	nop
 80029e8:	3730      	adds	r7, #48	; 0x30
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40c90fdb 	.word	0x40c90fdb
 80029f4:	358637bd 	.word	0x358637bd

080029f8 <biquadFilterUpdateLPF>:

void biquadFilterUpdateLPF(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a04:	6079      	str	r1, [r7, #4]
    biquadFilterUpdate(filter, filterFreq, refreshRate, BIQUAD_Q, FILTER_LPF, 1.0f);
 8002a06:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002a24 <biquadFilterUpdateLPF+0x2c>
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	ed97 0a02 	vldr	s0, [r7, #8]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f7ff fefe 	bl	8002818 <biquadFilterUpdate>
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	3f3504f3 	.word	0x3f3504f3

08002a28 <biquadFilterApplyDF1>:

/* Computes a biquadFilter_t filter on a sample (slightly less precise than df2 but works in dynamic mode) */
float biquadFilterApplyDF1(biquadFilter_t *filter, float input)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	ed87 0a00 	vstr	s0, [r7]
    /* compute result */
    const float result = filter->b0 * input + filter->b1 * filter->x1 + filter->b2 * filter->x2 - filter->a1 * filter->y1 - filter->a2 * filter->y2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	ed93 7a00 	vldr	s14, [r3]
 8002a3a:	edd7 7a00 	vldr	s15, [r7]
 8002a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	edd3 6a04 	vldr	s13, [r3, #16]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a92:	edc7 7a03 	vstr	s15, [r7, #12]

    /* shift x1 to x2, input to x1 */
    filter->x2 = filter->x1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	619a      	str	r2, [r3, #24]
    filter->x1 = input;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	615a      	str	r2, [r3, #20]

    /* shift y1 to y2, result to y1 */
    filter->y2 = filter->y1;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69da      	ldr	r2, [r3, #28]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	621a      	str	r2, [r3, #32]
    filter->y1 = result;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	61da      	str	r2, [r3, #28]

    return result;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	ee07 3a90 	vmov	s15, r3
}
 8002ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <GPS_Init>:




void GPS_Init()
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8002acc:	2201      	movs	r2, #1
 8002ace:	4903      	ldr	r1, [pc, #12]	; (8002adc <GPS_Init+0x14>)
 8002ad0:	4803      	ldr	r0, [pc, #12]	; (8002ae0 <GPS_Init+0x18>)
 8002ad2:	f008 f9c5 	bl	800ae60 <HAL_UART_Receive_IT>
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000264 	.word	0x20000264
 8002ae0:	20000930 	.word	0x20000930

08002ae4 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8002ae8:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <GPS_UART_CallBack+0x60>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b0a      	cmp	r3, #10
 8002aee:	d010      	beq.n	8002b12 <GPS_UART_CallBack+0x2e>
 8002af0:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <GPS_UART_CallBack+0x64>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b25b      	sxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <GPS_UART_CallBack+0x64>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	b2d1      	uxtb	r1, r2
 8002b02:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <GPS_UART_CallBack+0x64>)
 8002b04:	7011      	strb	r1, [r2, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <GPS_UART_CallBack+0x60>)
 8002b0a:	7819      	ldrb	r1, [r3, #0]
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <GPS_UART_CallBack+0x68>)
 8002b0e:	5499      	strb	r1, [r3, r2]
 8002b10:	e010      	b.n	8002b34 <GPS_UART_CallBack+0x50>
	} else {



		if(GPS_validate((char*) rx_buffer))
 8002b12:	480e      	ldr	r0, [pc, #56]	; (8002b4c <GPS_UART_CallBack+0x68>)
 8002b14:	f000 f81e 	bl	8002b54 <GPS_validate>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 8002b1e:	480b      	ldr	r0, [pc, #44]	; (8002b4c <GPS_UART_CallBack+0x68>)
 8002b20:	f000 f87a 	bl	8002c18 <GPS_parse>
		rx_index = 0;
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <GPS_UART_CallBack+0x64>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4807      	ldr	r0, [pc, #28]	; (8002b4c <GPS_UART_CallBack+0x68>)
 8002b30:	f00b faaa 	bl	800e088 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8002b34:	2201      	movs	r2, #1
 8002b36:	4903      	ldr	r1, [pc, #12]	; (8002b44 <GPS_UART_CallBack+0x60>)
 8002b38:	4805      	ldr	r0, [pc, #20]	; (8002b50 <GPS_UART_CallBack+0x6c>)
 8002b3a:	f008 f991 	bl	800ae60 <HAL_UART_Receive_IT>
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000264 	.word	0x20000264
 8002b48:	20000265 	.word	0x20000265
 8002b4c:	200003c0 	.word	0x200003c0
 8002b50:	20000930 	.word	0x20000930

08002b54 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b24      	cmp	r3, #36	; 0x24
 8002b6e:	d103      	bne.n	8002b78 <GPS_validate+0x24>
        i++;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3301      	adds	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8002b76:	e00c      	b.n	8002b92 <GPS_validate+0x3e>
        return 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e047      	b.n	8002c0c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4053      	eors	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        i++;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	4413      	add	r3, r2
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <GPS_validate+0x5c>
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ba8:	d002      	beq.n	8002bb0 <GPS_validate+0x5c>
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b4a      	cmp	r3, #74	; 0x4a
 8002bae:	dde5      	ble.n	8002b7c <GPS_validate+0x28>
    }

    if(i >= 75){
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b4a      	cmp	r3, #74	; 0x4a
 8002bb4:	dd01      	ble.n	8002bba <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e028      	b.n	8002c0c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8002bc4:	d119      	bne.n	8002bfa <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8002be2:	f107 0308 	add.w	r3, r7, #8
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	490a      	ldr	r1, [pc, #40]	; (8002c14 <GPS_validate+0xc0>)
 8002bea:	4618      	mov	r0, r3
 8002bec:	f00c f902 	bl	800edf4 <siprintf>
    return((checkcalcstr[0] == check[0])
 8002bf0:	7a3a      	ldrb	r2, [r7, #8]
 8002bf2:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d108      	bne.n	8002c0a <GPS_validate+0xb6>
 8002bf8:	e001      	b.n	8002bfe <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e006      	b.n	8002c0c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8002bfe:	7a7a      	ldrb	r2, [r7, #9]
 8002c00:	7b7b      	ldrb	r3, [r7, #13]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d101      	bne.n	8002c0a <GPS_validate+0xb6>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <GPS_validate+0xb8>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	080131c0 	.word	0x080131c0

08002c18 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af08      	add	r7, sp, #32
 8002c1e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8002c20:	2206      	movs	r2, #6
 8002c22:	494a      	ldr	r1, [pc, #296]	; (8002d4c <GPS_parse+0x134>)
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f00c f976 	bl	800ef16 <strncmp>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d137      	bne.n	8002ca0 <GPS_parse+0x88>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8002c30:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <GPS_parse+0x138>)
 8002c32:	9307      	str	r3, [sp, #28]
 8002c34:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <GPS_parse+0x13c>)
 8002c36:	9306      	str	r3, [sp, #24]
 8002c38:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <GPS_parse+0x140>)
 8002c3a:	9305      	str	r3, [sp, #20]
 8002c3c:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <GPS_parse+0x144>)
 8002c3e:	9304      	str	r3, [sp, #16]
 8002c40:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <GPS_parse+0x148>)
 8002c42:	9303      	str	r3, [sp, #12]
 8002c44:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <GPS_parse+0x14c>)
 8002c46:	9302      	str	r3, [sp, #8]
 8002c48:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <GPS_parse+0x150>)
 8002c4a:	9301      	str	r3, [sp, #4]
 8002c4c:	4b47      	ldr	r3, [pc, #284]	; (8002d6c <GPS_parse+0x154>)
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <GPS_parse+0x158>)
 8002c52:	4a48      	ldr	r2, [pc, #288]	; (8002d74 <GPS_parse+0x15c>)
 8002c54:	4948      	ldr	r1, [pc, #288]	; (8002d78 <GPS_parse+0x160>)
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f00c f8ec 	bl	800ee34 <siscanf>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	dd70      	ble.n	8002d44 <GPS_parse+0x12c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8002c62:	4b46      	ldr	r3, [pc, #280]	; (8002d7c <GPS_parse+0x164>)
 8002c64:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c68:	4b44      	ldr	r3, [pc, #272]	; (8002d7c <GPS_parse+0x164>)
 8002c6a:	7e1b      	ldrb	r3, [r3, #24]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c72:	f000 f8a7 	bl	8002dc4 <GPS_nmea_to_dec>
 8002c76:	eef0 7a40 	vmov.f32	s15, s0
 8002c7a:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <GPS_parse+0x164>)
 8002c7c:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8002c80:	4b3e      	ldr	r3, [pc, #248]	; (8002d7c <GPS_parse+0x164>)
 8002c82:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c86:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <GPS_parse+0x164>)
 8002c88:	7e5b      	ldrb	r3, [r3, #25]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c90:	f000 f898 	bl	8002dc4 <GPS_nmea_to_dec>
 8002c94:	eef0 7a40 	vmov.f32	s15, s0
 8002c98:	4b38      	ldr	r3, [pc, #224]	; (8002d7c <GPS_parse+0x164>)
 8002c9a:	edc3 7a00 	vstr	s15, [r3]
    		return;
 8002c9e:	e051      	b.n	8002d44 <GPS_parse+0x12c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8002ca0:	2206      	movs	r2, #6
 8002ca2:	4937      	ldr	r1, [pc, #220]	; (8002d80 <GPS_parse+0x168>)
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f00c f936 	bl	800ef16 <strncmp>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d114      	bne.n	8002cda <GPS_parse+0xc2>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8002cb0:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <GPS_parse+0x16c>)
 8002cb2:	9305      	str	r3, [sp, #20]
 8002cb4:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <GPS_parse+0x170>)
 8002cb6:	9304      	str	r3, [sp, #16]
 8002cb8:	4b34      	ldr	r3, [pc, #208]	; (8002d8c <GPS_parse+0x174>)
 8002cba:	9303      	str	r3, [sp, #12]
 8002cbc:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <GPS_parse+0x14c>)
 8002cbe:	9302      	str	r3, [sp, #8]
 8002cc0:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <GPS_parse+0x150>)
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <GPS_parse+0x154>)
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <GPS_parse+0x158>)
 8002cca:	4a2a      	ldr	r2, [pc, #168]	; (8002d74 <GPS_parse+0x15c>)
 8002ccc:	4930      	ldr	r1, [pc, #192]	; (8002d90 <GPS_parse+0x178>)
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f00c f8b0 	bl	800ee34 <siscanf>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	e034      	b.n	8002d44 <GPS_parse+0x12c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8002cda:	2206      	movs	r2, #6
 8002cdc:	492d      	ldr	r1, [pc, #180]	; (8002d94 <GPS_parse+0x17c>)
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f00c f919 	bl	800ef16 <strncmp>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d110      	bne.n	8002d0c <GPS_parse+0xf4>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8002cea:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <GPS_parse+0x180>)
 8002cec:	9303      	str	r3, [sp, #12]
 8002cee:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <GPS_parse+0x15c>)
 8002cf0:	9302      	str	r3, [sp, #8]
 8002cf2:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <GPS_parse+0x14c>)
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <GPS_parse+0x150>)
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <GPS_parse+0x154>)
 8002cfc:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <GPS_parse+0x158>)
 8002cfe:	4927      	ldr	r1, [pc, #156]	; (8002d9c <GPS_parse+0x184>)
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f00c f897 	bl	800ee34 <siscanf>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	e01b      	b.n	8002d44 <GPS_parse+0x12c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8002d0c:	2206      	movs	r2, #6
 8002d0e:	4924      	ldr	r1, [pc, #144]	; (8002da0 <GPS_parse+0x188>)
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f00c f900 	bl	800ef16 <strncmp>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d113      	bne.n	8002d44 <GPS_parse+0x12c>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8002d1c:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <GPS_parse+0x18c>)
 8002d1e:	9305      	str	r3, [sp, #20]
 8002d20:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <GPS_parse+0x190>)
 8002d22:	9304      	str	r3, [sp, #16]
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <GPS_parse+0x194>)
 8002d26:	9303      	str	r3, [sp, #12]
 8002d28:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <GPS_parse+0x174>)
 8002d2a:	9302      	str	r3, [sp, #8]
 8002d2c:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <GPS_parse+0x198>)
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <GPS_parse+0x19c>)
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <GPS_parse+0x1a0>)
 8002d36:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <GPS_parse+0x1a4>)
 8002d38:	4921      	ldr	r1, [pc, #132]	; (8002dc0 <GPS_parse+0x1a8>)
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f00c f87a 	bl	800ee34 <siscanf>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
            return;
    }
}
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	080131c8 	.word	0x080131c8
 8002d50:	20000710 	.word	0x20000710
 8002d54:	2000070c 	.word	0x2000070c
 8002d58:	20000708 	.word	0x20000708
 8002d5c:	20000704 	.word	0x20000704
 8002d60:	20000700 	.word	0x20000700
 8002d64:	200006fd 	.word	0x200006fd
 8002d68:	200006f0 	.word	0x200006f0
 8002d6c:	200006fc 	.word	0x200006fc
 8002d70:	200006f4 	.word	0x200006f4
 8002d74:	200006f8 	.word	0x200006f8
 8002d78:	080131d0 	.word	0x080131d0
 8002d7c:	200006e4 	.word	0x200006e4
 8002d80:	080131f8 	.word	0x080131f8
 8002d84:	2000071c 	.word	0x2000071c
 8002d88:	20000718 	.word	0x20000718
 8002d8c:	20000714 	.word	0x20000714
 8002d90:	08013200 	.word	0x08013200
 8002d94:	08013220 	.word	0x08013220
 8002d98:	20000720 	.word	0x20000720
 8002d9c:	08013228 	.word	0x08013228
 8002da0:	08013244 	.word	0x08013244
 8002da4:	20000738 	.word	0x20000738
 8002da8:	20000734 	.word	0x20000734
 8002dac:	20000731 	.word	0x20000731
 8002db0:	20000730 	.word	0x20000730
 8002db4:	2000072c 	.word	0x2000072c
 8002db8:	20000728 	.word	0x20000728
 8002dbc:	20000724 	.word	0x20000724
 8002dc0:	0801324c 	.word	0x0801324c

08002dc4 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	ed87 0a01 	vstr	s0, [r7, #4]
 8002dce:	4603      	mov	r3, r0
 8002dd0:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8002dd2:	ed97 7a01 	vldr	s14, [r7, #4]
 8002dd6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8002e58 <GPS_nmea_to_dec+0x94>
 8002dda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002de2:	ee17 3a90 	vmov	r3, s15
 8002de6:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2264      	movs	r2, #100	; 0x64
 8002dec:	fb02 f303 	mul.w	r3, r2, r3
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002df8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e00:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8002e04:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e08:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002e5c <GPS_nmea_to_dec+0x98>
 8002e0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e10:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e26:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	2b53      	cmp	r3, #83	; 0x53
 8002e2e:	d002      	beq.n	8002e36 <GPS_nmea_to_dec+0x72>
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	2b57      	cmp	r3, #87	; 0x57
 8002e34:	d105      	bne.n	8002e42 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8002e36:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e3a:	eef1 7a67 	vneg.f32	s15, s15
 8002e3e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	ee07 3a90 	vmov	s15, r3
}
 8002e48:	eeb0 0a67 	vmov.f32	s0, s15
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	42c80000 	.word	0x42c80000
 8002e5c:	42700000 	.word	0x42700000

08002e60 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

	if (htim == &htim3) {
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d12c      	bne.n	8002eca <HAL_TIM_PeriodElapsedCallback+0x6a>
		CalculatePID(-MPU6050.ROLL, -MPU6050.PITCH, 0 + MPU6050.offsetP, 0 + MPU6050.offsetR);
 8002e70:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e72:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002e76:	eeb1 7a67 	vneg.f32	s14, s15
 8002e7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e7c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002e80:	eef1 7a67 	vneg.f32	s15, s15
 8002e84:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e86:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 8002e8a:	ee06 3a90 	vmov	s13, r3
 8002e8e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e94:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 8002e98:	ee06 3a10 	vmov	s12, r3
 8002e9c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002ea0:	eef0 1a46 	vmov.f32	s3, s12
 8002ea4:	eeb0 1a66 	vmov.f32	s2, s13
 8002ea8:	eef0 0a67 	vmov.f32	s1, s15
 8002eac:	eeb0 0a47 	vmov.f32	s0, s14
 8002eb0:	f7fe fed4 	bl	8001c5c <CalculatePID>
		TransmitStruct.Pitch_PWM = PitchPID.PWM_Duty;
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002eb6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002ebc:	801a      	strh	r2, [r3, #0]
		TransmitStruct.Roll_PWM = RollPID.PWM_Duty;
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002ec0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002ec6:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, &TransmitStruct,
					sizeof(TransmitStruct));

		}
	}
}
 8002ec8:	e008      	b.n	8002edc <HAL_TIM_PeriodElapsedCallback+0x7c>
		if (htim == &htim4) {
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d104      	bne.n	8002edc <HAL_TIM_PeriodElapsedCallback+0x7c>
			HAL_UART_Transmit_IT(&huart1, &TransmitStruct,
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	4906      	ldr	r1, [pc, #24]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002ed6:	4809      	ldr	r0, [pc, #36]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002ed8:	f007 ff7d 	bl	800add6 <HAL_UART_Transmit_IT>
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	2000078c 	.word	0x2000078c
 8002ee8:	200005a0 	.word	0x200005a0
 8002eec:	20000378 	.word	0x20000378
 8002ef0:	200007d4 	.word	0x200007d4
 8002ef4:	20000310 	.word	0x20000310
 8002ef8:	20000440 	.word	0x20000440
 8002efc:	20000840 	.word	0x20000840

08002f00 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <HAL_UART_TxCpltCallback+0x38>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d105      	bne.n	8002f1c <HAL_UART_TxCpltCallback+0x1c>
		HAL_UART_Receive_IT(&huart1, &ack, 1);
 8002f10:	2201      	movs	r2, #1
 8002f12:	490a      	ldr	r1, [pc, #40]	; (8002f3c <HAL_UART_TxCpltCallback+0x3c>)
 8002f14:	4808      	ldr	r0, [pc, #32]	; (8002f38 <HAL_UART_TxCpltCallback+0x38>)
 8002f16:	f007 ffa3 	bl	800ae60 <HAL_UART_Receive_IT>
	else{
		if(huart == &huart2){
			HAL_UART_Receive_IT(&huart2, recieve_lora_buff, sizeof(recieve_lora_buff));
		}
	}
}
 8002f1a:	e008      	b.n	8002f2e <HAL_UART_TxCpltCallback+0x2e>
		if(huart == &huart2){
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <HAL_UART_TxCpltCallback+0x40>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d104      	bne.n	8002f2e <HAL_UART_TxCpltCallback+0x2e>
			HAL_UART_Receive_IT(&huart2, recieve_lora_buff, sizeof(recieve_lora_buff));
 8002f24:	2220      	movs	r2, #32
 8002f26:	4907      	ldr	r1, [pc, #28]	; (8002f44 <HAL_UART_TxCpltCallback+0x44>)
 8002f28:	4805      	ldr	r0, [pc, #20]	; (8002f40 <HAL_UART_TxCpltCallback+0x40>)
 8002f2a:	f007 ff99 	bl	800ae60 <HAL_UART_Receive_IT>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000840 	.word	0x20000840
 8002f3c:	2000026c 	.word	0x2000026c
 8002f40:	200009b8 	.word	0x200009b8
 8002f44:	20000270 	.word	0x20000270

08002f48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4c:	b08b      	sub	sp, #44	; 0x2c
 8002f4e:	af08      	add	r7, sp, #32
 8002f50:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4aa7      	ldr	r2, [pc, #668]	; (80031f4 <HAL_UART_RxCpltCallback+0x2ac>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10b      	bne.n	8002f72 <HAL_UART_RxCpltCallback+0x2a>

		if(ack == 4){
 8002f5a:	4ba7      	ldr	r3, [pc, #668]	; (80031f8 <HAL_UART_RxCpltCallback+0x2b0>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	f040 8248 	bne.w	80033f4 <HAL_UART_RxCpltCallback+0x4ac>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8002f64:	2200      	movs	r2, #0
 8002f66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f6a:	48a4      	ldr	r0, [pc, #656]	; (80031fc <HAL_UART_RxCpltCallback+0x2b4>)
 8002f6c:	f003 fb66 	bl	800663c <HAL_GPIO_WritePin>
		}
		else if(huart == &huart6){
			GPS_UART_CallBack();
		}
	}
}
 8002f70:	e240      	b.n	80033f4 <HAL_UART_RxCpltCallback+0x4ac>
		if(huart == &huart2){
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4aa2      	ldr	r2, [pc, #648]	; (8003200 <HAL_UART_RxCpltCallback+0x2b8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	f040 8236 	bne.w	80033e8 <HAL_UART_RxCpltCallback+0x4a0>
			switch(recieve_lora_buff[0]){
 8002f7c:	4ba1      	ldr	r3, [pc, #644]	; (8003204 <HAL_UART_RxCpltCallback+0x2bc>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	3b02      	subs	r3, #2
 8002f82:	2b0a      	cmp	r3, #10
 8002f84:	f200 822a 	bhi.w	80033dc <HAL_UART_RxCpltCallback+0x494>
 8002f88:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <HAL_UART_RxCpltCallback+0x48>)
 8002f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8e:	bf00      	nop
 8002f90:	08002fbd 	.word	0x08002fbd
 8002f94:	08003057 	.word	0x08003057
 8002f98:	080030f1 	.word	0x080030f1
 8002f9c:	08003105 	.word	0x08003105
 8002fa0:	08003153 	.word	0x08003153
 8002fa4:	0800323d 	.word	0x0800323d
 8002fa8:	08003279 	.word	0x08003279
 8002fac:	080032cb 	.word	0x080032cb
 8002fb0:	08003305 	.word	0x08003305
 8002fb4:	08003359 	.word	0x08003359
 8002fb8:	0800339b 	.word	0x0800339b
						memcpy(&pid_recieve_struct, recieve_lora_buff, sizeof(pid_recieve_struct));
 8002fbc:	4a92      	ldr	r2, [pc, #584]	; (8003208 <HAL_UART_RxCpltCallback+0x2c0>)
 8002fbe:	4b91      	ldr	r3, [pc, #580]	; (8003204 <HAL_UART_RxCpltCallback+0x2bc>)
 8002fc0:	cb03      	ldmia	r3!, {r0, r1}
 8002fc2:	6010      	str	r0, [r2, #0]
 8002fc4:	6051      	str	r1, [r2, #4]
						RollPID.Kp = (float)pid_recieve_struct.P / 100;
 8002fc6:	4b90      	ldr	r3, [pc, #576]	; (8003208 <HAL_UART_RxCpltCallback+0x2c0>)
 8002fc8:	885b      	ldrh	r3, [r3, #2]
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fd2:	eddf 6a8e 	vldr	s13, [pc, #568]	; 800320c <HAL_UART_RxCpltCallback+0x2c4>
 8002fd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fda:	4b8d      	ldr	r3, [pc, #564]	; (8003210 <HAL_UART_RxCpltCallback+0x2c8>)
 8002fdc:	edc3 7a00 	vstr	s15, [r3]
						RollPID.Ki = (float)pid_recieve_struct.I / 100;
 8002fe0:	4b89      	ldr	r3, [pc, #548]	; (8003208 <HAL_UART_RxCpltCallback+0x2c0>)
 8002fe2:	889b      	ldrh	r3, [r3, #4]
 8002fe4:	ee07 3a90 	vmov	s15, r3
 8002fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fec:	eddf 6a87 	vldr	s13, [pc, #540]	; 800320c <HAL_UART_RxCpltCallback+0x2c4>
 8002ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ff4:	4b86      	ldr	r3, [pc, #536]	; (8003210 <HAL_UART_RxCpltCallback+0x2c8>)
 8002ff6:	edc3 7a01 	vstr	s15, [r3, #4]
						RollPID.Kd = (float)pid_recieve_struct.D / 100;
 8002ffa:	4b83      	ldr	r3, [pc, #524]	; (8003208 <HAL_UART_RxCpltCallback+0x2c0>)
 8002ffc:	88db      	ldrh	r3, [r3, #6]
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003006:	eddf 6a81 	vldr	s13, [pc, #516]	; 800320c <HAL_UART_RxCpltCallback+0x2c4>
 800300a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800300e:	4b80      	ldr	r3, [pc, #512]	; (8003210 <HAL_UART_RxCpltCallback+0x2c8>)
 8003010:	edc3 7a02 	vstr	s15, [r3, #8]
						snprintf(lora_tx_str, 30, "%.2f %.2f %.2f 2\n",  RollPID.Kp, RollPID.Ki, RollPID.Kd);
 8003014:	4b7e      	ldr	r3, [pc, #504]	; (8003210 <HAL_UART_RxCpltCallback+0x2c8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fa9d 	bl	8000558 <__aeabi_f2d>
 800301e:	4604      	mov	r4, r0
 8003020:	460d      	mov	r5, r1
 8003022:	4b7b      	ldr	r3, [pc, #492]	; (8003210 <HAL_UART_RxCpltCallback+0x2c8>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fa96 	bl	8000558 <__aeabi_f2d>
 800302c:	4680      	mov	r8, r0
 800302e:	4689      	mov	r9, r1
 8003030:	4b77      	ldr	r3, [pc, #476]	; (8003210 <HAL_UART_RxCpltCallback+0x2c8>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fa8f 	bl	8000558 <__aeabi_f2d>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003042:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003046:	e9cd 4500 	strd	r4, r5, [sp]
 800304a:	4a72      	ldr	r2, [pc, #456]	; (8003214 <HAL_UART_RxCpltCallback+0x2cc>)
 800304c:	211e      	movs	r1, #30
 800304e:	4872      	ldr	r0, [pc, #456]	; (8003218 <HAL_UART_RxCpltCallback+0x2d0>)
 8003050:	f00b fe9c 	bl	800ed8c <sniprintf>
						break;
 8003054:	e1c2      	b.n	80033dc <HAL_UART_RxCpltCallback+0x494>
						memcpy(&pid_recieve_struct, recieve_lora_buff, sizeof(pid_recieve_struct));
 8003056:	4a6c      	ldr	r2, [pc, #432]	; (8003208 <HAL_UART_RxCpltCallback+0x2c0>)
 8003058:	4b6a      	ldr	r3, [pc, #424]	; (8003204 <HAL_UART_RxCpltCallback+0x2bc>)
 800305a:	cb03      	ldmia	r3!, {r0, r1}
 800305c:	6010      	str	r0, [r2, #0]
 800305e:	6051      	str	r1, [r2, #4]
						PitchPID.Kp = (float)pid_recieve_struct.P / 100;
 8003060:	4b69      	ldr	r3, [pc, #420]	; (8003208 <HAL_UART_RxCpltCallback+0x2c0>)
 8003062:	885b      	ldrh	r3, [r3, #2]
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800306c:	eddf 6a67 	vldr	s13, [pc, #412]	; 800320c <HAL_UART_RxCpltCallback+0x2c4>
 8003070:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003074:	4b69      	ldr	r3, [pc, #420]	; (800321c <HAL_UART_RxCpltCallback+0x2d4>)
 8003076:	edc3 7a00 	vstr	s15, [r3]
						PitchPID.Ki = (float)pid_recieve_struct.I / 100;
 800307a:	4b63      	ldr	r3, [pc, #396]	; (8003208 <HAL_UART_RxCpltCallback+0x2c0>)
 800307c:	889b      	ldrh	r3, [r3, #4]
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003086:	eddf 6a61 	vldr	s13, [pc, #388]	; 800320c <HAL_UART_RxCpltCallback+0x2c4>
 800308a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800308e:	4b63      	ldr	r3, [pc, #396]	; (800321c <HAL_UART_RxCpltCallback+0x2d4>)
 8003090:	edc3 7a01 	vstr	s15, [r3, #4]
						PitchPID.Kd = (float)pid_recieve_struct.D / 100;
 8003094:	4b5c      	ldr	r3, [pc, #368]	; (8003208 <HAL_UART_RxCpltCallback+0x2c0>)
 8003096:	88db      	ldrh	r3, [r3, #6]
 8003098:	ee07 3a90 	vmov	s15, r3
 800309c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030a0:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800320c <HAL_UART_RxCpltCallback+0x2c4>
 80030a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030a8:	4b5c      	ldr	r3, [pc, #368]	; (800321c <HAL_UART_RxCpltCallback+0x2d4>)
 80030aa:	edc3 7a02 	vstr	s15, [r3, #8]
						snprintf(lora_tx_str, 30, "%.2f %.2f %.2f 3\n",  PitchPID.Kp, PitchPID.Ki, PitchPID.Kd);
 80030ae:	4b5b      	ldr	r3, [pc, #364]	; (800321c <HAL_UART_RxCpltCallback+0x2d4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fa50 	bl	8000558 <__aeabi_f2d>
 80030b8:	4604      	mov	r4, r0
 80030ba:	460d      	mov	r5, r1
 80030bc:	4b57      	ldr	r3, [pc, #348]	; (800321c <HAL_UART_RxCpltCallback+0x2d4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd fa49 	bl	8000558 <__aeabi_f2d>
 80030c6:	4680      	mov	r8, r0
 80030c8:	4689      	mov	r9, r1
 80030ca:	4b54      	ldr	r3, [pc, #336]	; (800321c <HAL_UART_RxCpltCallback+0x2d4>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fa42 	bl	8000558 <__aeabi_f2d>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80030dc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80030e0:	e9cd 4500 	strd	r4, r5, [sp]
 80030e4:	4a4e      	ldr	r2, [pc, #312]	; (8003220 <HAL_UART_RxCpltCallback+0x2d8>)
 80030e6:	211e      	movs	r1, #30
 80030e8:	484b      	ldr	r0, [pc, #300]	; (8003218 <HAL_UART_RxCpltCallback+0x2d0>)
 80030ea:	f00b fe4f 	bl	800ed8c <sniprintf>
						break;
 80030ee:	e175      	b.n	80033dc <HAL_UART_RxCpltCallback+0x494>
						uart_mode = 0;
 80030f0:	4b4c      	ldr	r3, [pc, #304]	; (8003224 <HAL_UART_RxCpltCallback+0x2dc>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80030f6:	2200      	movs	r2, #0
 80030f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030fc:	483f      	ldr	r0, [pc, #252]	; (80031fc <HAL_UART_RxCpltCallback+0x2b4>)
 80030fe:	f003 fa9d 	bl	800663c <HAL_GPIO_WritePin>
						break;
 8003102:	e16b      	b.n	80033dc <HAL_UART_RxCpltCallback+0x494>
						memcpy(&offset_recieve_struct, recieve_lora_buff, sizeof(offset_recieve_struct));
 8003104:	4b48      	ldr	r3, [pc, #288]	; (8003228 <HAL_UART_RxCpltCallback+0x2e0>)
 8003106:	4a3f      	ldr	r2, [pc, #252]	; (8003204 <HAL_UART_RxCpltCallback+0x2bc>)
 8003108:	6810      	ldr	r0, [r2, #0]
 800310a:	6018      	str	r0, [r3, #0]
 800310c:	8892      	ldrh	r2, [r2, #4]
 800310e:	809a      	strh	r2, [r3, #4]
						MPU6050.offsetR = offset_recieve_struct.offsetR;
 8003110:	4b45      	ldr	r3, [pc, #276]	; (8003228 <HAL_UART_RxCpltCallback+0x2e0>)
 8003112:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003116:	b29a      	uxth	r2, r3
 8003118:	4b44      	ldr	r3, [pc, #272]	; (800322c <HAL_UART_RxCpltCallback+0x2e4>)
 800311a:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
						MPU6050.offsetP = offset_recieve_struct.offsetP;
 800311e:	4b42      	ldr	r3, [pc, #264]	; (8003228 <HAL_UART_RxCpltCallback+0x2e0>)
 8003120:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003124:	b29a      	uxth	r2, r3
 8003126:	4b41      	ldr	r3, [pc, #260]	; (800322c <HAL_UART_RxCpltCallback+0x2e4>)
 8003128:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
						snprintf(lora_tx_str, 30, "%d %d %d\n",  MPU6050.offsetP, MPU6050.offsetR, recieve_lora_buff[0]);
 800312c:	4b3f      	ldr	r3, [pc, #252]	; (800322c <HAL_UART_RxCpltCallback+0x2e4>)
 800312e:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 8003132:	4619      	mov	r1, r3
 8003134:	4b3d      	ldr	r3, [pc, #244]	; (800322c <HAL_UART_RxCpltCallback+0x2e4>)
 8003136:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 800313a:	461a      	mov	r2, r3
 800313c:	4b31      	ldr	r3, [pc, #196]	; (8003204 <HAL_UART_RxCpltCallback+0x2bc>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	9200      	str	r2, [sp, #0]
 8003144:	460b      	mov	r3, r1
 8003146:	4a3a      	ldr	r2, [pc, #232]	; (8003230 <HAL_UART_RxCpltCallback+0x2e8>)
 8003148:	211e      	movs	r1, #30
 800314a:	4833      	ldr	r0, [pc, #204]	; (8003218 <HAL_UART_RxCpltCallback+0x2d0>)
 800314c:	f00b fe1e 	bl	800ed8c <sniprintf>
						break;
 8003150:	e144      	b.n	80033dc <HAL_UART_RxCpltCallback+0x494>
						memcpy(&pid_recieve_struct, recieve_lora_buff, sizeof(pid_recieve_struct));
 8003152:	4a2d      	ldr	r2, [pc, #180]	; (8003208 <HAL_UART_RxCpltCallback+0x2c0>)
 8003154:	4b2b      	ldr	r3, [pc, #172]	; (8003204 <HAL_UART_RxCpltCallback+0x2bc>)
 8003156:	cb03      	ldmia	r3!, {r0, r1}
 8003158:	6010      	str	r0, [r2, #0]
 800315a:	6051      	str	r1, [r2, #4]
						AltPID.Kp = (float)pid_recieve_struct.P / 100;
 800315c:	4b2a      	ldr	r3, [pc, #168]	; (8003208 <HAL_UART_RxCpltCallback+0x2c0>)
 800315e:	885b      	ldrh	r3, [r3, #2]
 8003160:	ee07 3a90 	vmov	s15, r3
 8003164:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003168:	eddf 6a28 	vldr	s13, [pc, #160]	; 800320c <HAL_UART_RxCpltCallback+0x2c4>
 800316c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003170:	4b30      	ldr	r3, [pc, #192]	; (8003234 <HAL_UART_RxCpltCallback+0x2ec>)
 8003172:	edc3 7a00 	vstr	s15, [r3]
						AltPID.Ki = (float)pid_recieve_struct.I / 100;
 8003176:	4b24      	ldr	r3, [pc, #144]	; (8003208 <HAL_UART_RxCpltCallback+0x2c0>)
 8003178:	889b      	ldrh	r3, [r3, #4]
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003182:	eddf 6a22 	vldr	s13, [pc, #136]	; 800320c <HAL_UART_RxCpltCallback+0x2c4>
 8003186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800318a:	4b2a      	ldr	r3, [pc, #168]	; (8003234 <HAL_UART_RxCpltCallback+0x2ec>)
 800318c:	edc3 7a01 	vstr	s15, [r3, #4]
						AltPID.Kd = (float)pid_recieve_struct.D / 100;
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_UART_RxCpltCallback+0x2c0>)
 8003192:	88db      	ldrh	r3, [r3, #6]
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800319c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800320c <HAL_UART_RxCpltCallback+0x2c4>
 80031a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031a4:	4b23      	ldr	r3, [pc, #140]	; (8003234 <HAL_UART_RxCpltCallback+0x2ec>)
 80031a6:	edc3 7a02 	vstr	s15, [r3, #8]
						snprintf(lora_tx_str, 30, "%.2f %.2f %.2f %d\n",  AltPID.Kp, AltPID.Ki, AltPID.Kd, recieve_lora_buff[0]);
 80031aa:	4b22      	ldr	r3, [pc, #136]	; (8003234 <HAL_UART_RxCpltCallback+0x2ec>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd f9d2 	bl	8000558 <__aeabi_f2d>
 80031b4:	4604      	mov	r4, r0
 80031b6:	460d      	mov	r5, r1
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <HAL_UART_RxCpltCallback+0x2ec>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd f9cb 	bl	8000558 <__aeabi_f2d>
 80031c2:	4680      	mov	r8, r0
 80031c4:	4689      	mov	r9, r1
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_UART_RxCpltCallback+0x2ec>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f9c4 	bl	8000558 <__aeabi_f2d>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	490b      	ldr	r1, [pc, #44]	; (8003204 <HAL_UART_RxCpltCallback+0x2bc>)
 80031d6:	7809      	ldrb	r1, [r1, #0]
 80031d8:	9106      	str	r1, [sp, #24]
 80031da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031de:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80031e2:	e9cd 4500 	strd	r4, r5, [sp]
 80031e6:	4a14      	ldr	r2, [pc, #80]	; (8003238 <HAL_UART_RxCpltCallback+0x2f0>)
 80031e8:	211e      	movs	r1, #30
 80031ea:	480b      	ldr	r0, [pc, #44]	; (8003218 <HAL_UART_RxCpltCallback+0x2d0>)
 80031ec:	f00b fdce 	bl	800ed8c <sniprintf>
						break;
 80031f0:	e0f4      	b.n	80033dc <HAL_UART_RxCpltCallback+0x494>
 80031f2:	bf00      	nop
 80031f4:	20000840 	.word	0x20000840
 80031f8:	2000026c 	.word	0x2000026c
 80031fc:	40020800 	.word	0x40020800
 8003200:	200009b8 	.word	0x200009b8
 8003204:	20000270 	.word	0x20000270
 8003208:	2000073c 	.word	0x2000073c
 800320c:	42c80000 	.word	0x42c80000
 8003210:	20000310 	.word	0x20000310
 8003214:	0801326c 	.word	0x0801326c
 8003218:	20000290 	.word	0x20000290
 800321c:	20000378 	.word	0x20000378
 8003220:	08013280 	.word	0x08013280
 8003224:	2000026d 	.word	0x2000026d
 8003228:	200007d8 	.word	0x200007d8
 800322c:	200005a0 	.word	0x200005a0
 8003230:	08013294 	.word	0x08013294
 8003234:	20000358 	.word	0x20000358
 8003238:	080132a0 	.word	0x080132a0
						snprintf(lora_tx_str, 30, "%d %.6f %.6f %d\n",  GPS.satelites, GPS.dec_latitude, GPS.dec_longitude, recieve_lora_buff[0]);
 800323c:	4b70      	ldr	r3, [pc, #448]	; (8003400 <HAL_UART_RxCpltCallback+0x4b8>)
 800323e:	6a1e      	ldr	r6, [r3, #32]
 8003240:	4b6f      	ldr	r3, [pc, #444]	; (8003400 <HAL_UART_RxCpltCallback+0x4b8>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd f987 	bl	8000558 <__aeabi_f2d>
 800324a:	4604      	mov	r4, r0
 800324c:	460d      	mov	r5, r1
 800324e:	4b6c      	ldr	r3, [pc, #432]	; (8003400 <HAL_UART_RxCpltCallback+0x4b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd f980 	bl	8000558 <__aeabi_f2d>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4969      	ldr	r1, [pc, #420]	; (8003404 <HAL_UART_RxCpltCallback+0x4bc>)
 800325e:	7809      	ldrb	r1, [r1, #0]
 8003260:	9104      	str	r1, [sp, #16]
 8003262:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003266:	e9cd 4500 	strd	r4, r5, [sp]
 800326a:	4633      	mov	r3, r6
 800326c:	4a66      	ldr	r2, [pc, #408]	; (8003408 <HAL_UART_RxCpltCallback+0x4c0>)
 800326e:	211e      	movs	r1, #30
 8003270:	4866      	ldr	r0, [pc, #408]	; (800340c <HAL_UART_RxCpltCallback+0x4c4>)
 8003272:	f00b fd8b 	bl	800ed8c <sniprintf>
						break;
 8003276:	e0b1      	b.n	80033dc <HAL_UART_RxCpltCallback+0x494>
						snprintf(lora_tx_str, 30, "%.2f %.2f %.2f%s %d\n",  GPS.course_t, GPS.speed_km, GPS.msl_altitude, GPS.msl_units,recieve_lora_buff[0]);
 8003278:	4b61      	ldr	r3, [pc, #388]	; (8003400 <HAL_UART_RxCpltCallback+0x4b8>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd f96b 	bl	8000558 <__aeabi_f2d>
 8003282:	4604      	mov	r4, r0
 8003284:	460d      	mov	r5, r1
 8003286:	4b5e      	ldr	r3, [pc, #376]	; (8003400 <HAL_UART_RxCpltCallback+0x4b8>)
 8003288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd f964 	bl	8000558 <__aeabi_f2d>
 8003290:	4680      	mov	r8, r0
 8003292:	4689      	mov	r9, r1
 8003294:	4b5a      	ldr	r3, [pc, #360]	; (8003400 <HAL_UART_RxCpltCallback+0x4b8>)
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd f95d 	bl	8000558 <__aeabi_f2d>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4957      	ldr	r1, [pc, #348]	; (8003400 <HAL_UART_RxCpltCallback+0x4b8>)
 80032a4:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 80032a8:	4608      	mov	r0, r1
 80032aa:	4956      	ldr	r1, [pc, #344]	; (8003404 <HAL_UART_RxCpltCallback+0x4bc>)
 80032ac:	7809      	ldrb	r1, [r1, #0]
 80032ae:	9107      	str	r1, [sp, #28]
 80032b0:	9006      	str	r0, [sp, #24]
 80032b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80032b6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80032ba:	e9cd 4500 	strd	r4, r5, [sp]
 80032be:	4a54      	ldr	r2, [pc, #336]	; (8003410 <HAL_UART_RxCpltCallback+0x4c8>)
 80032c0:	211e      	movs	r1, #30
 80032c2:	4852      	ldr	r0, [pc, #328]	; (800340c <HAL_UART_RxCpltCallback+0x4c4>)
 80032c4:	f00b fd62 	bl	800ed8c <sniprintf>
						break;
 80032c8:	e088      	b.n	80033dc <HAL_UART_RxCpltCallback+0x494>
						snprintf(lora_tx_str, 30, "%.2f %d %d %d\n", azimuth , compassX, compassY, compassZ);
 80032ca:	4b52      	ldr	r3, [pc, #328]	; (8003414 <HAL_UART_RxCpltCallback+0x4cc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd f942 	bl	8000558 <__aeabi_f2d>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	494f      	ldr	r1, [pc, #316]	; (8003418 <HAL_UART_RxCpltCallback+0x4d0>)
 80032da:	f9b1 1000 	ldrsh.w	r1, [r1]
 80032de:	4608      	mov	r0, r1
 80032e0:	494e      	ldr	r1, [pc, #312]	; (800341c <HAL_UART_RxCpltCallback+0x4d4>)
 80032e2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80032e6:	460c      	mov	r4, r1
 80032e8:	494d      	ldr	r1, [pc, #308]	; (8003420 <HAL_UART_RxCpltCallback+0x4d8>)
 80032ea:	f9b1 1000 	ldrsh.w	r1, [r1]
 80032ee:	9104      	str	r1, [sp, #16]
 80032f0:	9403      	str	r4, [sp, #12]
 80032f2:	9002      	str	r0, [sp, #8]
 80032f4:	e9cd 2300 	strd	r2, r3, [sp]
 80032f8:	4a4a      	ldr	r2, [pc, #296]	; (8003424 <HAL_UART_RxCpltCallback+0x4dc>)
 80032fa:	211e      	movs	r1, #30
 80032fc:	4843      	ldr	r0, [pc, #268]	; (800340c <HAL_UART_RxCpltCallback+0x4c4>)
 80032fe:	f00b fd45 	bl	800ed8c <sniprintf>
						break;
 8003302:	e06b      	b.n	80033dc <HAL_UART_RxCpltCallback+0x494>
						snprintf(lora_tx_str, 30, " %.2f %.2f %.2f %.2f\n", bmp280.altitude , MPU6050.ROLL, MPU6050.PITCH, MPU6050.YAW);
 8003304:	4b48      	ldr	r3, [pc, #288]	; (8003428 <HAL_UART_RxCpltCallback+0x4e0>)
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f925 	bl	8000558 <__aeabi_f2d>
 800330e:	4604      	mov	r4, r0
 8003310:	460d      	mov	r5, r1
 8003312:	4b46      	ldr	r3, [pc, #280]	; (800342c <HAL_UART_RxCpltCallback+0x4e4>)
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd f91e 	bl	8000558 <__aeabi_f2d>
 800331c:	4680      	mov	r8, r0
 800331e:	4689      	mov	r9, r1
 8003320:	4b42      	ldr	r3, [pc, #264]	; (800342c <HAL_UART_RxCpltCallback+0x4e4>)
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd f917 	bl	8000558 <__aeabi_f2d>
 800332a:	4682      	mov	sl, r0
 800332c:	468b      	mov	fp, r1
 800332e:	4b3f      	ldr	r3, [pc, #252]	; (800342c <HAL_UART_RxCpltCallback+0x4e4>)
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd f910 	bl	8000558 <__aeabi_f2d>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003340:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003344:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003348:	e9cd 4500 	strd	r4, r5, [sp]
 800334c:	4a38      	ldr	r2, [pc, #224]	; (8003430 <HAL_UART_RxCpltCallback+0x4e8>)
 800334e:	211e      	movs	r1, #30
 8003350:	482e      	ldr	r0, [pc, #184]	; (800340c <HAL_UART_RxCpltCallback+0x4c4>)
 8003352:	f00b fd1b 	bl	800ed8c <sniprintf>
						break;
 8003356:	e041      	b.n	80033dc <HAL_UART_RxCpltCallback+0x494>
						snprintf(lora_tx_str, 30, "%.2f %.2f %.2f\n", MPU6050.Gx, MPU6050.Gy, MPU6050.Gz);
 8003358:	4b34      	ldr	r3, [pc, #208]	; (800342c <HAL_UART_RxCpltCallback+0x4e4>)
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd f8fb 	bl	8000558 <__aeabi_f2d>
 8003362:	4604      	mov	r4, r0
 8003364:	460d      	mov	r5, r1
 8003366:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_UART_RxCpltCallback+0x4e4>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd f8f4 	bl	8000558 <__aeabi_f2d>
 8003370:	4680      	mov	r8, r0
 8003372:	4689      	mov	r9, r1
 8003374:	4b2d      	ldr	r3, [pc, #180]	; (800342c <HAL_UART_RxCpltCallback+0x4e4>)
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f8ed 	bl	8000558 <__aeabi_f2d>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003386:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800338a:	e9cd 4500 	strd	r4, r5, [sp]
 800338e:	4a29      	ldr	r2, [pc, #164]	; (8003434 <HAL_UART_RxCpltCallback+0x4ec>)
 8003390:	211e      	movs	r1, #30
 8003392:	481e      	ldr	r0, [pc, #120]	; (800340c <HAL_UART_RxCpltCallback+0x4c4>)
 8003394:	f00b fcfa 	bl	800ed8c <sniprintf>
						break;
 8003398:	e020      	b.n	80033dc <HAL_UART_RxCpltCallback+0x494>
						snprintf(lora_tx_str, 30, "%.2f %.2f %.2f\n", MPU6050.Ax, MPU6050.Ay, MPU6050.Az);
 800339a:	4b24      	ldr	r3, [pc, #144]	; (800342c <HAL_UART_RxCpltCallback+0x4e4>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd f8da 	bl	8000558 <__aeabi_f2d>
 80033a4:	4604      	mov	r4, r0
 80033a6:	460d      	mov	r5, r1
 80033a8:	4b20      	ldr	r3, [pc, #128]	; (800342c <HAL_UART_RxCpltCallback+0x4e4>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fd f8d3 	bl	8000558 <__aeabi_f2d>
 80033b2:	4680      	mov	r8, r0
 80033b4:	4689      	mov	r9, r1
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_UART_RxCpltCallback+0x4e4>)
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd f8cc 	bl	8000558 <__aeabi_f2d>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80033c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80033cc:	e9cd 4500 	strd	r4, r5, [sp]
 80033d0:	4a18      	ldr	r2, [pc, #96]	; (8003434 <HAL_UART_RxCpltCallback+0x4ec>)
 80033d2:	211e      	movs	r1, #30
 80033d4:	480d      	ldr	r0, [pc, #52]	; (800340c <HAL_UART_RxCpltCallback+0x4c4>)
 80033d6:	f00b fcd9 	bl	800ed8c <sniprintf>
						break;
 80033da:	bf00      	nop
			HAL_UART_Transmit_IT(&huart2, lora_tx_str, sizeof(lora_tx_str));
 80033dc:	2220      	movs	r2, #32
 80033de:	490b      	ldr	r1, [pc, #44]	; (800340c <HAL_UART_RxCpltCallback+0x4c4>)
 80033e0:	4815      	ldr	r0, [pc, #84]	; (8003438 <HAL_UART_RxCpltCallback+0x4f0>)
 80033e2:	f007 fcf8 	bl	800add6 <HAL_UART_Transmit_IT>
}
 80033e6:	e005      	b.n	80033f4 <HAL_UART_RxCpltCallback+0x4ac>
		else if(huart == &huart6){
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a14      	ldr	r2, [pc, #80]	; (800343c <HAL_UART_RxCpltCallback+0x4f4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_UART_RxCpltCallback+0x4ac>
			GPS_UART_CallBack();
 80033f0:	f7ff fb78 	bl	8002ae4 <GPS_UART_CallBack>
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033fe:	bf00      	nop
 8003400:	200006e4 	.word	0x200006e4
 8003404:	20000270 	.word	0x20000270
 8003408:	080132b4 	.word	0x080132b4
 800340c:	20000290 	.word	0x20000290
 8003410:	080132c8 	.word	0x080132c8
 8003414:	200002b8 	.word	0x200002b8
 8003418:	200002be 	.word	0x200002be
 800341c:	200002c0 	.word	0x200002c0
 8003420:	200002c2 	.word	0x200002c2
 8003424:	080132e0 	.word	0x080132e0
 8003428:	20000974 	.word	0x20000974
 800342c:	200005a0 	.word	0x200005a0
 8003430:	080132f0 	.word	0x080132f0
 8003434:	08013308 	.word	0x08013308
 8003438:	200009b8 	.word	0x200009b8
 800343c:	20000930 	.word	0x20000930

08003440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003444:	f002 f9be 	bl	80057c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003448:	f000 f902 	bl	8003650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800344c:	f000 fbf6 	bl	8003c3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8003450:	f000 f96a 	bl	8003728 <MX_I2C1_Init>
  MX_DMA_Init();
 8003454:	f000 fbb4 	bl	8003bc0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003458:	f000 fb34 	bl	8003ac4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800345c:	f000 f9c0 	bl	80037e0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003460:	f000 fa46 	bl	80038f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003464:	f000 fa92 	bl	800398c <MX_TIM4_Init>
  MX_I2C2_Init();
 8003468:	f000 f98c 	bl	8003784 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800346c:	f000 fb54 	bl	8003b18 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8003470:	f000 fb7c 	bl	8003b6c <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8003474:	f000 fad8 	bl	8003a28 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*) &zntime, 1);
 8003478:	2301      	movs	r3, #1
 800347a:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <main+0x1b0>)
 800347c:	2104      	movs	r1, #4
 800347e:	485d      	ldr	r0, [pc, #372]	; (80035f4 <main+0x1b4>)
 8003480:	f006 fb8e 	bl	8009ba0 <HAL_TIM_IC_Start_DMA>

	HAL_TIM_Base_Start_IT(&htim3);
 8003484:	485c      	ldr	r0, [pc, #368]	; (80035f8 <main+0x1b8>)
 8003486:	f006 facf 	bl	8009a28 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 800348a:	485c      	ldr	r0, [pc, #368]	; (80035fc <main+0x1bc>)
 800348c:	f006 facc 	bl	8009a28 <HAL_TIM_Base_Start_IT>

	 HAL_TIM_Base_Start_IT(&htim5);
 8003490:	485b      	ldr	r0, [pc, #364]	; (8003600 <main+0x1c0>)
 8003492:	f006 fac9 	bl	8009a28 <HAL_TIM_Base_Start_IT>

	HAL_Delay(200);
 8003496:	20c8      	movs	r0, #200	; 0xc8
 8003498:	f002 fa06 	bl	80058a8 <HAL_Delay>

	PitchPID.Kp = 4;
 800349c:	4b59      	ldr	r3, [pc, #356]	; (8003604 <main+0x1c4>)
 800349e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80034a2:	601a      	str	r2, [r3, #0]
	PitchPID.Ki = 0;
 80034a4:	4b57      	ldr	r3, [pc, #348]	; (8003604 <main+0x1c4>)
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	605a      	str	r2, [r3, #4]
	PitchPID.Kd = 0;
 80034ac:	4b55      	ldr	r3, [pc, #340]	; (8003604 <main+0x1c4>)
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
	PitchPID.PWM_Duty = 1500;
 80034b4:	4b53      	ldr	r3, [pc, #332]	; (8003604 <main+0x1c4>)
 80034b6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80034ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	RollPID.Kp = 4;
 80034be:	4b52      	ldr	r3, [pc, #328]	; (8003608 <main+0x1c8>)
 80034c0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80034c4:	601a      	str	r2, [r3, #0]
	RollPID.Ki = 0;
 80034c6:	4b50      	ldr	r3, [pc, #320]	; (8003608 <main+0x1c8>)
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	605a      	str	r2, [r3, #4]
	RollPID.Kd = 0;
 80034ce:	4b4e      	ldr	r3, [pc, #312]	; (8003608 <main+0x1c8>)
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
	RollPID.PWM_Duty = 1500;
 80034d6:	4b4c      	ldr	r3, [pc, #304]	; (8003608 <main+0x1c8>)
 80034d8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80034dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	AltPID.Kp = 1;
 80034e0:	4b4a      	ldr	r3, [pc, #296]	; (800360c <main+0x1cc>)
 80034e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80034e6:	601a      	str	r2, [r3, #0]
	AltPID.Ki = 0.1;
 80034e8:	4b48      	ldr	r3, [pc, #288]	; (800360c <main+0x1cc>)
 80034ea:	4a49      	ldr	r2, [pc, #292]	; (8003610 <main+0x1d0>)
 80034ec:	605a      	str	r2, [r3, #4]

	TransmitStruct.Pitch_PWM = 1500;
 80034ee:	4b49      	ldr	r3, [pc, #292]	; (8003614 <main+0x1d4>)
 80034f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80034f4:	801a      	strh	r2, [r3, #0]
	TransmitStruct.Roll_PWM = 1500;
 80034f6:	4b47      	ldr	r3, [pc, #284]	; (8003614 <main+0x1d4>)
 80034f8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80034fc:	805a      	strh	r2, [r3, #2]


	while (MPU6050_Init(&hi2c1) == 1)
 80034fe:	bf00      	nop
 8003500:	4845      	ldr	r0, [pc, #276]	; (8003618 <main+0x1d8>)
 8003502:	f000 fd19 	bl	8003f38 <MPU6050_Init>
 8003506:	4603      	mov	r3, r0
 8003508:	2b01      	cmp	r3, #1
 800350a:	d0f9      	beq.n	8003500 <main+0xc0>
		;
	imuInit();
 800350c:	f7fe fa12 	bl	8001934 <imuInit>
	BQfilterInit();
 8003510:	f000 fd88 	bl	8004024 <BQfilterInit>
	DTermFilterInit();
 8003514:	f7fe fbbe 	bl	8001c94 <DTermFilterInit>

	bmp280_init_params(&bmp280.params);
 8003518:	4840      	ldr	r0, [pc, #256]	; (800361c <main+0x1dc>)
 800351a:	f7fe fbd1 	bl	8001cc0 <bmp280_init_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 800351e:	4b40      	ldr	r3, [pc, #256]	; (8003620 <main+0x1e0>)
 8003520:	2276      	movs	r2, #118	; 0x76
 8003522:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c2;
 8003524:	4b3e      	ldr	r3, [pc, #248]	; (8003620 <main+0x1e0>)
 8003526:	4a3f      	ldr	r2, [pc, #252]	; (8003624 <main+0x1e4>)
 8003528:	629a      	str	r2, [r3, #40]	; 0x28

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 800352a:	e003      	b.n	8003534 <main+0xf4>
		HAL_Delay(1000);
 800352c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003530:	f002 f9ba 	bl	80058a8 <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8003534:	4939      	ldr	r1, [pc, #228]	; (800361c <main+0x1dc>)
 8003536:	483a      	ldr	r0, [pc, #232]	; (8003620 <main+0x1e0>)
 8003538:	f7fe fd3c 	bl	8001fb4 <bmp280_init>
 800353c:	4603      	mov	r3, r0
 800353e:	f083 0301 	eor.w	r3, r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f1      	bne.n	800352c <main+0xec>

	}
	//BMP180_Start();
	//alt_offset = BMP180_GetAlt(1);

	settingss = HMC_Init();
 8003548:	f7fd fda8 	bl	800109c <HMC_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	4b35      	ldr	r3, [pc, #212]	; (8003628 <main+0x1e8>)
 8003552:	701a      	strb	r2, [r3, #0]

	HAL_Delay(5000);
 8003554:	f241 3088 	movw	r0, #5000	; 0x1388
 8003558:	f002 f9a6 	bl	80058a8 <HAL_Delay>

	MPU6050.Gz_offset = MPU6050.Gz;
 800355c:	4b33      	ldr	r3, [pc, #204]	; (800362c <main+0x1ec>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	4a32      	ldr	r2, [pc, #200]	; (800362c <main+0x1ec>)
 8003562:	6293      	str	r3, [r2, #40]	; 0x28
	//alt_offset = BMP180_GetAlt(1);

	bmp280_read_float(&bmp280);
 8003564:	482e      	ldr	r0, [pc, #184]	; (8003620 <main+0x1e0>)
 8003566:	f7ff f893 	bl	8002690 <bmp280_read_float>

	alt_offset = bmp280.altitude;
 800356a:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <main+0x1e0>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	4a30      	ldr	r2, [pc, #192]	; (8003630 <main+0x1f0>)
 8003570:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart2, recieve_lora_buff, sizeof(recieve_lora_buff));
 8003572:	2220      	movs	r2, #32
 8003574:	492f      	ldr	r1, [pc, #188]	; (8003634 <main+0x1f4>)
 8003576:	4830      	ldr	r0, [pc, #192]	; (8003638 <main+0x1f8>)
 8003578:	f007 fc72 	bl	800ae60 <HAL_UART_Receive_IT>

	GPS_Init();
 800357c:	f7ff faa4 	bl	8002ac8 <GPS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if(HAL_GetTick() - baro_time > 40){
 8003580:	f002 f986 	bl	8005890 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	4b2d      	ldr	r3, [pc, #180]	; (800363c <main+0x1fc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b28      	cmp	r3, #40	; 0x28
 800358e:	d912      	bls.n	80035b6 <main+0x176>

			}*/



			bmp280_read_float(&bmp280);
 8003590:	4823      	ldr	r0, [pc, #140]	; (8003620 <main+0x1e0>)
 8003592:	f7ff f87d 	bl	8002690 <bmp280_read_float>
			bmp280.altitude -= alt_offset;
 8003596:	4b22      	ldr	r3, [pc, #136]	; (8003620 <main+0x1e0>)
 8003598:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800359c:	4b24      	ldr	r3, [pc, #144]	; (8003630 <main+0x1f0>)
 800359e:	edd3 7a00 	vldr	s15, [r3]
 80035a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <main+0x1e0>)
 80035a8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			baro_time = HAL_GetTick();
 80035ac:	f002 f970 	bl	8005890 <HAL_GetTick>
 80035b0:	4603      	mov	r3, r0
 80035b2:	4a22      	ldr	r2, [pc, #136]	; (800363c <main+0x1fc>)
 80035b4:	6013      	str	r3, [r2, #0]
		}

		dataready =  HMC_Update(&azimuth);
 80035b6:	4822      	ldr	r0, [pc, #136]	; (8003640 <main+0x200>)
 80035b8:	f7fd fd9a 	bl	80010f0 <HMC_Update>
 80035bc:	4603      	mov	r3, r0
 80035be:	461a      	mov	r2, r3
 80035c0:	4b20      	ldr	r3, [pc, #128]	; (8003644 <main+0x204>)
 80035c2:	701a      	strb	r2, [r3, #0]

		if (HAL_GetTick() - time >= 500) {
 80035c4:	f002 f964 	bl	8005890 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4b1f      	ldr	r3, [pc, #124]	; (8003648 <main+0x208>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80035d4:	d3d4      	bcc.n	8003580 <main+0x140>
			//snprintf(trans_str, 30, "%f\n", RollPID.Kp);
		//	CDC_Transmit_FS((uint8_t*) trans_str, sizeof(trans_str));

			time = HAL_GetTick();
 80035d6:	f002 f95b 	bl	8005890 <HAL_GetTick>
 80035da:	4603      	mov	r3, r0
 80035dc:	4a1a      	ldr	r2, [pc, #104]	; (8003648 <main+0x208>)
 80035de:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80035e0:	2201      	movs	r2, #1
 80035e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035e6:	4819      	ldr	r0, [pc, #100]	; (800364c <main+0x20c>)
 80035e8:	f003 f828 	bl	800663c <HAL_GPIO_WritePin>
		if(HAL_GetTick() - baro_time > 40){
 80035ec:	e7c8      	b.n	8003580 <main+0x140>
 80035ee:	bf00      	nop
 80035f0:	20000884 	.word	0x20000884
 80035f4:	20000888 	.word	0x20000888
 80035f8:	2000078c 	.word	0x2000078c
 80035fc:	20000440 	.word	0x20000440
 8003600:	20000744 	.word	0x20000744
 8003604:	20000378 	.word	0x20000378
 8003608:	20000310 	.word	0x20000310
 800360c:	20000358 	.word	0x20000358
 8003610:	3dcccccd 	.word	0x3dcccccd
 8003614:	200007d4 	.word	0x200007d4
 8003618:	20000498 	.word	0x20000498
 800361c:	200009a0 	.word	0x200009a0
 8003620:	20000974 	.word	0x20000974
 8003624:	200004ec 	.word	0x200004ec
 8003628:	200002bd 	.word	0x200002bd
 800362c:	200005a0 	.word	0x200005a0
 8003630:	200002b4 	.word	0x200002b4
 8003634:	20000270 	.word	0x20000270
 8003638:	200009b8 	.word	0x200009b8
 800363c:	200002b0 	.word	0x200002b0
 8003640:	200002b8 	.word	0x200002b8
 8003644:	200002bc 	.word	0x200002bc
 8003648:	20000268 	.word	0x20000268
 800364c:	40020800 	.word	0x40020800

08003650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b094      	sub	sp, #80	; 0x50
 8003654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003656:	f107 0320 	add.w	r3, r7, #32
 800365a:	2230      	movs	r2, #48	; 0x30
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f00a fd12 	bl	800e088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003664:	f107 030c 	add.w	r3, r7, #12
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003674:	2300      	movs	r3, #0
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	4b29      	ldr	r3, [pc, #164]	; (8003720 <SystemClock_Config+0xd0>)
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	4a28      	ldr	r2, [pc, #160]	; (8003720 <SystemClock_Config+0xd0>)
 800367e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003682:	6413      	str	r3, [r2, #64]	; 0x40
 8003684:	4b26      	ldr	r3, [pc, #152]	; (8003720 <SystemClock_Config+0xd0>)
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003690:	2300      	movs	r3, #0
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	4b23      	ldr	r3, [pc, #140]	; (8003724 <SystemClock_Config+0xd4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800369c:	4a21      	ldr	r2, [pc, #132]	; (8003724 <SystemClock_Config+0xd4>)
 800369e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <SystemClock_Config+0xd4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036b0:	2301      	movs	r3, #1
 80036b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036ba:	2302      	movs	r3, #2
 80036bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80036c4:	2319      	movs	r3, #25
 80036c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80036c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80036cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80036ce:	2304      	movs	r3, #4
 80036d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80036d2:	2307      	movs	r3, #7
 80036d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036d6:	f107 0320 	add.w	r3, r7, #32
 80036da:	4618      	mov	r0, r3
 80036dc:	f005 fd0c 	bl	80090f8 <HAL_RCC_OscConfig>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80036e6:	f000 fb53 	bl	8003d90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036ea:	230f      	movs	r3, #15
 80036ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036ee:	2302      	movs	r3, #2
 80036f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003700:	f107 030c 	add.w	r3, r7, #12
 8003704:	2102      	movs	r1, #2
 8003706:	4618      	mov	r0, r3
 8003708:	f005 ff6e 	bl	80095e8 <HAL_RCC_ClockConfig>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003712:	f000 fb3d 	bl	8003d90 <Error_Handler>
  }
}
 8003716:	bf00      	nop
 8003718:	3750      	adds	r7, #80	; 0x50
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800
 8003724:	40007000 	.word	0x40007000

08003728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800372c:	4b12      	ldr	r3, [pc, #72]	; (8003778 <MX_I2C1_Init+0x50>)
 800372e:	4a13      	ldr	r2, [pc, #76]	; (800377c <MX_I2C1_Init+0x54>)
 8003730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003732:	4b11      	ldr	r3, [pc, #68]	; (8003778 <MX_I2C1_Init+0x50>)
 8003734:	4a12      	ldr	r2, [pc, #72]	; (8003780 <MX_I2C1_Init+0x58>)
 8003736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <MX_I2C1_Init+0x50>)
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800373e:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <MX_I2C1_Init+0x50>)
 8003740:	2200      	movs	r2, #0
 8003742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <MX_I2C1_Init+0x50>)
 8003746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800374a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800374c:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <MX_I2C1_Init+0x50>)
 800374e:	2200      	movs	r2, #0
 8003750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003752:	4b09      	ldr	r3, [pc, #36]	; (8003778 <MX_I2C1_Init+0x50>)
 8003754:	2200      	movs	r2, #0
 8003756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003758:	4b07      	ldr	r3, [pc, #28]	; (8003778 <MX_I2C1_Init+0x50>)
 800375a:	2200      	movs	r2, #0
 800375c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <MX_I2C1_Init+0x50>)
 8003760:	2200      	movs	r2, #0
 8003762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003764:	4804      	ldr	r0, [pc, #16]	; (8003778 <MX_I2C1_Init+0x50>)
 8003766:	f002 ff83 	bl	8006670 <HAL_I2C_Init>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003770:	f000 fb0e 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003774:	bf00      	nop
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000498 	.word	0x20000498
 800377c:	40005400 	.word	0x40005400
 8003780:	00061a80 	.word	0x00061a80

08003784 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003788:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <MX_I2C2_Init+0x50>)
 800378a:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <MX_I2C2_Init+0x54>)
 800378c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <MX_I2C2_Init+0x50>)
 8003790:	4a12      	ldr	r2, [pc, #72]	; (80037dc <MX_I2C2_Init+0x58>)
 8003792:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003794:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <MX_I2C2_Init+0x50>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <MX_I2C2_Init+0x50>)
 800379c:	2200      	movs	r2, #0
 800379e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <MX_I2C2_Init+0x50>)
 80037a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <MX_I2C2_Init+0x50>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <MX_I2C2_Init+0x50>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037b4:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <MX_I2C2_Init+0x50>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <MX_I2C2_Init+0x50>)
 80037bc:	2200      	movs	r2, #0
 80037be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80037c0:	4804      	ldr	r0, [pc, #16]	; (80037d4 <MX_I2C2_Init+0x50>)
 80037c2:	f002 ff55 	bl	8006670 <HAL_I2C_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80037cc:	f000 fae0 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80037d0:	bf00      	nop
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	200004ec 	.word	0x200004ec
 80037d8:	40005800 	.word	0x40005800
 80037dc:	000186a0 	.word	0x000186a0

080037e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08c      	sub	sp, #48	; 0x30
 80037e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80037e6:	f107 031c 	add.w	r3, r7, #28
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	605a      	str	r2, [r3, #4]
 80037f0:	609a      	str	r2, [r3, #8]
 80037f2:	60da      	str	r2, [r3, #12]
 80037f4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037f6:	f107 0314 	add.w	r3, r7, #20
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003800:	1d3b      	adds	r3, r7, #4
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800380c:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <MX_TIM1_Init+0x108>)
 800380e:	4a37      	ldr	r2, [pc, #220]	; (80038ec <MX_TIM1_Init+0x10c>)
 8003810:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8003812:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <MX_TIM1_Init+0x108>)
 8003814:	2253      	movs	r2, #83	; 0x53
 8003816:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003818:	4b33      	ldr	r3, [pc, #204]	; (80038e8 <MX_TIM1_Init+0x108>)
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000;
 800381e:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <MX_TIM1_Init+0x108>)
 8003820:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003824:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003826:	4b30      	ldr	r3, [pc, #192]	; (80038e8 <MX_TIM1_Init+0x108>)
 8003828:	2200      	movs	r2, #0
 800382a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800382c:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <MX_TIM1_Init+0x108>)
 800382e:	2200      	movs	r2, #0
 8003830:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003832:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <MX_TIM1_Init+0x108>)
 8003834:	2200      	movs	r2, #0
 8003836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003838:	482b      	ldr	r0, [pc, #172]	; (80038e8 <MX_TIM1_Init+0x108>)
 800383a:	f006 f8a5 	bl	8009988 <HAL_TIM_Base_Init>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8003844:	f000 faa4 	bl	8003d90 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003848:	4827      	ldr	r0, [pc, #156]	; (80038e8 <MX_TIM1_Init+0x108>)
 800384a:	f006 f94f 	bl	8009aec <HAL_TIM_IC_Init>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003854:	f000 fa9c 	bl	8003d90 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003858:	2304      	movs	r3, #4
 800385a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800385c:	2350      	movs	r3, #80	; 0x50
 800385e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003860:	2300      	movs	r3, #0
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003868:	f107 031c 	add.w	r3, r7, #28
 800386c:	4619      	mov	r1, r3
 800386e:	481e      	ldr	r0, [pc, #120]	; (80038e8 <MX_TIM1_Init+0x108>)
 8003870:	f006 fd9d 	bl	800a3ae <HAL_TIM_SlaveConfigSynchro>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800387a:	f000 fa89 	bl	8003d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003882:	2300      	movs	r3, #0
 8003884:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003886:	f107 0314 	add.w	r3, r7, #20
 800388a:	4619      	mov	r1, r3
 800388c:	4816      	ldr	r0, [pc, #88]	; (80038e8 <MX_TIM1_Init+0x108>)
 800388e:	f007 f9d3 	bl	800ac38 <HAL_TIMEx_MasterConfigSynchronization>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8003898:	f000 fa7a 	bl	8003d90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800389c:	2300      	movs	r3, #0
 800389e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80038a0:	2301      	movs	r3, #1
 80038a2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	2200      	movs	r2, #0
 80038b0:	4619      	mov	r1, r3
 80038b2:	480d      	ldr	r0, [pc, #52]	; (80038e8 <MX_TIM1_Init+0x108>)
 80038b4:	f006 fc18 	bl	800a0e8 <HAL_TIM_IC_ConfigChannel>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 80038be:	f000 fa67 	bl	8003d90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80038c2:	2302      	movs	r3, #2
 80038c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80038c6:	2302      	movs	r3, #2
 80038c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80038ca:	1d3b      	adds	r3, r7, #4
 80038cc:	2204      	movs	r2, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4805      	ldr	r0, [pc, #20]	; (80038e8 <MX_TIM1_Init+0x108>)
 80038d2:	f006 fc09 	bl	800a0e8 <HAL_TIM_IC_ConfigChannel>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80038dc:	f000 fa58 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80038e0:	bf00      	nop
 80038e2:	3730      	adds	r7, #48	; 0x30
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000888 	.word	0x20000888
 80038ec:	40010000 	.word	0x40010000

080038f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038f6:	f107 0308 	add.w	r3, r7, #8
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	605a      	str	r2, [r3, #4]
 8003900:	609a      	str	r2, [r3, #8]
 8003902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003904:	463b      	mov	r3, r7
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <MX_TIM3_Init+0x94>)
 800390e:	4a1e      	ldr	r2, [pc, #120]	; (8003988 <MX_TIM3_Init+0x98>)
 8003910:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8003912:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <MX_TIM3_Init+0x94>)
 8003914:	2253      	movs	r2, #83	; 0x53
 8003916:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003918:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <MX_TIM3_Init+0x94>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800391e:	4b19      	ldr	r3, [pc, #100]	; (8003984 <MX_TIM3_Init+0x94>)
 8003920:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003924:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003926:	4b17      	ldr	r3, [pc, #92]	; (8003984 <MX_TIM3_Init+0x94>)
 8003928:	2200      	movs	r2, #0
 800392a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800392c:	4b15      	ldr	r3, [pc, #84]	; (8003984 <MX_TIM3_Init+0x94>)
 800392e:	2200      	movs	r2, #0
 8003930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003932:	4814      	ldr	r0, [pc, #80]	; (8003984 <MX_TIM3_Init+0x94>)
 8003934:	f006 f828 	bl	8009988 <HAL_TIM_Base_Init>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800393e:	f000 fa27 	bl	8003d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003946:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003948:	f107 0308 	add.w	r3, r7, #8
 800394c:	4619      	mov	r1, r3
 800394e:	480d      	ldr	r0, [pc, #52]	; (8003984 <MX_TIM3_Init+0x94>)
 8003950:	f006 fc66 	bl	800a220 <HAL_TIM_ConfigClockSource>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800395a:	f000 fa19 	bl	8003d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800395e:	2300      	movs	r3, #0
 8003960:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003966:	463b      	mov	r3, r7
 8003968:	4619      	mov	r1, r3
 800396a:	4806      	ldr	r0, [pc, #24]	; (8003984 <MX_TIM3_Init+0x94>)
 800396c:	f007 f964 	bl	800ac38 <HAL_TIMEx_MasterConfigSynchronization>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003976:	f000 fa0b 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	2000078c 	.word	0x2000078c
 8003988:	40000400 	.word	0x40000400

0800398c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003992:	f107 0308 	add.w	r3, r7, #8
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	605a      	str	r2, [r3, #4]
 800399c:	609a      	str	r2, [r3, #8]
 800399e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a0:	463b      	mov	r3, r7
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039a8:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <MX_TIM4_Init+0x94>)
 80039aa:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <MX_TIM4_Init+0x98>)
 80039ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80039ae:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <MX_TIM4_Init+0x94>)
 80039b0:	2253      	movs	r2, #83	; 0x53
 80039b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b4:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <MX_TIM4_Init+0x94>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30000;
 80039ba:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <MX_TIM4_Init+0x94>)
 80039bc:	f247 5230 	movw	r2, #30000	; 0x7530
 80039c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <MX_TIM4_Init+0x94>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <MX_TIM4_Init+0x94>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80039ce:	4814      	ldr	r0, [pc, #80]	; (8003a20 <MX_TIM4_Init+0x94>)
 80039d0:	f005 ffda 	bl	8009988 <HAL_TIM_Base_Init>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80039da:	f000 f9d9 	bl	8003d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80039e4:	f107 0308 	add.w	r3, r7, #8
 80039e8:	4619      	mov	r1, r3
 80039ea:	480d      	ldr	r0, [pc, #52]	; (8003a20 <MX_TIM4_Init+0x94>)
 80039ec:	f006 fc18 	bl	800a220 <HAL_TIM_ConfigClockSource>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80039f6:	f000 f9cb 	bl	8003d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a02:	463b      	mov	r3, r7
 8003a04:	4619      	mov	r1, r3
 8003a06:	4806      	ldr	r0, [pc, #24]	; (8003a20 <MX_TIM4_Init+0x94>)
 8003a08:	f007 f916 	bl	800ac38 <HAL_TIMEx_MasterConfigSynchronization>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003a12:	f000 f9bd 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000440 	.word	0x20000440
 8003a24:	40000800 	.word	0x40000800

08003a28 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a2e:	f107 0308 	add.w	r3, r7, #8
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	609a      	str	r2, [r3, #8]
 8003a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <MX_TIM5_Init+0x94>)
 8003a46:	4a1e      	ldr	r2, [pc, #120]	; (8003ac0 <MX_TIM5_Init+0x98>)
 8003a48:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8003a4a:	4b1c      	ldr	r3, [pc, #112]	; (8003abc <MX_TIM5_Init+0x94>)
 8003a4c:	2253      	movs	r2, #83	; 0x53
 8003a4e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <MX_TIM5_Init+0x94>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003a56:	4b19      	ldr	r3, [pc, #100]	; (8003abc <MX_TIM5_Init+0x94>)
 8003a58:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a5e:	4b17      	ldr	r3, [pc, #92]	; (8003abc <MX_TIM5_Init+0x94>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a64:	4b15      	ldr	r3, [pc, #84]	; (8003abc <MX_TIM5_Init+0x94>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003a6a:	4814      	ldr	r0, [pc, #80]	; (8003abc <MX_TIM5_Init+0x94>)
 8003a6c:	f005 ff8c 	bl	8009988 <HAL_TIM_Base_Init>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003a76:	f000 f98b 	bl	8003d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003a80:	f107 0308 	add.w	r3, r7, #8
 8003a84:	4619      	mov	r1, r3
 8003a86:	480d      	ldr	r0, [pc, #52]	; (8003abc <MX_TIM5_Init+0x94>)
 8003a88:	f006 fbca 	bl	800a220 <HAL_TIM_ConfigClockSource>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003a92:	f000 f97d 	bl	8003d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a96:	2300      	movs	r3, #0
 8003a98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a9e:	463b      	mov	r3, r7
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4806      	ldr	r0, [pc, #24]	; (8003abc <MX_TIM5_Init+0x94>)
 8003aa4:	f007 f8c8 	bl	800ac38 <HAL_TIMEx_MasterConfigSynchronization>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003aae:	f000 f96f 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003ab2:	bf00      	nop
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000744 	.word	0x20000744
 8003ac0:	40000c00 	.word	0x40000c00

08003ac4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ac8:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <MX_USART1_UART_Init+0x4c>)
 8003aca:	4a12      	ldr	r2, [pc, #72]	; (8003b14 <MX_USART1_UART_Init+0x50>)
 8003acc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003ace:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <MX_USART1_UART_Init+0x4c>)
 8003ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ad4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ad6:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <MX_USART1_UART_Init+0x4c>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <MX_USART1_UART_Init+0x4c>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <MX_USART1_UART_Init+0x4c>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <MX_USART1_UART_Init+0x4c>)
 8003aea:	220c      	movs	r2, #12
 8003aec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aee:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <MX_USART1_UART_Init+0x4c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <MX_USART1_UART_Init+0x4c>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003afa:	4805      	ldr	r0, [pc, #20]	; (8003b10 <MX_USART1_UART_Init+0x4c>)
 8003afc:	f007 f91e 	bl	800ad3c <HAL_UART_Init>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b06:	f000 f943 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000840 	.word	0x20000840
 8003b14:	40011000 	.word	0x40011000

08003b18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <MX_USART2_UART_Init+0x4c>)
 8003b1e:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <MX_USART2_UART_Init+0x50>)
 8003b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <MX_USART2_UART_Init+0x4c>)
 8003b24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b2a:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <MX_USART2_UART_Init+0x4c>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <MX_USART2_UART_Init+0x4c>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <MX_USART2_UART_Init+0x4c>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <MX_USART2_UART_Init+0x4c>)
 8003b3e:	220c      	movs	r2, #12
 8003b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <MX_USART2_UART_Init+0x4c>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <MX_USART2_UART_Init+0x4c>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b4e:	4805      	ldr	r0, [pc, #20]	; (8003b64 <MX_USART2_UART_Init+0x4c>)
 8003b50:	f007 f8f4 	bl	800ad3c <HAL_UART_Init>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b5a:	f000 f919 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	200009b8 	.word	0x200009b8
 8003b68:	40004400 	.word	0x40004400

08003b6c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <MX_USART6_UART_Init+0x4c>)
 8003b72:	4a12      	ldr	r2, [pc, #72]	; (8003bbc <MX_USART6_UART_Init+0x50>)
 8003b74:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <MX_USART6_UART_Init+0x4c>)
 8003b78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003b7c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <MX_USART6_UART_Init+0x4c>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <MX_USART6_UART_Init+0x4c>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <MX_USART6_UART_Init+0x4c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <MX_USART6_UART_Init+0x4c>)
 8003b92:	220c      	movs	r2, #12
 8003b94:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <MX_USART6_UART_Init+0x4c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <MX_USART6_UART_Init+0x4c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003ba2:	4805      	ldr	r0, [pc, #20]	; (8003bb8 <MX_USART6_UART_Init+0x4c>)
 8003ba4:	f007 f8ca 	bl	800ad3c <HAL_UART_Init>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003bae:	f000 f8ef 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000930 	.word	0x20000930
 8003bbc:	40011400 	.word	0x40011400

08003bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <MX_DMA_Init+0x78>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <MX_DMA_Init+0x78>)
 8003bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <MX_DMA_Init+0x78>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <MX_DMA_Init+0x78>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	4a13      	ldr	r2, [pc, #76]	; (8003c38 <MX_DMA_Init+0x78>)
 8003bec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf2:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <MX_DMA_Init+0x78>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2100      	movs	r1, #0
 8003c02:	200b      	movs	r0, #11
 8003c04:	f001 ff4f 	bl	8005aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003c08:	200b      	movs	r0, #11
 8003c0a:	f001 ff68 	bl	8005ade <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2100      	movs	r1, #0
 8003c12:	203a      	movs	r0, #58	; 0x3a
 8003c14:	f001 ff47 	bl	8005aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003c18:	203a      	movs	r0, #58	; 0x3a
 8003c1a:	f001 ff60 	bl	8005ade <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2100      	movs	r1, #0
 8003c22:	2044      	movs	r0, #68	; 0x44
 8003c24:	f001 ff3f 	bl	8005aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003c28:	2044      	movs	r0, #68	; 0x44
 8003c2a:	f001 ff58 	bl	8005ade <HAL_NVIC_EnableIRQ>

}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800

08003c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <MX_GPIO_Init+0xf8>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a36      	ldr	r2, [pc, #216]	; (8003d34 <MX_GPIO_Init+0xf8>)
 8003c5c:	f043 0304 	orr.w	r3, r3, #4
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b34      	ldr	r3, [pc, #208]	; (8003d34 <MX_GPIO_Init+0xf8>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <MX_GPIO_Init+0xf8>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <MX_GPIO_Init+0xf8>)
 8003c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7e:	4b2d      	ldr	r3, [pc, #180]	; (8003d34 <MX_GPIO_Init+0xf8>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <MX_GPIO_Init+0xf8>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	4a28      	ldr	r2, [pc, #160]	; (8003d34 <MX_GPIO_Init+0xf8>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9a:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <MX_GPIO_Init+0xf8>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	4b22      	ldr	r3, [pc, #136]	; (8003d34 <MX_GPIO_Init+0xf8>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	4a21      	ldr	r2, [pc, #132]	; (8003d34 <MX_GPIO_Init+0xf8>)
 8003cb0:	f043 0302 	orr.w	r3, r3, #2
 8003cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb6:	4b1f      	ldr	r3, [pc, #124]	; (8003d34 <MX_GPIO_Init+0xf8>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	607b      	str	r3, [r7, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cc8:	481b      	ldr	r0, [pc, #108]	; (8003d38 <MX_GPIO_Init+0xfc>)
 8003cca:	f002 fcb7 	bl	800663c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2103      	movs	r1, #3
 8003cd2:	481a      	ldr	r0, [pc, #104]	; (8003d3c <MX_GPIO_Init+0x100>)
 8003cd4:	f002 fcb2 	bl	800663c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cea:	f107 0314 	add.w	r3, r7, #20
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4811      	ldr	r0, [pc, #68]	; (8003d38 <MX_GPIO_Init+0xfc>)
 8003cf2:	f002 fb1f 	bl	8006334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d02:	2300      	movs	r3, #0
 8003d04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d06:	f107 0314 	add.w	r3, r7, #20
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	480b      	ldr	r0, [pc, #44]	; (8003d3c <MX_GPIO_Init+0x100>)
 8003d0e:	f002 fb11 	bl	8006334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003d12:	2310      	movs	r3, #16
 8003d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1e:	f107 0314 	add.w	r3, r7, #20
 8003d22:	4619      	mov	r1, r3
 8003d24:	4805      	ldr	r0, [pc, #20]	; (8003d3c <MX_GPIO_Init+0x100>)
 8003d26:	f002 fb05 	bl	8006334 <HAL_GPIO_Init>

}
 8003d2a:	bf00      	nop
 8003d2c:	3728      	adds	r7, #40	; 0x28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40020800 	.word	0x40020800
 8003d3c:	40020000 	.word	0x40020000

08003d40 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a05      	ldr	r2, [pc, #20]	; (8003d64 <HAL_TIM_IC_CaptureCallback+0x24>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d103      	bne.n	8003d5a <HAL_TIM_IC_CaptureCallback+0x1a>
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8003d52:	4905      	ldr	r1, [pc, #20]	; (8003d68 <HAL_TIM_IC_CaptureCallback+0x28>)
 8003d54:	4805      	ldr	r0, [pc, #20]	; (8003d6c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8003d56:	f000 f999 	bl	800408c <MPU6050_Read_All>
	}
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40010000 	.word	0x40010000
 8003d68:	200005a0 	.word	0x200005a0
 8003d6c:	20000498 	.word	0x20000498

08003d70 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	Calculate_all(Read_Data, &MPU6050);
 8003d78:	4903      	ldr	r1, [pc, #12]	; (8003d88 <HAL_I2C_MemRxCpltCallback+0x18>)
 8003d7a:	4804      	ldr	r0, [pc, #16]	; (8003d8c <HAL_I2C_MemRxCpltCallback+0x1c>)
 8003d7c:	f000 fd88 	bl	8004890 <Calculate_all>
}
 8003d80:	bf00      	nop
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	200005a0 	.word	0x200005a0
 8003d8c:	20000488 	.word	0x20000488

08003d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d94:	b672      	cpsid	i
}
 8003d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003d98:	e7fe      	b.n	8003d98 <Error_Handler+0x8>
	...

08003d9c <sin_approx>:
#define sinPolyCoef5  8.333017292e-3f                                          // Double:  8.333017291562218127986291618761571373087e-3
#define sinPolyCoef7 -1.980661520e-4f                                          // Double: -1.980661520135080504411629636078917643846e-4
#define sinPolyCoef9  2.600054768e-6f                                          // Double:  2.600054767890361277123254766503271638682e-6
#endif
float sin_approx(float x)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t xint = x;
 8003da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003daa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dae:	ee17 3a90 	vmov	r3, s15
 8003db2:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f113 0f20 	cmn.w	r3, #32
 8003dba:	db02      	blt.n	8003dc2 <sin_approx+0x26>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	dd0a      	ble.n	8003dd8 <sin_approx+0x3c>
 8003dc2:	eddf 7a42 	vldr	s15, [pc, #264]	; 8003ecc <sin_approx+0x130>
 8003dc6:	e079      	b.n	8003ebc <sin_approx+0x120>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 8003dc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dcc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003ed0 <sin_approx+0x134>
 8003dd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003dd4:	edc7 7a01 	vstr	s15, [r7, #4]
 8003dd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ddc:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003ed4 <sin_approx+0x138>
 8003de0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de8:	dcee      	bgt.n	8003dc8 <sin_approx+0x2c>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 8003dea:	e007      	b.n	8003dfc <sin_approx+0x60>
 8003dec:	edd7 7a01 	vldr	s15, [r7, #4]
 8003df0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003ed0 <sin_approx+0x134>
 8003df4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003df8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003dfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e00:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003ed8 <sin_approx+0x13c>
 8003e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0c:	d4ee      	bmi.n	8003dec <sin_approx+0x50>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 8003e0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e12:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003edc <sin_approx+0x140>
 8003e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1e:	dd0c      	ble.n	8003e3a <sin_approx+0x9e>
 8003e20:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e24:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003edc <sin_approx+0x140>
 8003e28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e2c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003edc <sin_approx+0x140>
 8003e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e34:	edc7 7a01 	vstr	s15, [r7, #4]
 8003e38:	e014      	b.n	8003e64 <sin_approx+0xc8>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 8003e3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e3e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003ee0 <sin_approx+0x144>
 8003e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e4a:	d50b      	bpl.n	8003e64 <sin_approx+0xc8>
 8003e4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e50:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003edc <sin_approx+0x140>
 8003e54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e58:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003ee0 <sin_approx+0x144>
 8003e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e60:	edc7 7a01 	vstr	s15, [r7, #4]
    float x2 = x * x;
 8003e64:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e68:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e6c:	edc7 7a02 	vstr	s15, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 8003e70:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e74:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e80:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003ecc <sin_approx+0x130>
 8003e84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003e88:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003ee4 <sin_approx+0x148>
 8003e8c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003e90:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e98:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003ee8 <sin_approx+0x14c>
 8003e9c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8003ea0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ea8:	eddf 6a10 	vldr	s13, [pc, #64]	; 8003eec <sin_approx+0x150>
 8003eac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003eb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	00000000 	.word	0x00000000
 8003ed0:	40c90fdb 	.word	0x40c90fdb
 8003ed4:	40490fdb 	.word	0x40490fdb
 8003ed8:	c0490fdb 	.word	0xc0490fdb
 8003edc:	3fc90fdb 	.word	0x3fc90fdb
 8003ee0:	bfc90fdb 	.word	0xbfc90fdb
 8003ee4:	3941e792 	.word	0x3941e792
 8003ee8:	3c083097 	.word	0x3c083097
 8003eec:	3e2aa815 	.word	0x3e2aa815

08003ef0 <cos_approx>:

float cos_approx(float x)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	ed87 0a01 	vstr	s0, [r7, #4]
    return sin_approx(x + (0.5f * M_PIf));
 8003efa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003efe:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003f1c <cos_approx+0x2c>
 8003f02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f06:	eeb0 0a67 	vmov.f32	s0, s15
 8003f0a:	f7ff ff47 	bl	8003d9c <sin_approx>
 8003f0e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003f12:	eeb0 0a67 	vmov.f32	s0, s15
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	3fc90fdb 	.word	0x3fc90fdb

08003f20 <microes>:
struct BiQuadFilter YFiter;
struct BiQuadFilter ZFiter;



uint32_t microes(){
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
	return  TIM5->CNT;
 8003f24:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <microes+0x14>)
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40000c00 	.word	0x40000c00

08003f38 <MPU6050_Init>:

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af04      	add	r7, sp, #16
 8003f3e:	6078      	str	r0, [r7, #4]

   // calibrateMPU6050(gyroBias, accelBias);

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003f40:	2364      	movs	r3, #100	; 0x64
 8003f42:	9302      	str	r3, [sp, #8]
 8003f44:	2301      	movs	r3, #1
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	f107 030f 	add.w	r3, r7, #15
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	2301      	movs	r3, #1
 8003f50:	2275      	movs	r2, #117	; 0x75
 8003f52:	21d0      	movs	r1, #208	; 0xd0
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f002 fdc9 	bl	8006aec <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b68      	cmp	r3, #104	; 0x68
 8003f5e:	d15b      	bne.n	8004018 <MPU6050_Init+0xe0>
    {

    	//calibrateMPU6050(gyroBias, accelBias);
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8003f64:	2364      	movs	r3, #100	; 0x64
 8003f66:	9302      	str	r3, [sp, #8]
 8003f68:	2301      	movs	r3, #1
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	f107 030e 	add.w	r3, r7, #14
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	2301      	movs	r3, #1
 8003f74:	226b      	movs	r2, #107	; 0x6b
 8003f76:	21d0      	movs	r1, #208	; 0xd0
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f002 fcbd 	bl	80068f8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x00;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8003f82:	2364      	movs	r3, #100	; 0x64
 8003f84:	9302      	str	r3, [sp, #8]
 8003f86:	2301      	movs	r3, #1
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	f107 030e 	add.w	r3, r7, #14
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	2301      	movs	r3, #1
 8003f92:	2219      	movs	r2, #25
 8003f94:	21d0      	movs	r1, #208	; 0xd0
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f002 fcae 	bl	80068f8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 16g
        Data = 0b00011000;
 8003f9c:	2318      	movs	r3, #24
 8003f9e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003fa0:	2364      	movs	r3, #100	; 0x64
 8003fa2:	9302      	str	r3, [sp, #8]
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	9301      	str	r3, [sp, #4]
 8003fa8:	f107 030e 	add.w	r3, r7, #14
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	2301      	movs	r3, #1
 8003fb0:	221c      	movs	r2, #28
 8003fb2:	21d0      	movs	r1, #208	; 0xd0
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f002 fc9f 	bl	80068f8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 1000 �/s
        Data = 0b00010000;
 8003fba:	2310      	movs	r3, #16
 8003fbc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003fbe:	2364      	movs	r3, #100	; 0x64
 8003fc0:	9302      	str	r3, [sp, #8]
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	f107 030e 	add.w	r3, r7, #14
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	2301      	movs	r3, #1
 8003fce:	221b      	movs	r2, #27
 8003fd0:	21d0      	movs	r1, #208	; 0xd0
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f002 fc90 	bl	80068f8 <HAL_I2C_Mem_Write>


        //Set interrupt on int pin for data ready
        Data = 0x01;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, INT_PIN_INTERUPT_REG, 1, &Data, 1, i2c_timeout);
 8003fdc:	2364      	movs	r3, #100	; 0x64
 8003fde:	9302      	str	r3, [sp, #8]
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	f107 030e 	add.w	r3, r7, #14
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	2301      	movs	r3, #1
 8003fec:	2238      	movs	r2, #56	; 0x38
 8003fee:	21d0      	movs	r1, #208	; 0xd0
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f002 fc81 	bl	80068f8 <HAL_I2C_Mem_Write>

        Data = 0x01;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, LPF_FILTER_REG, 1, &Data, 1, i2c_timeout);
 8003ffa:	2364      	movs	r3, #100	; 0x64
 8003ffc:	9302      	str	r3, [sp, #8]
 8003ffe:	2301      	movs	r3, #1
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	f107 030e 	add.w	r3, r7, #14
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	2301      	movs	r3, #1
 800400a:	221a      	movs	r2, #26
 800400c:	21d0      	movs	r1, #208	; 0xd0
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f002 fc72 	bl	80068f8 <HAL_I2C_Mem_Write>

        //return 1;
         return 0;
 8004014:	2300      	movs	r3, #0
 8004016:	e000      	b.n	800401a <MPU6050_Init+0xe2>
    }
    return 1;
 8004018:	2301      	movs	r3, #1
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <BQfilterInit>:

void BQfilterInit(){
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
	/*BiQuadFilterInit(&XFiter, 15, 1000, 0.32);
	BiQuadFilterInit(&YFiter, 15, 1000, 0.32);
	BiQuadFilterInit(&ZFiter, 15, 1000, 0.32);*/
	for(int i = 0; i < 3; i++){
 800402a:	2300      	movs	r3, #0
 800402c:	607b      	str	r3, [r7, #4]
 800402e:	e020      	b.n	8004072 <BQfilterInit+0x4e>
		biquadFilterInitLPF(&MPU6050.Alowpasfilter2[i], 40, 1000);
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	3348      	adds	r3, #72	; 0x48
 800403c:	4a11      	ldr	r2, [pc, #68]	; (8004084 <BQfilterInit+0x60>)
 800403e:	4413      	add	r3, r2
 8004040:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004044:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004088 <BQfilterInit+0x64>
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe fb9f 	bl	800278c <biquadFilterInitLPF>
		biquadFilterInitLPF(&MPU6050.Glowpasfilter2[i], 40, 1000);
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	33c0      	adds	r3, #192	; 0xc0
 800405a:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <BQfilterInit+0x60>)
 800405c:	4413      	add	r3, r2
 800405e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004062:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8004088 <BQfilterInit+0x64>
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe fb90 	bl	800278c <biquadFilterInitLPF>
	for(int i = 0; i < 3; i++){
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3301      	adds	r3, #1
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b02      	cmp	r3, #2
 8004076:	dddb      	ble.n	8004030 <BQfilterInit+0xc>
	}
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200005a0 	.word	0x200005a0
 8004088:	42200000 	.word	0x42200000

0800408c <MPU6050_Read_All>:



void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af02      	add	r7, sp, #8
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    if(HAL_I2C_Mem_Read_IT(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Read_Data, 14) != HAL_OK){
 8004096:	230e      	movs	r3, #14
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	4b08      	ldr	r3, [pc, #32]	; (80040bc <MPU6050_Read_All+0x30>)
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	2301      	movs	r3, #1
 80040a0:	223b      	movs	r2, #59	; 0x3b
 80040a2:	21d0      	movs	r1, #208	; 0xd0
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f002 ff47 	bl	8006f38 <HAL_I2C_Mem_Read_IT>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MPU6050_Read_All+0x28>
    	int fer = 1;
 80040b0:	2301      	movs	r3, #1
 80040b2:	60fb      	str	r3, [r7, #12]
    }



}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20000488 	.word	0x20000488

080040c0 <MadgwickQuaternionUpdate>:

void MadgwickQuaternionUpdate(float ax, float ay, float az, float gyrox, float gyroy, float gyroz)
        {
 80040c0:	b5b0      	push	{r4, r5, r7, lr}
 80040c2:	b0ac      	sub	sp, #176	; 0xb0
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	ed87 0a05 	vstr	s0, [r7, #20]
 80040ca:	edc7 0a04 	vstr	s1, [r7, #16]
 80040ce:	ed87 1a03 	vstr	s2, [r7, #12]
 80040d2:	edc7 1a02 	vstr	s3, [r7, #8]
 80040d6:	ed87 2a01 	vstr	s4, [r7, #4]
 80040da:	edc7 2a00 	vstr	s5, [r7]
            float q1 = qm[0], q2 = qm[1], q3 = qm[2], q4 = qm[3];         // short name local variable for readability
 80040de:	4b43      	ldr	r3, [pc, #268]	; (80041ec <MadgwickQuaternionUpdate+0x12c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040e6:	4b41      	ldr	r3, [pc, #260]	; (80041ec <MadgwickQuaternionUpdate+0x12c>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040ee:	4b3f      	ldr	r3, [pc, #252]	; (80041ec <MadgwickQuaternionUpdate+0x12c>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80040f6:	4b3d      	ldr	r3, [pc, #244]	; (80041ec <MadgwickQuaternionUpdate+0x12c>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            float qDot1, qDot2, qDot3, qDot4;
            float hatDot1, hatDot2, hatDot3, hatDot4;
            float gerrx, gerry, gerrz, gbiasx, gbiasy, gbiasz;        // gyro bias error

            // Auxiliary variables to avoid repeated arithmetic
            float _halfq1 = 0.5f * q1;
 80040fe:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004102:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800410a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            float _halfq2 = 0.5f * q2;
 800410e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004112:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800411a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            float _halfq3 = 0.5f * q3;
 800411e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004122:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800412a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            float _halfq4 = 0.5f * q4;
 800412e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004132:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800413a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            float _2q1 = 2.0f * q1;
 800413e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004142:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004146:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            float _2q2 = 2.0f * q2;
 800414a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800414e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004152:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            float _2q3 = 2.0f * q3;
 8004156:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800415a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800415e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            float _2q4 = 2.0f * q4;
 8004162:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004166:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800416a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            float _2q1q3 = 2.0f * q1 * q3;
 800416e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004172:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004176:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800417a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800417e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            float _2q3q4 = 2.0f * q3 * q4;
 8004182:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004186:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800418a:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800418e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004192:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

            // Normalise accelerometer measurement
            norm = sqrt(ax * ax + ay * ay + az * az);
 8004196:	edd7 7a05 	vldr	s15, [r7, #20]
 800419a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800419e:	edd7 7a04 	vldr	s15, [r7, #16]
 80041a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80041a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80041ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80041b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041b6:	ee17 0a90 	vmov	r0, s15
 80041ba:	f7fc f9cd 	bl	8000558 <__aeabi_f2d>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	ec43 2b10 	vmov	d0, r2, r3
 80041c6:	f007 fd9b 	bl	800bd00 <sqrt>
 80041ca:	ec53 2b10 	vmov	r2, r3, d0
 80041ce:	4610      	mov	r0, r2
 80041d0:	4619      	mov	r1, r3
 80041d2:	f7fc fd11 	bl	8000bf8 <__aeabi_d2f>
 80041d6:	4603      	mov	r3, r0
 80041d8:	677b      	str	r3, [r7, #116]	; 0x74
            if (norm == 0.0f) return; // handle NaN
 80041da:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80041de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80041e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e6:	f000 834d 	beq.w	8004884 <MadgwickQuaternionUpdate+0x7c4>
 80041ea:	e001      	b.n	80041f0 <MadgwickQuaternionUpdate+0x130>
 80041ec:	2000003c 	.word	0x2000003c
            norm = 1.0f/norm;
 80041f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041f4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80041f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041fc:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
            ax *= norm;
 8004200:	ed97 7a05 	vldr	s14, [r7, #20]
 8004204:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800420c:	edc7 7a05 	vstr	s15, [r7, #20]
            ay *= norm;
 8004210:	ed97 7a04 	vldr	s14, [r7, #16]
 8004214:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421c:	edc7 7a04 	vstr	s15, [r7, #16]
            az *= norm;
 8004220:	ed97 7a03 	vldr	s14, [r7, #12]
 8004224:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422c:	edc7 7a03 	vstr	s15, [r7, #12]

            // Compute the objective function and Jacobian
            f1 = _2q2 * q4 - _2q1 * q3 - ax;
 8004230:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8004234:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800423c:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8004240:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004248:	ee37 7a67 	vsub.f32	s14, s14, s15
 800424c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004254:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            f2 = _2q1 * q2 + _2q3 * q4 - ay;
 8004258:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800425c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004260:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004264:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8004268:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800426c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004270:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004274:	edd7 7a04 	vldr	s15, [r7, #16]
 8004278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800427c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
            f3 = 1.0f - _2q2 * q2 - _2q3 * q3 - az;
 8004280:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8004284:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004290:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004294:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8004298:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800429c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80042a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ac:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
            J_11or24 = _2q3;
 80042b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042b4:	667b      	str	r3, [r7, #100]	; 0x64
            J_12or23 = _2q4;
 80042b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042ba:	663b      	str	r3, [r7, #96]	; 0x60
            J_13or22 = _2q1;
 80042bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042c0:	65fb      	str	r3, [r7, #92]	; 0x5c
            J_14or21 = _2q2;
 80042c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042c6:	65bb      	str	r3, [r7, #88]	; 0x58
            J_32 = 2.0f * J_14or21;
 80042c8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80042cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042d0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            J_33 = 2.0f * J_11or24;
 80042d4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80042d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042dc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

            // Compute the gradient (matrix multiplication)
            hatDot1 = J_14or21 * f2 - J_11or24 * f1;
 80042e0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80042e4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80042e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042ec:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80042f0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80042f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042fc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            hatDot2 = J_12or23 * f1 + J_13or22 * f2 - J_32 * f3;
 8004300:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004304:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8004308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800430c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8004310:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004318:	ee37 7a27 	vadd.f32	s14, s14, s15
 800431c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8004320:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800432c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
            hatDot3 = J_12or23 * f2 - J_33 *f3 - J_13or22 * f1;
 8004330:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004334:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800433c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8004340:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004348:	ee37 7a67 	vsub.f32	s14, s14, s15
 800434c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8004350:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8004354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800435c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            hatDot4 = J_14or21 * f1 + J_11or24 * f2;
 8004360:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004364:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8004368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800436c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8004370:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800437c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

            // Normalize the gradient
            norm = sqrt(hatDot1 * hatDot1 + hatDot2 * hatDot2 + hatDot3 * hatDot3 + hatDot4 * hatDot4);
 8004380:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004384:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004388:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800438c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004390:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004394:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004398:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800439c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043a0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80043a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80043a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ac:	ee17 0a90 	vmov	r0, s15
 80043b0:	f7fc f8d2 	bl	8000558 <__aeabi_f2d>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	ec43 2b10 	vmov	d0, r2, r3
 80043bc:	f007 fca0 	bl	800bd00 <sqrt>
 80043c0:	ec53 2b10 	vmov	r2, r3, d0
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	f7fc fc16 	bl	8000bf8 <__aeabi_d2f>
 80043cc:	4603      	mov	r3, r0
 80043ce:	677b      	str	r3, [r7, #116]	; 0x74
            hatDot1 /= norm;
 80043d0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80043d4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80043d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043dc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            hatDot2 /= norm;
 80043e0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80043e4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80043e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
            hatDot3 /= norm;
 80043f0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80043f4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80043f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043fc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            hatDot4 /= norm;
 8004400:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8004404:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800440c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

            // Compute estimated gyroscope biases
            gerrx = _2q1 * hatDot2 - _2q2 * hatDot1 - _2q3 * hatDot4 + _2q4 * hatDot3;
 8004410:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8004414:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004418:	ee27 7a27 	vmul.f32	s14, s14, s15
 800441c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8004420:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004428:	ee37 7a67 	vsub.f32	s14, s14, s15
 800442c:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8004430:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004438:	ee37 7a67 	vsub.f32	s14, s14, s15
 800443c:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8004440:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800444c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            gerry = _2q1 * hatDot3 + _2q2 * hatDot4 - _2q3 * hatDot1 - _2q4 * hatDot2;
 8004450:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8004454:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004458:	ee27 7a27 	vmul.f32	s14, s14, s15
 800445c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8004460:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004468:	ee37 7a27 	vadd.f32	s14, s14, s15
 800446c:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8004470:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004478:	ee37 7a67 	vsub.f32	s14, s14, s15
 800447c:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8004480:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800448c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            gerrz = _2q1 * hatDot4 - _2q2 * hatDot3 + _2q3 * hatDot2 - _2q4 * hatDot1;
 8004490:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8004494:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800449c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80044a0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80044a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044ac:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 80044b0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80044b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044bc:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80044c0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80044c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044cc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

            // Compute and remove gyroscope biases
            gbiasx = gerrx * dt * zeta;
 80044d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80044d2:	f7fc f841 	bl	8000558 <__aeabi_f2d>
 80044d6:	4be5      	ldr	r3, [pc, #916]	; (800486c <MadgwickQuaternionUpdate+0x7ac>)
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f7fc f894 	bl	8000608 <__aeabi_dmul>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4614      	mov	r4, r2
 80044e6:	461d      	mov	r5, r3
 80044e8:	4be1      	ldr	r3, [pc, #900]	; (8004870 <MadgwickQuaternionUpdate+0x7b0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fc f833 	bl	8000558 <__aeabi_f2d>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4620      	mov	r0, r4
 80044f8:	4629      	mov	r1, r5
 80044fa:	f7fc f885 	bl	8000608 <__aeabi_dmul>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	f7fc fb77 	bl	8000bf8 <__aeabi_d2f>
 800450a:	4603      	mov	r3, r0
 800450c:	633b      	str	r3, [r7, #48]	; 0x30
            gbiasy = gerry * dt * zeta;
 800450e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004510:	f7fc f822 	bl	8000558 <__aeabi_f2d>
 8004514:	4bd5      	ldr	r3, [pc, #852]	; (800486c <MadgwickQuaternionUpdate+0x7ac>)
 8004516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451a:	f7fc f875 	bl	8000608 <__aeabi_dmul>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4614      	mov	r4, r2
 8004524:	461d      	mov	r5, r3
 8004526:	4bd2      	ldr	r3, [pc, #840]	; (8004870 <MadgwickQuaternionUpdate+0x7b0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc f814 	bl	8000558 <__aeabi_f2d>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4620      	mov	r0, r4
 8004536:	4629      	mov	r1, r5
 8004538:	f7fc f866 	bl	8000608 <__aeabi_dmul>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	f7fc fb58 	bl	8000bf8 <__aeabi_d2f>
 8004548:	4603      	mov	r3, r0
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
            gbiasz = gerrz * dt * zeta;
 800454c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800454e:	f7fc f803 	bl	8000558 <__aeabi_f2d>
 8004552:	4bc6      	ldr	r3, [pc, #792]	; (800486c <MadgwickQuaternionUpdate+0x7ac>)
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f7fc f856 	bl	8000608 <__aeabi_dmul>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4614      	mov	r4, r2
 8004562:	461d      	mov	r5, r3
 8004564:	4bc2      	ldr	r3, [pc, #776]	; (8004870 <MadgwickQuaternionUpdate+0x7b0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7fb fff5 	bl	8000558 <__aeabi_f2d>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4620      	mov	r0, r4
 8004574:	4629      	mov	r1, r5
 8004576:	f7fc f847 	bl	8000608 <__aeabi_dmul>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4610      	mov	r0, r2
 8004580:	4619      	mov	r1, r3
 8004582:	f7fc fb39 	bl	8000bf8 <__aeabi_d2f>
 8004586:	4603      	mov	r3, r0
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28
            gyrox -= gbiasx;
 800458a:	ed97 7a02 	vldr	s14, [r7, #8]
 800458e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004596:	edc7 7a02 	vstr	s15, [r7, #8]
            gyroy -= gbiasy;
 800459a:	ed97 7a01 	vldr	s14, [r7, #4]
 800459e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80045a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045a6:	edc7 7a01 	vstr	s15, [r7, #4]
            gyroz -= gbiasz;
 80045aa:	ed97 7a00 	vldr	s14, [r7]
 80045ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80045b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045b6:	edc7 7a00 	vstr	s15, [r7]

            // Compute the quaternion derivative
            qDot1 = -_halfq2 * gyrox - _halfq3 * gyroy - _halfq4 * gyroz;
 80045ba:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80045be:	eeb1 7a67 	vneg.f32	s14, s15
 80045c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80045c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045ca:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80045ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80045d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045da:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 80045de:	edd7 7a00 	vldr	s15, [r7]
 80045e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            qDot2 =  _halfq1 * gyrox + _halfq3 * gyroz - _halfq4 * gyroy;
 80045ee:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80045f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80045f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045fa:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80045fe:	edd7 7a00 	vldr	s15, [r7]
 8004602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004606:	ee37 7a27 	vadd.f32	s14, s14, s15
 800460a:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 800460e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800461a:	edc7 7a08 	vstr	s15, [r7, #32]
            qDot3 =  _halfq1 * gyroy - _halfq2 * gyroz + _halfq4 * gyrox;
 800461e:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8004622:	edd7 7a01 	vldr	s15, [r7, #4]
 8004626:	ee27 7a27 	vmul.f32	s14, s14, s15
 800462a:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 800462e:	edd7 7a00 	vldr	s15, [r7]
 8004632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004636:	ee37 7a67 	vsub.f32	s14, s14, s15
 800463a:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 800463e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]
            qDot4 =  _halfq1 * gyroz + _halfq2 * gyroy - _halfq3 * gyrox;
 800464e:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8004652:	edd7 7a00 	vldr	s15, [r7]
 8004656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800465a:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 800465e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800466a:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800466e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800467a:	edc7 7a06 	vstr	s15, [r7, #24]

            // Compute then integrate estimated quaternion derivative
            q1 += (qDot1 -(beta * hatDot1)) * dt;
 800467e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004682:	f7fb ff69 	bl	8000558 <__aeabi_f2d>
 8004686:	4604      	mov	r4, r0
 8004688:	460d      	mov	r5, r1
 800468a:	4b7a      	ldr	r3, [pc, #488]	; (8004874 <MadgwickQuaternionUpdate+0x7b4>)
 800468c:	ed93 7a00 	vldr	s14, [r3]
 8004690:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004698:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800469c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046a0:	ee17 0a90 	vmov	r0, s15
 80046a4:	f7fb ff58 	bl	8000558 <__aeabi_f2d>
 80046a8:	4b70      	ldr	r3, [pc, #448]	; (800486c <MadgwickQuaternionUpdate+0x7ac>)
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	f7fb ffab 	bl	8000608 <__aeabi_dmul>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4620      	mov	r0, r4
 80046b8:	4629      	mov	r1, r5
 80046ba:	f7fb fdef 	bl	800029c <__adddf3>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4610      	mov	r0, r2
 80046c4:	4619      	mov	r1, r3
 80046c6:	f7fc fa97 	bl	8000bf8 <__aeabi_d2f>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            q2 += (qDot2 -(beta * hatDot2)) * dt;
 80046d0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80046d4:	f7fb ff40 	bl	8000558 <__aeabi_f2d>
 80046d8:	4604      	mov	r4, r0
 80046da:	460d      	mov	r5, r1
 80046dc:	4b65      	ldr	r3, [pc, #404]	; (8004874 <MadgwickQuaternionUpdate+0x7b4>)
 80046de:	ed93 7a00 	vldr	s14, [r3]
 80046e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80046e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ea:	ed97 7a08 	vldr	s14, [r7, #32]
 80046ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046f2:	ee17 0a90 	vmov	r0, s15
 80046f6:	f7fb ff2f 	bl	8000558 <__aeabi_f2d>
 80046fa:	4b5c      	ldr	r3, [pc, #368]	; (800486c <MadgwickQuaternionUpdate+0x7ac>)
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f7fb ff82 	bl	8000608 <__aeabi_dmul>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4620      	mov	r0, r4
 800470a:	4629      	mov	r1, r5
 800470c:	f7fb fdc6 	bl	800029c <__adddf3>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	f7fc fa6e 	bl	8000bf8 <__aeabi_d2f>
 800471c:	4603      	mov	r3, r0
 800471e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            q3 += (qDot3 -(beta * hatDot3)) * dt;
 8004722:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004726:	f7fb ff17 	bl	8000558 <__aeabi_f2d>
 800472a:	4604      	mov	r4, r0
 800472c:	460d      	mov	r5, r1
 800472e:	4b51      	ldr	r3, [pc, #324]	; (8004874 <MadgwickQuaternionUpdate+0x7b4>)
 8004730:	ed93 7a00 	vldr	s14, [r3]
 8004734:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004744:	ee17 0a90 	vmov	r0, s15
 8004748:	f7fb ff06 	bl	8000558 <__aeabi_f2d>
 800474c:	4b47      	ldr	r3, [pc, #284]	; (800486c <MadgwickQuaternionUpdate+0x7ac>)
 800474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004752:	f7fb ff59 	bl	8000608 <__aeabi_dmul>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4620      	mov	r0, r4
 800475c:	4629      	mov	r1, r5
 800475e:	f7fb fd9d 	bl	800029c <__adddf3>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	f7fc fa45 	bl	8000bf8 <__aeabi_d2f>
 800476e:	4603      	mov	r3, r0
 8004770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            q4 += (qDot4 -(beta * hatDot4)) * dt;
 8004774:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004778:	f7fb feee 	bl	8000558 <__aeabi_f2d>
 800477c:	4604      	mov	r4, r0
 800477e:	460d      	mov	r5, r1
 8004780:	4b3c      	ldr	r3, [pc, #240]	; (8004874 <MadgwickQuaternionUpdate+0x7b4>)
 8004782:	ed93 7a00 	vldr	s14, [r3]
 8004786:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800478a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478e:	ed97 7a06 	vldr	s14, [r7, #24]
 8004792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004796:	ee17 0a90 	vmov	r0, s15
 800479a:	f7fb fedd 	bl	8000558 <__aeabi_f2d>
 800479e:	4b33      	ldr	r3, [pc, #204]	; (800486c <MadgwickQuaternionUpdate+0x7ac>)
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	f7fb ff30 	bl	8000608 <__aeabi_dmul>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4620      	mov	r0, r4
 80047ae:	4629      	mov	r1, r5
 80047b0:	f7fb fd74 	bl	800029c <__adddf3>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	f7fc fa1c 	bl	8000bf8 <__aeabi_d2f>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

            // Normalize the quaternion
            norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 80047c6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80047ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80047ce:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80047d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80047d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047da:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80047de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80047e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047e6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80047ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80047ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047f2:	ee17 0a90 	vmov	r0, s15
 80047f6:	f7fb feaf 	bl	8000558 <__aeabi_f2d>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	ec43 2b10 	vmov	d0, r2, r3
 8004802:	f007 fa7d 	bl	800bd00 <sqrt>
 8004806:	ec53 2b10 	vmov	r2, r3, d0
 800480a:	4610      	mov	r0, r2
 800480c:	4619      	mov	r1, r3
 800480e:	f7fc f9f3 	bl	8000bf8 <__aeabi_d2f>
 8004812:	4603      	mov	r3, r0
 8004814:	677b      	str	r3, [r7, #116]	; 0x74
            norm = 1.0f/norm;
 8004816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800481a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800481e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004822:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
            qm[0] = q1 * norm;
 8004826:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800482a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800482e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004832:	4b11      	ldr	r3, [pc, #68]	; (8004878 <MadgwickQuaternionUpdate+0x7b8>)
 8004834:	edc3 7a00 	vstr	s15, [r3]
            qm[1] = q2 * norm;
 8004838:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800483c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <MadgwickQuaternionUpdate+0x7b8>)
 8004846:	edc3 7a01 	vstr	s15, [r3, #4]
            qm[2] = q3 * norm;
 800484a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800484e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <MadgwickQuaternionUpdate+0x7b8>)
 8004858:	edc3 7a02 	vstr	s15, [r3, #8]
            qm[3] = q4 * norm;
 800485c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8004860:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004868:	e008      	b.n	800487c <MadgwickQuaternionUpdate+0x7bc>
 800486a:	bf00      	nop
 800486c:	200002c8 	.word	0x200002c8
 8004870:	20000050 	.word	0x20000050
 8004874:	2000004c 	.word	0x2000004c
 8004878:	2000003c 	.word	0x2000003c
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <MadgwickQuaternionUpdate+0x7cc>)
 800487e:	edc3 7a03 	vstr	s15, [r3, #12]
 8004882:	e000      	b.n	8004886 <MadgwickQuaternionUpdate+0x7c6>
            if (norm == 0.0f) return; // handle NaN
 8004884:	bf00      	nop
        }
 8004886:	37b0      	adds	r7, #176	; 0xb0
 8004888:	46bd      	mov	sp, r7
 800488a:	bdb0      	pop	{r4, r5, r7, pc}
 800488c:	2000003c 	.word	0x2000003c

08004890 <Calculate_all>:


void Calculate_all(uint8_t Rec_Data[14], MPU6050_t *DataStruct){
 8004890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004894:	ed2d 8b04 	vpush	{d8-d9}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
	int16_t temp;

		/*DataStruct->Accel_X_RAW = CalcBiQuad(&YFiter, (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]));
	    DataStruct->Accel_Y_RAW = CalcBiQuad(&YFiter, (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]));
	    DataStruct->Accel_Z_RAW = CalcBiQuad(&ZFiter, (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]));*/
		DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	b21a      	sxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3301      	adds	r3, #1
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	b21b      	sxth	r3, r3
 80048b0:	4313      	orrs	r3, r2
 80048b2:	b21a      	sxth	r2, r3
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	801a      	strh	r2, [r3, #0]
		DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3302      	adds	r3, #2
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	b21a      	sxth	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3303      	adds	r3, #3
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	b21b      	sxth	r3, r3
 80048ca:	4313      	orrs	r3, r2
 80048cc:	b21a      	sxth	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	805a      	strh	r2, [r3, #2]
		DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	b21a      	sxth	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3305      	adds	r3, #5
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	b21b      	sxth	r3, r3
 80048e4:	4313      	orrs	r3, r2
 80048e6:	b21a      	sxth	r2, r3
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	809a      	strh	r2, [r3, #4]
	    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3306      	adds	r3, #6
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	b21a      	sxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3307      	adds	r3, #7
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b21b      	sxth	r3, r3
 80048fe:	4313      	orrs	r3, r2
 8004900:	817b      	strh	r3, [r7, #10]
	    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3308      	adds	r3, #8
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	b21a      	sxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3309      	adds	r3, #9
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	b21b      	sxth	r3, r3
 8004914:	4313      	orrs	r3, r2
 8004916:	b21a      	sxth	r2, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	829a      	strh	r2, [r3, #20]
	    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	330a      	adds	r3, #10
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	b21a      	sxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	330b      	adds	r3, #11
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	b21b      	sxth	r3, r3
 800492e:	4313      	orrs	r3, r2
 8004930:	b21a      	sxth	r2, r3
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	82da      	strh	r2, [r3, #22]
	    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	330c      	adds	r3, #12
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	b21a      	sxth	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	330d      	adds	r3, #13
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	b21b      	sxth	r3, r3
 8004948:	4313      	orrs	r3, r2
 800494a:	b21a      	sxth	r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	831a      	strh	r2, [r3, #24]

	    DataStruct->Ax = biquadFilterApplyDF1(&MPU6050.Alowpasfilter2[0],  DataStruct->Accel_X_RAW / 2048.0);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004956:	4618      	mov	r0, r3
 8004958:	f7fb fdec 	bl	8000534 <__aeabi_i2d>
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	4b6b      	ldr	r3, [pc, #428]	; (8004b10 <Calculate_all+0x280>)
 8004962:	f7fb ff7b 	bl	800085c <__aeabi_ddiv>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	f7fc f943 	bl	8000bf8 <__aeabi_d2f>
 8004972:	4603      	mov	r3, r0
 8004974:	ee00 3a10 	vmov	s0, r3
 8004978:	4866      	ldr	r0, [pc, #408]	; (8004b14 <Calculate_all+0x284>)
 800497a:	f7fe f855 	bl	8002a28 <biquadFilterApplyDF1>
 800497e:	eef0 7a40 	vmov.f32	s15, s0
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	edc3 7a02 	vstr	s15, [r3, #8]
	    DataStruct->Ay = biquadFilterApplyDF1(&MPU6050.Alowpasfilter2[1], DataStruct->Accel_Y_RAW / 2048.0);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fb fdd0 	bl	8000534 <__aeabi_i2d>
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	4b5d      	ldr	r3, [pc, #372]	; (8004b10 <Calculate_all+0x280>)
 800499a:	f7fb ff5f 	bl	800085c <__aeabi_ddiv>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4610      	mov	r0, r2
 80049a4:	4619      	mov	r1, r3
 80049a6:	f7fc f927 	bl	8000bf8 <__aeabi_d2f>
 80049aa:	4603      	mov	r3, r0
 80049ac:	ee00 3a10 	vmov	s0, r3
 80049b0:	4859      	ldr	r0, [pc, #356]	; (8004b18 <Calculate_all+0x288>)
 80049b2:	f7fe f839 	bl	8002a28 <biquadFilterApplyDF1>
 80049b6:	eef0 7a40 	vmov.f32	s15, s0
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	edc3 7a03 	vstr	s15, [r3, #12]
	    DataStruct->Az = biquadFilterApplyDF1(&MPU6050.Alowpasfilter2[2], DataStruct->Accel_Z_RAW / 2048.0);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fb fdb4 	bl	8000534 <__aeabi_i2d>
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	4b4f      	ldr	r3, [pc, #316]	; (8004b10 <Calculate_all+0x280>)
 80049d2:	f7fb ff43 	bl	800085c <__aeabi_ddiv>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	f7fc f90b 	bl	8000bf8 <__aeabi_d2f>
 80049e2:	4603      	mov	r3, r0
 80049e4:	ee00 3a10 	vmov	s0, r3
 80049e8:	484c      	ldr	r0, [pc, #304]	; (8004b1c <Calculate_all+0x28c>)
 80049ea:	f7fe f81d 	bl	8002a28 <biquadFilterApplyDF1>
 80049ee:	eef0 7a40 	vmov.f32	s15, s0
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	edc3 7a04 	vstr	s15, [r3, #16]
	    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80049f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80049fc:	ee07 3a90 	vmov	s15, r3
 8004a00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a04:	eddf 6a46 	vldr	s13, [pc, #280]	; 8004b20 <Calculate_all+0x290>
 8004a08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a0c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004b24 <Calculate_all+0x294>
 8004a10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	    DataStruct->Gx = biquadFilterApplyDF1(&MPU6050.Glowpasfilter2[0], DataStruct->Gyro_X_RAW / 32.8 + MPU_CORRECTION_GX);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fb fd87 	bl	8000534 <__aeabi_i2d>
 8004a26:	a336      	add	r3, pc, #216	; (adr r3, 8004b00 <Calculate_all+0x270>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	f7fb ff16 	bl	800085c <__aeabi_ddiv>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4610      	mov	r0, r2
 8004a36:	4619      	mov	r1, r3
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	4b3a      	ldr	r3, [pc, #232]	; (8004b28 <Calculate_all+0x298>)
 8004a3e:	f7fb fc2d 	bl	800029c <__adddf3>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4610      	mov	r0, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f7fc f8d5 	bl	8000bf8 <__aeabi_d2f>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	ee00 3a10 	vmov	s0, r3
 8004a54:	4835      	ldr	r0, [pc, #212]	; (8004b2c <Calculate_all+0x29c>)
 8004a56:	f7fd ffe7 	bl	8002a28 <biquadFilterApplyDF1>
 8004a5a:	eef0 7a40 	vmov.f32	s15, s0
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	edc3 7a07 	vstr	s15, [r3, #28]
	    DataStruct->Gy = biquadFilterApplyDF1(&MPU6050.Glowpasfilter2[1], DataStruct->Gyro_Y_RAW / 32.8 + MPU_CORRECTION_GY);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fb fd62 	bl	8000534 <__aeabi_i2d>
 8004a70:	a323      	add	r3, pc, #140	; (adr r3, 8004b00 <Calculate_all+0x270>)
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	f7fb fef1 	bl	800085c <__aeabi_ddiv>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4610      	mov	r0, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	a321      	add	r3, pc, #132	; (adr r3, 8004b08 <Calculate_all+0x278>)
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	f7fb fc08 	bl	800029c <__adddf3>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4610      	mov	r0, r2
 8004a92:	4619      	mov	r1, r3
 8004a94:	f7fc f8b0 	bl	8000bf8 <__aeabi_d2f>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	ee00 3a10 	vmov	s0, r3
 8004a9e:	4824      	ldr	r0, [pc, #144]	; (8004b30 <Calculate_all+0x2a0>)
 8004aa0:	f7fd ffc2 	bl	8002a28 <biquadFilterApplyDF1>
 8004aa4:	eef0 7a40 	vmov.f32	s15, s0
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	edc3 7a08 	vstr	s15, [r3, #32]
	    DataStruct->Gz = biquadFilterApplyDF1(&MPU6050.Glowpasfilter2[2], DataStruct->Gyro_Z_RAW / 32.8 + MPU_CORRECTION_GZ);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fb fd3d 	bl	8000534 <__aeabi_i2d>
 8004aba:	a311      	add	r3, pc, #68	; (adr r3, 8004b00 <Calculate_all+0x270>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f7fb fecc 	bl	800085c <__aeabi_ddiv>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4619      	mov	r1, r3
 8004acc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ad0:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <Calculate_all+0x2a4>)
 8004ad2:	f7fb fbe3 	bl	800029c <__adddf3>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4610      	mov	r0, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	f7fc f88b 	bl	8000bf8 <__aeabi_d2f>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	ee00 3a10 	vmov	s0, r3
 8004ae8:	4813      	ldr	r0, [pc, #76]	; (8004b38 <Calculate_all+0x2a8>)
 8004aea:	f7fd ff9d 	bl	8002a28 <biquadFilterApplyDF1>
 8004aee:	eef0 7a40 	vmov.f32	s15, s0
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	    for(int i = 0; i < 3; i++){
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	e03f      	b.n	8004b7e <Calculate_all+0x2ee>
 8004afe:	bf00      	nop
 8004b00:	66666666 	.word	0x66666666
 8004b04:	40406666 	.word	0x40406666
 8004b08:	60000000 	.word	0x60000000
 8004b0c:	3fe66666 	.word	0x3fe66666
 8004b10:	40a00000 	.word	0x40a00000
 8004b14:	200005e8 	.word	0x200005e8
 8004b18:	20000610 	.word	0x20000610
 8004b1c:	20000638 	.word	0x20000638
 8004b20:	43aa0000 	.word	0x43aa0000
 8004b24:	42121eb8 	.word	0x42121eb8
 8004b28:	40080000 	.word	0x40080000
 8004b2c:	20000660 	.word	0x20000660
 8004b30:	20000688 	.word	0x20000688
 8004b34:	3ff33333 	.word	0x3ff33333
 8004b38:	200006b0 	.word	0x200006b0
	    	biquadFilterUpdateLPF(&MPU6050.Alowpasfilter2[i], 40, 1000);
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	3348      	adds	r3, #72	; 0x48
 8004b48:	4ad7      	ldr	r2, [pc, #860]	; (8004ea8 <Calculate_all+0x618>)
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b50:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8004eac <Calculate_all+0x61c>
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fd ff4f 	bl	80029f8 <biquadFilterUpdateLPF>
	    	biquadFilterUpdateLPF(&MPU6050.Glowpasfilter2[i], 40, 1000);
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	33c0      	adds	r3, #192	; 0xc0
 8004b66:	4ad0      	ldr	r2, [pc, #832]	; (8004ea8 <Calculate_all+0x618>)
 8004b68:	4413      	add	r3, r2
 8004b6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b6e:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8004eac <Calculate_all+0x61c>
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fd ff40 	bl	80029f8 <biquadFilterUpdateLPF>
	    for(int i = 0; i < 3; i++){
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	dddb      	ble.n	8004b3c <Calculate_all+0x2ac>
	    }

	    dt = (double)(microes() - timer) / 1000000.0f;
 8004b84:	f7ff f9cc 	bl	8003f20 <microes>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	4bc9      	ldr	r3, [pc, #804]	; (8004eb0 <Calculate_all+0x620>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fb fcbf 	bl	8000514 <__aeabi_ui2d>
 8004b96:	a3c0      	add	r3, pc, #768	; (adr r3, 8004e98 <Calculate_all+0x608>)
 8004b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9c:	f7fb fe5e 	bl	800085c <__aeabi_ddiv>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	49c3      	ldr	r1, [pc, #780]	; (8004eb4 <Calculate_all+0x624>)
 8004ba6:	e9c1 2300 	strd	r2, r3, [r1]
	    timer = microes();
 8004baa:	f7ff f9b9 	bl	8003f20 <microes>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4abf      	ldr	r2, [pc, #764]	; (8004eb0 <Calculate_all+0x620>)
 8004bb2:	6013      	str	r3, [r2, #0]

	    if(microes() > 6000000){
 8004bb4:	f7ff f9b4 	bl	8003f20 <microes>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	4abf      	ldr	r2, [pc, #764]	; (8004eb8 <Calculate_all+0x628>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	f240 8184 	bls.w	8004eca <Calculate_all+0x63a>
	    //imuUpdateAttitude(microes());
	    MadgwickQuaternionUpdate( DataStruct->Ax, DataStruct->Ay, DataStruct->Az, DataStruct->Gx  * M_PI / 180.0f, DataStruct->Gy  * M_PI / 180.0f, DataStruct->Gz  * M_PI / 180.0f);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	ed93 8a02 	vldr	s16, [r3, #8]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	edd3 8a03 	vldr	s17, [r3, #12]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	ed93 9a04 	vldr	s18, [r3, #16]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fb fcbd 	bl	8000558 <__aeabi_f2d>
 8004bde:	a3b0      	add	r3, pc, #704	; (adr r3, 8004ea0 <Calculate_all+0x610>)
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f7fb fd10 	bl	8000608 <__aeabi_dmul>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4610      	mov	r0, r2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	4bb1      	ldr	r3, [pc, #708]	; (8004ebc <Calculate_all+0x62c>)
 8004bf6:	f7fb fe31 	bl	800085c <__aeabi_ddiv>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4610      	mov	r0, r2
 8004c00:	4619      	mov	r1, r3
 8004c02:	f7fb fff9 	bl	8000bf8 <__aeabi_d2f>
 8004c06:	4606      	mov	r6, r0
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fb fca3 	bl	8000558 <__aeabi_f2d>
 8004c12:	a3a3      	add	r3, pc, #652	; (adr r3, 8004ea0 <Calculate_all+0x610>)
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	f7fb fcf6 	bl	8000608 <__aeabi_dmul>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4610      	mov	r0, r2
 8004c22:	4619      	mov	r1, r3
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	4ba4      	ldr	r3, [pc, #656]	; (8004ebc <Calculate_all+0x62c>)
 8004c2a:	f7fb fe17 	bl	800085c <__aeabi_ddiv>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4610      	mov	r0, r2
 8004c34:	4619      	mov	r1, r3
 8004c36:	f7fb ffdf 	bl	8000bf8 <__aeabi_d2f>
 8004c3a:	4680      	mov	r8, r0
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fb fc89 	bl	8000558 <__aeabi_f2d>
 8004c46:	a396      	add	r3, pc, #600	; (adr r3, 8004ea0 <Calculate_all+0x610>)
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	f7fb fcdc 	bl	8000608 <__aeabi_dmul>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	4b97      	ldr	r3, [pc, #604]	; (8004ebc <Calculate_all+0x62c>)
 8004c5e:	f7fb fdfd 	bl	800085c <__aeabi_ddiv>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f7fb ffc5 	bl	8000bf8 <__aeabi_d2f>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	ee02 3a90 	vmov	s5, r3
 8004c74:	ee02 8a10 	vmov	s4, r8
 8004c78:	ee01 6a90 	vmov	s3, r6
 8004c7c:	eeb0 1a49 	vmov.f32	s2, s18
 8004c80:	eef0 0a68 	vmov.f32	s1, s17
 8004c84:	eeb0 0a48 	vmov.f32	s0, s16
 8004c88:	f7ff fa1a 	bl	80040c0 <MadgwickQuaternionUpdate>
	    DataStruct->YAW   = atan2(2.0f * (qm[1] * qm[2] + qm[0] * qm[3]), qm[0] * qm[0] + qm[1] * qm[1] - qm[2] * qm[2] - qm[3] * qm[3]) * 180.0f / M_PI;
 8004c8c:	4b8c      	ldr	r3, [pc, #560]	; (8004ec0 <Calculate_all+0x630>)
 8004c8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c92:	4b8b      	ldr	r3, [pc, #556]	; (8004ec0 <Calculate_all+0x630>)
 8004c94:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c9c:	4b88      	ldr	r3, [pc, #544]	; (8004ec0 <Calculate_all+0x630>)
 8004c9e:	edd3 6a00 	vldr	s13, [r3]
 8004ca2:	4b87      	ldr	r3, [pc, #540]	; (8004ec0 <Calculate_all+0x630>)
 8004ca4:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cb0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004cb4:	ee17 0a90 	vmov	r0, s15
 8004cb8:	f7fb fc4e 	bl	8000558 <__aeabi_f2d>
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	4689      	mov	r9, r1
 8004cc0:	4b7f      	ldr	r3, [pc, #508]	; (8004ec0 <Calculate_all+0x630>)
 8004cc2:	ed93 7a00 	vldr	s14, [r3]
 8004cc6:	4b7e      	ldr	r3, [pc, #504]	; (8004ec0 <Calculate_all+0x630>)
 8004cc8:	edd3 7a00 	vldr	s15, [r3]
 8004ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cd0:	4b7b      	ldr	r3, [pc, #492]	; (8004ec0 <Calculate_all+0x630>)
 8004cd2:	edd3 6a01 	vldr	s13, [r3, #4]
 8004cd6:	4b7a      	ldr	r3, [pc, #488]	; (8004ec0 <Calculate_all+0x630>)
 8004cd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004cdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ce4:	4b76      	ldr	r3, [pc, #472]	; (8004ec0 <Calculate_all+0x630>)
 8004ce6:	edd3 6a02 	vldr	s13, [r3, #8]
 8004cea:	4b75      	ldr	r3, [pc, #468]	; (8004ec0 <Calculate_all+0x630>)
 8004cec:	edd3 7a02 	vldr	s15, [r3, #8]
 8004cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cf8:	4b71      	ldr	r3, [pc, #452]	; (8004ec0 <Calculate_all+0x630>)
 8004cfa:	edd3 6a03 	vldr	s13, [r3, #12]
 8004cfe:	4b70      	ldr	r3, [pc, #448]	; (8004ec0 <Calculate_all+0x630>)
 8004d00:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d0c:	ee17 0a90 	vmov	r0, s15
 8004d10:	f7fb fc22 	bl	8000558 <__aeabi_f2d>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	ec43 2b11 	vmov	d1, r2, r3
 8004d1c:	ec49 8b10 	vmov	d0, r8, r9
 8004d20:	f006 ffec 	bl	800bcfc <atan2>
 8004d24:	ec51 0b10 	vmov	r0, r1, d0
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	4b63      	ldr	r3, [pc, #396]	; (8004ebc <Calculate_all+0x62c>)
 8004d2e:	f7fb fc6b 	bl	8000608 <__aeabi_dmul>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4610      	mov	r0, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	a359      	add	r3, pc, #356	; (adr r3, 8004ea0 <Calculate_all+0x610>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f7fb fd8c 	bl	800085c <__aeabi_ddiv>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4610      	mov	r0, r2
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	f7fb ff54 	bl	8000bf8 <__aeabi_d2f>
 8004d50:	4602      	mov	r2, r0
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	63da      	str	r2, [r3, #60]	; 0x3c
	    DataStruct->PITCH= -asin(2.0f * (qm[1] * qm[3] - qm[0] * qm[2])) * 180.0f / M_PI;
 8004d56:	4b5a      	ldr	r3, [pc, #360]	; (8004ec0 <Calculate_all+0x630>)
 8004d58:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d5c:	4b58      	ldr	r3, [pc, #352]	; (8004ec0 <Calculate_all+0x630>)
 8004d5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d66:	4b56      	ldr	r3, [pc, #344]	; (8004ec0 <Calculate_all+0x630>)
 8004d68:	edd3 6a00 	vldr	s13, [r3]
 8004d6c:	4b54      	ldr	r3, [pc, #336]	; (8004ec0 <Calculate_all+0x630>)
 8004d6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d7e:	ee17 0a90 	vmov	r0, s15
 8004d82:	f7fb fbe9 	bl	8000558 <__aeabi_f2d>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	ec43 2b10 	vmov	d0, r2, r3
 8004d8e:	f006 ff7b 	bl	800bc88 <asin>
 8004d92:	ec53 2b10 	vmov	r2, r3, d0
 8004d96:	4614      	mov	r4, r2
 8004d98:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	4b46      	ldr	r3, [pc, #280]	; (8004ebc <Calculate_all+0x62c>)
 8004da2:	4620      	mov	r0, r4
 8004da4:	4629      	mov	r1, r5
 8004da6:	f7fb fc2f 	bl	8000608 <__aeabi_dmul>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4610      	mov	r0, r2
 8004db0:	4619      	mov	r1, r3
 8004db2:	a33b      	add	r3, pc, #236	; (adr r3, 8004ea0 <Calculate_all+0x610>)
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f7fb fd50 	bl	800085c <__aeabi_ddiv>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	f7fb ff18 	bl	8000bf8 <__aeabi_d2f>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
	    DataStruct->ROLL  = atan2(2.0f * (qm[0] * qm[1] + qm[2] * qm[3]), qm[0] * qm[0] - qm[1] * qm[1] - qm[2] * qm[2] + qm[3] * qm[3]) * 180.0f / M_PI;
 8004dce:	4b3c      	ldr	r3, [pc, #240]	; (8004ec0 <Calculate_all+0x630>)
 8004dd0:	ed93 7a00 	vldr	s14, [r3]
 8004dd4:	4b3a      	ldr	r3, [pc, #232]	; (8004ec0 <Calculate_all+0x630>)
 8004dd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004dda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dde:	4b38      	ldr	r3, [pc, #224]	; (8004ec0 <Calculate_all+0x630>)
 8004de0:	edd3 6a02 	vldr	s13, [r3, #8]
 8004de4:	4b36      	ldr	r3, [pc, #216]	; (8004ec0 <Calculate_all+0x630>)
 8004de6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004df2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004df6:	ee17 0a90 	vmov	r0, s15
 8004dfa:	f7fb fbad 	bl	8000558 <__aeabi_f2d>
 8004dfe:	4604      	mov	r4, r0
 8004e00:	460d      	mov	r5, r1
 8004e02:	4b2f      	ldr	r3, [pc, #188]	; (8004ec0 <Calculate_all+0x630>)
 8004e04:	ed93 7a00 	vldr	s14, [r3]
 8004e08:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <Calculate_all+0x630>)
 8004e0a:	edd3 7a00 	vldr	s15, [r3]
 8004e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e12:	4b2b      	ldr	r3, [pc, #172]	; (8004ec0 <Calculate_all+0x630>)
 8004e14:	edd3 6a01 	vldr	s13, [r3, #4]
 8004e18:	4b29      	ldr	r3, [pc, #164]	; (8004ec0 <Calculate_all+0x630>)
 8004e1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e26:	4b26      	ldr	r3, [pc, #152]	; (8004ec0 <Calculate_all+0x630>)
 8004e28:	edd3 6a02 	vldr	s13, [r3, #8]
 8004e2c:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <Calculate_all+0x630>)
 8004e2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e3a:	4b21      	ldr	r3, [pc, #132]	; (8004ec0 <Calculate_all+0x630>)
 8004e3c:	edd3 6a03 	vldr	s13, [r3, #12]
 8004e40:	4b1f      	ldr	r3, [pc, #124]	; (8004ec0 <Calculate_all+0x630>)
 8004e42:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e4e:	ee17 0a90 	vmov	r0, s15
 8004e52:	f7fb fb81 	bl	8000558 <__aeabi_f2d>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	ec43 2b11 	vmov	d1, r2, r3
 8004e5e:	ec45 4b10 	vmov	d0, r4, r5
 8004e62:	f006 ff4b 	bl	800bcfc <atan2>
 8004e66:	ec51 0b10 	vmov	r0, r1, d0
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <Calculate_all+0x62c>)
 8004e70:	f7fb fbca 	bl	8000608 <__aeabi_dmul>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	a308      	add	r3, pc, #32	; (adr r3, 8004ea0 <Calculate_all+0x610>)
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f7fb fceb 	bl	800085c <__aeabi_ddiv>
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	f7fb feb3 	bl	8000bf8 <__aeabi_d2f>
 8004e92:	e017      	b.n	8004ec4 <Calculate_all+0x634>
 8004e94:	f3af 8000 	nop.w
 8004e98:	00000000 	.word	0x00000000
 8004e9c:	412e8480 	.word	0x412e8480
 8004ea0:	54442d18 	.word	0x54442d18
 8004ea4:	400921fb 	.word	0x400921fb
 8004ea8:	200005a0 	.word	0x200005a0
 8004eac:	42200000 	.word	0x42200000
 8004eb0:	200009fc 	.word	0x200009fc
 8004eb4:	200002c8 	.word	0x200002c8
 8004eb8:	005b8d80 	.word	0x005b8d80
 8004ebc:	40668000 	.word	0x40668000
 8004ec0:	2000003c 	.word	0x2000003c
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	645a      	str	r2, [r3, #68]	; 0x44

	    /*float delta_angle = (DataStruct->Gz - DataStruct->Gz_offset) *dt  / RAD_TO_DEG;

	    DataStruct->YAW += (delta_angle - (sin(-DataStruct->AngleX / RAD_TO_DEG) * delta_angle) - (sin(-DataStruct->AngleX / RAD_TO_DEG) * delta_angle)) * RAD_TO_DEG;*/

}
 8004eca:	bf00      	nop
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	ecbd 8b04 	vpop	{d8-d9}
 8004ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	607b      	str	r3, [r7, #4]
 8004ee2:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <HAL_MspInit+0x4c>)
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee6:	4a0f      	ldr	r2, [pc, #60]	; (8004f24 <HAL_MspInit+0x4c>)
 8004ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eec:	6453      	str	r3, [r2, #68]	; 0x44
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <HAL_MspInit+0x4c>)
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef6:	607b      	str	r3, [r7, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <HAL_MspInit+0x4c>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	4a08      	ldr	r2, [pc, #32]	; (8004f24 <HAL_MspInit+0x4c>)
 8004f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f08:	6413      	str	r3, [r2, #64]	; 0x40
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <HAL_MspInit+0x4c>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40023800 	.word	0x40023800

08004f28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08c      	sub	sp, #48	; 0x30
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f30:	f107 031c 	add.w	r3, r7, #28
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	609a      	str	r2, [r3, #8]
 8004f3c:	60da      	str	r2, [r3, #12]
 8004f3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a5d      	ldr	r2, [pc, #372]	; (80050bc <HAL_I2C_MspInit+0x194>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d16a      	bne.n	8005020 <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	4b5c      	ldr	r3, [pc, #368]	; (80050c0 <HAL_I2C_MspInit+0x198>)
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	4a5b      	ldr	r2, [pc, #364]	; (80050c0 <HAL_I2C_MspInit+0x198>)
 8004f54:	f043 0302 	orr.w	r3, r3, #2
 8004f58:	6313      	str	r3, [r2, #48]	; 0x30
 8004f5a:	4b59      	ldr	r3, [pc, #356]	; (80050c0 <HAL_I2C_MspInit+0x198>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f66:	23c0      	movs	r3, #192	; 0xc0
 8004f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f6a:	2312      	movs	r3, #18
 8004f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f72:	2303      	movs	r3, #3
 8004f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f76:	2304      	movs	r3, #4
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f7a:	f107 031c 	add.w	r3, r7, #28
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4850      	ldr	r0, [pc, #320]	; (80050c4 <HAL_I2C_MspInit+0x19c>)
 8004f82:	f001 f9d7 	bl	8006334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	4b4d      	ldr	r3, [pc, #308]	; (80050c0 <HAL_I2C_MspInit+0x198>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	4a4c      	ldr	r2, [pc, #304]	; (80050c0 <HAL_I2C_MspInit+0x198>)
 8004f90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f94:	6413      	str	r3, [r2, #64]	; 0x40
 8004f96:	4b4a      	ldr	r3, [pc, #296]	; (80050c0 <HAL_I2C_MspInit+0x198>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004fa2:	4b49      	ldr	r3, [pc, #292]	; (80050c8 <HAL_I2C_MspInit+0x1a0>)
 8004fa4:	4a49      	ldr	r2, [pc, #292]	; (80050cc <HAL_I2C_MspInit+0x1a4>)
 8004fa6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004fa8:	4b47      	ldr	r3, [pc, #284]	; (80050c8 <HAL_I2C_MspInit+0x1a0>)
 8004faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fb0:	4b45      	ldr	r3, [pc, #276]	; (80050c8 <HAL_I2C_MspInit+0x1a0>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fb6:	4b44      	ldr	r3, [pc, #272]	; (80050c8 <HAL_I2C_MspInit+0x1a0>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fbc:	4b42      	ldr	r3, [pc, #264]	; (80050c8 <HAL_I2C_MspInit+0x1a0>)
 8004fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fc2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fc4:	4b40      	ldr	r3, [pc, #256]	; (80050c8 <HAL_I2C_MspInit+0x1a0>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fca:	4b3f      	ldr	r3, [pc, #252]	; (80050c8 <HAL_I2C_MspInit+0x1a0>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004fd0:	4b3d      	ldr	r3, [pc, #244]	; (80050c8 <HAL_I2C_MspInit+0x1a0>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004fd6:	4b3c      	ldr	r3, [pc, #240]	; (80050c8 <HAL_I2C_MspInit+0x1a0>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fdc:	4b3a      	ldr	r3, [pc, #232]	; (80050c8 <HAL_I2C_MspInit+0x1a0>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004fe2:	4839      	ldr	r0, [pc, #228]	; (80050c8 <HAL_I2C_MspInit+0x1a0>)
 8004fe4:	f000 fd96 	bl	8005b14 <HAL_DMA_Init>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8004fee:	f7fe fecf 	bl	8003d90 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a34      	ldr	r2, [pc, #208]	; (80050c8 <HAL_I2C_MspInit+0x1a0>)
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38
 8004ff8:	4a33      	ldr	r2, [pc, #204]	; (80050c8 <HAL_I2C_MspInit+0x1a0>)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004ffe:	2200      	movs	r2, #0
 8005000:	2100      	movs	r1, #0
 8005002:	201f      	movs	r0, #31
 8005004:	f000 fd4f 	bl	8005aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005008:	201f      	movs	r0, #31
 800500a:	f000 fd68 	bl	8005ade <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800500e:	2200      	movs	r2, #0
 8005010:	2100      	movs	r1, #0
 8005012:	2020      	movs	r0, #32
 8005014:	f000 fd47 	bl	8005aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005018:	2020      	movs	r0, #32
 800501a:	f000 fd60 	bl	8005ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800501e:	e049      	b.n	80050b4 <HAL_I2C_MspInit+0x18c>
  else if(hi2c->Instance==I2C2)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <HAL_I2C_MspInit+0x1a8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d144      	bne.n	80050b4 <HAL_I2C_MspInit+0x18c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <HAL_I2C_MspInit+0x198>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	4a23      	ldr	r2, [pc, #140]	; (80050c0 <HAL_I2C_MspInit+0x198>)
 8005034:	f043 0302 	orr.w	r3, r3, #2
 8005038:	6313      	str	r3, [r2, #48]	; 0x30
 800503a:	4b21      	ldr	r3, [pc, #132]	; (80050c0 <HAL_I2C_MspInit+0x198>)
 800503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800504a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800504c:	2312      	movs	r3, #18
 800504e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005050:	2300      	movs	r3, #0
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005054:	2303      	movs	r3, #3
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005058:	2304      	movs	r3, #4
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800505c:	f107 031c 	add.w	r3, r7, #28
 8005060:	4619      	mov	r1, r3
 8005062:	4818      	ldr	r0, [pc, #96]	; (80050c4 <HAL_I2C_MspInit+0x19c>)
 8005064:	f001 f966 	bl	8006334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005068:	2308      	movs	r3, #8
 800506a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800506c:	2312      	movs	r3, #18
 800506e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005070:	2300      	movs	r3, #0
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005074:	2303      	movs	r3, #3
 8005076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8005078:	2309      	movs	r3, #9
 800507a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800507c:	f107 031c 	add.w	r3, r7, #28
 8005080:	4619      	mov	r1, r3
 8005082:	4810      	ldr	r0, [pc, #64]	; (80050c4 <HAL_I2C_MspInit+0x19c>)
 8005084:	f001 f956 	bl	8006334 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <HAL_I2C_MspInit+0x198>)
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	4a0b      	ldr	r2, [pc, #44]	; (80050c0 <HAL_I2C_MspInit+0x198>)
 8005092:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005096:	6413      	str	r3, [r2, #64]	; 0x40
 8005098:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <HAL_I2C_MspInit+0x198>)
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80050a4:	2200      	movs	r2, #0
 80050a6:	2100      	movs	r1, #0
 80050a8:	2021      	movs	r0, #33	; 0x21
 80050aa:	f000 fcfc 	bl	8005aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80050ae:	2021      	movs	r0, #33	; 0x21
 80050b0:	f000 fd15 	bl	8005ade <HAL_NVIC_EnableIRQ>
}
 80050b4:	bf00      	nop
 80050b6:	3730      	adds	r7, #48	; 0x30
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40005400 	.word	0x40005400
 80050c0:	40023800 	.word	0x40023800
 80050c4:	40020400 	.word	0x40020400
 80050c8:	200008d0 	.word	0x200008d0
 80050cc:	40026010 	.word	0x40026010
 80050d0:	40005800 	.word	0x40005800

080050d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08c      	sub	sp, #48	; 0x30
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050dc:	f107 031c 	add.w	r3, r7, #28
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	605a      	str	r2, [r3, #4]
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	60da      	str	r2, [r3, #12]
 80050ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a5c      	ldr	r2, [pc, #368]	; (8005264 <HAL_TIM_Base_MspInit+0x190>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d15e      	bne.n	80051b4 <HAL_TIM_Base_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	4b5b      	ldr	r3, [pc, #364]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	4a5a      	ldr	r2, [pc, #360]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	6453      	str	r3, [r2, #68]	; 0x44
 8005106:	4b58      	ldr	r3, [pc, #352]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	4b54      	ldr	r3, [pc, #336]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	4a53      	ldr	r2, [pc, #332]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	6313      	str	r3, [r2, #48]	; 0x30
 8005122:	4b51      	ldr	r3, [pc, #324]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800512e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005134:	2302      	movs	r3, #2
 8005136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005138:	2300      	movs	r3, #0
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800513c:	2300      	movs	r3, #0
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005140:	2301      	movs	r3, #1
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005144:	f107 031c 	add.w	r3, r7, #28
 8005148:	4619      	mov	r1, r3
 800514a:	4848      	ldr	r0, [pc, #288]	; (800526c <HAL_TIM_Base_MspInit+0x198>)
 800514c:	f001 f8f2 	bl	8006334 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8005150:	4b47      	ldr	r3, [pc, #284]	; (8005270 <HAL_TIM_Base_MspInit+0x19c>)
 8005152:	4a48      	ldr	r2, [pc, #288]	; (8005274 <HAL_TIM_Base_MspInit+0x1a0>)
 8005154:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8005156:	4b46      	ldr	r3, [pc, #280]	; (8005270 <HAL_TIM_Base_MspInit+0x19c>)
 8005158:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800515c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800515e:	4b44      	ldr	r3, [pc, #272]	; (8005270 <HAL_TIM_Base_MspInit+0x19c>)
 8005160:	2200      	movs	r2, #0
 8005162:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005164:	4b42      	ldr	r3, [pc, #264]	; (8005270 <HAL_TIM_Base_MspInit+0x19c>)
 8005166:	2200      	movs	r2, #0
 8005168:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800516a:	4b41      	ldr	r3, [pc, #260]	; (8005270 <HAL_TIM_Base_MspInit+0x19c>)
 800516c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005170:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005172:	4b3f      	ldr	r3, [pc, #252]	; (8005270 <HAL_TIM_Base_MspInit+0x19c>)
 8005174:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005178:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800517a:	4b3d      	ldr	r3, [pc, #244]	; (8005270 <HAL_TIM_Base_MspInit+0x19c>)
 800517c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005180:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8005182:	4b3b      	ldr	r3, [pc, #236]	; (8005270 <HAL_TIM_Base_MspInit+0x19c>)
 8005184:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005188:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800518a:	4b39      	ldr	r3, [pc, #228]	; (8005270 <HAL_TIM_Base_MspInit+0x19c>)
 800518c:	2200      	movs	r2, #0
 800518e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005190:	4b37      	ldr	r3, [pc, #220]	; (8005270 <HAL_TIM_Base_MspInit+0x19c>)
 8005192:	2200      	movs	r2, #0
 8005194:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8005196:	4836      	ldr	r0, [pc, #216]	; (8005270 <HAL_TIM_Base_MspInit+0x19c>)
 8005198:	f000 fcbc 	bl	8005b14 <HAL_DMA_Init>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 80051a2:	f7fe fdf5 	bl	8003d90 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a31      	ldr	r2, [pc, #196]	; (8005270 <HAL_TIM_Base_MspInit+0x19c>)
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28
 80051ac:	4a30      	ldr	r2, [pc, #192]	; (8005270 <HAL_TIM_Base_MspInit+0x19c>)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80051b2:	e052      	b.n	800525a <HAL_TIM_Base_MspInit+0x186>
  else if(htim_base->Instance==TIM3)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a2f      	ldr	r2, [pc, #188]	; (8005278 <HAL_TIM_Base_MspInit+0x1a4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d116      	bne.n	80051ec <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051be:	2300      	movs	r3, #0
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	4b29      	ldr	r3, [pc, #164]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	4a28      	ldr	r2, [pc, #160]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 80051c8:	f043 0302 	orr.w	r3, r3, #2
 80051cc:	6413      	str	r3, [r2, #64]	; 0x40
 80051ce:	4b26      	ldr	r3, [pc, #152]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80051da:	2200      	movs	r2, #0
 80051dc:	2100      	movs	r1, #0
 80051de:	201d      	movs	r0, #29
 80051e0:	f000 fc61 	bl	8005aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80051e4:	201d      	movs	r0, #29
 80051e6:	f000 fc7a 	bl	8005ade <HAL_NVIC_EnableIRQ>
}
 80051ea:	e036      	b.n	800525a <HAL_TIM_Base_MspInit+0x186>
  else if(htim_base->Instance==TIM4)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a22      	ldr	r2, [pc, #136]	; (800527c <HAL_TIM_Base_MspInit+0x1a8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d116      	bne.n	8005224 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	4b1b      	ldr	r3, [pc, #108]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	4a1a      	ldr	r2, [pc, #104]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 8005200:	f043 0304 	orr.w	r3, r3, #4
 8005204:	6413      	str	r3, [r2, #64]	; 0x40
 8005206:	4b18      	ldr	r3, [pc, #96]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005212:	2200      	movs	r2, #0
 8005214:	2100      	movs	r1, #0
 8005216:	201e      	movs	r0, #30
 8005218:	f000 fc45 	bl	8005aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800521c:	201e      	movs	r0, #30
 800521e:	f000 fc5e 	bl	8005ade <HAL_NVIC_EnableIRQ>
}
 8005222:	e01a      	b.n	800525a <HAL_TIM_Base_MspInit+0x186>
  else if(htim_base->Instance==TIM5)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a15      	ldr	r2, [pc, #84]	; (8005280 <HAL_TIM_Base_MspInit+0x1ac>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d115      	bne.n	800525a <HAL_TIM_Base_MspInit+0x186>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800522e:	2300      	movs	r3, #0
 8005230:	60bb      	str	r3, [r7, #8]
 8005232:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	4a0c      	ldr	r2, [pc, #48]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 8005238:	f043 0308 	orr.w	r3, r3, #8
 800523c:	6413      	str	r3, [r2, #64]	; 0x40
 800523e:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <HAL_TIM_Base_MspInit+0x194>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800524a:	2200      	movs	r2, #0
 800524c:	2100      	movs	r1, #0
 800524e:	2032      	movs	r0, #50	; 0x32
 8005250:	f000 fc29 	bl	8005aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005254:	2032      	movs	r0, #50	; 0x32
 8005256:	f000 fc42 	bl	8005ade <HAL_NVIC_EnableIRQ>
}
 800525a:	bf00      	nop
 800525c:	3730      	adds	r7, #48	; 0x30
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40010000 	.word	0x40010000
 8005268:	40023800 	.word	0x40023800
 800526c:	40020000 	.word	0x40020000
 8005270:	20000540 	.word	0x20000540
 8005274:	40026440 	.word	0x40026440
 8005278:	40000400 	.word	0x40000400
 800527c:	40000800 	.word	0x40000800
 8005280:	40000c00 	.word	0x40000c00

08005284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08e      	sub	sp, #56	; 0x38
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800528c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	609a      	str	r2, [r3, #8]
 8005298:	60da      	str	r2, [r3, #12]
 800529a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a6f      	ldr	r2, [pc, #444]	; (8005460 <HAL_UART_MspInit+0x1dc>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d163      	bne.n	800536e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80052a6:	2300      	movs	r3, #0
 80052a8:	623b      	str	r3, [r7, #32]
 80052aa:	4b6e      	ldr	r3, [pc, #440]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	4a6d      	ldr	r2, [pc, #436]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 80052b0:	f043 0310 	orr.w	r3, r3, #16
 80052b4:	6453      	str	r3, [r2, #68]	; 0x44
 80052b6:	4b6b      	ldr	r3, [pc, #428]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 80052b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	623b      	str	r3, [r7, #32]
 80052c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	4b67      	ldr	r3, [pc, #412]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	4a66      	ldr	r2, [pc, #408]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	6313      	str	r3, [r2, #48]	; 0x30
 80052d2:	4b64      	ldr	r3, [pc, #400]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80052de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e4:	2302      	movs	r3, #2
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ec:	2303      	movs	r3, #3
 80052ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052f0:	2307      	movs	r3, #7
 80052f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052f8:	4619      	mov	r1, r3
 80052fa:	485b      	ldr	r0, [pc, #364]	; (8005468 <HAL_UART_MspInit+0x1e4>)
 80052fc:	f001 f81a 	bl	8006334 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8005300:	4b5a      	ldr	r3, [pc, #360]	; (800546c <HAL_UART_MspInit+0x1e8>)
 8005302:	4a5b      	ldr	r2, [pc, #364]	; (8005470 <HAL_UART_MspInit+0x1ec>)
 8005304:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005306:	4b59      	ldr	r3, [pc, #356]	; (800546c <HAL_UART_MspInit+0x1e8>)
 8005308:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800530c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800530e:	4b57      	ldr	r3, [pc, #348]	; (800546c <HAL_UART_MspInit+0x1e8>)
 8005310:	2200      	movs	r2, #0
 8005312:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005314:	4b55      	ldr	r3, [pc, #340]	; (800546c <HAL_UART_MspInit+0x1e8>)
 8005316:	2200      	movs	r2, #0
 8005318:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800531a:	4b54      	ldr	r3, [pc, #336]	; (800546c <HAL_UART_MspInit+0x1e8>)
 800531c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005320:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005322:	4b52      	ldr	r3, [pc, #328]	; (800546c <HAL_UART_MspInit+0x1e8>)
 8005324:	2200      	movs	r2, #0
 8005326:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005328:	4b50      	ldr	r3, [pc, #320]	; (800546c <HAL_UART_MspInit+0x1e8>)
 800532a:	2200      	movs	r2, #0
 800532c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800532e:	4b4f      	ldr	r3, [pc, #316]	; (800546c <HAL_UART_MspInit+0x1e8>)
 8005330:	2200      	movs	r2, #0
 8005332:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005334:	4b4d      	ldr	r3, [pc, #308]	; (800546c <HAL_UART_MspInit+0x1e8>)
 8005336:	2200      	movs	r2, #0
 8005338:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800533a:	4b4c      	ldr	r3, [pc, #304]	; (800546c <HAL_UART_MspInit+0x1e8>)
 800533c:	2200      	movs	r2, #0
 800533e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005340:	484a      	ldr	r0, [pc, #296]	; (800546c <HAL_UART_MspInit+0x1e8>)
 8005342:	f000 fbe7 	bl	8005b14 <HAL_DMA_Init>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800534c:	f7fe fd20 	bl	8003d90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a46      	ldr	r2, [pc, #280]	; (800546c <HAL_UART_MspInit+0x1e8>)
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
 8005356:	4a45      	ldr	r2, [pc, #276]	; (800546c <HAL_UART_MspInit+0x1e8>)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800535c:	2200      	movs	r2, #0
 800535e:	2100      	movs	r1, #0
 8005360:	2025      	movs	r0, #37	; 0x25
 8005362:	f000 fba0 	bl	8005aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005366:	2025      	movs	r0, #37	; 0x25
 8005368:	f000 fbb9 	bl	8005ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800536c:	e073      	b.n	8005456 <HAL_UART_MspInit+0x1d2>
  else if(huart->Instance==USART2)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a40      	ldr	r2, [pc, #256]	; (8005474 <HAL_UART_MspInit+0x1f0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d134      	bne.n	80053e2 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005378:	2300      	movs	r3, #0
 800537a:	61bb      	str	r3, [r7, #24]
 800537c:	4b39      	ldr	r3, [pc, #228]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	4a38      	ldr	r2, [pc, #224]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 8005382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005386:	6413      	str	r3, [r2, #64]	; 0x40
 8005388:	4b36      	ldr	r3, [pc, #216]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	4b32      	ldr	r3, [pc, #200]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	4a31      	ldr	r2, [pc, #196]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	6313      	str	r3, [r2, #48]	; 0x30
 80053a4:	4b2f      	ldr	r3, [pc, #188]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80053b0:	230c      	movs	r3, #12
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b4:	2302      	movs	r3, #2
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b8:	2300      	movs	r3, #0
 80053ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053bc:	2303      	movs	r3, #3
 80053be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053c0:	2307      	movs	r3, #7
 80053c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053c8:	4619      	mov	r1, r3
 80053ca:	4827      	ldr	r0, [pc, #156]	; (8005468 <HAL_UART_MspInit+0x1e4>)
 80053cc:	f000 ffb2 	bl	8006334 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80053d0:	2200      	movs	r2, #0
 80053d2:	2100      	movs	r1, #0
 80053d4:	2026      	movs	r0, #38	; 0x26
 80053d6:	f000 fb66 	bl	8005aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80053da:	2026      	movs	r0, #38	; 0x26
 80053dc:	f000 fb7f 	bl	8005ade <HAL_NVIC_EnableIRQ>
}
 80053e0:	e039      	b.n	8005456 <HAL_UART_MspInit+0x1d2>
  else if(huart->Instance==USART6)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a24      	ldr	r2, [pc, #144]	; (8005478 <HAL_UART_MspInit+0x1f4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d134      	bne.n	8005456 <HAL_UART_MspInit+0x1d2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	4b1c      	ldr	r3, [pc, #112]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 80053f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f4:	4a1b      	ldr	r2, [pc, #108]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 80053f6:	f043 0320 	orr.w	r3, r3, #32
 80053fa:	6453      	str	r3, [r2, #68]	; 0x44
 80053fc:	4b19      	ldr	r3, [pc, #100]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 80053fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	4b15      	ldr	r3, [pc, #84]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	4a14      	ldr	r2, [pc, #80]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	6313      	str	r3, [r2, #48]	; 0x30
 8005418:	4b12      	ldr	r3, [pc, #72]	; (8005464 <HAL_UART_MspInit+0x1e0>)
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005424:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800542a:	2302      	movs	r3, #2
 800542c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542e:	2300      	movs	r3, #0
 8005430:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005432:	2303      	movs	r3, #3
 8005434:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005436:	2308      	movs	r3, #8
 8005438:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800543a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800543e:	4619      	mov	r1, r3
 8005440:	4809      	ldr	r0, [pc, #36]	; (8005468 <HAL_UART_MspInit+0x1e4>)
 8005442:	f000 ff77 	bl	8006334 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005446:	2200      	movs	r2, #0
 8005448:	2100      	movs	r1, #0
 800544a:	2047      	movs	r0, #71	; 0x47
 800544c:	f000 fb2b 	bl	8005aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005450:	2047      	movs	r0, #71	; 0x47
 8005452:	f000 fb44 	bl	8005ade <HAL_NVIC_EnableIRQ>
}
 8005456:	bf00      	nop
 8005458:	3738      	adds	r7, #56	; 0x38
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40011000 	.word	0x40011000
 8005464:	40023800 	.word	0x40023800
 8005468:	40020000 	.word	0x40020000
 800546c:	200007e0 	.word	0x200007e0
 8005470:	40026488 	.word	0x40026488
 8005474:	40004400 	.word	0x40004400
 8005478:	40011400 	.word	0x40011400

0800547c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005480:	e7fe      	b.n	8005480 <NMI_Handler+0x4>

08005482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005482:	b480      	push	{r7}
 8005484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005486:	e7fe      	b.n	8005486 <HardFault_Handler+0x4>

08005488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800548c:	e7fe      	b.n	800548c <MemManage_Handler+0x4>

0800548e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800548e:	b480      	push	{r7}
 8005490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005492:	e7fe      	b.n	8005492 <BusFault_Handler+0x4>

08005494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005498:	e7fe      	b.n	8005498 <UsageFault_Handler+0x4>

0800549a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800549a:	b480      	push	{r7}
 800549c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800549e:	bf00      	nop
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054ac:	bf00      	nop
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054b6:	b480      	push	{r7}
 80054b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054ba:	bf00      	nop
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054c8:	f000 f9ce 	bl	8005868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054cc:	bf00      	nop
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80054d4:	4802      	ldr	r0, [pc, #8]	; (80054e0 <DMA1_Stream0_IRQHandler+0x10>)
 80054d6:	f000 fcb5 	bl	8005e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80054da:	bf00      	nop
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	200008d0 	.word	0x200008d0

080054e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80054e8:	4802      	ldr	r0, [pc, #8]	; (80054f4 <TIM3_IRQHandler+0x10>)
 80054ea:	f004 fcf5 	bl	8009ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80054ee:	bf00      	nop
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	2000078c 	.word	0x2000078c

080054f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80054fc:	4802      	ldr	r0, [pc, #8]	; (8005508 <TIM4_IRQHandler+0x10>)
 80054fe:	f004 fceb 	bl	8009ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005502:	bf00      	nop
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000440 	.word	0x20000440

0800550c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005510:	4802      	ldr	r0, [pc, #8]	; (800551c <I2C1_EV_IRQHandler+0x10>)
 8005512:	f001 fdcf 	bl	80070b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005516:	bf00      	nop
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000498 	.word	0x20000498

08005520 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005524:	4802      	ldr	r0, [pc, #8]	; (8005530 <I2C1_ER_IRQHandler+0x10>)
 8005526:	f001 ff36 	bl	8007396 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800552a:	bf00      	nop
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000498 	.word	0x20000498

08005534 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8005538:	4802      	ldr	r0, [pc, #8]	; (8005544 <I2C2_EV_IRQHandler+0x10>)
 800553a:	f001 fdbb 	bl	80070b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800553e:	bf00      	nop
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	200004ec 	.word	0x200004ec

08005548 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800554c:	4802      	ldr	r0, [pc, #8]	; (8005558 <USART1_IRQHandler+0x10>)
 800554e:	f005 fcb7 	bl	800aec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005552:	bf00      	nop
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000840 	.word	0x20000840

0800555c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005560:	4802      	ldr	r0, [pc, #8]	; (800556c <USART2_IRQHandler+0x10>)
 8005562:	f005 fcad 	bl	800aec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005566:	bf00      	nop
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	200009b8 	.word	0x200009b8

08005570 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005574:	4802      	ldr	r0, [pc, #8]	; (8005580 <TIM5_IRQHandler+0x10>)
 8005576:	f004 fcaf 	bl	8009ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000744 	.word	0x20000744

08005584 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8005588:	4802      	ldr	r0, [pc, #8]	; (8005594 <DMA2_Stream2_IRQHandler+0x10>)
 800558a:	f000 fc5b 	bl	8005e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800558e:	bf00      	nop
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000540 	.word	0x20000540

08005598 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800559c:	4802      	ldr	r0, [pc, #8]	; (80055a8 <DMA2_Stream5_IRQHandler+0x10>)
 800559e:	f000 fc51 	bl	8005e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	200007e0 	.word	0x200007e0

080055ac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80055b0:	4802      	ldr	r0, [pc, #8]	; (80055bc <USART6_IRQHandler+0x10>)
 80055b2:	f005 fc85 	bl	800aec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80055b6:	bf00      	nop
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000930 	.word	0x20000930

080055c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
	return 1;
 80055c4:	2301      	movs	r3, #1
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <_kill>:

int _kill(int pid, int sig)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80055da:	f008 fd2b 	bl	800e034 <__errno>
 80055de:	4603      	mov	r3, r0
 80055e0:	2216      	movs	r2, #22
 80055e2:	601a      	str	r2, [r3, #0]
	return -1;
 80055e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <_exit>:

void _exit (int status)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80055f8:	f04f 31ff 	mov.w	r1, #4294967295
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff ffe7 	bl	80055d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005602:	e7fe      	b.n	8005602 <_exit+0x12>

08005604 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e00a      	b.n	800562c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005616:	f3af 8000 	nop.w
 800561a:	4601      	mov	r1, r0
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	60ba      	str	r2, [r7, #8]
 8005622:	b2ca      	uxtb	r2, r1
 8005624:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	3301      	adds	r3, #1
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	429a      	cmp	r2, r3
 8005632:	dbf0      	blt.n	8005616 <_read+0x12>
	}

return len;
 8005634:	687b      	ldr	r3, [r7, #4]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b086      	sub	sp, #24
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]
 800564e:	e009      	b.n	8005664 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	60ba      	str	r2, [r7, #8]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	3301      	adds	r3, #1
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	429a      	cmp	r2, r3
 800566a:	dbf1      	blt.n	8005650 <_write+0x12>
	}
	return len;
 800566c:	687b      	ldr	r3, [r7, #4]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <_close>:

int _close(int file)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
	return -1;
 800567e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005682:	4618      	mov	r0, r3
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800569e:	605a      	str	r2, [r3, #4]
	return 0;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <_isatty>:

int _isatty(int file)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
	return 1;
 80056b6:	2301      	movs	r3, #1
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
	return 0;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056e8:	4a14      	ldr	r2, [pc, #80]	; (800573c <_sbrk+0x5c>)
 80056ea:	4b15      	ldr	r3, [pc, #84]	; (8005740 <_sbrk+0x60>)
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056f4:	4b13      	ldr	r3, [pc, #76]	; (8005744 <_sbrk+0x64>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d102      	bne.n	8005702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056fc:	4b11      	ldr	r3, [pc, #68]	; (8005744 <_sbrk+0x64>)
 80056fe:	4a12      	ldr	r2, [pc, #72]	; (8005748 <_sbrk+0x68>)
 8005700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005702:	4b10      	ldr	r3, [pc, #64]	; (8005744 <_sbrk+0x64>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4413      	add	r3, r2
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	429a      	cmp	r2, r3
 800570e:	d207      	bcs.n	8005720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005710:	f008 fc90 	bl	800e034 <__errno>
 8005714:	4603      	mov	r3, r0
 8005716:	220c      	movs	r2, #12
 8005718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800571a:	f04f 33ff 	mov.w	r3, #4294967295
 800571e:	e009      	b.n	8005734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005720:	4b08      	ldr	r3, [pc, #32]	; (8005744 <_sbrk+0x64>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005726:	4b07      	ldr	r3, [pc, #28]	; (8005744 <_sbrk+0x64>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4413      	add	r3, r2
 800572e:	4a05      	ldr	r2, [pc, #20]	; (8005744 <_sbrk+0x64>)
 8005730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005732:	68fb      	ldr	r3, [r7, #12]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20010000 	.word	0x20010000
 8005740:	00000400 	.word	0x00000400
 8005744:	200002d0 	.word	0x200002d0
 8005748:	20000a60 	.word	0x20000a60

0800574c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005750:	4b06      	ldr	r3, [pc, #24]	; (800576c <SystemInit+0x20>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005756:	4a05      	ldr	r2, [pc, #20]	; (800576c <SystemInit+0x20>)
 8005758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800575c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005760:	bf00      	nop
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	e000ed00 	.word	0xe000ed00

08005770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005774:	480d      	ldr	r0, [pc, #52]	; (80057ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005776:	490e      	ldr	r1, [pc, #56]	; (80057b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005778:	4a0e      	ldr	r2, [pc, #56]	; (80057b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800577a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800577c:	e002      	b.n	8005784 <LoopCopyDataInit>

0800577e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800577e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005782:	3304      	adds	r3, #4

08005784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005788:	d3f9      	bcc.n	800577e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800578a:	4a0b      	ldr	r2, [pc, #44]	; (80057b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800578c:	4c0b      	ldr	r4, [pc, #44]	; (80057bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800578e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005790:	e001      	b.n	8005796 <LoopFillZerobss>

08005792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005794:	3204      	adds	r2, #4

08005796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005798:	d3fb      	bcc.n	8005792 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800579a:	f7ff ffd7 	bl	800574c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800579e:	f008 fc4f 	bl	800e040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057a2:	f7fd fe4d 	bl	8003440 <main>
  bx  lr    
 80057a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80057a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80057ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057b0:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80057b4:	08013a8c 	.word	0x08013a8c
  ldr r2, =_sbss
 80057b8:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80057bc:	20000a5c 	.word	0x20000a5c

080057c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057c0:	e7fe      	b.n	80057c0 <ADC_IRQHandler>
	...

080057c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057c8:	4b0e      	ldr	r3, [pc, #56]	; (8005804 <HAL_Init+0x40>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a0d      	ldr	r2, [pc, #52]	; (8005804 <HAL_Init+0x40>)
 80057ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057d4:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <HAL_Init+0x40>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a0a      	ldr	r2, [pc, #40]	; (8005804 <HAL_Init+0x40>)
 80057da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <HAL_Init+0x40>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a07      	ldr	r2, [pc, #28]	; (8005804 <HAL_Init+0x40>)
 80057e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057ec:	2003      	movs	r0, #3
 80057ee:	f000 f94f 	bl	8005a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057f2:	200f      	movs	r0, #15
 80057f4:	f000 f808 	bl	8005808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057f8:	f7ff fb6e 	bl	8004ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40023c00 	.word	0x40023c00

08005808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005810:	4b12      	ldr	r3, [pc, #72]	; (800585c <HAL_InitTick+0x54>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	4b12      	ldr	r3, [pc, #72]	; (8005860 <HAL_InitTick+0x58>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	4619      	mov	r1, r3
 800581a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800581e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005822:	fbb2 f3f3 	udiv	r3, r2, r3
 8005826:	4618      	mov	r0, r3
 8005828:	f000 f967 	bl	8005afa <HAL_SYSTICK_Config>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e00e      	b.n	8005854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b0f      	cmp	r3, #15
 800583a:	d80a      	bhi.n	8005852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800583c:	2200      	movs	r2, #0
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	f000 f92f 	bl	8005aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005848:	4a06      	ldr	r2, [pc, #24]	; (8005864 <HAL_InitTick+0x5c>)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	e000      	b.n	8005854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
}
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000054 	.word	0x20000054
 8005860:	2000005c 	.word	0x2000005c
 8005864:	20000058 	.word	0x20000058

08005868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800586c:	4b06      	ldr	r3, [pc, #24]	; (8005888 <HAL_IncTick+0x20>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	4b06      	ldr	r3, [pc, #24]	; (800588c <HAL_IncTick+0x24>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4413      	add	r3, r2
 8005878:	4a04      	ldr	r2, [pc, #16]	; (800588c <HAL_IncTick+0x24>)
 800587a:	6013      	str	r3, [r2, #0]
}
 800587c:	bf00      	nop
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	2000005c 	.word	0x2000005c
 800588c:	20000a48 	.word	0x20000a48

08005890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  return uwTick;
 8005894:	4b03      	ldr	r3, [pc, #12]	; (80058a4 <HAL_GetTick+0x14>)
 8005896:	681b      	ldr	r3, [r3, #0]
}
 8005898:	4618      	mov	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	20000a48 	.word	0x20000a48

080058a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058b0:	f7ff ffee 	bl	8005890 <HAL_GetTick>
 80058b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d005      	beq.n	80058ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058c2:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <HAL_Delay+0x44>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058ce:	bf00      	nop
 80058d0:	f7ff ffde 	bl	8005890 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d8f7      	bhi.n	80058d0 <HAL_Delay+0x28>
  {
  }
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	2000005c 	.word	0x2000005c

080058f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005900:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <__NVIC_SetPriorityGrouping+0x44>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800590c:	4013      	ands	r3, r2
 800590e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800591c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005922:	4a04      	ldr	r2, [pc, #16]	; (8005934 <__NVIC_SetPriorityGrouping+0x44>)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	60d3      	str	r3, [r2, #12]
}
 8005928:	bf00      	nop
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	e000ed00 	.word	0xe000ed00

08005938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <__NVIC_GetPriorityGrouping+0x18>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	0a1b      	lsrs	r3, r3, #8
 8005942:	f003 0307 	and.w	r3, r3, #7
}
 8005946:	4618      	mov	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	e000ed00 	.word	0xe000ed00

08005954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800595e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005962:	2b00      	cmp	r3, #0
 8005964:	db0b      	blt.n	800597e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	f003 021f 	and.w	r2, r3, #31
 800596c:	4907      	ldr	r1, [pc, #28]	; (800598c <__NVIC_EnableIRQ+0x38>)
 800596e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	2001      	movs	r0, #1
 8005976:	fa00 f202 	lsl.w	r2, r0, r2
 800597a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	e000e100 	.word	0xe000e100

08005990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	4603      	mov	r3, r0
 8005998:	6039      	str	r1, [r7, #0]
 800599a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800599c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	db0a      	blt.n	80059ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	490c      	ldr	r1, [pc, #48]	; (80059dc <__NVIC_SetPriority+0x4c>)
 80059aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ae:	0112      	lsls	r2, r2, #4
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	440b      	add	r3, r1
 80059b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059b8:	e00a      	b.n	80059d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	4908      	ldr	r1, [pc, #32]	; (80059e0 <__NVIC_SetPriority+0x50>)
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	3b04      	subs	r3, #4
 80059c8:	0112      	lsls	r2, r2, #4
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	440b      	add	r3, r1
 80059ce:	761a      	strb	r2, [r3, #24]
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	e000e100 	.word	0xe000e100
 80059e0:	e000ed00 	.word	0xe000ed00

080059e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b089      	sub	sp, #36	; 0x24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f1c3 0307 	rsb	r3, r3, #7
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	bf28      	it	cs
 8005a02:	2304      	movcs	r3, #4
 8005a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	2b06      	cmp	r3, #6
 8005a0c:	d902      	bls.n	8005a14 <NVIC_EncodePriority+0x30>
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	3b03      	subs	r3, #3
 8005a12:	e000      	b.n	8005a16 <NVIC_EncodePriority+0x32>
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a18:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	43da      	mvns	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	401a      	ands	r2, r3
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	fa01 f303 	lsl.w	r3, r1, r3
 8005a36:	43d9      	mvns	r1, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a3c:	4313      	orrs	r3, r2
         );
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3724      	adds	r7, #36	; 0x24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
	...

08005a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a5c:	d301      	bcc.n	8005a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e00f      	b.n	8005a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a62:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <SysTick_Config+0x40>)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a6a:	210f      	movs	r1, #15
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a70:	f7ff ff8e 	bl	8005990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a74:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <SysTick_Config+0x40>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a7a:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <SysTick_Config+0x40>)
 8005a7c:	2207      	movs	r2, #7
 8005a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	e000e010 	.word	0xe000e010

08005a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff ff29 	bl	80058f0 <__NVIC_SetPriorityGrouping>
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b086      	sub	sp, #24
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	4603      	mov	r3, r0
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	607a      	str	r2, [r7, #4]
 8005ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ab8:	f7ff ff3e 	bl	8005938 <__NVIC_GetPriorityGrouping>
 8005abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	68b9      	ldr	r1, [r7, #8]
 8005ac2:	6978      	ldr	r0, [r7, #20]
 8005ac4:	f7ff ff8e 	bl	80059e4 <NVIC_EncodePriority>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff ff5d 	bl	8005990 <__NVIC_SetPriority>
}
 8005ad6:	bf00      	nop
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff ff31 	bl	8005954 <__NVIC_EnableIRQ>
}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff ffa2 	bl	8005a4c <SysTick_Config>
 8005b08:	4603      	mov	r3, r0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b20:	f7ff feb6 	bl	8005890 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e099      	b.n	8005c64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0201 	bic.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b50:	e00f      	b.n	8005b72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b52:	f7ff fe9d 	bl	8005890 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b05      	cmp	r3, #5
 8005b5e:	d908      	bls.n	8005b72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2203      	movs	r2, #3
 8005b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e078      	b.n	8005c64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e8      	bne.n	8005b52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4b38      	ldr	r3, [pc, #224]	; (8005c6c <HAL_DMA_Init+0x158>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d107      	bne.n	8005bdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 0307 	bic.w	r3, r3, #7
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d117      	bne.n	8005c36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00e      	beq.n	8005c36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fb0f 	bl	800623c <DMA_CheckFifoParam>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d008      	beq.n	8005c36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2240      	movs	r2, #64	; 0x40
 8005c28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005c32:	2301      	movs	r3, #1
 8005c34:	e016      	b.n	8005c64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fac6 	bl	80061d0 <DMA_CalcBaseAndBitshift>
 8005c44:	4603      	mov	r3, r0
 8005c46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4c:	223f      	movs	r2, #63	; 0x3f
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	f010803f 	.word	0xf010803f

08005c70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <HAL_DMA_Start_IT+0x26>
 8005c92:	2302      	movs	r3, #2
 8005c94:	e040      	b.n	8005d18 <HAL_DMA_Start_IT+0xa8>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d12f      	bne.n	8005d0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2202      	movs	r2, #2
 8005cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 fa58 	bl	8006174 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc8:	223f      	movs	r2, #63	; 0x3f
 8005cca:	409a      	lsls	r2, r3
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0216 	orr.w	r2, r2, #22
 8005cde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0208 	orr.w	r2, r2, #8
 8005cf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0201 	orr.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	e005      	b.n	8005d16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d12:	2302      	movs	r3, #2
 8005d14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d2e:	f7ff fdaf 	bl	8005890 <HAL_GetTick>
 8005d32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d008      	beq.n	8005d52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2280      	movs	r2, #128	; 0x80
 8005d44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e052      	b.n	8005df8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0216 	bic.w	r2, r2, #22
 8005d60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695a      	ldr	r2, [r3, #20]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d103      	bne.n	8005d82 <HAL_DMA_Abort+0x62>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0208 	bic.w	r2, r2, #8
 8005d90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0201 	bic.w	r2, r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005da2:	e013      	b.n	8005dcc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005da4:	f7ff fd74 	bl	8005890 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b05      	cmp	r3, #5
 8005db0:	d90c      	bls.n	8005dcc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2220      	movs	r2, #32
 8005db6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2203      	movs	r2, #3
 8005dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e015      	b.n	8005df8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e4      	bne.n	8005da4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dde:	223f      	movs	r2, #63	; 0x3f
 8005de0:	409a      	lsls	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d004      	beq.n	8005e1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2280      	movs	r2, #128	; 0x80
 8005e18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e00c      	b.n	8005e38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2205      	movs	r2, #5
 8005e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0201 	bic.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e50:	4b92      	ldr	r3, [pc, #584]	; (800609c <HAL_DMA_IRQHandler+0x258>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a92      	ldr	r2, [pc, #584]	; (80060a0 <HAL_DMA_IRQHandler+0x25c>)
 8005e56:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5a:	0a9b      	lsrs	r3, r3, #10
 8005e5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6e:	2208      	movs	r2, #8
 8005e70:	409a      	lsls	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4013      	ands	r3, r2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d01a      	beq.n	8005eb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d013      	beq.n	8005eb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0204 	bic.w	r2, r2, #4
 8005e96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	409a      	lsls	r2, r3
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea8:	f043 0201 	orr.w	r2, r3, #1
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	409a      	lsls	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d012      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	409a      	lsls	r2, r3
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ede:	f043 0202 	orr.w	r2, r3, #2
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eea:	2204      	movs	r2, #4
 8005eec:	409a      	lsls	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d012      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f08:	2204      	movs	r2, #4
 8005f0a:	409a      	lsls	r2, r3
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f14:	f043 0204 	orr.w	r2, r3, #4
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f20:	2210      	movs	r2, #16
 8005f22:	409a      	lsls	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4013      	ands	r3, r2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d043      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d03c      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f3e:	2210      	movs	r2, #16
 8005f40:	409a      	lsls	r2, r3
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d018      	beq.n	8005f86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d108      	bne.n	8005f74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d024      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	4798      	blx	r3
 8005f72:	e01f      	b.n	8005fb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01b      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
 8005f84:	e016      	b.n	8005fb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d107      	bne.n	8005fa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0208 	bic.w	r2, r2, #8
 8005fa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb8:	2220      	movs	r2, #32
 8005fba:	409a      	lsls	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 808e 	beq.w	80060e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0310 	and.w	r3, r3, #16
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8086 	beq.w	80060e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fda:	2220      	movs	r2, #32
 8005fdc:	409a      	lsls	r2, r3
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	d136      	bne.n	800605c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0216 	bic.w	r2, r2, #22
 8005ffc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800600c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d103      	bne.n	800601e <HAL_DMA_IRQHandler+0x1da>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0208 	bic.w	r2, r2, #8
 800602c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006032:	223f      	movs	r2, #63	; 0x3f
 8006034:	409a      	lsls	r2, r3
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604e:	2b00      	cmp	r3, #0
 8006050:	d07d      	beq.n	800614e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	4798      	blx	r3
        }
        return;
 800605a:	e078      	b.n	800614e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01c      	beq.n	80060a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d108      	bne.n	800608a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607c:	2b00      	cmp	r3, #0
 800607e:	d030      	beq.n	80060e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	4798      	blx	r3
 8006088:	e02b      	b.n	80060e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d027      	beq.n	80060e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	4798      	blx	r3
 800609a:	e022      	b.n	80060e2 <HAL_DMA_IRQHandler+0x29e>
 800609c:	20000054 	.word	0x20000054
 80060a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10f      	bne.n	80060d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0210 	bic.w	r2, r2, #16
 80060c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d032      	beq.n	8006150 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d022      	beq.n	800613c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2205      	movs	r2, #5
 80060fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	3301      	adds	r3, #1
 8006112:	60bb      	str	r3, [r7, #8]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	429a      	cmp	r2, r3
 8006118:	d307      	bcc.n	800612a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1f2      	bne.n	800610e <HAL_DMA_IRQHandler+0x2ca>
 8006128:	e000      	b.n	800612c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800612a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006140:	2b00      	cmp	r3, #0
 8006142:	d005      	beq.n	8006150 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
 800614c:	e000      	b.n	8006150 <HAL_DMA_IRQHandler+0x30c>
        return;
 800614e:	bf00      	nop
    }
  }
}
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop

08006158 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006166:	b2db      	uxtb	r3, r3
}
 8006168:	4618      	mov	r0, r3
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006190:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d108      	bne.n	80061b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80061b2:	e007      	b.n	80061c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	60da      	str	r2, [r3, #12]
}
 80061c4:	bf00      	nop
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	3b10      	subs	r3, #16
 80061e0:	4a14      	ldr	r2, [pc, #80]	; (8006234 <DMA_CalcBaseAndBitshift+0x64>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	091b      	lsrs	r3, r3, #4
 80061e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80061ea:	4a13      	ldr	r2, [pc, #76]	; (8006238 <DMA_CalcBaseAndBitshift+0x68>)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d909      	bls.n	8006212 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006206:	f023 0303 	bic.w	r3, r3, #3
 800620a:	1d1a      	adds	r2, r3, #4
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	659a      	str	r2, [r3, #88]	; 0x58
 8006210:	e007      	b.n	8006222 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800621a:	f023 0303 	bic.w	r3, r3, #3
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	aaaaaaab 	.word	0xaaaaaaab
 8006238:	0801333c 	.word	0x0801333c

0800623c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d11f      	bne.n	8006296 <DMA_CheckFifoParam+0x5a>
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d856      	bhi.n	800630a <DMA_CheckFifoParam+0xce>
 800625c:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <DMA_CheckFifoParam+0x28>)
 800625e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006262:	bf00      	nop
 8006264:	08006275 	.word	0x08006275
 8006268:	08006287 	.word	0x08006287
 800626c:	08006275 	.word	0x08006275
 8006270:	0800630b 	.word	0x0800630b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d046      	beq.n	800630e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006284:	e043      	b.n	800630e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800628e:	d140      	bne.n	8006312 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006294:	e03d      	b.n	8006312 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800629e:	d121      	bne.n	80062e4 <DMA_CheckFifoParam+0xa8>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d837      	bhi.n	8006316 <DMA_CheckFifoParam+0xda>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <DMA_CheckFifoParam+0x70>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	080062bd 	.word	0x080062bd
 80062b0:	080062c3 	.word	0x080062c3
 80062b4:	080062bd 	.word	0x080062bd
 80062b8:	080062d5 	.word	0x080062d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
      break;
 80062c0:	e030      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d025      	beq.n	800631a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d2:	e022      	b.n	800631a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062dc:	d11f      	bne.n	800631e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80062e2:	e01c      	b.n	800631e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d903      	bls.n	80062f2 <DMA_CheckFifoParam+0xb6>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d003      	beq.n	80062f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80062f0:	e018      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	73fb      	strb	r3, [r7, #15]
      break;
 80062f6:	e015      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00e      	beq.n	8006322 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
      break;
 8006308:	e00b      	b.n	8006322 <DMA_CheckFifoParam+0xe6>
      break;
 800630a:	bf00      	nop
 800630c:	e00a      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      break;
 800630e:	bf00      	nop
 8006310:	e008      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      break;
 8006312:	bf00      	nop
 8006314:	e006      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      break;
 8006316:	bf00      	nop
 8006318:	e004      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      break;
 800631a:	bf00      	nop
 800631c:	e002      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      break;   
 800631e:	bf00      	nop
 8006320:	e000      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      break;
 8006322:	bf00      	nop
    }
  } 
  
  return status; 
 8006324:	7bfb      	ldrb	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop

08006334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006334:	b480      	push	{r7}
 8006336:	b089      	sub	sp, #36	; 0x24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800633e:	2300      	movs	r3, #0
 8006340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006346:	2300      	movs	r3, #0
 8006348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
 800634e:	e159      	b.n	8006604 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006350:	2201      	movs	r2, #1
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4013      	ands	r3, r2
 8006362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	429a      	cmp	r2, r3
 800636a:	f040 8148 	bne.w	80065fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b01      	cmp	r3, #1
 8006378:	d005      	beq.n	8006386 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006382:	2b02      	cmp	r3, #2
 8006384:	d130      	bne.n	80063e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	2203      	movs	r2, #3
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	43db      	mvns	r3, r3
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	4013      	ands	r3, r2
 800639c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063bc:	2201      	movs	r2, #1
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	43db      	mvns	r3, r3
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	4013      	ands	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	091b      	lsrs	r3, r3, #4
 80063d2:	f003 0201 	and.w	r2, r3, #1
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4313      	orrs	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d017      	beq.n	8006424 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	2203      	movs	r2, #3
 8006400:	fa02 f303 	lsl.w	r3, r2, r3
 8006404:	43db      	mvns	r3, r3
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	4013      	ands	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	4313      	orrs	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f003 0303 	and.w	r3, r3, #3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d123      	bne.n	8006478 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	08da      	lsrs	r2, r3, #3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3208      	adds	r2, #8
 8006438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	220f      	movs	r2, #15
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	43db      	mvns	r3, r3
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	4013      	ands	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	4313      	orrs	r3, r2
 8006468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	08da      	lsrs	r2, r3, #3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3208      	adds	r2, #8
 8006472:	69b9      	ldr	r1, [r7, #24]
 8006474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	2203      	movs	r2, #3
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	43db      	mvns	r3, r3
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	4013      	ands	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f003 0203 	and.w	r2, r3, #3
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	fa02 f303 	lsl.w	r3, r2, r3
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 80a2 	beq.w	80065fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	4b57      	ldr	r3, [pc, #348]	; (800661c <HAL_GPIO_Init+0x2e8>)
 80064c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c2:	4a56      	ldr	r2, [pc, #344]	; (800661c <HAL_GPIO_Init+0x2e8>)
 80064c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064c8:	6453      	str	r3, [r2, #68]	; 0x44
 80064ca:	4b54      	ldr	r3, [pc, #336]	; (800661c <HAL_GPIO_Init+0x2e8>)
 80064cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064d6:	4a52      	ldr	r2, [pc, #328]	; (8006620 <HAL_GPIO_Init+0x2ec>)
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	089b      	lsrs	r3, r3, #2
 80064dc:	3302      	adds	r3, #2
 80064de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	220f      	movs	r2, #15
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	43db      	mvns	r3, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4013      	ands	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a49      	ldr	r2, [pc, #292]	; (8006624 <HAL_GPIO_Init+0x2f0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d019      	beq.n	8006536 <HAL_GPIO_Init+0x202>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a48      	ldr	r2, [pc, #288]	; (8006628 <HAL_GPIO_Init+0x2f4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <HAL_GPIO_Init+0x1fe>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a47      	ldr	r2, [pc, #284]	; (800662c <HAL_GPIO_Init+0x2f8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00d      	beq.n	800652e <HAL_GPIO_Init+0x1fa>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a46      	ldr	r2, [pc, #280]	; (8006630 <HAL_GPIO_Init+0x2fc>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <HAL_GPIO_Init+0x1f6>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a45      	ldr	r2, [pc, #276]	; (8006634 <HAL_GPIO_Init+0x300>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d101      	bne.n	8006526 <HAL_GPIO_Init+0x1f2>
 8006522:	2304      	movs	r3, #4
 8006524:	e008      	b.n	8006538 <HAL_GPIO_Init+0x204>
 8006526:	2307      	movs	r3, #7
 8006528:	e006      	b.n	8006538 <HAL_GPIO_Init+0x204>
 800652a:	2303      	movs	r3, #3
 800652c:	e004      	b.n	8006538 <HAL_GPIO_Init+0x204>
 800652e:	2302      	movs	r3, #2
 8006530:	e002      	b.n	8006538 <HAL_GPIO_Init+0x204>
 8006532:	2301      	movs	r3, #1
 8006534:	e000      	b.n	8006538 <HAL_GPIO_Init+0x204>
 8006536:	2300      	movs	r3, #0
 8006538:	69fa      	ldr	r2, [r7, #28]
 800653a:	f002 0203 	and.w	r2, r2, #3
 800653e:	0092      	lsls	r2, r2, #2
 8006540:	4093      	lsls	r3, r2
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	4313      	orrs	r3, r2
 8006546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006548:	4935      	ldr	r1, [pc, #212]	; (8006620 <HAL_GPIO_Init+0x2ec>)
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	089b      	lsrs	r3, r3, #2
 800654e:	3302      	adds	r3, #2
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006556:	4b38      	ldr	r3, [pc, #224]	; (8006638 <HAL_GPIO_Init+0x304>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	43db      	mvns	r3, r3
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	4013      	ands	r3, r2
 8006564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800657a:	4a2f      	ldr	r2, [pc, #188]	; (8006638 <HAL_GPIO_Init+0x304>)
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006580:	4b2d      	ldr	r3, [pc, #180]	; (8006638 <HAL_GPIO_Init+0x304>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	43db      	mvns	r3, r3
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	4013      	ands	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065a4:	4a24      	ldr	r2, [pc, #144]	; (8006638 <HAL_GPIO_Init+0x304>)
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80065aa:	4b23      	ldr	r3, [pc, #140]	; (8006638 <HAL_GPIO_Init+0x304>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	43db      	mvns	r3, r3
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	4013      	ands	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065ce:	4a1a      	ldr	r2, [pc, #104]	; (8006638 <HAL_GPIO_Init+0x304>)
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065d4:	4b18      	ldr	r3, [pc, #96]	; (8006638 <HAL_GPIO_Init+0x304>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	43db      	mvns	r3, r3
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	4013      	ands	r3, r2
 80065e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065f8:	4a0f      	ldr	r2, [pc, #60]	; (8006638 <HAL_GPIO_Init+0x304>)
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	3301      	adds	r3, #1
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b0f      	cmp	r3, #15
 8006608:	f67f aea2 	bls.w	8006350 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	3724      	adds	r7, #36	; 0x24
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40023800 	.word	0x40023800
 8006620:	40013800 	.word	0x40013800
 8006624:	40020000 	.word	0x40020000
 8006628:	40020400 	.word	0x40020400
 800662c:	40020800 	.word	0x40020800
 8006630:	40020c00 	.word	0x40020c00
 8006634:	40021000 	.word	0x40021000
 8006638:	40013c00 	.word	0x40013c00

0800663c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	807b      	strh	r3, [r7, #2]
 8006648:	4613      	mov	r3, r2
 800664a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800664c:	787b      	ldrb	r3, [r7, #1]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006652:	887a      	ldrh	r2, [r7, #2]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006658:	e003      	b.n	8006662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800665a:	887b      	ldrh	r3, [r7, #2]
 800665c:	041a      	lsls	r2, r3, #16
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	619a      	str	r2, [r3, #24]
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
	...

08006670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e12b      	b.n	80068da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fe fc46 	bl	8004f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2224      	movs	r2, #36	; 0x24
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0201 	bic.w	r2, r2, #1
 80066b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80066d4:	f003 f930 	bl	8009938 <HAL_RCC_GetPCLK1Freq>
 80066d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	4a81      	ldr	r2, [pc, #516]	; (80068e4 <HAL_I2C_Init+0x274>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d807      	bhi.n	80066f4 <HAL_I2C_Init+0x84>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4a80      	ldr	r2, [pc, #512]	; (80068e8 <HAL_I2C_Init+0x278>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	bf94      	ite	ls
 80066ec:	2301      	movls	r3, #1
 80066ee:	2300      	movhi	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	e006      	b.n	8006702 <HAL_I2C_Init+0x92>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4a7d      	ldr	r2, [pc, #500]	; (80068ec <HAL_I2C_Init+0x27c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	bf94      	ite	ls
 80066fc:	2301      	movls	r3, #1
 80066fe:	2300      	movhi	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e0e7      	b.n	80068da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4a78      	ldr	r2, [pc, #480]	; (80068f0 <HAL_I2C_Init+0x280>)
 800670e:	fba2 2303 	umull	r2, r3, r2, r3
 8006712:	0c9b      	lsrs	r3, r3, #18
 8006714:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a6a      	ldr	r2, [pc, #424]	; (80068e4 <HAL_I2C_Init+0x274>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d802      	bhi.n	8006744 <HAL_I2C_Init+0xd4>
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	3301      	adds	r3, #1
 8006742:	e009      	b.n	8006758 <HAL_I2C_Init+0xe8>
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800674a:	fb02 f303 	mul.w	r3, r2, r3
 800674e:	4a69      	ldr	r2, [pc, #420]	; (80068f4 <HAL_I2C_Init+0x284>)
 8006750:	fba2 2303 	umull	r2, r3, r2, r3
 8006754:	099b      	lsrs	r3, r3, #6
 8006756:	3301      	adds	r3, #1
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6812      	ldr	r2, [r2, #0]
 800675c:	430b      	orrs	r3, r1
 800675e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800676a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	495c      	ldr	r1, [pc, #368]	; (80068e4 <HAL_I2C_Init+0x274>)
 8006774:	428b      	cmp	r3, r1
 8006776:	d819      	bhi.n	80067ac <HAL_I2C_Init+0x13c>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	1e59      	subs	r1, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	fbb1 f3f3 	udiv	r3, r1, r3
 8006786:	1c59      	adds	r1, r3, #1
 8006788:	f640 73fc 	movw	r3, #4092	; 0xffc
 800678c:	400b      	ands	r3, r1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <HAL_I2C_Init+0x138>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	1e59      	subs	r1, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	fbb1 f3f3 	udiv	r3, r1, r3
 80067a0:	3301      	adds	r3, #1
 80067a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067a6:	e051      	b.n	800684c <HAL_I2C_Init+0x1dc>
 80067a8:	2304      	movs	r3, #4
 80067aa:	e04f      	b.n	800684c <HAL_I2C_Init+0x1dc>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d111      	bne.n	80067d8 <HAL_I2C_Init+0x168>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	1e58      	subs	r0, r3, #1
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6859      	ldr	r1, [r3, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	440b      	add	r3, r1
 80067c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067c6:	3301      	adds	r3, #1
 80067c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bf0c      	ite	eq
 80067d0:	2301      	moveq	r3, #1
 80067d2:	2300      	movne	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	e012      	b.n	80067fe <HAL_I2C_Init+0x18e>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	1e58      	subs	r0, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6859      	ldr	r1, [r3, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	440b      	add	r3, r1
 80067e6:	0099      	lsls	r1, r3, #2
 80067e8:	440b      	add	r3, r1
 80067ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80067ee:	3301      	adds	r3, #1
 80067f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	bf0c      	ite	eq
 80067f8:	2301      	moveq	r3, #1
 80067fa:	2300      	movne	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <HAL_I2C_Init+0x196>
 8006802:	2301      	movs	r3, #1
 8006804:	e022      	b.n	800684c <HAL_I2C_Init+0x1dc>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10e      	bne.n	800682c <HAL_I2C_Init+0x1bc>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	1e58      	subs	r0, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6859      	ldr	r1, [r3, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	440b      	add	r3, r1
 800681c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006820:	3301      	adds	r3, #1
 8006822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800682a:	e00f      	b.n	800684c <HAL_I2C_Init+0x1dc>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	1e58      	subs	r0, r3, #1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6859      	ldr	r1, [r3, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	0099      	lsls	r1, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006842:	3301      	adds	r3, #1
 8006844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800684c:	6879      	ldr	r1, [r7, #4]
 800684e:	6809      	ldr	r1, [r1, #0]
 8006850:	4313      	orrs	r3, r2
 8006852:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	69da      	ldr	r2, [r3, #28]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	431a      	orrs	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800687a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6911      	ldr	r1, [r2, #16]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	68d2      	ldr	r2, [r2, #12]
 8006886:	4311      	orrs	r1, r2
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	430b      	orrs	r3, r1
 800688e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695a      	ldr	r2, [r3, #20]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	000186a0 	.word	0x000186a0
 80068e8:	001e847f 	.word	0x001e847f
 80068ec:	003d08ff 	.word	0x003d08ff
 80068f0:	431bde83 	.word	0x431bde83
 80068f4:	10624dd3 	.word	0x10624dd3

080068f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	4608      	mov	r0, r1
 8006902:	4611      	mov	r1, r2
 8006904:	461a      	mov	r2, r3
 8006906:	4603      	mov	r3, r0
 8006908:	817b      	strh	r3, [r7, #10]
 800690a:	460b      	mov	r3, r1
 800690c:	813b      	strh	r3, [r7, #8]
 800690e:	4613      	mov	r3, r2
 8006910:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006912:	f7fe ffbd 	bl	8005890 <HAL_GetTick>
 8006916:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b20      	cmp	r3, #32
 8006922:	f040 80d9 	bne.w	8006ad8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	2319      	movs	r3, #25
 800692c:	2201      	movs	r2, #1
 800692e:	496d      	ldr	r1, [pc, #436]	; (8006ae4 <HAL_I2C_Mem_Write+0x1ec>)
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f002 f9b7 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800693c:	2302      	movs	r3, #2
 800693e:	e0cc      	b.n	8006ada <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <HAL_I2C_Mem_Write+0x56>
 800694a:	2302      	movs	r3, #2
 800694c:	e0c5      	b.n	8006ada <HAL_I2C_Mem_Write+0x1e2>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b01      	cmp	r3, #1
 8006962:	d007      	beq.n	8006974 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006982:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2221      	movs	r2, #33	; 0x21
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2240      	movs	r2, #64	; 0x40
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a3a      	ldr	r2, [r7, #32]
 800699e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4a4d      	ldr	r2, [pc, #308]	; (8006ae8 <HAL_I2C_Mem_Write+0x1f0>)
 80069b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069b6:	88f8      	ldrh	r0, [r7, #6]
 80069b8:	893a      	ldrh	r2, [r7, #8]
 80069ba:	8979      	ldrh	r1, [r7, #10]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	9301      	str	r3, [sp, #4]
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	4603      	mov	r3, r0
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f001 ff46 	bl	8008858 <I2C_RequestMemoryWrite>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d052      	beq.n	8006a78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e081      	b.n	8006ada <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f002 fa38 	bl	8008e50 <I2C_WaitOnTXEFlagUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00d      	beq.n	8006a02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d107      	bne.n	80069fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e06b      	b.n	8006ada <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	781a      	ldrb	r2, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d11b      	bne.n	8006a78 <HAL_I2C_Mem_Write+0x180>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d017      	beq.n	8006a78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	781a      	ldrb	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1aa      	bne.n	80069d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f002 fa24 	bl	8008ed2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00d      	beq.n	8006aac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d107      	bne.n	8006aa8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aa6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e016      	b.n	8006ada <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	e000      	b.n	8006ada <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006ad8:	2302      	movs	r3, #2
  }
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	00100002 	.word	0x00100002
 8006ae8:	ffff0000 	.word	0xffff0000

08006aec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08c      	sub	sp, #48	; 0x30
 8006af0:	af02      	add	r7, sp, #8
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	4608      	mov	r0, r1
 8006af6:	4611      	mov	r1, r2
 8006af8:	461a      	mov	r2, r3
 8006afa:	4603      	mov	r3, r0
 8006afc:	817b      	strh	r3, [r7, #10]
 8006afe:	460b      	mov	r3, r1
 8006b00:	813b      	strh	r3, [r7, #8]
 8006b02:	4613      	mov	r3, r2
 8006b04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b06:	f7fe fec3 	bl	8005890 <HAL_GetTick>
 8006b0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	f040 8208 	bne.w	8006f2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	2319      	movs	r3, #25
 8006b20:	2201      	movs	r2, #1
 8006b22:	497b      	ldr	r1, [pc, #492]	; (8006d10 <HAL_I2C_Mem_Read+0x224>)
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f002 f8bd 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006b30:	2302      	movs	r3, #2
 8006b32:	e1fb      	b.n	8006f2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d101      	bne.n	8006b42 <HAL_I2C_Mem_Read+0x56>
 8006b3e:	2302      	movs	r3, #2
 8006b40:	e1f4      	b.n	8006f2c <HAL_I2C_Mem_Read+0x440>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d007      	beq.n	8006b68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0201 	orr.w	r2, r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2222      	movs	r2, #34	; 0x22
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2240      	movs	r2, #64	; 0x40
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006b98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4a5b      	ldr	r2, [pc, #364]	; (8006d14 <HAL_I2C_Mem_Read+0x228>)
 8006ba8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006baa:	88f8      	ldrh	r0, [r7, #6]
 8006bac:	893a      	ldrh	r2, [r7, #8]
 8006bae:	8979      	ldrh	r1, [r7, #10]
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	4603      	mov	r3, r0
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f001 fee2 	bl	8008984 <I2C_RequestMemoryRead>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e1b0      	b.n	8006f2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d113      	bne.n	8006bfa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	623b      	str	r3, [r7, #32]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	623b      	str	r3, [r7, #32]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	623b      	str	r3, [r7, #32]
 8006be6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	e184      	b.n	8006f04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d11b      	bne.n	8006c3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	61fb      	str	r3, [r7, #28]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	e164      	b.n	8006f04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d11b      	bne.n	8006c7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c62:	2300      	movs	r3, #0
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	61bb      	str	r3, [r7, #24]
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	e144      	b.n	8006f04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c90:	e138      	b.n	8006f04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	f200 80f1 	bhi.w	8006e7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d123      	bne.n	8006cec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f002 f985 	bl	8008fb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e139      	b.n	8006f2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	691a      	ldr	r2, [r3, #16]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cea:	e10b      	b.n	8006f04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d14e      	bne.n	8006d92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	4906      	ldr	r1, [pc, #24]	; (8006d18 <HAL_I2C_Mem_Read+0x22c>)
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f001 ffd0 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d008      	beq.n	8006d1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e10e      	b.n	8006f2c <HAL_I2C_Mem_Read+0x440>
 8006d0e:	bf00      	nop
 8006d10:	00100002 	.word	0x00100002
 8006d14:	ffff0000 	.word	0xffff0000
 8006d18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d90:	e0b8      	b.n	8006f04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4966      	ldr	r1, [pc, #408]	; (8006f34 <HAL_I2C_Mem_Read+0x448>)
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f001 ff81 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e0bf      	b.n	8006f2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691a      	ldr	r2, [r3, #16]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df4:	2200      	movs	r2, #0
 8006df6:	494f      	ldr	r1, [pc, #316]	; (8006f34 <HAL_I2C_Mem_Read+0x448>)
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f001 ff53 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e091      	b.n	8006f2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	3b01      	subs	r3, #1
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e7c:	e042      	b.n	8006f04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f002 f898 	bl	8008fb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e04c      	b.n	8006f2c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d118      	bne.n	8006f04 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	691a      	ldr	r2, [r3, #16]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f47f aec2 	bne.w	8006c92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	e000      	b.n	8006f2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006f2a:	2302      	movs	r3, #2
  }
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3728      	adds	r7, #40	; 0x28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	00010004 	.word	0x00010004

08006f38 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	4608      	mov	r0, r1
 8006f42:	4611      	mov	r1, r2
 8006f44:	461a      	mov	r2, r3
 8006f46:	4603      	mov	r3, r0
 8006f48:	817b      	strh	r3, [r7, #10]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	813b      	strh	r3, [r7, #8]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	f040 809a 	bne.w	8007098 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f64:	4b50      	ldr	r3, [pc, #320]	; (80070a8 <HAL_I2C_Mem_Read_IT+0x170>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	08db      	lsrs	r3, r3, #3
 8006f6a:	4a50      	ldr	r2, [pc, #320]	; (80070ac <HAL_I2C_Mem_Read_IT+0x174>)
 8006f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f70:	0a1a      	lsrs	r2, r3, #8
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	009a      	lsls	r2, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d116      	bne.n	8006fb8 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	f043 0220 	orr.w	r2, r3, #32
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e070      	b.n	800709a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d0db      	beq.n	8006f7e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_I2C_Mem_Read_IT+0x9c>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e062      	b.n	800709a <HAL_I2C_Mem_Read_IT+0x162>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d007      	beq.n	8006ffa <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0201 	orr.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007008:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2222      	movs	r2, #34	; 0x22
 800700e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2240      	movs	r2, #64	; 0x40
 8007016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a3a      	ldr	r2, [r7, #32]
 8007024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800702a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4a1d      	ldr	r2, [pc, #116]	; (80070b0 <HAL_I2C_Mem_Read_IT+0x178>)
 800703a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800703c:	897a      	ldrh	r2, [r7, #10]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8007042:	893a      	ldrh	r2, [r7, #8]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8007048:	88fa      	ldrh	r2, [r7, #6]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007062:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007072:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007092:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	e000      	b.n	800709a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8007098:	2302      	movs	r3, #2
  }
}
 800709a:	4618      	mov	r0, r3
 800709c:	371c      	adds	r7, #28
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	20000054 	.word	0x20000054
 80070ac:	14f8b589 	.word	0x14f8b589
 80070b0:	ffff0000 	.word	0xffff0000

080070b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d003      	beq.n	80070ec <HAL_I2C_EV_IRQHandler+0x38>
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	2b40      	cmp	r3, #64	; 0x40
 80070e8:	f040 80c1 	bne.w	800726e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10d      	bne.n	8007122 <HAL_I2C_EV_IRQHandler+0x6e>
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800710c:	d003      	beq.n	8007116 <HAL_I2C_EV_IRQHandler+0x62>
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007114:	d101      	bne.n	800711a <HAL_I2C_EV_IRQHandler+0x66>
 8007116:	2301      	movs	r3, #1
 8007118:	e000      	b.n	800711c <HAL_I2C_EV_IRQHandler+0x68>
 800711a:	2300      	movs	r3, #0
 800711c:	2b01      	cmp	r3, #1
 800711e:	f000 8132 	beq.w	8007386 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00c      	beq.n	8007146 <HAL_I2C_EV_IRQHandler+0x92>
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	0a5b      	lsrs	r3, r3, #9
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d006      	beq.n	8007146 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 ffc2 	bl	80090c2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fd6f 	bl	8007c22 <I2C_Master_SB>
 8007144:	e092      	b.n	800726c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	08db      	lsrs	r3, r3, #3
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d009      	beq.n	8007166 <HAL_I2C_EV_IRQHandler+0xb2>
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	0a5b      	lsrs	r3, r3, #9
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fde5 	bl	8007d2e <I2C_Master_ADD10>
 8007164:	e082      	b.n	800726c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	085b      	lsrs	r3, r3, #1
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d009      	beq.n	8007186 <HAL_I2C_EV_IRQHandler+0xd2>
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	0a5b      	lsrs	r3, r3, #9
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fdff 	bl	8007d82 <I2C_Master_ADDR>
 8007184:	e072      	b.n	800726c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	089b      	lsrs	r3, r3, #2
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d03b      	beq.n	800720a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800719c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071a0:	f000 80f3 	beq.w	800738a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	09db      	lsrs	r3, r3, #7
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00f      	beq.n	80071d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	0a9b      	lsrs	r3, r3, #10
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d009      	beq.n	80071d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	089b      	lsrs	r3, r3, #2
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d103      	bne.n	80071d0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f9e9 	bl	80075a0 <I2C_MasterTransmit_TXE>
 80071ce:	e04d      	b.n	800726c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	089b      	lsrs	r3, r3, #2
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 80d6 	beq.w	800738a <HAL_I2C_EV_IRQHandler+0x2d6>
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	0a5b      	lsrs	r3, r3, #9
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 80cf 	beq.w	800738a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	2b21      	cmp	r3, #33	; 0x21
 80071f0:	d103      	bne.n	80071fa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fa70 	bl	80076d8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071f8:	e0c7      	b.n	800738a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	2b40      	cmp	r3, #64	; 0x40
 80071fe:	f040 80c4 	bne.w	800738a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fade 	bl	80077c4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007208:	e0bf      	b.n	800738a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007218:	f000 80b7 	beq.w	800738a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	099b      	lsrs	r3, r3, #6
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00f      	beq.n	8007248 <HAL_I2C_EV_IRQHandler+0x194>
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	0a9b      	lsrs	r3, r3, #10
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b00      	cmp	r3, #0
 8007232:	d009      	beq.n	8007248 <HAL_I2C_EV_IRQHandler+0x194>
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	089b      	lsrs	r3, r3, #2
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	d103      	bne.n	8007248 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fb53 	bl	80078ec <I2C_MasterReceive_RXNE>
 8007246:	e011      	b.n	800726c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	089b      	lsrs	r3, r3, #2
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 809a 	beq.w	800738a <HAL_I2C_EV_IRQHandler+0x2d6>
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	0a5b      	lsrs	r3, r3, #9
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 8093 	beq.w	800738a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fbf2 	bl	8007a4e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800726a:	e08e      	b.n	800738a <HAL_I2C_EV_IRQHandler+0x2d6>
 800726c:	e08d      	b.n	800738a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	2b00      	cmp	r3, #0
 8007274:	d004      	beq.n	8007280 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	61fb      	str	r3, [r7, #28]
 800727e:	e007      	b.n	8007290 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	085b      	lsrs	r3, r3, #1
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b00      	cmp	r3, #0
 800729a:	d012      	beq.n	80072c2 <HAL_I2C_EV_IRQHandler+0x20e>
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	0a5b      	lsrs	r3, r3, #9
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00c      	beq.n	80072c2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80072b8:	69b9      	ldr	r1, [r7, #24]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 ffb0 	bl	8008220 <I2C_Slave_ADDR>
 80072c0:	e066      	b.n	8007390 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	091b      	lsrs	r3, r3, #4
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <HAL_I2C_EV_IRQHandler+0x22e>
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	0a5b      	lsrs	r3, r3, #9
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 ffea 	bl	80082b4 <I2C_Slave_STOPF>
 80072e0:	e056      	b.n	8007390 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	2b21      	cmp	r3, #33	; 0x21
 80072e6:	d002      	beq.n	80072ee <HAL_I2C_EV_IRQHandler+0x23a>
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	2b29      	cmp	r3, #41	; 0x29
 80072ec:	d125      	bne.n	800733a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	09db      	lsrs	r3, r3, #7
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00f      	beq.n	800731a <HAL_I2C_EV_IRQHandler+0x266>
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	0a9b      	lsrs	r3, r3, #10
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	d009      	beq.n	800731a <HAL_I2C_EV_IRQHandler+0x266>
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	089b      	lsrs	r3, r3, #2
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b00      	cmp	r3, #0
 8007310:	d103      	bne.n	800731a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fec6 	bl	80080a4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007318:	e039      	b.n	800738e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	089b      	lsrs	r3, r3, #2
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	d033      	beq.n	800738e <HAL_I2C_EV_IRQHandler+0x2da>
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	0a5b      	lsrs	r3, r3, #9
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d02d      	beq.n	800738e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fef3 	bl	800811e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007338:	e029      	b.n	800738e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	099b      	lsrs	r3, r3, #6
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00f      	beq.n	8007366 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	0a9b      	lsrs	r3, r3, #10
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	089b      	lsrs	r3, r3, #2
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d103      	bne.n	8007366 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fefe 	bl	8008160 <I2C_SlaveReceive_RXNE>
 8007364:	e014      	b.n	8007390 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	089b      	lsrs	r3, r3, #2
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00e      	beq.n	8007390 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	0a5b      	lsrs	r3, r3, #9
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d008      	beq.n	8007390 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 ff2c 	bl	80081dc <I2C_SlaveReceive_BTF>
 8007384:	e004      	b.n	8007390 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007386:	bf00      	nop
 8007388:	e002      	b.n	8007390 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800738a:	bf00      	nop
 800738c:	e000      	b.n	8007390 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800738e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007390:	3720      	adds	r7, #32
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b08a      	sub	sp, #40	; 0x28
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80073ae:	2300      	movs	r3, #0
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073b8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	0a1b      	lsrs	r3, r3, #8
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00e      	beq.n	80073e4 <HAL_I2C_ER_IRQHandler+0x4e>
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	0a1b      	lsrs	r3, r3, #8
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d008      	beq.n	80073e4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	f043 0301 	orr.w	r3, r3, #1
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80073e2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	0a5b      	lsrs	r3, r3, #9
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00e      	beq.n	800740e <HAL_I2C_ER_IRQHandler+0x78>
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	0a1b      	lsrs	r3, r3, #8
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d008      	beq.n	800740e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	f043 0302 	orr.w	r3, r3, #2
 8007402:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800740c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	0a9b      	lsrs	r3, r3, #10
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d03f      	beq.n	800749a <HAL_I2C_ER_IRQHandler+0x104>
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	0a1b      	lsrs	r3, r3, #8
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d039      	beq.n	800749a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007426:	7efb      	ldrb	r3, [r7, #27]
 8007428:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800742e:	b29b      	uxth	r3, r3
 8007430:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007438:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007440:	7ebb      	ldrb	r3, [r7, #26]
 8007442:	2b20      	cmp	r3, #32
 8007444:	d112      	bne.n	800746c <HAL_I2C_ER_IRQHandler+0xd6>
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10f      	bne.n	800746c <HAL_I2C_ER_IRQHandler+0xd6>
 800744c:	7cfb      	ldrb	r3, [r7, #19]
 800744e:	2b21      	cmp	r3, #33	; 0x21
 8007450:	d008      	beq.n	8007464 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007452:	7cfb      	ldrb	r3, [r7, #19]
 8007454:	2b29      	cmp	r3, #41	; 0x29
 8007456:	d005      	beq.n	8007464 <HAL_I2C_ER_IRQHandler+0xce>
 8007458:	7cfb      	ldrb	r3, [r7, #19]
 800745a:	2b28      	cmp	r3, #40	; 0x28
 800745c:	d106      	bne.n	800746c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b21      	cmp	r3, #33	; 0x21
 8007462:	d103      	bne.n	800746c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 f855 	bl	8008514 <I2C_Slave_AF>
 800746a:	e016      	b.n	800749a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007474:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	f043 0304 	orr.w	r3, r3, #4
 800747c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800747e:	7efb      	ldrb	r3, [r7, #27]
 8007480:	2b10      	cmp	r3, #16
 8007482:	d002      	beq.n	800748a <HAL_I2C_ER_IRQHandler+0xf4>
 8007484:	7efb      	ldrb	r3, [r7, #27]
 8007486:	2b40      	cmp	r3, #64	; 0x40
 8007488:	d107      	bne.n	800749a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007498:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	0adb      	lsrs	r3, r3, #11
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00e      	beq.n	80074c4 <HAL_I2C_ER_IRQHandler+0x12e>
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	0a1b      	lsrs	r3, r3, #8
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d008      	beq.n	80074c4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	f043 0308 	orr.w	r3, r3, #8
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80074c2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d008      	beq.n	80074dc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f001 f88c 	bl	80085f4 <I2C_ITError>
  }
}
 80074dc:	bf00      	nop
 80074de:	3728      	adds	r7, #40	; 0x28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
 8007540:	4613      	mov	r3, r2
 8007542:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075bc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d150      	bne.n	8007668 <I2C_MasterTransmit_TXE+0xc8>
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	2b21      	cmp	r3, #33	; 0x21
 80075ca:	d14d      	bne.n	8007668 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b08      	cmp	r3, #8
 80075d0:	d01d      	beq.n	800760e <I2C_MasterTransmit_TXE+0x6e>
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	d01a      	beq.n	800760e <I2C_MasterTransmit_TXE+0x6e>
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075de:	d016      	beq.n	800760e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075ee:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2211      	movs	r2, #17
 80075f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff ff6c 	bl	80074e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800760c:	e060      	b.n	80076d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800761c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800762c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	d107      	bne.n	8007658 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7ff ff87 	bl	8007564 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007656:	e03b      	b.n	80076d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff ff3f 	bl	80074e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007666:	e033      	b.n	80076d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	2b21      	cmp	r3, #33	; 0x21
 800766c:	d005      	beq.n	800767a <I2C_MasterTransmit_TXE+0xda>
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	2b40      	cmp	r3, #64	; 0x40
 8007672:	d12d      	bne.n	80076d0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	2b22      	cmp	r3, #34	; 0x22
 8007678:	d12a      	bne.n	80076d0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767e:	b29b      	uxth	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	d108      	bne.n	8007696 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007692:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007694:	e01c      	b.n	80076d0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b40      	cmp	r3, #64	; 0x40
 80076a0:	d103      	bne.n	80076aa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f88e 	bl	80077c4 <I2C_MemoryTransmit_TXE_BTF>
}
 80076a8:	e012      	b.n	80076d0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	781a      	ldrb	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	3b01      	subs	r3, #1
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80076ce:	e7ff      	b.n	80076d0 <I2C_MasterTransmit_TXE+0x130>
 80076d0:	bf00      	nop
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b21      	cmp	r3, #33	; 0x21
 80076f0:	d164      	bne.n	80077bc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d012      	beq.n	8007722 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	781a      	ldrb	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007716:	b29b      	uxth	r3, r3
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007720:	e04c      	b.n	80077bc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b08      	cmp	r3, #8
 8007726:	d01d      	beq.n	8007764 <I2C_MasterTransmit_BTF+0x8c>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b20      	cmp	r3, #32
 800772c:	d01a      	beq.n	8007764 <I2C_MasterTransmit_BTF+0x8c>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007734:	d016      	beq.n	8007764 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007744:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2211      	movs	r2, #17
 800774a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff fec1 	bl	80074e4 <HAL_I2C_MasterTxCpltCallback>
}
 8007762:	e02b      	b.n	80077bc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007772:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007782:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2220      	movs	r2, #32
 800778e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b40      	cmp	r3, #64	; 0x40
 800779c:	d107      	bne.n	80077ae <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff fedc 	bl	8007564 <HAL_I2C_MemTxCpltCallback>
}
 80077ac:	e006      	b.n	80077bc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff fe94 	bl	80074e4 <HAL_I2C_MasterTxCpltCallback>
}
 80077bc:	bf00      	nop
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d11d      	bne.n	8007818 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d10b      	bne.n	80077fc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f4:	1c9a      	adds	r2, r3, #2
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80077fa:	e073      	b.n	80078e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007800:	b29b      	uxth	r3, r3
 8007802:	121b      	asrs	r3, r3, #8
 8007804:	b2da      	uxtb	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007816:	e065      	b.n	80078e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781c:	2b01      	cmp	r3, #1
 800781e:	d10b      	bne.n	8007838 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007824:	b2da      	uxtb	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007836:	e055      	b.n	80078e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800783c:	2b02      	cmp	r3, #2
 800783e:	d151      	bne.n	80078e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	2b22      	cmp	r3, #34	; 0x22
 8007844:	d10d      	bne.n	8007862 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007854:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007860:	e040      	b.n	80078e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007866:	b29b      	uxth	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d015      	beq.n	8007898 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	2b21      	cmp	r3, #33	; 0x21
 8007870:	d112      	bne.n	8007898 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	781a      	ldrb	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	1c5a      	adds	r2, r3, #1
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788c:	b29b      	uxth	r3, r3
 800788e:	3b01      	subs	r3, #1
 8007890:	b29a      	uxth	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007896:	e025      	b.n	80078e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789c:	b29b      	uxth	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d120      	bne.n	80078e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	2b21      	cmp	r3, #33	; 0x21
 80078a6:	d11d      	bne.n	80078e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078b6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff fe40 	bl	8007564 <HAL_I2C_MemTxCpltCallback>
}
 80078e4:	bf00      	nop
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b22      	cmp	r3, #34	; 0x22
 80078fe:	f040 80a2 	bne.w	8007a46 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007906:	b29b      	uxth	r3, r3
 8007908:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2b03      	cmp	r3, #3
 800790e:	d921      	bls.n	8007954 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691a      	ldr	r2, [r3, #16]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800792c:	b29b      	uxth	r3, r3
 800792e:	3b01      	subs	r3, #1
 8007930:	b29a      	uxth	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793a:	b29b      	uxth	r3, r3
 800793c:	2b03      	cmp	r3, #3
 800793e:	f040 8082 	bne.w	8007a46 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007950:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007952:	e078      	b.n	8007a46 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	2b02      	cmp	r3, #2
 800795a:	d074      	beq.n	8007a46 <I2C_MasterReceive_RXNE+0x15a>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d002      	beq.n	8007968 <I2C_MasterReceive_RXNE+0x7c>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d16e      	bne.n	8007a46 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 faf3 	bl	8008f54 <I2C_WaitOnSTOPRequestThroughIT>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d142      	bne.n	80079fa <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007982:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007992:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b40      	cmp	r3, #64	; 0x40
 80079cc:	d10a      	bne.n	80079e4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7fc f9c7 	bl	8003d70 <HAL_I2C_MemRxCpltCallback>
}
 80079e2:	e030      	b.n	8007a46 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2212      	movs	r2, #18
 80079f0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff fd80 	bl	80074f8 <HAL_I2C_MasterRxCpltCallback>
}
 80079f8:	e025      	b.n	8007a46 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a08:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	691a      	ldr	r2, [r3, #16]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a14:	b2d2      	uxtb	r2, r2
 8007a16:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2220      	movs	r2, #32
 8007a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff fd99 	bl	8007578 <HAL_I2C_ErrorCallback>
}
 8007a46:	bf00      	nop
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d11b      	bne.n	8007a9e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a74:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	691a      	ldr	r2, [r3, #16]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007a9c:	e0bd      	b.n	8007c1a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	d129      	bne.n	8007afc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	d00a      	beq.n	8007ad4 <I2C_MasterReceive_BTF+0x86>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d007      	beq.n	8007ad4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	691a      	ldr	r2, [r3, #16]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	b2d2      	uxtb	r2, r2
 8007ae0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	3b01      	subs	r3, #1
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007afa:	e08e      	b.n	8007c1a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d176      	bne.n	8007bf4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d002      	beq.n	8007b12 <I2C_MasterReceive_BTF+0xc4>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b10      	cmp	r3, #16
 8007b10:	d108      	bne.n	8007b24 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	e019      	b.n	8007b58 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d002      	beq.n	8007b30 <I2C_MasterReceive_BTF+0xe2>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d108      	bne.n	8007b42 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	e00a      	b.n	8007b58 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b10      	cmp	r3, #16
 8007b46:	d007      	beq.n	8007b58 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b56:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	691a      	ldr	r2, [r3, #16]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	b2d2      	uxtb	r2, r2
 8007b64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	691a      	ldr	r2, [r3, #16]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	b2d2      	uxtb	r2, r2
 8007b8a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007bb2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b40      	cmp	r3, #64	; 0x40
 8007bc6:	d10a      	bne.n	8007bde <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7fc f8ca 	bl	8003d70 <HAL_I2C_MemRxCpltCallback>
}
 8007bdc:	e01d      	b.n	8007c1a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2212      	movs	r2, #18
 8007bea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff fc83 	bl	80074f8 <HAL_I2C_MasterRxCpltCallback>
}
 8007bf2:	e012      	b.n	8007c1a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691a      	ldr	r2, [r3, #16]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007c1a:	bf00      	nop
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b40      	cmp	r3, #64	; 0x40
 8007c34:	d117      	bne.n	8007c66 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d109      	bne.n	8007c52 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c4e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007c50:	e067      	b.n	8007d22 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	f043 0301 	orr.w	r3, r3, #1
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	611a      	str	r2, [r3, #16]
}
 8007c64:	e05d      	b.n	8007d22 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c6e:	d133      	bne.n	8007cd8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b21      	cmp	r3, #33	; 0x21
 8007c7a:	d109      	bne.n	8007c90 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	461a      	mov	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c8c:	611a      	str	r2, [r3, #16]
 8007c8e:	e008      	b.n	8007ca2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	f043 0301 	orr.w	r3, r3, #1
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d004      	beq.n	8007cb4 <I2C_Master_SB+0x92>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d108      	bne.n	8007cc6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d032      	beq.n	8007d22 <I2C_Master_SB+0x100>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d02d      	beq.n	8007d22 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cd4:	605a      	str	r2, [r3, #4]
}
 8007cd6:	e024      	b.n	8007d22 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10e      	bne.n	8007cfe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	11db      	asrs	r3, r3, #7
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	f003 0306 	and.w	r3, r3, #6
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	f063 030f 	orn	r3, r3, #15
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	611a      	str	r2, [r3, #16]
}
 8007cfc:	e011      	b.n	8007d22 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d10d      	bne.n	8007d22 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	11db      	asrs	r3, r3, #7
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 0306 	and.w	r3, r3, #6
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	f063 030e 	orn	r3, r3, #14
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	611a      	str	r2, [r3, #16]
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <I2C_Master_ADD10+0x26>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d108      	bne.n	8007d66 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00c      	beq.n	8007d76 <I2C_Master_ADD10+0x48>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d007      	beq.n	8007d76 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d74:	605a      	str	r2, [r3, #4]
  }
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b091      	sub	sp, #68	; 0x44
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b22      	cmp	r3, #34	; 0x22
 8007daa:	f040 8169 	bne.w	8008080 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10f      	bne.n	8007dd6 <I2C_Master_ADDR+0x54>
 8007db6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007dba:	2b40      	cmp	r3, #64	; 0x40
 8007dbc:	d10b      	bne.n	8007dd6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	633b      	str	r3, [r7, #48]	; 0x30
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	e160      	b.n	8008098 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d11d      	bne.n	8007e1a <I2C_Master_ADDR+0x98>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007de6:	d118      	bne.n	8007e1a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007de8:	2300      	movs	r3, #0
 8007dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e0c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	651a      	str	r2, [r3, #80]	; 0x50
 8007e18:	e13e      	b.n	8008098 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d113      	bne.n	8007e4c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e24:	2300      	movs	r3, #0
 8007e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	e115      	b.n	8008078 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	f040 808a 	bne.w	8007f6c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e5e:	d137      	bne.n	8007ed0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e6e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e7e:	d113      	bne.n	8007ea8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e8e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e90:	2300      	movs	r3, #0
 8007e92:	627b      	str	r3, [r7, #36]	; 0x24
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	e0e7      	b.n	8008078 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	623b      	str	r3, [r7, #32]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	623b      	str	r3, [r7, #32]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	623b      	str	r3, [r7, #32]
 8007ebc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	e0d3      	b.n	8008078 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed2:	2b08      	cmp	r3, #8
 8007ed4:	d02e      	beq.n	8007f34 <I2C_Master_ADDR+0x1b2>
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	2b20      	cmp	r3, #32
 8007eda:	d02b      	beq.n	8007f34 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ede:	2b12      	cmp	r3, #18
 8007ee0:	d102      	bne.n	8007ee8 <I2C_Master_ADDR+0x166>
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d125      	bne.n	8007f34 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eea:	2b04      	cmp	r3, #4
 8007eec:	d00e      	beq.n	8007f0c <I2C_Master_ADDR+0x18a>
 8007eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d00b      	beq.n	8007f0c <I2C_Master_ADDR+0x18a>
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef6:	2b10      	cmp	r3, #16
 8007ef8:	d008      	beq.n	8007f0c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	e007      	b.n	8007f1c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f1a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	61fb      	str	r3, [r7, #28]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	61fb      	str	r3, [r7, #28]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	61fb      	str	r3, [r7, #28]
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	e0a1      	b.n	8008078 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f42:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f44:	2300      	movs	r3, #0
 8007f46:	61bb      	str	r3, [r7, #24]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	61bb      	str	r3, [r7, #24]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	61bb      	str	r3, [r7, #24]
 8007f58:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	e085      	b.n	8008078 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d14d      	bne.n	8008012 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	2b04      	cmp	r3, #4
 8007f7a:	d016      	beq.n	8007faa <I2C_Master_ADDR+0x228>
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d013      	beq.n	8007faa <I2C_Master_ADDR+0x228>
 8007f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f84:	2b10      	cmp	r3, #16
 8007f86:	d010      	beq.n	8007faa <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f96:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	e007      	b.n	8007fba <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fb8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fc8:	d117      	bne.n	8007ffa <I2C_Master_ADDR+0x278>
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007fd0:	d00b      	beq.n	8007fea <I2C_Master_ADDR+0x268>
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d008      	beq.n	8007fea <I2C_Master_ADDR+0x268>
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	2b08      	cmp	r3, #8
 8007fdc:	d005      	beq.n	8007fea <I2C_Master_ADDR+0x268>
 8007fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe0:	2b10      	cmp	r3, #16
 8007fe2:	d002      	beq.n	8007fea <I2C_Master_ADDR+0x268>
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	d107      	bne.n	8007ffa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ff8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	617b      	str	r3, [r7, #20]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	617b      	str	r3, [r7, #20]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	617b      	str	r3, [r7, #20]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	e032      	b.n	8008078 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008020:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800802c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008030:	d117      	bne.n	8008062 <I2C_Master_ADDR+0x2e0>
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008038:	d00b      	beq.n	8008052 <I2C_Master_ADDR+0x2d0>
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	2b01      	cmp	r3, #1
 800803e:	d008      	beq.n	8008052 <I2C_Master_ADDR+0x2d0>
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	2b08      	cmp	r3, #8
 8008044:	d005      	beq.n	8008052 <I2C_Master_ADDR+0x2d0>
 8008046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008048:	2b10      	cmp	r3, #16
 800804a:	d002      	beq.n	8008052 <I2C_Master_ADDR+0x2d0>
 800804c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804e:	2b20      	cmp	r3, #32
 8008050:	d107      	bne.n	8008062 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008060:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008062:	2300      	movs	r3, #0
 8008064:	613b      	str	r3, [r7, #16]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	613b      	str	r3, [r7, #16]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	613b      	str	r3, [r7, #16]
 8008076:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800807e:	e00b      	b.n	8008098 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008080:	2300      	movs	r3, #0
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	68fb      	ldr	r3, [r7, #12]
}
 8008096:	e7ff      	b.n	8008098 <I2C_Master_ADDR+0x316>
 8008098:	bf00      	nop
 800809a:	3744      	adds	r7, #68	; 0x44
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d02b      	beq.n	8008116 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	781a      	ldrb	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d8:	b29b      	uxth	r3, r3
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29a      	uxth	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d114      	bne.n	8008116 <I2C_SlaveTransmit_TXE+0x72>
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	2b29      	cmp	r3, #41	; 0x29
 80080f0:	d111      	bne.n	8008116 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008100:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2221      	movs	r2, #33	; 0x21
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2228      	movs	r2, #40	; 0x28
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff f9fb 	bl	800750c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008116:	bf00      	nop
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800811e:	b480      	push	{r7}
 8008120:	b083      	sub	sp, #12
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812a:	b29b      	uxth	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d011      	beq.n	8008154 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800814a:	b29b      	uxth	r3, r3
 800814c:	3b01      	subs	r3, #1
 800814e:	b29a      	uxth	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800816e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008174:	b29b      	uxth	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d02c      	beq.n	80081d4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	691a      	ldr	r2, [r3, #16]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008184:	b2d2      	uxtb	r2, r2
 8008186:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	1c5a      	adds	r2, r3, #1
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008196:	b29b      	uxth	r3, r3
 8008198:	3b01      	subs	r3, #1
 800819a:	b29a      	uxth	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d114      	bne.n	80081d4 <I2C_SlaveReceive_RXNE+0x74>
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	2b2a      	cmp	r3, #42	; 0x2a
 80081ae:	d111      	bne.n	80081d4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081be:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2222      	movs	r2, #34	; 0x22
 80081c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2228      	movs	r2, #40	; 0x28
 80081ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff f9a6 	bl	8007520 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80081d4:	bf00      	nop
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d012      	beq.n	8008214 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	691a      	ldr	r2, [r3, #16]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	b2d2      	uxtb	r2, r2
 80081fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800820a:	b29b      	uxth	r3, r3
 800820c:	3b01      	subs	r3, #1
 800820e:	b29a      	uxth	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008234:	b2db      	uxtb	r3, r3
 8008236:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800823a:	2b28      	cmp	r3, #40	; 0x28
 800823c:	d127      	bne.n	800828e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800824c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	089b      	lsrs	r3, r3, #2
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800825a:	2301      	movs	r3, #1
 800825c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	09db      	lsrs	r3, r3, #7
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d103      	bne.n	8008272 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	81bb      	strh	r3, [r7, #12]
 8008270:	e002      	b.n	8008278 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008280:	89ba      	ldrh	r2, [r7, #12]
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7ff f954 	bl	8007534 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800828c:	e00e      	b.n	80082ac <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800828e:	2300      	movs	r3, #0
 8008290:	60bb      	str	r3, [r7, #8]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	60bb      	str	r3, [r7, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	60bb      	str	r3, [r7, #8]
 80082a2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80082ac:	bf00      	nop
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80082d4:	2300      	movs	r3, #0
 80082d6:	60bb      	str	r3, [r7, #8]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	60bb      	str	r3, [r7, #8]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0201 	orr.w	r2, r2, #1
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008300:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800830c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008310:	d172      	bne.n	80083f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	2b22      	cmp	r3, #34	; 0x22
 8008316:	d002      	beq.n	800831e <I2C_Slave_STOPF+0x6a>
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	2b2a      	cmp	r3, #42	; 0x2a
 800831c:	d135      	bne.n	800838a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	b29a      	uxth	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008330:	b29b      	uxth	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	f043 0204 	orr.w	r2, r3, #4
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008350:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008356:	4618      	mov	r0, r3
 8008358:	f7fd fefe 	bl	8006158 <HAL_DMA_GetState>
 800835c:	4603      	mov	r3, r0
 800835e:	2b01      	cmp	r3, #1
 8008360:	d049      	beq.n	80083f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008366:	4a69      	ldr	r2, [pc, #420]	; (800850c <I2C_Slave_STOPF+0x258>)
 8008368:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	4618      	mov	r0, r3
 8008370:	f7fd fd46 	bl	8005e00 <HAL_DMA_Abort_IT>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d03d      	beq.n	80083f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008384:	4610      	mov	r0, r2
 8008386:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008388:	e035      	b.n	80083f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	b29a      	uxth	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800839c:	b29b      	uxth	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d005      	beq.n	80083ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a6:	f043 0204 	orr.w	r2, r3, #4
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fd fec8 	bl	8006158 <HAL_DMA_GetState>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d014      	beq.n	80083f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d2:	4a4e      	ldr	r2, [pc, #312]	; (800850c <I2C_Slave_STOPF+0x258>)
 80083d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fd fd10 	bl	8005e00 <HAL_DMA_Abort_IT>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d008      	beq.n	80083f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
 80083f4:	e000      	b.n	80083f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d03e      	beq.n	8008480 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b04      	cmp	r3, #4
 800840e:	d112      	bne.n	8008436 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691a      	ldr	r2, [r3, #16]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	b2d2      	uxtb	r2, r2
 800841c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800842c:	b29b      	uxth	r3, r3
 800842e:	3b01      	subs	r3, #1
 8008430:	b29a      	uxth	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008440:	2b40      	cmp	r3, #64	; 0x40
 8008442:	d112      	bne.n	800846a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	691a      	ldr	r2, [r3, #16]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	b2d2      	uxtb	r2, r2
 8008450:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	1c5a      	adds	r2, r3, #1
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008460:	b29b      	uxth	r3, r3
 8008462:	3b01      	subs	r3, #1
 8008464:	b29a      	uxth	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800846e:	b29b      	uxth	r3, r3
 8008470:	2b00      	cmp	r3, #0
 8008472:	d005      	beq.n	8008480 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	f043 0204 	orr.w	r2, r3, #4
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f8b3 	bl	80085f4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800848e:	e039      	b.n	8008504 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	2b2a      	cmp	r3, #42	; 0x2a
 8008494:	d109      	bne.n	80084aa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2228      	movs	r2, #40	; 0x28
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7ff f83b 	bl	8007520 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b28      	cmp	r3, #40	; 0x28
 80084b4:	d111      	bne.n	80084da <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a15      	ldr	r2, [pc, #84]	; (8008510 <I2C_Slave_STOPF+0x25c>)
 80084ba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2220      	movs	r2, #32
 80084c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7ff f83c 	bl	8007550 <HAL_I2C_ListenCpltCallback>
}
 80084d8:	e014      	b.n	8008504 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084de:	2b22      	cmp	r3, #34	; 0x22
 80084e0:	d002      	beq.n	80084e8 <I2C_Slave_STOPF+0x234>
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	2b22      	cmp	r3, #34	; 0x22
 80084e6:	d10d      	bne.n	8008504 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2220      	movs	r2, #32
 80084f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff f80e 	bl	8007520 <HAL_I2C_SlaveRxCpltCallback>
}
 8008504:	bf00      	nop
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	08008b55 	.word	0x08008b55
 8008510:	ffff0000 	.word	0xffff0000

08008514 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008522:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008528:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2b08      	cmp	r3, #8
 800852e:	d002      	beq.n	8008536 <I2C_Slave_AF+0x22>
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2b20      	cmp	r3, #32
 8008534:	d129      	bne.n	800858a <I2C_Slave_AF+0x76>
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	2b28      	cmp	r3, #40	; 0x28
 800853a:	d126      	bne.n	800858a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a2c      	ldr	r2, [pc, #176]	; (80085f0 <I2C_Slave_AF+0xdc>)
 8008540:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008550:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800855a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800856a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2220      	movs	r2, #32
 8008576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7fe ffe4 	bl	8007550 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008588:	e02e      	b.n	80085e8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	2b21      	cmp	r3, #33	; 0x21
 800858e:	d126      	bne.n	80085de <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a17      	ldr	r2, [pc, #92]	; (80085f0 <I2C_Slave_AF+0xdc>)
 8008594:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2221      	movs	r2, #33	; 0x21
 800859a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2220      	movs	r2, #32
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085ba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085c4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085d4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7fe ff98 	bl	800750c <HAL_I2C_SlaveTxCpltCallback>
}
 80085dc:	e004      	b.n	80085e8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085e6:	615a      	str	r2, [r3, #20]
}
 80085e8:	bf00      	nop
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	ffff0000 	.word	0xffff0000

080085f4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008602:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800860a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b10      	cmp	r3, #16
 8008610:	d002      	beq.n	8008618 <I2C_ITError+0x24>
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	2b40      	cmp	r3, #64	; 0x40
 8008616:	d10a      	bne.n	800862e <I2C_ITError+0x3a>
 8008618:	7bfb      	ldrb	r3, [r7, #15]
 800861a:	2b22      	cmp	r3, #34	; 0x22
 800861c:	d107      	bne.n	800862e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800862c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008634:	2b28      	cmp	r3, #40	; 0x28
 8008636:	d107      	bne.n	8008648 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2228      	movs	r2, #40	; 0x28
 8008642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008646:	e015      	b.n	8008674 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008656:	d00a      	beq.n	800866e <I2C_ITError+0x7a>
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	2b60      	cmp	r3, #96	; 0x60
 800865c:	d007      	beq.n	800866e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2220      	movs	r2, #32
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800867e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008682:	d162      	bne.n	800874a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685a      	ldr	r2, [r3, #4]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008692:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d020      	beq.n	80086e4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a6:	4a6a      	ldr	r2, [pc, #424]	; (8008850 <I2C_ITError+0x25c>)
 80086a8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fd fba6 	bl	8005e00 <HAL_DMA_Abort_IT>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 8089 	beq.w	80087ce <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 0201 	bic.w	r2, r2, #1
 80086ca:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2220      	movs	r2, #32
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80086de:	4610      	mov	r0, r2
 80086e0:	4798      	blx	r3
 80086e2:	e074      	b.n	80087ce <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	4a59      	ldr	r2, [pc, #356]	; (8008850 <I2C_ITError+0x25c>)
 80086ea:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fd fb85 	bl	8005e00 <HAL_DMA_Abort_IT>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d068      	beq.n	80087ce <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008706:	2b40      	cmp	r3, #64	; 0x40
 8008708:	d10b      	bne.n	8008722 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	691a      	ldr	r2, [r3, #16]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	b2d2      	uxtb	r2, r2
 8008716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0201 	bic.w	r2, r2, #1
 8008730:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2220      	movs	r2, #32
 8008736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008744:	4610      	mov	r0, r2
 8008746:	4798      	blx	r3
 8008748:	e041      	b.n	80087ce <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b60      	cmp	r3, #96	; 0x60
 8008754:	d125      	bne.n	80087a2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2220      	movs	r2, #32
 800875a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876e:	2b40      	cmp	r3, #64	; 0x40
 8008770:	d10b      	bne.n	800878a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	b2d2      	uxtb	r2, r2
 800877e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	1c5a      	adds	r2, r3, #1
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 0201 	bic.w	r2, r2, #1
 8008798:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f7fe fef6 	bl	800758c <HAL_I2C_AbortCpltCallback>
 80087a0:	e015      	b.n	80087ce <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ac:	2b40      	cmp	r3, #64	; 0x40
 80087ae:	d10b      	bne.n	80087c8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	691a      	ldr	r2, [r3, #16]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	b2d2      	uxtb	r2, r2
 80087bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7fe fed5 	bl	8007578 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10e      	bne.n	80087fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d109      	bne.n	80087fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d104      	bne.n	80087fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d007      	beq.n	800880c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800880a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008812:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b04      	cmp	r3, #4
 800881e:	d113      	bne.n	8008848 <I2C_ITError+0x254>
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	2b28      	cmp	r3, #40	; 0x28
 8008824:	d110      	bne.n	8008848 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a0a      	ldr	r2, [pc, #40]	; (8008854 <I2C_ITError+0x260>)
 800882a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2220      	movs	r2, #32
 8008836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7fe fe84 	bl	8007550 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008848:	bf00      	nop
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	08008b55 	.word	0x08008b55
 8008854:	ffff0000 	.word	0xffff0000

08008858 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af02      	add	r7, sp, #8
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	4608      	mov	r0, r1
 8008862:	4611      	mov	r1, r2
 8008864:	461a      	mov	r2, r3
 8008866:	4603      	mov	r3, r0
 8008868:	817b      	strh	r3, [r7, #10]
 800886a:	460b      	mov	r3, r1
 800886c:	813b      	strh	r3, [r7, #8]
 800886e:	4613      	mov	r3, r2
 8008870:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008880:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	2200      	movs	r2, #0
 800888a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 fa08 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00d      	beq.n	80088b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088a8:	d103      	bne.n	80088b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e05f      	b.n	8008976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80088b6:	897b      	ldrh	r3, [r7, #10]
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	461a      	mov	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80088c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c8:	6a3a      	ldr	r2, [r7, #32]
 80088ca:	492d      	ldr	r1, [pc, #180]	; (8008980 <I2C_RequestMemoryWrite+0x128>)
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 fa40 	bl	8008d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e04c      	b.n	8008976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088dc:	2300      	movs	r3, #0
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	617b      	str	r3, [r7, #20]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	617b      	str	r3, [r7, #20]
 80088f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f4:	6a39      	ldr	r1, [r7, #32]
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 faaa 	bl	8008e50 <I2C_WaitOnTXEFlagUntilTimeout>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00d      	beq.n	800891e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008906:	2b04      	cmp	r3, #4
 8008908:	d107      	bne.n	800891a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008918:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e02b      	b.n	8008976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800891e:	88fb      	ldrh	r3, [r7, #6]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d105      	bne.n	8008930 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008924:	893b      	ldrh	r3, [r7, #8]
 8008926:	b2da      	uxtb	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	611a      	str	r2, [r3, #16]
 800892e:	e021      	b.n	8008974 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008930:	893b      	ldrh	r3, [r7, #8]
 8008932:	0a1b      	lsrs	r3, r3, #8
 8008934:	b29b      	uxth	r3, r3
 8008936:	b2da      	uxtb	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800893e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008940:	6a39      	ldr	r1, [r7, #32]
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f000 fa84 	bl	8008e50 <I2C_WaitOnTXEFlagUntilTimeout>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00d      	beq.n	800896a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008952:	2b04      	cmp	r3, #4
 8008954:	d107      	bne.n	8008966 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008964:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e005      	b.n	8008976 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800896a:	893b      	ldrh	r3, [r7, #8]
 800896c:	b2da      	uxtb	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	00010002 	.word	0x00010002

08008984 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af02      	add	r7, sp, #8
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	4608      	mov	r0, r1
 800898e:	4611      	mov	r1, r2
 8008990:	461a      	mov	r2, r3
 8008992:	4603      	mov	r3, r0
 8008994:	817b      	strh	r3, [r7, #10]
 8008996:	460b      	mov	r3, r1
 8008998:	813b      	strh	r3, [r7, #8]
 800899a:	4613      	mov	r3, r2
 800899c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 f96a 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00d      	beq.n	80089f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089e4:	d103      	bne.n	80089ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e0aa      	b.n	8008b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80089f2:	897b      	ldrh	r3, [r7, #10]
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	461a      	mov	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	6a3a      	ldr	r2, [r7, #32]
 8008a06:	4952      	ldr	r1, [pc, #328]	; (8008b50 <I2C_RequestMemoryRead+0x1cc>)
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 f9a2 	bl	8008d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e097      	b.n	8008b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a18:	2300      	movs	r3, #0
 8008a1a:	617b      	str	r3, [r7, #20]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	617b      	str	r3, [r7, #20]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	617b      	str	r3, [r7, #20]
 8008a2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a30:	6a39      	ldr	r1, [r7, #32]
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 fa0c 	bl	8008e50 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00d      	beq.n	8008a5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d107      	bne.n	8008a56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e076      	b.n	8008b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a5a:	88fb      	ldrh	r3, [r7, #6]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d105      	bne.n	8008a6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a60:	893b      	ldrh	r3, [r7, #8]
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	611a      	str	r2, [r3, #16]
 8008a6a:	e021      	b.n	8008ab0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008a6c:	893b      	ldrh	r3, [r7, #8]
 8008a6e:	0a1b      	lsrs	r3, r3, #8
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a7c:	6a39      	ldr	r1, [r7, #32]
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f000 f9e6 	bl	8008e50 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00d      	beq.n	8008aa6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d107      	bne.n	8008aa2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e050      	b.n	8008b48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008aa6:	893b      	ldrh	r3, [r7, #8]
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab2:	6a39      	ldr	r1, [r7, #32]
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 f9cb 	bl	8008e50 <I2C_WaitOnTXEFlagUntilTimeout>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00d      	beq.n	8008adc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	d107      	bne.n	8008ad8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ad6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e035      	b.n	8008b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008aea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 f8d3 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00d      	beq.n	8008b20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b12:	d103      	bne.n	8008b1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e013      	b.n	8008b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008b20:	897b      	ldrh	r3, [r7, #10]
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	f043 0301 	orr.w	r3, r3, #1
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	6a3a      	ldr	r2, [r7, #32]
 8008b34:	4906      	ldr	r1, [pc, #24]	; (8008b50 <I2C_RequestMemoryRead+0x1cc>)
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 f90b 	bl	8008d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e000      	b.n	8008b48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	00010002 	.word	0x00010002

08008b54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b6c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008b6e:	4b4b      	ldr	r3, [pc, #300]	; (8008c9c <I2C_DMAAbort+0x148>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	08db      	lsrs	r3, r3, #3
 8008b74:	4a4a      	ldr	r2, [pc, #296]	; (8008ca0 <I2C_DMAAbort+0x14c>)
 8008b76:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7a:	0a1a      	lsrs	r2, r3, #8
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	00da      	lsls	r2, r3, #3
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d106      	bne.n	8008b9c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b92:	f043 0220 	orr.w	r2, r3, #32
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008b9a:	e00a      	b.n	8008bb2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bb0:	d0ea      	beq.n	8008b88 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bce:	2200      	movs	r2, #0
 8008bd0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008be0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2200      	movs	r2, #0
 8008be6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d003      	beq.n	8008c08 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c04:	2200      	movs	r2, #0
 8008c06:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 0201 	bic.w	r2, r2, #1
 8008c16:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b60      	cmp	r3, #96	; 0x60
 8008c22:	d10e      	bne.n	8008c42 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2200      	movs	r2, #0
 8008c38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008c3a:	6978      	ldr	r0, [r7, #20]
 8008c3c:	f7fe fca6 	bl	800758c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008c40:	e027      	b.n	8008c92 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c42:	7cfb      	ldrb	r3, [r7, #19]
 8008c44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008c48:	2b28      	cmp	r3, #40	; 0x28
 8008c4a:	d117      	bne.n	8008c7c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f042 0201 	orr.w	r2, r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2228      	movs	r2, #40	; 0x28
 8008c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008c7a:	e007      	b.n	8008c8c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008c8c:	6978      	ldr	r0, [r7, #20]
 8008c8e:	f7fe fc73 	bl	8007578 <HAL_I2C_ErrorCallback>
}
 8008c92:	bf00      	nop
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000054 	.word	0x20000054
 8008ca0:	14f8b589 	.word	0x14f8b589

08008ca4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	603b      	str	r3, [r7, #0]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cb4:	e025      	b.n	8008d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbc:	d021      	beq.n	8008d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cbe:	f7fc fde7 	bl	8005890 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d302      	bcc.n	8008cd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d116      	bne.n	8008d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2220      	movs	r2, #32
 8008cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	f043 0220 	orr.w	r2, r3, #32
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e023      	b.n	8008d4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	0c1b      	lsrs	r3, r3, #16
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d10d      	bne.n	8008d28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	43da      	mvns	r2, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	4013      	ands	r3, r2
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	bf0c      	ite	eq
 8008d1e:	2301      	moveq	r3, #1
 8008d20:	2300      	movne	r3, #0
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	461a      	mov	r2, r3
 8008d26:	e00c      	b.n	8008d42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	43da      	mvns	r2, r3
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	4013      	ands	r3, r2
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	bf0c      	ite	eq
 8008d3a:	2301      	moveq	r3, #1
 8008d3c:	2300      	movne	r3, #0
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	461a      	mov	r2, r3
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d0b6      	beq.n	8008cb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	60f8      	str	r0, [r7, #12]
 8008d5a:	60b9      	str	r1, [r7, #8]
 8008d5c:	607a      	str	r2, [r7, #4]
 8008d5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d60:	e051      	b.n	8008e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d70:	d123      	bne.n	8008dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2220      	movs	r2, #32
 8008d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da6:	f043 0204 	orr.w	r2, r3, #4
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e046      	b.n	8008e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc0:	d021      	beq.n	8008e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc2:	f7fc fd65 	bl	8005890 <HAL_GetTick>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d302      	bcc.n	8008dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d116      	bne.n	8008e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df2:	f043 0220 	orr.w	r2, r3, #32
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e020      	b.n	8008e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	0c1b      	lsrs	r3, r3, #16
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d10c      	bne.n	8008e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	43da      	mvns	r2, r3
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	bf14      	ite	ne
 8008e22:	2301      	movne	r3, #1
 8008e24:	2300      	moveq	r3, #0
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	e00b      	b.n	8008e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	43da      	mvns	r2, r3
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	4013      	ands	r3, r2
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	bf14      	ite	ne
 8008e3c:	2301      	movne	r3, #1
 8008e3e:	2300      	moveq	r3, #0
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d18d      	bne.n	8008d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e5c:	e02d      	b.n	8008eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 f900 	bl	8009064 <I2C_IsAcknowledgeFailed>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e02d      	b.n	8008eca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e74:	d021      	beq.n	8008eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e76:	f7fc fd0b 	bl	8005890 <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d302      	bcc.n	8008e8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d116      	bne.n	8008eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2220      	movs	r2, #32
 8008e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea6:	f043 0220 	orr.w	r2, r3, #32
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e007      	b.n	8008eca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec4:	2b80      	cmp	r3, #128	; 0x80
 8008ec6:	d1ca      	bne.n	8008e5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ede:	e02d      	b.n	8008f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 f8bf 	bl	8009064 <I2C_IsAcknowledgeFailed>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e02d      	b.n	8008f4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef6:	d021      	beq.n	8008f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ef8:	f7fc fcca 	bl	8005890 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d302      	bcc.n	8008f0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d116      	bne.n	8008f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f28:	f043 0220 	orr.w	r2, r3, #32
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e007      	b.n	8008f4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	f003 0304 	and.w	r3, r3, #4
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	d1ca      	bne.n	8008ee0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008f60:	4b13      	ldr	r3, [pc, #76]	; (8008fb0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	08db      	lsrs	r3, r3, #3
 8008f66:	4a13      	ldr	r2, [pc, #76]	; (8008fb4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008f68:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6c:	0a1a      	lsrs	r2, r3, #8
 8008f6e:	4613      	mov	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d107      	bne.n	8008f92 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f86:	f043 0220 	orr.w	r2, r3, #32
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e008      	b.n	8008fa4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fa0:	d0e9      	beq.n	8008f76 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	20000054 	.word	0x20000054
 8008fb4:	14f8b589 	.word	0x14f8b589

08008fb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008fc4:	e042      	b.n	800904c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b10      	cmp	r3, #16
 8008fd2:	d119      	bne.n	8009008 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f06f 0210 	mvn.w	r2, #16
 8008fdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e029      	b.n	800905c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009008:	f7fc fc42 	bl	8005890 <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	429a      	cmp	r2, r3
 8009016:	d302      	bcc.n	800901e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d116      	bne.n	800904c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2220      	movs	r2, #32
 8009028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009038:	f043 0220 	orr.w	r2, r3, #32
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e007      	b.n	800905c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009056:	2b40      	cmp	r3, #64	; 0x40
 8009058:	d1b5      	bne.n	8008fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800907a:	d11b      	bne.n	80090b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009084:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2220      	movs	r2, #32
 8009090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a0:	f043 0204 	orr.w	r2, r3, #4
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e000      	b.n	80090b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b083      	sub	sp, #12
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ce:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80090d2:	d103      	bne.n	80090dc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80090da:	e007      	b.n	80090ec <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80090e4:	d102      	bne.n	80090ec <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2208      	movs	r2, #8
 80090ea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e264      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d075      	beq.n	8009202 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009116:	4ba3      	ldr	r3, [pc, #652]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f003 030c 	and.w	r3, r3, #12
 800911e:	2b04      	cmp	r3, #4
 8009120:	d00c      	beq.n	800913c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009122:	4ba0      	ldr	r3, [pc, #640]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800912a:	2b08      	cmp	r3, #8
 800912c:	d112      	bne.n	8009154 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800912e:	4b9d      	ldr	r3, [pc, #628]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800913a:	d10b      	bne.n	8009154 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800913c:	4b99      	ldr	r3, [pc, #612]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d05b      	beq.n	8009200 <HAL_RCC_OscConfig+0x108>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d157      	bne.n	8009200 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e23f      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800915c:	d106      	bne.n	800916c <HAL_RCC_OscConfig+0x74>
 800915e:	4b91      	ldr	r3, [pc, #580]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a90      	ldr	r2, [pc, #576]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	e01d      	b.n	80091a8 <HAL_RCC_OscConfig+0xb0>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009174:	d10c      	bne.n	8009190 <HAL_RCC_OscConfig+0x98>
 8009176:	4b8b      	ldr	r3, [pc, #556]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a8a      	ldr	r2, [pc, #552]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800917c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	4b88      	ldr	r3, [pc, #544]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a87      	ldr	r2, [pc, #540]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800918c:	6013      	str	r3, [r2, #0]
 800918e:	e00b      	b.n	80091a8 <HAL_RCC_OscConfig+0xb0>
 8009190:	4b84      	ldr	r3, [pc, #528]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a83      	ldr	r2, [pc, #524]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800919a:	6013      	str	r3, [r2, #0]
 800919c:	4b81      	ldr	r3, [pc, #516]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a80      	ldr	r2, [pc, #512]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 80091a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d013      	beq.n	80091d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091b0:	f7fc fb6e 	bl	8005890 <HAL_GetTick>
 80091b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091b6:	e008      	b.n	80091ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091b8:	f7fc fb6a 	bl	8005890 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b64      	cmp	r3, #100	; 0x64
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e204      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091ca:	4b76      	ldr	r3, [pc, #472]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0f0      	beq.n	80091b8 <HAL_RCC_OscConfig+0xc0>
 80091d6:	e014      	b.n	8009202 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091d8:	f7fc fb5a 	bl	8005890 <HAL_GetTick>
 80091dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091de:	e008      	b.n	80091f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091e0:	f7fc fb56 	bl	8005890 <HAL_GetTick>
 80091e4:	4602      	mov	r2, r0
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	2b64      	cmp	r3, #100	; 0x64
 80091ec:	d901      	bls.n	80091f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e1f0      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091f2:	4b6c      	ldr	r3, [pc, #432]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1f0      	bne.n	80091e0 <HAL_RCC_OscConfig+0xe8>
 80091fe:	e000      	b.n	8009202 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	2b00      	cmp	r3, #0
 800920c:	d063      	beq.n	80092d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800920e:	4b65      	ldr	r3, [pc, #404]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f003 030c 	and.w	r3, r3, #12
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00b      	beq.n	8009232 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800921a:	4b62      	ldr	r3, [pc, #392]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009222:	2b08      	cmp	r3, #8
 8009224:	d11c      	bne.n	8009260 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009226:	4b5f      	ldr	r3, [pc, #380]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d116      	bne.n	8009260 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009232:	4b5c      	ldr	r3, [pc, #368]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0302 	and.w	r3, r3, #2
 800923a:	2b00      	cmp	r3, #0
 800923c:	d005      	beq.n	800924a <HAL_RCC_OscConfig+0x152>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d001      	beq.n	800924a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e1c4      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800924a:	4b56      	ldr	r3, [pc, #344]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	00db      	lsls	r3, r3, #3
 8009258:	4952      	ldr	r1, [pc, #328]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800925a:	4313      	orrs	r3, r2
 800925c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800925e:	e03a      	b.n	80092d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d020      	beq.n	80092aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009268:	4b4f      	ldr	r3, [pc, #316]	; (80093a8 <HAL_RCC_OscConfig+0x2b0>)
 800926a:	2201      	movs	r2, #1
 800926c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800926e:	f7fc fb0f 	bl	8005890 <HAL_GetTick>
 8009272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009274:	e008      	b.n	8009288 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009276:	f7fc fb0b 	bl	8005890 <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	2b02      	cmp	r3, #2
 8009282:	d901      	bls.n	8009288 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e1a5      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009288:	4b46      	ldr	r3, [pc, #280]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d0f0      	beq.n	8009276 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009294:	4b43      	ldr	r3, [pc, #268]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	00db      	lsls	r3, r3, #3
 80092a2:	4940      	ldr	r1, [pc, #256]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	600b      	str	r3, [r1, #0]
 80092a8:	e015      	b.n	80092d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092aa:	4b3f      	ldr	r3, [pc, #252]	; (80093a8 <HAL_RCC_OscConfig+0x2b0>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b0:	f7fc faee 	bl	8005890 <HAL_GetTick>
 80092b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092b6:	e008      	b.n	80092ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092b8:	f7fc faea 	bl	8005890 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d901      	bls.n	80092ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e184      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092ca:	4b36      	ldr	r3, [pc, #216]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1f0      	bne.n	80092b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0308 	and.w	r3, r3, #8
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d030      	beq.n	8009344 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d016      	beq.n	8009318 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092ea:	4b30      	ldr	r3, [pc, #192]	; (80093ac <HAL_RCC_OscConfig+0x2b4>)
 80092ec:	2201      	movs	r2, #1
 80092ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092f0:	f7fc face 	bl	8005890 <HAL_GetTick>
 80092f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092f6:	e008      	b.n	800930a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092f8:	f7fc faca 	bl	8005890 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	2b02      	cmp	r3, #2
 8009304:	d901      	bls.n	800930a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e164      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800930a:	4b26      	ldr	r3, [pc, #152]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800930c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800930e:	f003 0302 	and.w	r3, r3, #2
 8009312:	2b00      	cmp	r3, #0
 8009314:	d0f0      	beq.n	80092f8 <HAL_RCC_OscConfig+0x200>
 8009316:	e015      	b.n	8009344 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009318:	4b24      	ldr	r3, [pc, #144]	; (80093ac <HAL_RCC_OscConfig+0x2b4>)
 800931a:	2200      	movs	r2, #0
 800931c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800931e:	f7fc fab7 	bl	8005890 <HAL_GetTick>
 8009322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009324:	e008      	b.n	8009338 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009326:	f7fc fab3 	bl	8005890 <HAL_GetTick>
 800932a:	4602      	mov	r2, r0
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	2b02      	cmp	r3, #2
 8009332:	d901      	bls.n	8009338 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009334:	2303      	movs	r3, #3
 8009336:	e14d      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009338:	4b1a      	ldr	r3, [pc, #104]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800933a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1f0      	bne.n	8009326 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 80a0 	beq.w	8009492 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009352:	2300      	movs	r3, #0
 8009354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009356:	4b13      	ldr	r3, [pc, #76]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10f      	bne.n	8009382 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009362:	2300      	movs	r3, #0
 8009364:	60bb      	str	r3, [r7, #8]
 8009366:	4b0f      	ldr	r3, [pc, #60]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936a:	4a0e      	ldr	r2, [pc, #56]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800936c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009370:	6413      	str	r3, [r2, #64]	; 0x40
 8009372:	4b0c      	ldr	r3, [pc, #48]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800937a:	60bb      	str	r3, [r7, #8]
 800937c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800937e:	2301      	movs	r3, #1
 8009380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009382:	4b0b      	ldr	r3, [pc, #44]	; (80093b0 <HAL_RCC_OscConfig+0x2b8>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800938a:	2b00      	cmp	r3, #0
 800938c:	d121      	bne.n	80093d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800938e:	4b08      	ldr	r3, [pc, #32]	; (80093b0 <HAL_RCC_OscConfig+0x2b8>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a07      	ldr	r2, [pc, #28]	; (80093b0 <HAL_RCC_OscConfig+0x2b8>)
 8009394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800939a:	f7fc fa79 	bl	8005890 <HAL_GetTick>
 800939e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093a0:	e011      	b.n	80093c6 <HAL_RCC_OscConfig+0x2ce>
 80093a2:	bf00      	nop
 80093a4:	40023800 	.word	0x40023800
 80093a8:	42470000 	.word	0x42470000
 80093ac:	42470e80 	.word	0x42470e80
 80093b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093b4:	f7fc fa6c 	bl	8005890 <HAL_GetTick>
 80093b8:	4602      	mov	r2, r0
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d901      	bls.n	80093c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e106      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093c6:	4b85      	ldr	r3, [pc, #532]	; (80095dc <HAL_RCC_OscConfig+0x4e4>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0f0      	beq.n	80093b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d106      	bne.n	80093e8 <HAL_RCC_OscConfig+0x2f0>
 80093da:	4b81      	ldr	r3, [pc, #516]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 80093dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093de:	4a80      	ldr	r2, [pc, #512]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 80093e0:	f043 0301 	orr.w	r3, r3, #1
 80093e4:	6713      	str	r3, [r2, #112]	; 0x70
 80093e6:	e01c      	b.n	8009422 <HAL_RCC_OscConfig+0x32a>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	2b05      	cmp	r3, #5
 80093ee:	d10c      	bne.n	800940a <HAL_RCC_OscConfig+0x312>
 80093f0:	4b7b      	ldr	r3, [pc, #492]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 80093f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f4:	4a7a      	ldr	r2, [pc, #488]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 80093f6:	f043 0304 	orr.w	r3, r3, #4
 80093fa:	6713      	str	r3, [r2, #112]	; 0x70
 80093fc:	4b78      	ldr	r3, [pc, #480]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 80093fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009400:	4a77      	ldr	r2, [pc, #476]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 8009402:	f043 0301 	orr.w	r3, r3, #1
 8009406:	6713      	str	r3, [r2, #112]	; 0x70
 8009408:	e00b      	b.n	8009422 <HAL_RCC_OscConfig+0x32a>
 800940a:	4b75      	ldr	r3, [pc, #468]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 800940c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800940e:	4a74      	ldr	r2, [pc, #464]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 8009410:	f023 0301 	bic.w	r3, r3, #1
 8009414:	6713      	str	r3, [r2, #112]	; 0x70
 8009416:	4b72      	ldr	r3, [pc, #456]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 8009418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800941a:	4a71      	ldr	r2, [pc, #452]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 800941c:	f023 0304 	bic.w	r3, r3, #4
 8009420:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d015      	beq.n	8009456 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800942a:	f7fc fa31 	bl	8005890 <HAL_GetTick>
 800942e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009430:	e00a      	b.n	8009448 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009432:	f7fc fa2d 	bl	8005890 <HAL_GetTick>
 8009436:	4602      	mov	r2, r0
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009440:	4293      	cmp	r3, r2
 8009442:	d901      	bls.n	8009448 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	e0c5      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009448:	4b65      	ldr	r3, [pc, #404]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 800944a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800944c:	f003 0302 	and.w	r3, r3, #2
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0ee      	beq.n	8009432 <HAL_RCC_OscConfig+0x33a>
 8009454:	e014      	b.n	8009480 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009456:	f7fc fa1b 	bl	8005890 <HAL_GetTick>
 800945a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800945c:	e00a      	b.n	8009474 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800945e:	f7fc fa17 	bl	8005890 <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	f241 3288 	movw	r2, #5000	; 0x1388
 800946c:	4293      	cmp	r3, r2
 800946e:	d901      	bls.n	8009474 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e0af      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009474:	4b5a      	ldr	r3, [pc, #360]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 8009476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009478:	f003 0302 	and.w	r3, r3, #2
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1ee      	bne.n	800945e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009480:	7dfb      	ldrb	r3, [r7, #23]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d105      	bne.n	8009492 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009486:	4b56      	ldr	r3, [pc, #344]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 8009488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948a:	4a55      	ldr	r2, [pc, #340]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 800948c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009490:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 809b 	beq.w	80095d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800949c:	4b50      	ldr	r3, [pc, #320]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f003 030c 	and.w	r3, r3, #12
 80094a4:	2b08      	cmp	r3, #8
 80094a6:	d05c      	beq.n	8009562 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d141      	bne.n	8009534 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094b0:	4b4c      	ldr	r3, [pc, #304]	; (80095e4 <HAL_RCC_OscConfig+0x4ec>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094b6:	f7fc f9eb 	bl	8005890 <HAL_GetTick>
 80094ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094bc:	e008      	b.n	80094d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094be:	f7fc f9e7 	bl	8005890 <HAL_GetTick>
 80094c2:	4602      	mov	r2, r0
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d901      	bls.n	80094d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e081      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094d0:	4b43      	ldr	r3, [pc, #268]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1f0      	bne.n	80094be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	69da      	ldr	r2, [r3, #28]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	431a      	orrs	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ea:	019b      	lsls	r3, r3, #6
 80094ec:	431a      	orrs	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f2:	085b      	lsrs	r3, r3, #1
 80094f4:	3b01      	subs	r3, #1
 80094f6:	041b      	lsls	r3, r3, #16
 80094f8:	431a      	orrs	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fe:	061b      	lsls	r3, r3, #24
 8009500:	4937      	ldr	r1, [pc, #220]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 8009502:	4313      	orrs	r3, r2
 8009504:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009506:	4b37      	ldr	r3, [pc, #220]	; (80095e4 <HAL_RCC_OscConfig+0x4ec>)
 8009508:	2201      	movs	r2, #1
 800950a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800950c:	f7fc f9c0 	bl	8005890 <HAL_GetTick>
 8009510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009512:	e008      	b.n	8009526 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009514:	f7fc f9bc 	bl	8005890 <HAL_GetTick>
 8009518:	4602      	mov	r2, r0
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	2b02      	cmp	r3, #2
 8009520:	d901      	bls.n	8009526 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e056      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009526:	4b2e      	ldr	r3, [pc, #184]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0f0      	beq.n	8009514 <HAL_RCC_OscConfig+0x41c>
 8009532:	e04e      	b.n	80095d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009534:	4b2b      	ldr	r3, [pc, #172]	; (80095e4 <HAL_RCC_OscConfig+0x4ec>)
 8009536:	2200      	movs	r2, #0
 8009538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800953a:	f7fc f9a9 	bl	8005890 <HAL_GetTick>
 800953e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009540:	e008      	b.n	8009554 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009542:	f7fc f9a5 	bl	8005890 <HAL_GetTick>
 8009546:	4602      	mov	r2, r0
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	2b02      	cmp	r3, #2
 800954e:	d901      	bls.n	8009554 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e03f      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009554:	4b22      	ldr	r3, [pc, #136]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1f0      	bne.n	8009542 <HAL_RCC_OscConfig+0x44a>
 8009560:	e037      	b.n	80095d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d101      	bne.n	800956e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e032      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800956e:	4b1c      	ldr	r3, [pc, #112]	; (80095e0 <HAL_RCC_OscConfig+0x4e8>)
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d028      	beq.n	80095ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009586:	429a      	cmp	r2, r3
 8009588:	d121      	bne.n	80095ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009594:	429a      	cmp	r2, r3
 8009596:	d11a      	bne.n	80095ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800959e:	4013      	ands	r3, r2
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80095a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d111      	bne.n	80095ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b4:	085b      	lsrs	r3, r3, #1
 80095b6:	3b01      	subs	r3, #1
 80095b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d107      	bne.n	80095ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d001      	beq.n	80095d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e000      	b.n	80095d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	40007000 	.word	0x40007000
 80095e0:	40023800 	.word	0x40023800
 80095e4:	42470060 	.word	0x42470060

080095e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e0cc      	b.n	8009796 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80095fc:	4b68      	ldr	r3, [pc, #416]	; (80097a0 <HAL_RCC_ClockConfig+0x1b8>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 0307 	and.w	r3, r3, #7
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d90c      	bls.n	8009624 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800960a:	4b65      	ldr	r3, [pc, #404]	; (80097a0 <HAL_RCC_ClockConfig+0x1b8>)
 800960c:	683a      	ldr	r2, [r7, #0]
 800960e:	b2d2      	uxtb	r2, r2
 8009610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009612:	4b63      	ldr	r3, [pc, #396]	; (80097a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	429a      	cmp	r2, r3
 800961e:	d001      	beq.n	8009624 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	e0b8      	b.n	8009796 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 0302 	and.w	r3, r3, #2
 800962c:	2b00      	cmp	r3, #0
 800962e:	d020      	beq.n	8009672 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0304 	and.w	r3, r3, #4
 8009638:	2b00      	cmp	r3, #0
 800963a:	d005      	beq.n	8009648 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800963c:	4b59      	ldr	r3, [pc, #356]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	4a58      	ldr	r2, [pc, #352]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009642:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009646:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 0308 	and.w	r3, r3, #8
 8009650:	2b00      	cmp	r3, #0
 8009652:	d005      	beq.n	8009660 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009654:	4b53      	ldr	r3, [pc, #332]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	4a52      	ldr	r2, [pc, #328]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 800965a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800965e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009660:	4b50      	ldr	r3, [pc, #320]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	494d      	ldr	r1, [pc, #308]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 800966e:	4313      	orrs	r3, r2
 8009670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	2b00      	cmp	r3, #0
 800967c:	d044      	beq.n	8009708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d107      	bne.n	8009696 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009686:	4b47      	ldr	r3, [pc, #284]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d119      	bne.n	80096c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e07f      	b.n	8009796 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	2b02      	cmp	r3, #2
 800969c:	d003      	beq.n	80096a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d107      	bne.n	80096b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096a6:	4b3f      	ldr	r3, [pc, #252]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d109      	bne.n	80096c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e06f      	b.n	8009796 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096b6:	4b3b      	ldr	r3, [pc, #236]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e067      	b.n	8009796 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096c6:	4b37      	ldr	r3, [pc, #220]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f023 0203 	bic.w	r2, r3, #3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	4934      	ldr	r1, [pc, #208]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80096d8:	f7fc f8da 	bl	8005890 <HAL_GetTick>
 80096dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096de:	e00a      	b.n	80096f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096e0:	f7fc f8d6 	bl	8005890 <HAL_GetTick>
 80096e4:	4602      	mov	r2, r0
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d901      	bls.n	80096f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e04f      	b.n	8009796 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096f6:	4b2b      	ldr	r3, [pc, #172]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	f003 020c 	and.w	r2, r3, #12
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	429a      	cmp	r2, r3
 8009706:	d1eb      	bne.n	80096e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009708:	4b25      	ldr	r3, [pc, #148]	; (80097a0 <HAL_RCC_ClockConfig+0x1b8>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 0307 	and.w	r3, r3, #7
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	429a      	cmp	r2, r3
 8009714:	d20c      	bcs.n	8009730 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009716:	4b22      	ldr	r3, [pc, #136]	; (80097a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	b2d2      	uxtb	r2, r2
 800971c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800971e:	4b20      	ldr	r3, [pc, #128]	; (80097a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0307 	and.w	r3, r3, #7
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	429a      	cmp	r2, r3
 800972a:	d001      	beq.n	8009730 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e032      	b.n	8009796 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	2b00      	cmp	r3, #0
 800973a:	d008      	beq.n	800974e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800973c:	4b19      	ldr	r3, [pc, #100]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	4916      	ldr	r1, [pc, #88]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 800974a:	4313      	orrs	r3, r2
 800974c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0308 	and.w	r3, r3, #8
 8009756:	2b00      	cmp	r3, #0
 8009758:	d009      	beq.n	800976e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800975a:	4b12      	ldr	r3, [pc, #72]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	00db      	lsls	r3, r3, #3
 8009768:	490e      	ldr	r1, [pc, #56]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 800976a:	4313      	orrs	r3, r2
 800976c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800976e:	f000 f821 	bl	80097b4 <HAL_RCC_GetSysClockFreq>
 8009772:	4602      	mov	r2, r0
 8009774:	4b0b      	ldr	r3, [pc, #44]	; (80097a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	091b      	lsrs	r3, r3, #4
 800977a:	f003 030f 	and.w	r3, r3, #15
 800977e:	490a      	ldr	r1, [pc, #40]	; (80097a8 <HAL_RCC_ClockConfig+0x1c0>)
 8009780:	5ccb      	ldrb	r3, [r1, r3]
 8009782:	fa22 f303 	lsr.w	r3, r2, r3
 8009786:	4a09      	ldr	r2, [pc, #36]	; (80097ac <HAL_RCC_ClockConfig+0x1c4>)
 8009788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800978a:	4b09      	ldr	r3, [pc, #36]	; (80097b0 <HAL_RCC_ClockConfig+0x1c8>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4618      	mov	r0, r3
 8009790:	f7fc f83a 	bl	8005808 <HAL_InitTick>

  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	40023c00 	.word	0x40023c00
 80097a4:	40023800 	.word	0x40023800
 80097a8:	08013324 	.word	0x08013324
 80097ac:	20000054 	.word	0x20000054
 80097b0:	20000058 	.word	0x20000058

080097b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097b4:	b5b0      	push	{r4, r5, r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80097ba:	2100      	movs	r1, #0
 80097bc:	6079      	str	r1, [r7, #4]
 80097be:	2100      	movs	r1, #0
 80097c0:	60f9      	str	r1, [r7, #12]
 80097c2:	2100      	movs	r1, #0
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80097c6:	2100      	movs	r1, #0
 80097c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097ca:	4952      	ldr	r1, [pc, #328]	; (8009914 <HAL_RCC_GetSysClockFreq+0x160>)
 80097cc:	6889      	ldr	r1, [r1, #8]
 80097ce:	f001 010c 	and.w	r1, r1, #12
 80097d2:	2908      	cmp	r1, #8
 80097d4:	d00d      	beq.n	80097f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80097d6:	2908      	cmp	r1, #8
 80097d8:	f200 8094 	bhi.w	8009904 <HAL_RCC_GetSysClockFreq+0x150>
 80097dc:	2900      	cmp	r1, #0
 80097de:	d002      	beq.n	80097e6 <HAL_RCC_GetSysClockFreq+0x32>
 80097e0:	2904      	cmp	r1, #4
 80097e2:	d003      	beq.n	80097ec <HAL_RCC_GetSysClockFreq+0x38>
 80097e4:	e08e      	b.n	8009904 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80097e6:	4b4c      	ldr	r3, [pc, #304]	; (8009918 <HAL_RCC_GetSysClockFreq+0x164>)
 80097e8:	60bb      	str	r3, [r7, #8]
       break;
 80097ea:	e08e      	b.n	800990a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80097ec:	4b4b      	ldr	r3, [pc, #300]	; (800991c <HAL_RCC_GetSysClockFreq+0x168>)
 80097ee:	60bb      	str	r3, [r7, #8]
      break;
 80097f0:	e08b      	b.n	800990a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80097f2:	4948      	ldr	r1, [pc, #288]	; (8009914 <HAL_RCC_GetSysClockFreq+0x160>)
 80097f4:	6849      	ldr	r1, [r1, #4]
 80097f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80097fa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80097fc:	4945      	ldr	r1, [pc, #276]	; (8009914 <HAL_RCC_GetSysClockFreq+0x160>)
 80097fe:	6849      	ldr	r1, [r1, #4]
 8009800:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009804:	2900      	cmp	r1, #0
 8009806:	d024      	beq.n	8009852 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009808:	4942      	ldr	r1, [pc, #264]	; (8009914 <HAL_RCC_GetSysClockFreq+0x160>)
 800980a:	6849      	ldr	r1, [r1, #4]
 800980c:	0989      	lsrs	r1, r1, #6
 800980e:	4608      	mov	r0, r1
 8009810:	f04f 0100 	mov.w	r1, #0
 8009814:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009818:	f04f 0500 	mov.w	r5, #0
 800981c:	ea00 0204 	and.w	r2, r0, r4
 8009820:	ea01 0305 	and.w	r3, r1, r5
 8009824:	493d      	ldr	r1, [pc, #244]	; (800991c <HAL_RCC_GetSysClockFreq+0x168>)
 8009826:	fb01 f003 	mul.w	r0, r1, r3
 800982a:	2100      	movs	r1, #0
 800982c:	fb01 f102 	mul.w	r1, r1, r2
 8009830:	1844      	adds	r4, r0, r1
 8009832:	493a      	ldr	r1, [pc, #232]	; (800991c <HAL_RCC_GetSysClockFreq+0x168>)
 8009834:	fba2 0101 	umull	r0, r1, r2, r1
 8009838:	1863      	adds	r3, r4, r1
 800983a:	4619      	mov	r1, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	461a      	mov	r2, r3
 8009840:	f04f 0300 	mov.w	r3, #0
 8009844:	f7f7 fa78 	bl	8000d38 <__aeabi_uldivmod>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4613      	mov	r3, r2
 800984e:	60fb      	str	r3, [r7, #12]
 8009850:	e04a      	b.n	80098e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009852:	4b30      	ldr	r3, [pc, #192]	; (8009914 <HAL_RCC_GetSysClockFreq+0x160>)
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	099b      	lsrs	r3, r3, #6
 8009858:	461a      	mov	r2, r3
 800985a:	f04f 0300 	mov.w	r3, #0
 800985e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009862:	f04f 0100 	mov.w	r1, #0
 8009866:	ea02 0400 	and.w	r4, r2, r0
 800986a:	ea03 0501 	and.w	r5, r3, r1
 800986e:	4620      	mov	r0, r4
 8009870:	4629      	mov	r1, r5
 8009872:	f04f 0200 	mov.w	r2, #0
 8009876:	f04f 0300 	mov.w	r3, #0
 800987a:	014b      	lsls	r3, r1, #5
 800987c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009880:	0142      	lsls	r2, r0, #5
 8009882:	4610      	mov	r0, r2
 8009884:	4619      	mov	r1, r3
 8009886:	1b00      	subs	r0, r0, r4
 8009888:	eb61 0105 	sbc.w	r1, r1, r5
 800988c:	f04f 0200 	mov.w	r2, #0
 8009890:	f04f 0300 	mov.w	r3, #0
 8009894:	018b      	lsls	r3, r1, #6
 8009896:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800989a:	0182      	lsls	r2, r0, #6
 800989c:	1a12      	subs	r2, r2, r0
 800989e:	eb63 0301 	sbc.w	r3, r3, r1
 80098a2:	f04f 0000 	mov.w	r0, #0
 80098a6:	f04f 0100 	mov.w	r1, #0
 80098aa:	00d9      	lsls	r1, r3, #3
 80098ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098b0:	00d0      	lsls	r0, r2, #3
 80098b2:	4602      	mov	r2, r0
 80098b4:	460b      	mov	r3, r1
 80098b6:	1912      	adds	r2, r2, r4
 80098b8:	eb45 0303 	adc.w	r3, r5, r3
 80098bc:	f04f 0000 	mov.w	r0, #0
 80098c0:	f04f 0100 	mov.w	r1, #0
 80098c4:	0299      	lsls	r1, r3, #10
 80098c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80098ca:	0290      	lsls	r0, r2, #10
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4610      	mov	r0, r2
 80098d2:	4619      	mov	r1, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	461a      	mov	r2, r3
 80098d8:	f04f 0300 	mov.w	r3, #0
 80098dc:	f7f7 fa2c 	bl	8000d38 <__aeabi_uldivmod>
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	4613      	mov	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80098e8:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <HAL_RCC_GetSysClockFreq+0x160>)
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	0c1b      	lsrs	r3, r3, #16
 80098ee:	f003 0303 	and.w	r3, r3, #3
 80098f2:	3301      	adds	r3, #1
 80098f4:	005b      	lsls	r3, r3, #1
 80098f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009900:	60bb      	str	r3, [r7, #8]
      break;
 8009902:	e002      	b.n	800990a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009904:	4b04      	ldr	r3, [pc, #16]	; (8009918 <HAL_RCC_GetSysClockFreq+0x164>)
 8009906:	60bb      	str	r3, [r7, #8]
      break;
 8009908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800990a:	68bb      	ldr	r3, [r7, #8]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bdb0      	pop	{r4, r5, r7, pc}
 8009914:	40023800 	.word	0x40023800
 8009918:	00f42400 	.word	0x00f42400
 800991c:	017d7840 	.word	0x017d7840

08009920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009920:	b480      	push	{r7}
 8009922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009924:	4b03      	ldr	r3, [pc, #12]	; (8009934 <HAL_RCC_GetHCLKFreq+0x14>)
 8009926:	681b      	ldr	r3, [r3, #0]
}
 8009928:	4618      	mov	r0, r3
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	20000054 	.word	0x20000054

08009938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800993c:	f7ff fff0 	bl	8009920 <HAL_RCC_GetHCLKFreq>
 8009940:	4602      	mov	r2, r0
 8009942:	4b05      	ldr	r3, [pc, #20]	; (8009958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	0a9b      	lsrs	r3, r3, #10
 8009948:	f003 0307 	and.w	r3, r3, #7
 800994c:	4903      	ldr	r1, [pc, #12]	; (800995c <HAL_RCC_GetPCLK1Freq+0x24>)
 800994e:	5ccb      	ldrb	r3, [r1, r3]
 8009950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009954:	4618      	mov	r0, r3
 8009956:	bd80      	pop	{r7, pc}
 8009958:	40023800 	.word	0x40023800
 800995c:	08013334 	.word	0x08013334

08009960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009964:	f7ff ffdc 	bl	8009920 <HAL_RCC_GetHCLKFreq>
 8009968:	4602      	mov	r2, r0
 800996a:	4b05      	ldr	r3, [pc, #20]	; (8009980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	0b5b      	lsrs	r3, r3, #13
 8009970:	f003 0307 	and.w	r3, r3, #7
 8009974:	4903      	ldr	r1, [pc, #12]	; (8009984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009976:	5ccb      	ldrb	r3, [r1, r3]
 8009978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800997c:	4618      	mov	r0, r3
 800997e:	bd80      	pop	{r7, pc}
 8009980:	40023800 	.word	0x40023800
 8009984:	08013334 	.word	0x08013334

08009988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e041      	b.n	8009a1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d106      	bne.n	80099b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7fb fb90 	bl	80050d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2202      	movs	r2, #2
 80099b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3304      	adds	r3, #4
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f000 fe46 	bl	800a658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
	...

08009a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d001      	beq.n	8009a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e044      	b.n	8009aca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2202      	movs	r2, #2
 8009a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68da      	ldr	r2, [r3, #12]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f042 0201 	orr.w	r2, r2, #1
 8009a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a1e      	ldr	r2, [pc, #120]	; (8009ad8 <HAL_TIM_Base_Start_IT+0xb0>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d018      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x6c>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a6a:	d013      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x6c>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a1a      	ldr	r2, [pc, #104]	; (8009adc <HAL_TIM_Base_Start_IT+0xb4>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d00e      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x6c>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a19      	ldr	r2, [pc, #100]	; (8009ae0 <HAL_TIM_Base_Start_IT+0xb8>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d009      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x6c>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a17      	ldr	r2, [pc, #92]	; (8009ae4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d004      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x6c>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a16      	ldr	r2, [pc, #88]	; (8009ae8 <HAL_TIM_Base_Start_IT+0xc0>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d111      	bne.n	8009ab8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f003 0307 	and.w	r3, r3, #7
 8009a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2b06      	cmp	r3, #6
 8009aa4:	d010      	beq.n	8009ac8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f042 0201 	orr.w	r2, r2, #1
 8009ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ab6:	e007      	b.n	8009ac8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0201 	orr.w	r2, r2, #1
 8009ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	40010000 	.word	0x40010000
 8009adc:	40000400 	.word	0x40000400
 8009ae0:	40000800 	.word	0x40000800
 8009ae4:	40000c00 	.word	0x40000c00
 8009ae8:	40014000 	.word	0x40014000

08009aec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e041      	b.n	8009b82 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d106      	bne.n	8009b18 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f839 	bl	8009b8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3304      	adds	r3, #4
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	f000 fd94 	bl	800a658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b083      	sub	sp, #12
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009b92:	bf00      	nop
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
	...

08009ba0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
 8009bac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d104      	bne.n	8009bc2 <HAL_TIM_IC_Start_DMA+0x22>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	e013      	b.n	8009bea <HAL_TIM_IC_Start_DMA+0x4a>
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b04      	cmp	r3, #4
 8009bc6:	d104      	bne.n	8009bd2 <HAL_TIM_IC_Start_DMA+0x32>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	e00b      	b.n	8009bea <HAL_TIM_IC_Start_DMA+0x4a>
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b08      	cmp	r3, #8
 8009bd6:	d104      	bne.n	8009be2 <HAL_TIM_IC_Start_DMA+0x42>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	e003      	b.n	8009bea <HAL_TIM_IC_Start_DMA+0x4a>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d104      	bne.n	8009bfc <HAL_TIM_IC_Start_DMA+0x5c>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	e013      	b.n	8009c24 <HAL_TIM_IC_Start_DMA+0x84>
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	d104      	bne.n	8009c0c <HAL_TIM_IC_Start_DMA+0x6c>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	e00b      	b.n	8009c24 <HAL_TIM_IC_Start_DMA+0x84>
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2b08      	cmp	r3, #8
 8009c10:	d104      	bne.n	8009c1c <HAL_TIM_IC_Start_DMA+0x7c>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	e003      	b.n	8009c24 <HAL_TIM_IC_Start_DMA+0x84>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8009c26:	7dbb      	ldrb	r3, [r7, #22]
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d002      	beq.n	8009c32 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8009c2c:	7d7b      	ldrb	r3, [r7, #21]
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d101      	bne.n	8009c36 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8009c32:	2302      	movs	r3, #2
 8009c34:	e13c      	b.n	8009eb0 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8009c36:	7dbb      	ldrb	r3, [r7, #22]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d143      	bne.n	8009cc4 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8009c3c:	7d7b      	ldrb	r3, [r7, #21]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d140      	bne.n	8009cc4 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d104      	bne.n	8009c52 <HAL_TIM_IC_Start_DMA+0xb2>
 8009c48:	887b      	ldrh	r3, [r7, #2]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e12e      	b.n	8009eb0 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d104      	bne.n	8009c62 <HAL_TIM_IC_Start_DMA+0xc2>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c60:	e013      	b.n	8009c8a <HAL_TIM_IC_Start_DMA+0xea>
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	d104      	bne.n	8009c72 <HAL_TIM_IC_Start_DMA+0xd2>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c70:	e00b      	b.n	8009c8a <HAL_TIM_IC_Start_DMA+0xea>
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	2b08      	cmp	r3, #8
 8009c76:	d104      	bne.n	8009c82 <HAL_TIM_IC_Start_DMA+0xe2>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c80:	e003      	b.n	8009c8a <HAL_TIM_IC_Start_DMA+0xea>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2202      	movs	r2, #2
 8009c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d104      	bne.n	8009c9a <HAL_TIM_IC_Start_DMA+0xfa>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2202      	movs	r2, #2
 8009c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8009c98:	e016      	b.n	8009cc8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2b04      	cmp	r3, #4
 8009c9e:	d104      	bne.n	8009caa <HAL_TIM_IC_Start_DMA+0x10a>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8009ca8:	e00e      	b.n	8009cc8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2b08      	cmp	r3, #8
 8009cae:	d104      	bne.n	8009cba <HAL_TIM_IC_Start_DMA+0x11a>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8009cb8:	e006      	b.n	8009cc8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8009cc2:	e001      	b.n	8009cc8 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e0f3      	b.n	8009eb0 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 ff8b 	bl	800abec <TIM_CCxChannelCmd>
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2b0c      	cmp	r3, #12
 8009cda:	f200 80ad 	bhi.w	8009e38 <HAL_TIM_IC_Start_DMA+0x298>
 8009cde:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <HAL_TIM_IC_Start_DMA+0x144>)
 8009ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce4:	08009d19 	.word	0x08009d19
 8009ce8:	08009e39 	.word	0x08009e39
 8009cec:	08009e39 	.word	0x08009e39
 8009cf0:	08009e39 	.word	0x08009e39
 8009cf4:	08009d61 	.word	0x08009d61
 8009cf8:	08009e39 	.word	0x08009e39
 8009cfc:	08009e39 	.word	0x08009e39
 8009d00:	08009e39 	.word	0x08009e39
 8009d04:	08009da9 	.word	0x08009da9
 8009d08:	08009e39 	.word	0x08009e39
 8009d0c:	08009e39 	.word	0x08009e39
 8009d10:	08009e39 	.word	0x08009e39
 8009d14:	08009df1 	.word	0x08009df1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1c:	4a66      	ldr	r2, [pc, #408]	; (8009eb8 <HAL_TIM_IC_Start_DMA+0x318>)
 8009d1e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d24:	4a65      	ldr	r2, [pc, #404]	; (8009ebc <HAL_TIM_IC_Start_DMA+0x31c>)
 8009d26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2c:	4a64      	ldr	r2, [pc, #400]	; (8009ec0 <HAL_TIM_IC_Start_DMA+0x320>)
 8009d2e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	3334      	adds	r3, #52	; 0x34
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	887b      	ldrh	r3, [r7, #2]
 8009d40:	f7fb ff96 	bl	8005c70 <HAL_DMA_Start_IT>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e0b0      	b.n	8009eb0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d5c:	60da      	str	r2, [r3, #12]
      break;
 8009d5e:	e06e      	b.n	8009e3e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d64:	4a54      	ldr	r2, [pc, #336]	; (8009eb8 <HAL_TIM_IC_Start_DMA+0x318>)
 8009d66:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d6c:	4a53      	ldr	r2, [pc, #332]	; (8009ebc <HAL_TIM_IC_Start_DMA+0x31c>)
 8009d6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d74:	4a52      	ldr	r2, [pc, #328]	; (8009ec0 <HAL_TIM_IC_Start_DMA+0x320>)
 8009d76:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3338      	adds	r3, #56	; 0x38
 8009d82:	4619      	mov	r1, r3
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	887b      	ldrh	r3, [r7, #2]
 8009d88:	f7fb ff72 	bl	8005c70 <HAL_DMA_Start_IT>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e08c      	b.n	8009eb0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009da4:	60da      	str	r2, [r3, #12]
      break;
 8009da6:	e04a      	b.n	8009e3e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dac:	4a42      	ldr	r2, [pc, #264]	; (8009eb8 <HAL_TIM_IC_Start_DMA+0x318>)
 8009dae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db4:	4a41      	ldr	r2, [pc, #260]	; (8009ebc <HAL_TIM_IC_Start_DMA+0x31c>)
 8009db6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	4a40      	ldr	r2, [pc, #256]	; (8009ec0 <HAL_TIM_IC_Start_DMA+0x320>)
 8009dbe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	333c      	adds	r3, #60	; 0x3c
 8009dca:	4619      	mov	r1, r3
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	887b      	ldrh	r3, [r7, #2]
 8009dd0:	f7fb ff4e 	bl	8005c70 <HAL_DMA_Start_IT>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e068      	b.n	8009eb0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68da      	ldr	r2, [r3, #12]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dec:	60da      	str	r2, [r3, #12]
      break;
 8009dee:	e026      	b.n	8009e3e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df4:	4a30      	ldr	r2, [pc, #192]	; (8009eb8 <HAL_TIM_IC_Start_DMA+0x318>)
 8009df6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfc:	4a2f      	ldr	r2, [pc, #188]	; (8009ebc <HAL_TIM_IC_Start_DMA+0x31c>)
 8009dfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e04:	4a2e      	ldr	r2, [pc, #184]	; (8009ec0 <HAL_TIM_IC_Start_DMA+0x320>)
 8009e06:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	3340      	adds	r3, #64	; 0x40
 8009e12:	4619      	mov	r1, r3
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	887b      	ldrh	r3, [r7, #2]
 8009e18:	f7fb ff2a 	bl	8005c70 <HAL_DMA_Start_IT>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d001      	beq.n	8009e26 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e044      	b.n	8009eb0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68da      	ldr	r2, [r3, #12]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009e34:	60da      	str	r2, [r3, #12]
      break;
 8009e36:	e002      	b.n	8009e3e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e3c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a20      	ldr	r2, [pc, #128]	; (8009ec4 <HAL_TIM_IC_Start_DMA+0x324>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d018      	beq.n	8009e7a <HAL_TIM_IC_Start_DMA+0x2da>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e50:	d013      	beq.n	8009e7a <HAL_TIM_IC_Start_DMA+0x2da>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a1c      	ldr	r2, [pc, #112]	; (8009ec8 <HAL_TIM_IC_Start_DMA+0x328>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d00e      	beq.n	8009e7a <HAL_TIM_IC_Start_DMA+0x2da>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a1a      	ldr	r2, [pc, #104]	; (8009ecc <HAL_TIM_IC_Start_DMA+0x32c>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d009      	beq.n	8009e7a <HAL_TIM_IC_Start_DMA+0x2da>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a19      	ldr	r2, [pc, #100]	; (8009ed0 <HAL_TIM_IC_Start_DMA+0x330>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d004      	beq.n	8009e7a <HAL_TIM_IC_Start_DMA+0x2da>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a17      	ldr	r2, [pc, #92]	; (8009ed4 <HAL_TIM_IC_Start_DMA+0x334>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d111      	bne.n	8009e9e <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f003 0307 	and.w	r3, r3, #7
 8009e84:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	2b06      	cmp	r3, #6
 8009e8a:	d010      	beq.n	8009eae <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f042 0201 	orr.w	r2, r2, #1
 8009e9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e9c:	e007      	b.n	8009eae <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f042 0201 	orr.w	r2, r2, #1
 8009eac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8009eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	0800a529 	.word	0x0800a529
 8009ebc:	0800a5f1 	.word	0x0800a5f1
 8009ec0:	0800a497 	.word	0x0800a497
 8009ec4:	40010000 	.word	0x40010000
 8009ec8:	40000400 	.word	0x40000400
 8009ecc:	40000800 	.word	0x40000800
 8009ed0:	40000c00 	.word	0x40000c00
 8009ed4:	40014000 	.word	0x40014000

08009ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	f003 0302 	and.w	r3, r3, #2
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d122      	bne.n	8009f34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	f003 0302 	and.w	r3, r3, #2
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d11b      	bne.n	8009f34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f06f 0202 	mvn.w	r2, #2
 8009f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	f003 0303 	and.w	r3, r3, #3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d003      	beq.n	8009f22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7f9 ff10 	bl	8003d40 <HAL_TIM_IC_CaptureCallback>
 8009f20:	e005      	b.n	8009f2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fa85 	bl	800a432 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fa96 	bl	800a45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	f003 0304 	and.w	r3, r3, #4
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d122      	bne.n	8009f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	f003 0304 	and.w	r3, r3, #4
 8009f4c:	2b04      	cmp	r3, #4
 8009f4e:	d11b      	bne.n	8009f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f06f 0204 	mvn.w	r2, #4
 8009f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d003      	beq.n	8009f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7f9 fee6 	bl	8003d40 <HAL_TIM_IC_CaptureCallback>
 8009f74:	e005      	b.n	8009f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fa5b 	bl	800a432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fa6c 	bl	800a45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	f003 0308 	and.w	r3, r3, #8
 8009f92:	2b08      	cmp	r3, #8
 8009f94:	d122      	bne.n	8009fdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	f003 0308 	and.w	r3, r3, #8
 8009fa0:	2b08      	cmp	r3, #8
 8009fa2:	d11b      	bne.n	8009fdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f06f 0208 	mvn.w	r2, #8
 8009fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2204      	movs	r2, #4
 8009fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	69db      	ldr	r3, [r3, #28]
 8009fba:	f003 0303 	and.w	r3, r3, #3
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d003      	beq.n	8009fca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7f9 febc 	bl	8003d40 <HAL_TIM_IC_CaptureCallback>
 8009fc8:	e005      	b.n	8009fd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fa31 	bl	800a432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fa42 	bl	800a45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	f003 0310 	and.w	r3, r3, #16
 8009fe6:	2b10      	cmp	r3, #16
 8009fe8:	d122      	bne.n	800a030 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	f003 0310 	and.w	r3, r3, #16
 8009ff4:	2b10      	cmp	r3, #16
 8009ff6:	d11b      	bne.n	800a030 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f06f 0210 	mvn.w	r2, #16
 800a000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2208      	movs	r2, #8
 800a006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a012:	2b00      	cmp	r3, #0
 800a014:	d003      	beq.n	800a01e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7f9 fe92 	bl	8003d40 <HAL_TIM_IC_CaptureCallback>
 800a01c:	e005      	b.n	800a02a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fa07 	bl	800a432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fa18 	bl	800a45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	f003 0301 	and.w	r3, r3, #1
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d10e      	bne.n	800a05c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d107      	bne.n	800a05c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f06f 0201 	mvn.w	r2, #1
 800a054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7f8 ff02 	bl	8002e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a066:	2b80      	cmp	r3, #128	; 0x80
 800a068:	d10e      	bne.n	800a088 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a074:	2b80      	cmp	r3, #128	; 0x80
 800a076:	d107      	bne.n	800a088 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fe50 	bl	800ad28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a092:	2b40      	cmp	r3, #64	; 0x40
 800a094:	d10e      	bne.n	800a0b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a0:	2b40      	cmp	r3, #64	; 0x40
 800a0a2:	d107      	bne.n	800a0b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f9dd 	bl	800a46e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	f003 0320 	and.w	r3, r3, #32
 800a0be:	2b20      	cmp	r3, #32
 800a0c0:	d10e      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	f003 0320 	and.w	r3, r3, #32
 800a0cc:	2b20      	cmp	r3, #32
 800a0ce:	d107      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f06f 0220 	mvn.w	r2, #32
 800a0d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fe1a 	bl	800ad14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d101      	bne.n	800a106 <HAL_TIM_IC_ConfigChannel+0x1e>
 800a102:	2302      	movs	r3, #2
 800a104:	e088      	b.n	800a218 <HAL_TIM_IC_ConfigChannel+0x130>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d11b      	bne.n	800a14c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6818      	ldr	r0, [r3, #0]
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	6819      	ldr	r1, [r3, #0]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	f000 fbaa 	bl	800a87c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	699a      	ldr	r2, [r3, #24]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f022 020c 	bic.w	r2, r2, #12
 800a136:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6999      	ldr	r1, [r3, #24]
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	689a      	ldr	r2, [r3, #8]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	430a      	orrs	r2, r1
 800a148:	619a      	str	r2, [r3, #24]
 800a14a:	e060      	b.n	800a20e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b04      	cmp	r3, #4
 800a150:	d11c      	bne.n	800a18c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6818      	ldr	r0, [r3, #0]
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	6819      	ldr	r1, [r3, #0]
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	f000 fc22 	bl	800a9aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	699a      	ldr	r2, [r3, #24]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a174:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	6999      	ldr	r1, [r3, #24]
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	021a      	lsls	r2, r3, #8
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	619a      	str	r2, [r3, #24]
 800a18a:	e040      	b.n	800a20e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b08      	cmp	r3, #8
 800a190:	d11b      	bne.n	800a1ca <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6818      	ldr	r0, [r3, #0]
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	6819      	ldr	r1, [r3, #0]
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	f000 fc6f 	bl	800aa84 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	69da      	ldr	r2, [r3, #28]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f022 020c 	bic.w	r2, r2, #12
 800a1b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	69d9      	ldr	r1, [r3, #28]
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	689a      	ldr	r2, [r3, #8]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	61da      	str	r2, [r3, #28]
 800a1c8:	e021      	b.n	800a20e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b0c      	cmp	r3, #12
 800a1ce:	d11c      	bne.n	800a20a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6818      	ldr	r0, [r3, #0]
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	6819      	ldr	r1, [r3, #0]
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	f000 fc8c 	bl	800aafc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	69da      	ldr	r2, [r3, #28]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a1f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	69d9      	ldr	r1, [r3, #28]
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	021a      	lsls	r2, r3, #8
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	430a      	orrs	r2, r1
 800a206:	61da      	str	r2, [r3, #28]
 800a208:	e001      	b.n	800a20e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a216:	7dfb      	ldrb	r3, [r7, #23]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a234:	2b01      	cmp	r3, #1
 800a236:	d101      	bne.n	800a23c <HAL_TIM_ConfigClockSource+0x1c>
 800a238:	2302      	movs	r3, #2
 800a23a:	e0b4      	b.n	800a3a6 <HAL_TIM_ConfigClockSource+0x186>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a25a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a274:	d03e      	beq.n	800a2f4 <HAL_TIM_ConfigClockSource+0xd4>
 800a276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a27a:	f200 8087 	bhi.w	800a38c <HAL_TIM_ConfigClockSource+0x16c>
 800a27e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a282:	f000 8086 	beq.w	800a392 <HAL_TIM_ConfigClockSource+0x172>
 800a286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a28a:	d87f      	bhi.n	800a38c <HAL_TIM_ConfigClockSource+0x16c>
 800a28c:	2b70      	cmp	r3, #112	; 0x70
 800a28e:	d01a      	beq.n	800a2c6 <HAL_TIM_ConfigClockSource+0xa6>
 800a290:	2b70      	cmp	r3, #112	; 0x70
 800a292:	d87b      	bhi.n	800a38c <HAL_TIM_ConfigClockSource+0x16c>
 800a294:	2b60      	cmp	r3, #96	; 0x60
 800a296:	d050      	beq.n	800a33a <HAL_TIM_ConfigClockSource+0x11a>
 800a298:	2b60      	cmp	r3, #96	; 0x60
 800a29a:	d877      	bhi.n	800a38c <HAL_TIM_ConfigClockSource+0x16c>
 800a29c:	2b50      	cmp	r3, #80	; 0x50
 800a29e:	d03c      	beq.n	800a31a <HAL_TIM_ConfigClockSource+0xfa>
 800a2a0:	2b50      	cmp	r3, #80	; 0x50
 800a2a2:	d873      	bhi.n	800a38c <HAL_TIM_ConfigClockSource+0x16c>
 800a2a4:	2b40      	cmp	r3, #64	; 0x40
 800a2a6:	d058      	beq.n	800a35a <HAL_TIM_ConfigClockSource+0x13a>
 800a2a8:	2b40      	cmp	r3, #64	; 0x40
 800a2aa:	d86f      	bhi.n	800a38c <HAL_TIM_ConfigClockSource+0x16c>
 800a2ac:	2b30      	cmp	r3, #48	; 0x30
 800a2ae:	d064      	beq.n	800a37a <HAL_TIM_ConfigClockSource+0x15a>
 800a2b0:	2b30      	cmp	r3, #48	; 0x30
 800a2b2:	d86b      	bhi.n	800a38c <HAL_TIM_ConfigClockSource+0x16c>
 800a2b4:	2b20      	cmp	r3, #32
 800a2b6:	d060      	beq.n	800a37a <HAL_TIM_ConfigClockSource+0x15a>
 800a2b8:	2b20      	cmp	r3, #32
 800a2ba:	d867      	bhi.n	800a38c <HAL_TIM_ConfigClockSource+0x16c>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d05c      	beq.n	800a37a <HAL_TIM_ConfigClockSource+0x15a>
 800a2c0:	2b10      	cmp	r3, #16
 800a2c2:	d05a      	beq.n	800a37a <HAL_TIM_ConfigClockSource+0x15a>
 800a2c4:	e062      	b.n	800a38c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6818      	ldr	r0, [r3, #0]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	6899      	ldr	r1, [r3, #8]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	685a      	ldr	r2, [r3, #4]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	f000 fc69 	bl	800abac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a2e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	609a      	str	r2, [r3, #8]
      break;
 800a2f2:	e04f      	b.n	800a394 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6818      	ldr	r0, [r3, #0]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	6899      	ldr	r1, [r3, #8]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f000 fc52 	bl	800abac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	689a      	ldr	r2, [r3, #8]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a316:	609a      	str	r2, [r3, #8]
      break;
 800a318:	e03c      	b.n	800a394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6818      	ldr	r0, [r3, #0]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	6859      	ldr	r1, [r3, #4]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	461a      	mov	r2, r3
 800a328:	f000 fb10 	bl	800a94c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2150      	movs	r1, #80	; 0x50
 800a332:	4618      	mov	r0, r3
 800a334:	f000 fc1f 	bl	800ab76 <TIM_ITRx_SetConfig>
      break;
 800a338:	e02c      	b.n	800a394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6818      	ldr	r0, [r3, #0]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	6859      	ldr	r1, [r3, #4]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	461a      	mov	r2, r3
 800a348:	f000 fb6c 	bl	800aa24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2160      	movs	r1, #96	; 0x60
 800a352:	4618      	mov	r0, r3
 800a354:	f000 fc0f 	bl	800ab76 <TIM_ITRx_SetConfig>
      break;
 800a358:	e01c      	b.n	800a394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	6859      	ldr	r1, [r3, #4]
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	461a      	mov	r2, r3
 800a368:	f000 faf0 	bl	800a94c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2140      	movs	r1, #64	; 0x40
 800a372:	4618      	mov	r0, r3
 800a374:	f000 fbff 	bl	800ab76 <TIM_ITRx_SetConfig>
      break;
 800a378:	e00c      	b.n	800a394 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4619      	mov	r1, r3
 800a384:	4610      	mov	r0, r2
 800a386:	f000 fbf6 	bl	800ab76 <TIM_ITRx_SetConfig>
      break;
 800a38a:	e003      	b.n	800a394 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	73fb      	strb	r3, [r7, #15]
      break;
 800a390:	e000      	b.n	800a394 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b082      	sub	sp, #8
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d101      	bne.n	800a3c6 <HAL_TIM_SlaveConfigSynchro+0x18>
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	e031      	b.n	800a42a <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f9bd 	bl	800a758 <TIM_SlaveTimer_SetConfig>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d009      	beq.n	800a3f8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e018      	b.n	800a42a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68da      	ldr	r2, [r3, #12]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a406:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68da      	ldr	r2, [r3, #12]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a416:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a432:	b480      	push	{r7}
 800a434:	b083      	sub	sp, #12
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a43a:	bf00      	nop
 800a43c:	370c      	adds	r7, #12
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr

0800a446 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a446:	b480      	push	{r7}
 800a448:	b083      	sub	sp, #12
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a44e:	bf00      	nop
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a45a:	b480      	push	{r7}
 800a45c:	b083      	sub	sp, #12
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a462:	bf00      	nop
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a46e:	b480      	push	{r7}
 800a470:	b083      	sub	sp, #12
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a476:	bf00      	nop
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a482:	b480      	push	{r7}
 800a484:	b083      	sub	sp, #12
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a48a:	bf00      	nop
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b084      	sub	sp, #16
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d107      	bne.n	800a4be <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4bc:	e02a      	b.n	800a514 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d107      	bne.n	800a4d8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4d6:	e01d      	b.n	800a514 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d107      	bne.n	800a4f2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2204      	movs	r2, #4
 800a4e6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4f0:	e010      	b.n	800a514 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d107      	bne.n	800a50c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2208      	movs	r2, #8
 800a500:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a50a:	e003      	b.n	800a514 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f7ff ffb4 	bl	800a482 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2200      	movs	r2, #0
 800a51e:	771a      	strb	r2, [r3, #28]
}
 800a520:	bf00      	nop
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a534:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d10f      	bne.n	800a560 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2201      	movs	r2, #1
 800a544:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	69db      	ldr	r3, [r3, #28]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d146      	bne.n	800a5dc <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a55e:	e03d      	b.n	800a5dc <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	429a      	cmp	r2, r3
 800a568:	d10f      	bne.n	800a58a <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2202      	movs	r2, #2
 800a56e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	69db      	ldr	r3, [r3, #28]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d131      	bne.n	800a5dc <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a588:	e028      	b.n	800a5dc <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	429a      	cmp	r2, r3
 800a592:	d10f      	bne.n	800a5b4 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2204      	movs	r2, #4
 800a598:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	69db      	ldr	r3, [r3, #28]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d11c      	bne.n	800a5dc <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5b2:	e013      	b.n	800a5dc <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d10e      	bne.n	800a5dc <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2208      	movs	r2, #8
 800a5c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	69db      	ldr	r3, [r3, #28]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d107      	bne.n	800a5dc <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f7f9 fbaf 	bl	8003d40 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	771a      	strb	r2, [r3, #28]
}
 800a5e8:	bf00      	nop
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	429a      	cmp	r2, r3
 800a606:	d103      	bne.n	800a610 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2201      	movs	r2, #1
 800a60c:	771a      	strb	r2, [r3, #28]
 800a60e:	e019      	b.n	800a644 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	429a      	cmp	r2, r3
 800a618:	d103      	bne.n	800a622 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2202      	movs	r2, #2
 800a61e:	771a      	strb	r2, [r3, #28]
 800a620:	e010      	b.n	800a644 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d103      	bne.n	800a634 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2204      	movs	r2, #4
 800a630:	771a      	strb	r2, [r3, #28]
 800a632:	e007      	b.n	800a644 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d102      	bne.n	800a644 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2208      	movs	r2, #8
 800a642:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f7ff fefe 	bl	800a446 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	771a      	strb	r2, [r3, #28]
}
 800a650:	bf00      	nop
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a34      	ldr	r2, [pc, #208]	; (800a73c <TIM_Base_SetConfig+0xe4>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d00f      	beq.n	800a690 <TIM_Base_SetConfig+0x38>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a676:	d00b      	beq.n	800a690 <TIM_Base_SetConfig+0x38>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4a31      	ldr	r2, [pc, #196]	; (800a740 <TIM_Base_SetConfig+0xe8>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d007      	beq.n	800a690 <TIM_Base_SetConfig+0x38>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a30      	ldr	r2, [pc, #192]	; (800a744 <TIM_Base_SetConfig+0xec>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d003      	beq.n	800a690 <TIM_Base_SetConfig+0x38>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a2f      	ldr	r2, [pc, #188]	; (800a748 <TIM_Base_SetConfig+0xf0>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d108      	bne.n	800a6a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a25      	ldr	r2, [pc, #148]	; (800a73c <TIM_Base_SetConfig+0xe4>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d01b      	beq.n	800a6e2 <TIM_Base_SetConfig+0x8a>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6b0:	d017      	beq.n	800a6e2 <TIM_Base_SetConfig+0x8a>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a22      	ldr	r2, [pc, #136]	; (800a740 <TIM_Base_SetConfig+0xe8>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d013      	beq.n	800a6e2 <TIM_Base_SetConfig+0x8a>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a21      	ldr	r2, [pc, #132]	; (800a744 <TIM_Base_SetConfig+0xec>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d00f      	beq.n	800a6e2 <TIM_Base_SetConfig+0x8a>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a20      	ldr	r2, [pc, #128]	; (800a748 <TIM_Base_SetConfig+0xf0>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d00b      	beq.n	800a6e2 <TIM_Base_SetConfig+0x8a>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a1f      	ldr	r2, [pc, #124]	; (800a74c <TIM_Base_SetConfig+0xf4>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d007      	beq.n	800a6e2 <TIM_Base_SetConfig+0x8a>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a1e      	ldr	r2, [pc, #120]	; (800a750 <TIM_Base_SetConfig+0xf8>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d003      	beq.n	800a6e2 <TIM_Base_SetConfig+0x8a>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a1d      	ldr	r2, [pc, #116]	; (800a754 <TIM_Base_SetConfig+0xfc>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d108      	bne.n	800a6f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	689a      	ldr	r2, [r3, #8]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a08      	ldr	r2, [pc, #32]	; (800a73c <TIM_Base_SetConfig+0xe4>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d103      	bne.n	800a728 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	691a      	ldr	r2, [r3, #16]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	615a      	str	r2, [r3, #20]
}
 800a72e:	bf00      	nop
 800a730:	3714      	adds	r7, #20
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	40010000 	.word	0x40010000
 800a740:	40000400 	.word	0x40000400
 800a744:	40000800 	.word	0x40000800
 800a748:	40000c00 	.word	0x40000c00
 800a74c:	40014000 	.word	0x40014000
 800a750:	40014400 	.word	0x40014400
 800a754:	40014800 	.word	0x40014800

0800a758 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a774:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	f023 0307 	bic.w	r3, r3, #7
 800a786:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	693a      	ldr	r2, [r7, #16]
 800a78e:	4313      	orrs	r3, r2
 800a790:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	693a      	ldr	r2, [r7, #16]
 800a798:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	2b70      	cmp	r3, #112	; 0x70
 800a7a0:	d01a      	beq.n	800a7d8 <TIM_SlaveTimer_SetConfig+0x80>
 800a7a2:	2b70      	cmp	r3, #112	; 0x70
 800a7a4:	d860      	bhi.n	800a868 <TIM_SlaveTimer_SetConfig+0x110>
 800a7a6:	2b60      	cmp	r3, #96	; 0x60
 800a7a8:	d054      	beq.n	800a854 <TIM_SlaveTimer_SetConfig+0xfc>
 800a7aa:	2b60      	cmp	r3, #96	; 0x60
 800a7ac:	d85c      	bhi.n	800a868 <TIM_SlaveTimer_SetConfig+0x110>
 800a7ae:	2b50      	cmp	r3, #80	; 0x50
 800a7b0:	d046      	beq.n	800a840 <TIM_SlaveTimer_SetConfig+0xe8>
 800a7b2:	2b50      	cmp	r3, #80	; 0x50
 800a7b4:	d858      	bhi.n	800a868 <TIM_SlaveTimer_SetConfig+0x110>
 800a7b6:	2b40      	cmp	r3, #64	; 0x40
 800a7b8:	d019      	beq.n	800a7ee <TIM_SlaveTimer_SetConfig+0x96>
 800a7ba:	2b40      	cmp	r3, #64	; 0x40
 800a7bc:	d854      	bhi.n	800a868 <TIM_SlaveTimer_SetConfig+0x110>
 800a7be:	2b30      	cmp	r3, #48	; 0x30
 800a7c0:	d055      	beq.n	800a86e <TIM_SlaveTimer_SetConfig+0x116>
 800a7c2:	2b30      	cmp	r3, #48	; 0x30
 800a7c4:	d850      	bhi.n	800a868 <TIM_SlaveTimer_SetConfig+0x110>
 800a7c6:	2b20      	cmp	r3, #32
 800a7c8:	d051      	beq.n	800a86e <TIM_SlaveTimer_SetConfig+0x116>
 800a7ca:	2b20      	cmp	r3, #32
 800a7cc:	d84c      	bhi.n	800a868 <TIM_SlaveTimer_SetConfig+0x110>
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d04d      	beq.n	800a86e <TIM_SlaveTimer_SetConfig+0x116>
 800a7d2:	2b10      	cmp	r3, #16
 800a7d4:	d04b      	beq.n	800a86e <TIM_SlaveTimer_SetConfig+0x116>
 800a7d6:	e047      	b.n	800a868 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6818      	ldr	r0, [r3, #0]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	68d9      	ldr	r1, [r3, #12]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	689a      	ldr	r2, [r3, #8]
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	f000 f9e0 	bl	800abac <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800a7ec:	e040      	b.n	800a870 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b05      	cmp	r3, #5
 800a7f4:	d101      	bne.n	800a7fa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e03b      	b.n	800a872 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	6a1a      	ldr	r2, [r3, #32]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f022 0201 	bic.w	r2, r2, #1
 800a810:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a820:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	011b      	lsls	r3, r3, #4
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	621a      	str	r2, [r3, #32]
      break;
 800a83e:	e017      	b.n	800a870 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6818      	ldr	r0, [r3, #0]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	6899      	ldr	r1, [r3, #8]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	461a      	mov	r2, r3
 800a84e:	f000 f87d 	bl	800a94c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a852:	e00d      	b.n	800a870 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6818      	ldr	r0, [r3, #0]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	6899      	ldr	r1, [r3, #8]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	461a      	mov	r2, r3
 800a862:	f000 f8df 	bl	800aa24 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a866:	e003      	b.n	800a870 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	75fb      	strb	r3, [r7, #23]
      break;
 800a86c:	e000      	b.n	800a870 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800a86e:	bf00      	nop
  }

  return status;
 800a870:	7dfb      	ldrb	r3, [r7, #23]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
	...

0800a87c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b087      	sub	sp, #28
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
 800a888:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	f023 0201 	bic.w	r2, r3, #1
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	699b      	ldr	r3, [r3, #24]
 800a89a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6a1b      	ldr	r3, [r3, #32]
 800a8a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	4a24      	ldr	r2, [pc, #144]	; (800a938 <TIM_TI1_SetConfig+0xbc>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d013      	beq.n	800a8d2 <TIM_TI1_SetConfig+0x56>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8b0:	d00f      	beq.n	800a8d2 <TIM_TI1_SetConfig+0x56>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	4a21      	ldr	r2, [pc, #132]	; (800a93c <TIM_TI1_SetConfig+0xc0>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d00b      	beq.n	800a8d2 <TIM_TI1_SetConfig+0x56>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	4a20      	ldr	r2, [pc, #128]	; (800a940 <TIM_TI1_SetConfig+0xc4>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d007      	beq.n	800a8d2 <TIM_TI1_SetConfig+0x56>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	4a1f      	ldr	r2, [pc, #124]	; (800a944 <TIM_TI1_SetConfig+0xc8>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d003      	beq.n	800a8d2 <TIM_TI1_SetConfig+0x56>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	4a1e      	ldr	r2, [pc, #120]	; (800a948 <TIM_TI1_SetConfig+0xcc>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d101      	bne.n	800a8d6 <TIM_TI1_SetConfig+0x5a>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e000      	b.n	800a8d8 <TIM_TI1_SetConfig+0x5c>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d008      	beq.n	800a8ee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	f023 0303 	bic.w	r3, r3, #3
 800a8e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	617b      	str	r3, [r7, #20]
 800a8ec:	e003      	b.n	800a8f6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f043 0301 	orr.w	r3, r3, #1
 800a8f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	011b      	lsls	r3, r3, #4
 800a902:	b2db      	uxtb	r3, r3
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	4313      	orrs	r3, r2
 800a908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	f023 030a 	bic.w	r3, r3, #10
 800a910:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	f003 030a 	and.w	r3, r3, #10
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	693a      	ldr	r2, [r7, #16]
 800a928:	621a      	str	r2, [r3, #32]
}
 800a92a:	bf00      	nop
 800a92c:	371c      	adds	r7, #28
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	40010000 	.word	0x40010000
 800a93c:	40000400 	.word	0x40000400
 800a940:	40000800 	.word	0x40000800
 800a944:	40000c00 	.word	0x40000c00
 800a948:	40014000 	.word	0x40014000

0800a94c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6a1b      	ldr	r3, [r3, #32]
 800a95c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	f023 0201 	bic.w	r2, r3, #1
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	011b      	lsls	r3, r3, #4
 800a97c:	693a      	ldr	r2, [r7, #16]
 800a97e:	4313      	orrs	r3, r2
 800a980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f023 030a 	bic.w	r3, r3, #10
 800a988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a98a:	697a      	ldr	r2, [r7, #20]
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	4313      	orrs	r3, r2
 800a990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	693a      	ldr	r2, [r7, #16]
 800a996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	621a      	str	r2, [r3, #32]
}
 800a99e:	bf00      	nop
 800a9a0:	371c      	adds	r7, #28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b087      	sub	sp, #28
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	60f8      	str	r0, [r7, #12]
 800a9b2:	60b9      	str	r1, [r7, #8]
 800a9b4:	607a      	str	r2, [r7, #4]
 800a9b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6a1b      	ldr	r3, [r3, #32]
 800a9bc:	f023 0210 	bic.w	r2, r3, #16
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	021b      	lsls	r3, r3, #8
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	031b      	lsls	r3, r3, #12
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a9fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	011b      	lsls	r3, r3, #4
 800aa02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aa06:	693a      	ldr	r2, [r7, #16]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	621a      	str	r2, [r3, #32]
}
 800aa18:	bf00      	nop
 800aa1a:	371c      	adds	r7, #28
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b087      	sub	sp, #28
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6a1b      	ldr	r3, [r3, #32]
 800aa34:	f023 0210 	bic.w	r2, r3, #16
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6a1b      	ldr	r3, [r3, #32]
 800aa46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	031b      	lsls	r3, r3, #12
 800aa54:	697a      	ldr	r2, [r7, #20]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	011b      	lsls	r3, r3, #4
 800aa66:	693a      	ldr	r2, [r7, #16]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	621a      	str	r2, [r3, #32]
}
 800aa78:	bf00      	nop
 800aa7a:	371c      	adds	r7, #28
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b087      	sub	sp, #28
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
 800aa90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	69db      	ldr	r3, [r3, #28]
 800aaa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6a1b      	ldr	r3, [r3, #32]
 800aaa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	f023 0303 	bic.w	r3, r3, #3
 800aab0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800aab2:	697a      	ldr	r2, [r7, #20]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aac0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	011b      	lsls	r3, r3, #4
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800aad4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	021b      	lsls	r3, r3, #8
 800aada:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	621a      	str	r2, [r3, #32]
}
 800aaf0:	bf00      	nop
 800aaf2:	371c      	adds	r7, #28
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
 800ab08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	69db      	ldr	r3, [r3, #28]
 800ab1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6a1b      	ldr	r3, [r3, #32]
 800ab20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	021b      	lsls	r3, r3, #8
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	031b      	lsls	r3, r3, #12
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	4313      	orrs	r3, r2
 800ab46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ab4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	031b      	lsls	r3, r3, #12
 800ab54:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	693a      	ldr	r2, [r7, #16]
 800ab68:	621a      	str	r2, [r3, #32]
}
 800ab6a:	bf00      	nop
 800ab6c:	371c      	adds	r7, #28
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab76:	b480      	push	{r7}
 800ab78:	b085      	sub	sp, #20
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	f043 0307 	orr.w	r3, r3, #7
 800ab98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	609a      	str	r2, [r3, #8]
}
 800aba0:	bf00      	nop
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800abac:	b480      	push	{r7}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
 800abb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800abc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	021a      	lsls	r2, r3, #8
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	431a      	orrs	r2, r3
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	697a      	ldr	r2, [r7, #20]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	609a      	str	r2, [r3, #8]
}
 800abe0:	bf00      	nop
 800abe2:	371c      	adds	r7, #28
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800abec:	b480      	push	{r7}
 800abee:	b087      	sub	sp, #28
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	f003 031f 	and.w	r3, r3, #31
 800abfe:	2201      	movs	r2, #1
 800ac00:	fa02 f303 	lsl.w	r3, r2, r3
 800ac04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6a1a      	ldr	r2, [r3, #32]
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	43db      	mvns	r3, r3
 800ac0e:	401a      	ands	r2, r3
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6a1a      	ldr	r2, [r3, #32]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	f003 031f 	and.w	r3, r3, #31
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	fa01 f303 	lsl.w	r3, r1, r3
 800ac24:	431a      	orrs	r2, r3
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	621a      	str	r2, [r3, #32]
}
 800ac2a:	bf00      	nop
 800ac2c:	371c      	adds	r7, #28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
	...

0800ac38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d101      	bne.n	800ac50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	e050      	b.n	800acf2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a1c      	ldr	r2, [pc, #112]	; (800ad00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d018      	beq.n	800acc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac9c:	d013      	beq.n	800acc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a18      	ldr	r2, [pc, #96]	; (800ad04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d00e      	beq.n	800acc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a16      	ldr	r2, [pc, #88]	; (800ad08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d009      	beq.n	800acc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a15      	ldr	r2, [pc, #84]	; (800ad0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d004      	beq.n	800acc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a13      	ldr	r2, [pc, #76]	; (800ad10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d10c      	bne.n	800ace0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800accc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	40010000 	.word	0x40010000
 800ad04:	40000400 	.word	0x40000400
 800ad08:	40000800 	.word	0x40000800
 800ad0c:	40000c00 	.word	0x40000c00
 800ad10:	40014000 	.word	0x40014000

0800ad14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d101      	bne.n	800ad4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e03f      	b.n	800adce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d106      	bne.n	800ad68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f7fa fa8e 	bl	8005284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2224      	movs	r2, #36	; 0x24
 800ad6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68da      	ldr	r2, [r3, #12]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fd15 	bl	800b7b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	691a      	ldr	r2, [r3, #16]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	695a      	ldr	r2, [r3, #20]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ada4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	68da      	ldr	r2, [r3, #12]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800adb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2220      	movs	r2, #32
 800adc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2220      	movs	r2, #32
 800adc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800add6:	b480      	push	{r7}
 800add8:	b085      	sub	sp, #20
 800adda:	af00      	add	r7, sp, #0
 800addc:	60f8      	str	r0, [r7, #12]
 800adde:	60b9      	str	r1, [r7, #8]
 800ade0:	4613      	mov	r3, r2
 800ade2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adea:	b2db      	uxtb	r3, r3
 800adec:	2b20      	cmp	r3, #32
 800adee:	d130      	bne.n	800ae52 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d002      	beq.n	800adfc <HAL_UART_Transmit_IT+0x26>
 800adf6:	88fb      	ldrh	r3, [r7, #6]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d101      	bne.n	800ae00 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	e029      	b.n	800ae54 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d101      	bne.n	800ae0e <HAL_UART_Transmit_IT+0x38>
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	e022      	b.n	800ae54 <HAL_UART_Transmit_IT+0x7e>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2201      	movs	r2, #1
 800ae12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	88fa      	ldrh	r2, [r7, #6]
 800ae20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	88fa      	ldrh	r2, [r7, #6]
 800ae26:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2221      	movs	r2, #33	; 0x21
 800ae32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68da      	ldr	r2, [r3, #12]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae4c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	e000      	b.n	800ae54 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800ae52:	2302      	movs	r3, #2
  }
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b20      	cmp	r3, #32
 800ae78:	d11d      	bne.n	800aeb6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <HAL_UART_Receive_IT+0x26>
 800ae80:	88fb      	ldrh	r3, [r7, #6]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d101      	bne.n	800ae8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e016      	b.n	800aeb8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d101      	bne.n	800ae98 <HAL_UART_Receive_IT+0x38>
 800ae94:	2302      	movs	r3, #2
 800ae96:	e00f      	b.n	800aeb8 <HAL_UART_Receive_IT+0x58>
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aea6:	88fb      	ldrh	r3, [r7, #6]
 800aea8:	461a      	mov	r2, r3
 800aeaa:	68b9      	ldr	r1, [r7, #8]
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f000 faab 	bl	800b408 <UART_Start_Receive_IT>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	e000      	b.n	800aeb8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800aeb6:	2302      	movs	r3, #2
  }
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b0ba      	sub	sp, #232	; 0xe8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	695b      	ldr	r3, [r3, #20]
 800aee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aeec:	2300      	movs	r3, #0
 800aeee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aef6:	f003 030f 	and.w	r3, r3, #15
 800aefa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800aefe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10f      	bne.n	800af26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af0a:	f003 0320 	and.w	r3, r3, #32
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d009      	beq.n	800af26 <HAL_UART_IRQHandler+0x66>
 800af12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af16:	f003 0320 	and.w	r3, r3, #32
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fb8b 	bl	800b63a <UART_Receive_IT>
      return;
 800af24:	e256      	b.n	800b3d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800af26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f000 80de 	beq.w	800b0ec <HAL_UART_IRQHandler+0x22c>
 800af30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af34:	f003 0301 	and.w	r3, r3, #1
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d106      	bne.n	800af4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800af3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800af44:	2b00      	cmp	r3, #0
 800af46:	f000 80d1 	beq.w	800b0ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800af4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af4e:	f003 0301 	and.w	r3, r3, #1
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00b      	beq.n	800af6e <HAL_UART_IRQHandler+0xae>
 800af56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d005      	beq.n	800af6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af66:	f043 0201 	orr.w	r2, r3, #1
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af72:	f003 0304 	and.w	r3, r3, #4
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00b      	beq.n	800af92 <HAL_UART_IRQHandler+0xd2>
 800af7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	d005      	beq.n	800af92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8a:	f043 0202 	orr.w	r2, r3, #2
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af96:	f003 0302 	and.w	r3, r3, #2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00b      	beq.n	800afb6 <HAL_UART_IRQHandler+0xf6>
 800af9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d005      	beq.n	800afb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afae:	f043 0204 	orr.w	r2, r3, #4
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800afb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afba:	f003 0308 	and.w	r3, r3, #8
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d011      	beq.n	800afe6 <HAL_UART_IRQHandler+0x126>
 800afc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afc6:	f003 0320 	and.w	r3, r3, #32
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d105      	bne.n	800afda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800afce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afd2:	f003 0301 	and.w	r3, r3, #1
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d005      	beq.n	800afe6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afde:	f043 0208 	orr.w	r2, r3, #8
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afea:	2b00      	cmp	r3, #0
 800afec:	f000 81ed 	beq.w	800b3ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aff4:	f003 0320 	and.w	r3, r3, #32
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d008      	beq.n	800b00e <HAL_UART_IRQHandler+0x14e>
 800affc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b000:	f003 0320 	and.w	r3, r3, #32
 800b004:	2b00      	cmp	r3, #0
 800b006:	d002      	beq.n	800b00e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fb16 	bl	800b63a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	695b      	ldr	r3, [r3, #20]
 800b014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b018:	2b40      	cmp	r3, #64	; 0x40
 800b01a:	bf0c      	ite	eq
 800b01c:	2301      	moveq	r3, #1
 800b01e:	2300      	movne	r3, #0
 800b020:	b2db      	uxtb	r3, r3
 800b022:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02a:	f003 0308 	and.w	r3, r3, #8
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d103      	bne.n	800b03a <HAL_UART_IRQHandler+0x17a>
 800b032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b036:	2b00      	cmp	r3, #0
 800b038:	d04f      	beq.n	800b0da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fa1e 	bl	800b47c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	695b      	ldr	r3, [r3, #20]
 800b046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b04a:	2b40      	cmp	r3, #64	; 0x40
 800b04c:	d141      	bne.n	800b0d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	3314      	adds	r3, #20
 800b054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b058:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b05c:	e853 3f00 	ldrex	r3, [r3]
 800b060:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b064:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b06c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3314      	adds	r3, #20
 800b076:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b07a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b07e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b082:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b086:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1d9      	bne.n	800b04e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d013      	beq.n	800b0ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a6:	4a7d      	ldr	r2, [pc, #500]	; (800b29c <HAL_UART_IRQHandler+0x3dc>)
 800b0a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fa fea6 	bl	8005e00 <HAL_DMA_Abort_IT>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d016      	beq.n	800b0e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0c8:	e00e      	b.n	800b0e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f986 	bl	800b3dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0d0:	e00a      	b.n	800b0e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f982 	bl	800b3dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0d8:	e006      	b.n	800b0e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f97e 	bl	800b3dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b0e6:	e170      	b.n	800b3ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0e8:	bf00      	nop
    return;
 800b0ea:	e16e      	b.n	800b3ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	f040 814a 	bne.w	800b38a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0fa:	f003 0310 	and.w	r3, r3, #16
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 8143 	beq.w	800b38a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b108:	f003 0310 	and.w	r3, r3, #16
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 813c 	beq.w	800b38a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b112:	2300      	movs	r3, #0
 800b114:	60bb      	str	r3, [r7, #8]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	60bb      	str	r3, [r7, #8]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	60bb      	str	r3, [r7, #8]
 800b126:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	695b      	ldr	r3, [r3, #20]
 800b12e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b132:	2b40      	cmp	r3, #64	; 0x40
 800b134:	f040 80b4 	bne.w	800b2a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b144:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f000 8140 	beq.w	800b3ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b156:	429a      	cmp	r2, r3
 800b158:	f080 8139 	bcs.w	800b3ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b162:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b168:	69db      	ldr	r3, [r3, #28]
 800b16a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b16e:	f000 8088 	beq.w	800b282 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	330c      	adds	r3, #12
 800b178:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b180:	e853 3f00 	ldrex	r3, [r3]
 800b184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b188:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b18c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b190:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	330c      	adds	r3, #12
 800b19a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b19e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b1a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b1aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b1ae:	e841 2300 	strex	r3, r2, [r1]
 800b1b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b1b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1d9      	bne.n	800b172 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3314      	adds	r3, #20
 800b1c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1c8:	e853 3f00 	ldrex	r3, [r3]
 800b1cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b1ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1d0:	f023 0301 	bic.w	r3, r3, #1
 800b1d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3314      	adds	r3, #20
 800b1de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b1e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b1e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b1ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b1ee:	e841 2300 	strex	r3, r2, [r1]
 800b1f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b1f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1e1      	bne.n	800b1be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	3314      	adds	r3, #20
 800b200:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b204:	e853 3f00 	ldrex	r3, [r3]
 800b208:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b20a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b20c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b210:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3314      	adds	r3, #20
 800b21a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b21e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b220:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b222:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b224:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b226:	e841 2300 	strex	r3, r2, [r1]
 800b22a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b22c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1e3      	bne.n	800b1fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2220      	movs	r2, #32
 800b236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	330c      	adds	r3, #12
 800b246:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b24a:	e853 3f00 	ldrex	r3, [r3]
 800b24e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b252:	f023 0310 	bic.w	r3, r3, #16
 800b256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	330c      	adds	r3, #12
 800b260:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b264:	65ba      	str	r2, [r7, #88]	; 0x58
 800b266:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b268:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b26a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b26c:	e841 2300 	strex	r3, r2, [r1]
 800b270:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1e3      	bne.n	800b240 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fa fd4f 	bl	8005d20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	b29b      	uxth	r3, r3
 800b290:	4619      	mov	r1, r3
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f8ac 	bl	800b3f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b298:	e099      	b.n	800b3ce <HAL_UART_IRQHandler+0x50e>
 800b29a:	bf00      	nop
 800b29c:	0800b543 	.word	0x0800b543
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	1ad3      	subs	r3, r2, r3
 800b2ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f000 808b 	beq.w	800b3d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b2bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f000 8086 	beq.w	800b3d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	330c      	adds	r3, #12
 800b2cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d0:	e853 3f00 	ldrex	r3, [r3]
 800b2d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	330c      	adds	r3, #12
 800b2e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b2ea:	647a      	str	r2, [r7, #68]	; 0x44
 800b2ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b2f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2f2:	e841 2300 	strex	r3, r2, [r1]
 800b2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1e3      	bne.n	800b2c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3314      	adds	r3, #20
 800b304:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b308:	e853 3f00 	ldrex	r3, [r3]
 800b30c:	623b      	str	r3, [r7, #32]
   return(result);
 800b30e:	6a3b      	ldr	r3, [r7, #32]
 800b310:	f023 0301 	bic.w	r3, r3, #1
 800b314:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3314      	adds	r3, #20
 800b31e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b322:	633a      	str	r2, [r7, #48]	; 0x30
 800b324:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b32a:	e841 2300 	strex	r3, r2, [r1]
 800b32e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1e3      	bne.n	800b2fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2220      	movs	r2, #32
 800b33a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	330c      	adds	r3, #12
 800b34a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	e853 3f00 	ldrex	r3, [r3]
 800b352:	60fb      	str	r3, [r7, #12]
   return(result);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f023 0310 	bic.w	r3, r3, #16
 800b35a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	330c      	adds	r3, #12
 800b364:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b368:	61fa      	str	r2, [r7, #28]
 800b36a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36c:	69b9      	ldr	r1, [r7, #24]
 800b36e:	69fa      	ldr	r2, [r7, #28]
 800b370:	e841 2300 	strex	r3, r2, [r1]
 800b374:	617b      	str	r3, [r7, #20]
   return(result);
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1e3      	bne.n	800b344 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b37c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b380:	4619      	mov	r1, r3
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f834 	bl	800b3f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b388:	e023      	b.n	800b3d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b38a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b392:	2b00      	cmp	r3, #0
 800b394:	d009      	beq.n	800b3aa <HAL_UART_IRQHandler+0x4ea>
 800b396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b39a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 f8e1 	bl	800b56a <UART_Transmit_IT>
    return;
 800b3a8:	e014      	b.n	800b3d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b3aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00e      	beq.n	800b3d4 <HAL_UART_IRQHandler+0x514>
 800b3b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d008      	beq.n	800b3d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f921 	bl	800b60a <UART_EndTransmit_IT>
    return;
 800b3c8:	e004      	b.n	800b3d4 <HAL_UART_IRQHandler+0x514>
    return;
 800b3ca:	bf00      	nop
 800b3cc:	e002      	b.n	800b3d4 <HAL_UART_IRQHandler+0x514>
      return;
 800b3ce:	bf00      	nop
 800b3d0:	e000      	b.n	800b3d4 <HAL_UART_IRQHandler+0x514>
      return;
 800b3d2:	bf00      	nop
  }
}
 800b3d4:	37e8      	adds	r7, #232	; 0xe8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop

0800b3dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b3e4:	bf00      	nop
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b408:	b480      	push	{r7}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	4613      	mov	r3, r2
 800b414:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	68ba      	ldr	r2, [r7, #8]
 800b41a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	88fa      	ldrh	r2, [r7, #6]
 800b420:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	88fa      	ldrh	r2, [r7, #6]
 800b426:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2200      	movs	r2, #0
 800b42c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2222      	movs	r2, #34	; 0x22
 800b432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	68da      	ldr	r2, [r3, #12]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b44c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	695a      	ldr	r2, [r3, #20]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f042 0201 	orr.w	r2, r2, #1
 800b45c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68da      	ldr	r2, [r3, #12]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f042 0220 	orr.w	r2, r2, #32
 800b46c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b095      	sub	sp, #84	; 0x54
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	330c      	adds	r3, #12
 800b48a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b48e:	e853 3f00 	ldrex	r3, [r3]
 800b492:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b49a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	330c      	adds	r3, #12
 800b4a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4a4:	643a      	str	r2, [r7, #64]	; 0x40
 800b4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4ac:	e841 2300 	strex	r3, r2, [r1]
 800b4b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1e5      	bne.n	800b484 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3314      	adds	r3, #20
 800b4be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c0:	6a3b      	ldr	r3, [r7, #32]
 800b4c2:	e853 3f00 	ldrex	r3, [r3]
 800b4c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	f023 0301 	bic.w	r3, r3, #1
 800b4ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3314      	adds	r3, #20
 800b4d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b4da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4e0:	e841 2300 	strex	r3, r2, [r1]
 800b4e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1e5      	bne.n	800b4b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d119      	bne.n	800b528 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	330c      	adds	r3, #12
 800b4fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	e853 3f00 	ldrex	r3, [r3]
 800b502:	60bb      	str	r3, [r7, #8]
   return(result);
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	f023 0310 	bic.w	r3, r3, #16
 800b50a:	647b      	str	r3, [r7, #68]	; 0x44
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	330c      	adds	r3, #12
 800b512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b514:	61ba      	str	r2, [r7, #24]
 800b516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b518:	6979      	ldr	r1, [r7, #20]
 800b51a:	69ba      	ldr	r2, [r7, #24]
 800b51c:	e841 2300 	strex	r3, r2, [r1]
 800b520:	613b      	str	r3, [r7, #16]
   return(result);
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1e5      	bne.n	800b4f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2220      	movs	r2, #32
 800b52c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b536:	bf00      	nop
 800b538:	3754      	adds	r7, #84	; 0x54
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr

0800b542 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b084      	sub	sp, #16
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2200      	movs	r2, #0
 800b554:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f7ff ff3d 	bl	800b3dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b562:	bf00      	nop
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b56a:	b480      	push	{r7}
 800b56c:	b085      	sub	sp, #20
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b21      	cmp	r3, #33	; 0x21
 800b57c:	d13e      	bne.n	800b5fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b586:	d114      	bne.n	800b5b2 <UART_Transmit_IT+0x48>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d110      	bne.n	800b5b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a1b      	ldr	r3, [r3, #32]
 800b594:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	881b      	ldrh	r3, [r3, #0]
 800b59a:	461a      	mov	r2, r3
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a1b      	ldr	r3, [r3, #32]
 800b5aa:	1c9a      	adds	r2, r3, #2
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	621a      	str	r2, [r3, #32]
 800b5b0:	e008      	b.n	800b5c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a1b      	ldr	r3, [r3, #32]
 800b5b6:	1c59      	adds	r1, r3, #1
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	6211      	str	r1, [r2, #32]
 800b5bc:	781a      	ldrb	r2, [r3, #0]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10f      	bne.n	800b5f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68da      	ldr	r2, [r3, #12]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b5e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	68da      	ldr	r2, [r3, #12]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	e000      	b.n	800b5fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b5fc:	2302      	movs	r3, #2
  }
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3714      	adds	r7, #20
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b082      	sub	sp, #8
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	68da      	ldr	r2, [r3, #12]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b620:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2220      	movs	r2, #32
 800b626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7f7 fc68 	bl	8002f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b08c      	sub	sp, #48	; 0x30
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b22      	cmp	r3, #34	; 0x22
 800b64c:	f040 80ab 	bne.w	800b7a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b658:	d117      	bne.n	800b68a <UART_Receive_IT+0x50>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d113      	bne.n	800b68a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b662:	2300      	movs	r3, #0
 800b664:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b66a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	b29b      	uxth	r3, r3
 800b674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b678:	b29a      	uxth	r2, r3
 800b67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b682:	1c9a      	adds	r2, r3, #2
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	629a      	str	r2, [r3, #40]	; 0x28
 800b688:	e026      	b.n	800b6d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b68e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b69c:	d007      	beq.n	800b6ae <UART_Receive_IT+0x74>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10a      	bne.n	800b6bc <UART_Receive_IT+0x82>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d106      	bne.n	800b6bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	b2da      	uxtb	r2, r3
 800b6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b8:	701a      	strb	r2, [r3, #0]
 800b6ba:	e008      	b.n	800b6ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6c8:	b2da      	uxtb	r2, r3
 800b6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d15a      	bne.n	800b7a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68da      	ldr	r2, [r3, #12]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f022 0220 	bic.w	r2, r2, #32
 800b6fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68da      	ldr	r2, [r3, #12]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b70a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	695a      	ldr	r2, [r3, #20]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f022 0201 	bic.w	r2, r2, #1
 800b71a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2220      	movs	r2, #32
 800b720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d135      	bne.n	800b798 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	330c      	adds	r3, #12
 800b738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	e853 3f00 	ldrex	r3, [r3]
 800b740:	613b      	str	r3, [r7, #16]
   return(result);
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	f023 0310 	bic.w	r3, r3, #16
 800b748:	627b      	str	r3, [r7, #36]	; 0x24
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	330c      	adds	r3, #12
 800b750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b752:	623a      	str	r2, [r7, #32]
 800b754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b756:	69f9      	ldr	r1, [r7, #28]
 800b758:	6a3a      	ldr	r2, [r7, #32]
 800b75a:	e841 2300 	strex	r3, r2, [r1]
 800b75e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1e5      	bne.n	800b732 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 0310 	and.w	r3, r3, #16
 800b770:	2b10      	cmp	r3, #16
 800b772:	d10a      	bne.n	800b78a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b774:	2300      	movs	r3, #0
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	60fb      	str	r3, [r7, #12]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	60fb      	str	r3, [r7, #12]
 800b788:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b78e:	4619      	mov	r1, r3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f7ff fe2d 	bl	800b3f0 <HAL_UARTEx_RxEventCallback>
 800b796:	e002      	b.n	800b79e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7f7 fbd5 	bl	8002f48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	e002      	b.n	800b7a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	e000      	b.n	800b7a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b7a6:	2302      	movs	r3, #2
  }
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3730      	adds	r7, #48	; 0x30
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	b09f      	sub	sp, #124	; 0x7c
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	691b      	ldr	r3, [r3, #16]
 800b7c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b7c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7c6:	68d9      	ldr	r1, [r3, #12]
 800b7c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	ea40 0301 	orr.w	r3, r0, r1
 800b7d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b7d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7d4:	689a      	ldr	r2, [r3, #8]
 800b7d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	431a      	orrs	r2, r3
 800b7dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7de:	695b      	ldr	r3, [r3, #20]
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7e4:	69db      	ldr	r3, [r3, #28]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b7ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b7f4:	f021 010c 	bic.w	r1, r1, #12
 800b7f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7fe:	430b      	orrs	r3, r1
 800b800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	695b      	ldr	r3, [r3, #20]
 800b808:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b80c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b80e:	6999      	ldr	r1, [r3, #24]
 800b810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	ea40 0301 	orr.w	r3, r0, r1
 800b818:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b81a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	4bc5      	ldr	r3, [pc, #788]	; (800bb34 <UART_SetConfig+0x384>)
 800b820:	429a      	cmp	r2, r3
 800b822:	d004      	beq.n	800b82e <UART_SetConfig+0x7e>
 800b824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	4bc3      	ldr	r3, [pc, #780]	; (800bb38 <UART_SetConfig+0x388>)
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d103      	bne.n	800b836 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b82e:	f7fe f897 	bl	8009960 <HAL_RCC_GetPCLK2Freq>
 800b832:	6778      	str	r0, [r7, #116]	; 0x74
 800b834:	e002      	b.n	800b83c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b836:	f7fe f87f 	bl	8009938 <HAL_RCC_GetPCLK1Freq>
 800b83a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b83c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b83e:	69db      	ldr	r3, [r3, #28]
 800b840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b844:	f040 80b6 	bne.w	800b9b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b84a:	461c      	mov	r4, r3
 800b84c:	f04f 0500 	mov.w	r5, #0
 800b850:	4622      	mov	r2, r4
 800b852:	462b      	mov	r3, r5
 800b854:	1891      	adds	r1, r2, r2
 800b856:	6439      	str	r1, [r7, #64]	; 0x40
 800b858:	415b      	adcs	r3, r3
 800b85a:	647b      	str	r3, [r7, #68]	; 0x44
 800b85c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b860:	1912      	adds	r2, r2, r4
 800b862:	eb45 0303 	adc.w	r3, r5, r3
 800b866:	f04f 0000 	mov.w	r0, #0
 800b86a:	f04f 0100 	mov.w	r1, #0
 800b86e:	00d9      	lsls	r1, r3, #3
 800b870:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b874:	00d0      	lsls	r0, r2, #3
 800b876:	4602      	mov	r2, r0
 800b878:	460b      	mov	r3, r1
 800b87a:	1911      	adds	r1, r2, r4
 800b87c:	6639      	str	r1, [r7, #96]	; 0x60
 800b87e:	416b      	adcs	r3, r5
 800b880:	667b      	str	r3, [r7, #100]	; 0x64
 800b882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	461a      	mov	r2, r3
 800b888:	f04f 0300 	mov.w	r3, #0
 800b88c:	1891      	adds	r1, r2, r2
 800b88e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b890:	415b      	adcs	r3, r3
 800b892:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b894:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b898:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b89c:	f7f5 fa4c 	bl	8000d38 <__aeabi_uldivmod>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	4ba5      	ldr	r3, [pc, #660]	; (800bb3c <UART_SetConfig+0x38c>)
 800b8a6:	fba3 2302 	umull	r2, r3, r3, r2
 800b8aa:	095b      	lsrs	r3, r3, #5
 800b8ac:	011e      	lsls	r6, r3, #4
 800b8ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8b0:	461c      	mov	r4, r3
 800b8b2:	f04f 0500 	mov.w	r5, #0
 800b8b6:	4622      	mov	r2, r4
 800b8b8:	462b      	mov	r3, r5
 800b8ba:	1891      	adds	r1, r2, r2
 800b8bc:	6339      	str	r1, [r7, #48]	; 0x30
 800b8be:	415b      	adcs	r3, r3
 800b8c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b8c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b8c6:	1912      	adds	r2, r2, r4
 800b8c8:	eb45 0303 	adc.w	r3, r5, r3
 800b8cc:	f04f 0000 	mov.w	r0, #0
 800b8d0:	f04f 0100 	mov.w	r1, #0
 800b8d4:	00d9      	lsls	r1, r3, #3
 800b8d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b8da:	00d0      	lsls	r0, r2, #3
 800b8dc:	4602      	mov	r2, r0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	1911      	adds	r1, r2, r4
 800b8e2:	65b9      	str	r1, [r7, #88]	; 0x58
 800b8e4:	416b      	adcs	r3, r5
 800b8e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	f04f 0300 	mov.w	r3, #0
 800b8f2:	1891      	adds	r1, r2, r2
 800b8f4:	62b9      	str	r1, [r7, #40]	; 0x28
 800b8f6:	415b      	adcs	r3, r3
 800b8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b8fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b902:	f7f5 fa19 	bl	8000d38 <__aeabi_uldivmod>
 800b906:	4602      	mov	r2, r0
 800b908:	460b      	mov	r3, r1
 800b90a:	4b8c      	ldr	r3, [pc, #560]	; (800bb3c <UART_SetConfig+0x38c>)
 800b90c:	fba3 1302 	umull	r1, r3, r3, r2
 800b910:	095b      	lsrs	r3, r3, #5
 800b912:	2164      	movs	r1, #100	; 0x64
 800b914:	fb01 f303 	mul.w	r3, r1, r3
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	00db      	lsls	r3, r3, #3
 800b91c:	3332      	adds	r3, #50	; 0x32
 800b91e:	4a87      	ldr	r2, [pc, #540]	; (800bb3c <UART_SetConfig+0x38c>)
 800b920:	fba2 2303 	umull	r2, r3, r2, r3
 800b924:	095b      	lsrs	r3, r3, #5
 800b926:	005b      	lsls	r3, r3, #1
 800b928:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b92c:	441e      	add	r6, r3
 800b92e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b930:	4618      	mov	r0, r3
 800b932:	f04f 0100 	mov.w	r1, #0
 800b936:	4602      	mov	r2, r0
 800b938:	460b      	mov	r3, r1
 800b93a:	1894      	adds	r4, r2, r2
 800b93c:	623c      	str	r4, [r7, #32]
 800b93e:	415b      	adcs	r3, r3
 800b940:	627b      	str	r3, [r7, #36]	; 0x24
 800b942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b946:	1812      	adds	r2, r2, r0
 800b948:	eb41 0303 	adc.w	r3, r1, r3
 800b94c:	f04f 0400 	mov.w	r4, #0
 800b950:	f04f 0500 	mov.w	r5, #0
 800b954:	00dd      	lsls	r5, r3, #3
 800b956:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b95a:	00d4      	lsls	r4, r2, #3
 800b95c:	4622      	mov	r2, r4
 800b95e:	462b      	mov	r3, r5
 800b960:	1814      	adds	r4, r2, r0
 800b962:	653c      	str	r4, [r7, #80]	; 0x50
 800b964:	414b      	adcs	r3, r1
 800b966:	657b      	str	r3, [r7, #84]	; 0x54
 800b968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	461a      	mov	r2, r3
 800b96e:	f04f 0300 	mov.w	r3, #0
 800b972:	1891      	adds	r1, r2, r2
 800b974:	61b9      	str	r1, [r7, #24]
 800b976:	415b      	adcs	r3, r3
 800b978:	61fb      	str	r3, [r7, #28]
 800b97a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b97e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b982:	f7f5 f9d9 	bl	8000d38 <__aeabi_uldivmod>
 800b986:	4602      	mov	r2, r0
 800b988:	460b      	mov	r3, r1
 800b98a:	4b6c      	ldr	r3, [pc, #432]	; (800bb3c <UART_SetConfig+0x38c>)
 800b98c:	fba3 1302 	umull	r1, r3, r3, r2
 800b990:	095b      	lsrs	r3, r3, #5
 800b992:	2164      	movs	r1, #100	; 0x64
 800b994:	fb01 f303 	mul.w	r3, r1, r3
 800b998:	1ad3      	subs	r3, r2, r3
 800b99a:	00db      	lsls	r3, r3, #3
 800b99c:	3332      	adds	r3, #50	; 0x32
 800b99e:	4a67      	ldr	r2, [pc, #412]	; (800bb3c <UART_SetConfig+0x38c>)
 800b9a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b9a4:	095b      	lsrs	r3, r3, #5
 800b9a6:	f003 0207 	and.w	r2, r3, #7
 800b9aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4432      	add	r2, r6
 800b9b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b9b2:	e0b9      	b.n	800bb28 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b9b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9b6:	461c      	mov	r4, r3
 800b9b8:	f04f 0500 	mov.w	r5, #0
 800b9bc:	4622      	mov	r2, r4
 800b9be:	462b      	mov	r3, r5
 800b9c0:	1891      	adds	r1, r2, r2
 800b9c2:	6139      	str	r1, [r7, #16]
 800b9c4:	415b      	adcs	r3, r3
 800b9c6:	617b      	str	r3, [r7, #20]
 800b9c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b9cc:	1912      	adds	r2, r2, r4
 800b9ce:	eb45 0303 	adc.w	r3, r5, r3
 800b9d2:	f04f 0000 	mov.w	r0, #0
 800b9d6:	f04f 0100 	mov.w	r1, #0
 800b9da:	00d9      	lsls	r1, r3, #3
 800b9dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b9e0:	00d0      	lsls	r0, r2, #3
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	eb12 0804 	adds.w	r8, r2, r4
 800b9ea:	eb43 0905 	adc.w	r9, r3, r5
 800b9ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f04f 0100 	mov.w	r1, #0
 800b9f8:	f04f 0200 	mov.w	r2, #0
 800b9fc:	f04f 0300 	mov.w	r3, #0
 800ba00:	008b      	lsls	r3, r1, #2
 800ba02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ba06:	0082      	lsls	r2, r0, #2
 800ba08:	4640      	mov	r0, r8
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	f7f5 f994 	bl	8000d38 <__aeabi_uldivmod>
 800ba10:	4602      	mov	r2, r0
 800ba12:	460b      	mov	r3, r1
 800ba14:	4b49      	ldr	r3, [pc, #292]	; (800bb3c <UART_SetConfig+0x38c>)
 800ba16:	fba3 2302 	umull	r2, r3, r3, r2
 800ba1a:	095b      	lsrs	r3, r3, #5
 800ba1c:	011e      	lsls	r6, r3, #4
 800ba1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba20:	4618      	mov	r0, r3
 800ba22:	f04f 0100 	mov.w	r1, #0
 800ba26:	4602      	mov	r2, r0
 800ba28:	460b      	mov	r3, r1
 800ba2a:	1894      	adds	r4, r2, r2
 800ba2c:	60bc      	str	r4, [r7, #8]
 800ba2e:	415b      	adcs	r3, r3
 800ba30:	60fb      	str	r3, [r7, #12]
 800ba32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba36:	1812      	adds	r2, r2, r0
 800ba38:	eb41 0303 	adc.w	r3, r1, r3
 800ba3c:	f04f 0400 	mov.w	r4, #0
 800ba40:	f04f 0500 	mov.w	r5, #0
 800ba44:	00dd      	lsls	r5, r3, #3
 800ba46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ba4a:	00d4      	lsls	r4, r2, #3
 800ba4c:	4622      	mov	r2, r4
 800ba4e:	462b      	mov	r3, r5
 800ba50:	1814      	adds	r4, r2, r0
 800ba52:	64bc      	str	r4, [r7, #72]	; 0x48
 800ba54:	414b      	adcs	r3, r1
 800ba56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f04f 0100 	mov.w	r1, #0
 800ba62:	f04f 0200 	mov.w	r2, #0
 800ba66:	f04f 0300 	mov.w	r3, #0
 800ba6a:	008b      	lsls	r3, r1, #2
 800ba6c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ba70:	0082      	lsls	r2, r0, #2
 800ba72:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ba76:	f7f5 f95f 	bl	8000d38 <__aeabi_uldivmod>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4b2f      	ldr	r3, [pc, #188]	; (800bb3c <UART_SetConfig+0x38c>)
 800ba80:	fba3 1302 	umull	r1, r3, r3, r2
 800ba84:	095b      	lsrs	r3, r3, #5
 800ba86:	2164      	movs	r1, #100	; 0x64
 800ba88:	fb01 f303 	mul.w	r3, r1, r3
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	011b      	lsls	r3, r3, #4
 800ba90:	3332      	adds	r3, #50	; 0x32
 800ba92:	4a2a      	ldr	r2, [pc, #168]	; (800bb3c <UART_SetConfig+0x38c>)
 800ba94:	fba2 2303 	umull	r2, r3, r2, r3
 800ba98:	095b      	lsrs	r3, r3, #5
 800ba9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba9e:	441e      	add	r6, r3
 800baa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800baa2:	4618      	mov	r0, r3
 800baa4:	f04f 0100 	mov.w	r1, #0
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	1894      	adds	r4, r2, r2
 800baae:	603c      	str	r4, [r7, #0]
 800bab0:	415b      	adcs	r3, r3
 800bab2:	607b      	str	r3, [r7, #4]
 800bab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bab8:	1812      	adds	r2, r2, r0
 800baba:	eb41 0303 	adc.w	r3, r1, r3
 800babe:	f04f 0400 	mov.w	r4, #0
 800bac2:	f04f 0500 	mov.w	r5, #0
 800bac6:	00dd      	lsls	r5, r3, #3
 800bac8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bacc:	00d4      	lsls	r4, r2, #3
 800bace:	4622      	mov	r2, r4
 800bad0:	462b      	mov	r3, r5
 800bad2:	eb12 0a00 	adds.w	sl, r2, r0
 800bad6:	eb43 0b01 	adc.w	fp, r3, r1
 800bada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	4618      	mov	r0, r3
 800bae0:	f04f 0100 	mov.w	r1, #0
 800bae4:	f04f 0200 	mov.w	r2, #0
 800bae8:	f04f 0300 	mov.w	r3, #0
 800baec:	008b      	lsls	r3, r1, #2
 800baee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800baf2:	0082      	lsls	r2, r0, #2
 800baf4:	4650      	mov	r0, sl
 800baf6:	4659      	mov	r1, fp
 800baf8:	f7f5 f91e 	bl	8000d38 <__aeabi_uldivmod>
 800bafc:	4602      	mov	r2, r0
 800bafe:	460b      	mov	r3, r1
 800bb00:	4b0e      	ldr	r3, [pc, #56]	; (800bb3c <UART_SetConfig+0x38c>)
 800bb02:	fba3 1302 	umull	r1, r3, r3, r2
 800bb06:	095b      	lsrs	r3, r3, #5
 800bb08:	2164      	movs	r1, #100	; 0x64
 800bb0a:	fb01 f303 	mul.w	r3, r1, r3
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	011b      	lsls	r3, r3, #4
 800bb12:	3332      	adds	r3, #50	; 0x32
 800bb14:	4a09      	ldr	r2, [pc, #36]	; (800bb3c <UART_SetConfig+0x38c>)
 800bb16:	fba2 2303 	umull	r2, r3, r2, r3
 800bb1a:	095b      	lsrs	r3, r3, #5
 800bb1c:	f003 020f 	and.w	r2, r3, #15
 800bb20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4432      	add	r2, r6
 800bb26:	609a      	str	r2, [r3, #8]
}
 800bb28:	bf00      	nop
 800bb2a:	377c      	adds	r7, #124	; 0x7c
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb32:	bf00      	nop
 800bb34:	40011000 	.word	0x40011000
 800bb38:	40011400 	.word	0x40011400
 800bb3c:	51eb851f 	.word	0x51eb851f

0800bb40 <cos>:
 800bb40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb42:	ec53 2b10 	vmov	r2, r3, d0
 800bb46:	4824      	ldr	r0, [pc, #144]	; (800bbd8 <cos+0x98>)
 800bb48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb4c:	4281      	cmp	r1, r0
 800bb4e:	dc06      	bgt.n	800bb5e <cos+0x1e>
 800bb50:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800bbd0 <cos+0x90>
 800bb54:	f001 fa04 	bl	800cf60 <__kernel_cos>
 800bb58:	ec51 0b10 	vmov	r0, r1, d0
 800bb5c:	e007      	b.n	800bb6e <cos+0x2e>
 800bb5e:	481f      	ldr	r0, [pc, #124]	; (800bbdc <cos+0x9c>)
 800bb60:	4281      	cmp	r1, r0
 800bb62:	dd09      	ble.n	800bb78 <cos+0x38>
 800bb64:	ee10 0a10 	vmov	r0, s0
 800bb68:	4619      	mov	r1, r3
 800bb6a:	f7f4 fb95 	bl	8000298 <__aeabi_dsub>
 800bb6e:	ec41 0b10 	vmov	d0, r0, r1
 800bb72:	b005      	add	sp, #20
 800bb74:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb78:	4668      	mov	r0, sp
 800bb7a:	f000 fc6d 	bl	800c458 <__ieee754_rem_pio2>
 800bb7e:	f000 0003 	and.w	r0, r0, #3
 800bb82:	2801      	cmp	r0, #1
 800bb84:	d007      	beq.n	800bb96 <cos+0x56>
 800bb86:	2802      	cmp	r0, #2
 800bb88:	d012      	beq.n	800bbb0 <cos+0x70>
 800bb8a:	b9c0      	cbnz	r0, 800bbbe <cos+0x7e>
 800bb8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb90:	ed9d 0b00 	vldr	d0, [sp]
 800bb94:	e7de      	b.n	800bb54 <cos+0x14>
 800bb96:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb9a:	ed9d 0b00 	vldr	d0, [sp]
 800bb9e:	f001 fde7 	bl	800d770 <__kernel_sin>
 800bba2:	ec53 2b10 	vmov	r2, r3, d0
 800bba6:	ee10 0a10 	vmov	r0, s0
 800bbaa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bbae:	e7de      	b.n	800bb6e <cos+0x2e>
 800bbb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbb4:	ed9d 0b00 	vldr	d0, [sp]
 800bbb8:	f001 f9d2 	bl	800cf60 <__kernel_cos>
 800bbbc:	e7f1      	b.n	800bba2 <cos+0x62>
 800bbbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbc2:	ed9d 0b00 	vldr	d0, [sp]
 800bbc6:	2001      	movs	r0, #1
 800bbc8:	f001 fdd2 	bl	800d770 <__kernel_sin>
 800bbcc:	e7c4      	b.n	800bb58 <cos+0x18>
 800bbce:	bf00      	nop
	...
 800bbd8:	3fe921fb 	.word	0x3fe921fb
 800bbdc:	7fefffff 	.word	0x7fefffff

0800bbe0 <sin>:
 800bbe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbe2:	ec53 2b10 	vmov	r2, r3, d0
 800bbe6:	4826      	ldr	r0, [pc, #152]	; (800bc80 <sin+0xa0>)
 800bbe8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bbec:	4281      	cmp	r1, r0
 800bbee:	dc07      	bgt.n	800bc00 <sin+0x20>
 800bbf0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800bc78 <sin+0x98>
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	f001 fdbb 	bl	800d770 <__kernel_sin>
 800bbfa:	ec51 0b10 	vmov	r0, r1, d0
 800bbfe:	e007      	b.n	800bc10 <sin+0x30>
 800bc00:	4820      	ldr	r0, [pc, #128]	; (800bc84 <sin+0xa4>)
 800bc02:	4281      	cmp	r1, r0
 800bc04:	dd09      	ble.n	800bc1a <sin+0x3a>
 800bc06:	ee10 0a10 	vmov	r0, s0
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	f7f4 fb44 	bl	8000298 <__aeabi_dsub>
 800bc10:	ec41 0b10 	vmov	d0, r0, r1
 800bc14:	b005      	add	sp, #20
 800bc16:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc1a:	4668      	mov	r0, sp
 800bc1c:	f000 fc1c 	bl	800c458 <__ieee754_rem_pio2>
 800bc20:	f000 0003 	and.w	r0, r0, #3
 800bc24:	2801      	cmp	r0, #1
 800bc26:	d008      	beq.n	800bc3a <sin+0x5a>
 800bc28:	2802      	cmp	r0, #2
 800bc2a:	d00d      	beq.n	800bc48 <sin+0x68>
 800bc2c:	b9d0      	cbnz	r0, 800bc64 <sin+0x84>
 800bc2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bc32:	ed9d 0b00 	vldr	d0, [sp]
 800bc36:	2001      	movs	r0, #1
 800bc38:	e7dd      	b.n	800bbf6 <sin+0x16>
 800bc3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bc3e:	ed9d 0b00 	vldr	d0, [sp]
 800bc42:	f001 f98d 	bl	800cf60 <__kernel_cos>
 800bc46:	e7d8      	b.n	800bbfa <sin+0x1a>
 800bc48:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bc4c:	ed9d 0b00 	vldr	d0, [sp]
 800bc50:	2001      	movs	r0, #1
 800bc52:	f001 fd8d 	bl	800d770 <__kernel_sin>
 800bc56:	ec53 2b10 	vmov	r2, r3, d0
 800bc5a:	ee10 0a10 	vmov	r0, s0
 800bc5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bc62:	e7d5      	b.n	800bc10 <sin+0x30>
 800bc64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bc68:	ed9d 0b00 	vldr	d0, [sp]
 800bc6c:	f001 f978 	bl	800cf60 <__kernel_cos>
 800bc70:	e7f1      	b.n	800bc56 <sin+0x76>
 800bc72:	bf00      	nop
 800bc74:	f3af 8000 	nop.w
	...
 800bc80:	3fe921fb 	.word	0x3fe921fb
 800bc84:	7fefffff 	.word	0x7fefffff

0800bc88 <asin>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	ed2d 8b02 	vpush	{d8}
 800bc8e:	ec55 4b10 	vmov	r4, r5, d0
 800bc92:	f000 f901 	bl	800be98 <__ieee754_asin>
 800bc96:	4b16      	ldr	r3, [pc, #88]	; (800bcf0 <asin+0x68>)
 800bc98:	eeb0 8a40 	vmov.f32	s16, s0
 800bc9c:	eef0 8a60 	vmov.f32	s17, s1
 800bca0:	f993 3000 	ldrsb.w	r3, [r3]
 800bca4:	3301      	adds	r3, #1
 800bca6:	d01c      	beq.n	800bce2 <asin+0x5a>
 800bca8:	4622      	mov	r2, r4
 800bcaa:	462b      	mov	r3, r5
 800bcac:	4620      	mov	r0, r4
 800bcae:	4629      	mov	r1, r5
 800bcb0:	f7f4 ff44 	bl	8000b3c <__aeabi_dcmpun>
 800bcb4:	b9a8      	cbnz	r0, 800bce2 <asin+0x5a>
 800bcb6:	ec45 4b10 	vmov	d0, r4, r5
 800bcba:	f001 ffb9 	bl	800dc30 <fabs>
 800bcbe:	4b0d      	ldr	r3, [pc, #52]	; (800bcf4 <asin+0x6c>)
 800bcc0:	ec51 0b10 	vmov	r0, r1, d0
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f7f4 ff2f 	bl	8000b28 <__aeabi_dcmpgt>
 800bcca:	b150      	cbz	r0, 800bce2 <asin+0x5a>
 800bccc:	f002 f9b2 	bl	800e034 <__errno>
 800bcd0:	ecbd 8b02 	vpop	{d8}
 800bcd4:	2321      	movs	r3, #33	; 0x21
 800bcd6:	6003      	str	r3, [r0, #0]
 800bcd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcdc:	4806      	ldr	r0, [pc, #24]	; (800bcf8 <asin+0x70>)
 800bcde:	f002 b833 	b.w	800dd48 <nan>
 800bce2:	eeb0 0a48 	vmov.f32	s0, s16
 800bce6:	eef0 0a68 	vmov.f32	s1, s17
 800bcea:	ecbd 8b02 	vpop	{d8}
 800bcee:	bd38      	pop	{r3, r4, r5, pc}
 800bcf0:	2000005d 	.word	0x2000005d
 800bcf4:	3ff00000 	.word	0x3ff00000
 800bcf8:	08013a1b 	.word	0x08013a1b

0800bcfc <atan2>:
 800bcfc:	f000 bae0 	b.w	800c2c0 <__ieee754_atan2>

0800bd00 <sqrt>:
 800bd00:	b538      	push	{r3, r4, r5, lr}
 800bd02:	ed2d 8b02 	vpush	{d8}
 800bd06:	ec55 4b10 	vmov	r4, r5, d0
 800bd0a:	f000 fdaf 	bl	800c86c <__ieee754_sqrt>
 800bd0e:	4b15      	ldr	r3, [pc, #84]	; (800bd64 <sqrt+0x64>)
 800bd10:	eeb0 8a40 	vmov.f32	s16, s0
 800bd14:	eef0 8a60 	vmov.f32	s17, s1
 800bd18:	f993 3000 	ldrsb.w	r3, [r3]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	d019      	beq.n	800bd54 <sqrt+0x54>
 800bd20:	4622      	mov	r2, r4
 800bd22:	462b      	mov	r3, r5
 800bd24:	4620      	mov	r0, r4
 800bd26:	4629      	mov	r1, r5
 800bd28:	f7f4 ff08 	bl	8000b3c <__aeabi_dcmpun>
 800bd2c:	b990      	cbnz	r0, 800bd54 <sqrt+0x54>
 800bd2e:	2200      	movs	r2, #0
 800bd30:	2300      	movs	r3, #0
 800bd32:	4620      	mov	r0, r4
 800bd34:	4629      	mov	r1, r5
 800bd36:	f7f4 fed9 	bl	8000aec <__aeabi_dcmplt>
 800bd3a:	b158      	cbz	r0, 800bd54 <sqrt+0x54>
 800bd3c:	f002 f97a 	bl	800e034 <__errno>
 800bd40:	2321      	movs	r3, #33	; 0x21
 800bd42:	6003      	str	r3, [r0, #0]
 800bd44:	2200      	movs	r2, #0
 800bd46:	2300      	movs	r3, #0
 800bd48:	4610      	mov	r0, r2
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	f7f4 fd86 	bl	800085c <__aeabi_ddiv>
 800bd50:	ec41 0b18 	vmov	d8, r0, r1
 800bd54:	eeb0 0a48 	vmov.f32	s0, s16
 800bd58:	eef0 0a68 	vmov.f32	s1, s17
 800bd5c:	ecbd 8b02 	vpop	{d8}
 800bd60:	bd38      	pop	{r3, r4, r5, pc}
 800bd62:	bf00      	nop
 800bd64:	2000005d 	.word	0x2000005d

0800bd68 <powf>:
 800bd68:	b508      	push	{r3, lr}
 800bd6a:	ed2d 8b04 	vpush	{d8-d9}
 800bd6e:	eeb0 9a40 	vmov.f32	s18, s0
 800bd72:	eef0 8a60 	vmov.f32	s17, s1
 800bd76:	f000 fe2d 	bl	800c9d4 <__ieee754_powf>
 800bd7a:	4b43      	ldr	r3, [pc, #268]	; (800be88 <powf+0x120>)
 800bd7c:	f993 3000 	ldrsb.w	r3, [r3]
 800bd80:	3301      	adds	r3, #1
 800bd82:	eeb0 8a40 	vmov.f32	s16, s0
 800bd86:	d012      	beq.n	800bdae <powf+0x46>
 800bd88:	eef4 8a68 	vcmp.f32	s17, s17
 800bd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd90:	d60d      	bvs.n	800bdae <powf+0x46>
 800bd92:	eeb4 9a49 	vcmp.f32	s18, s18
 800bd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd9a:	d70d      	bvc.n	800bdb8 <powf+0x50>
 800bd9c:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bda8:	bf08      	it	eq
 800bdaa:	eeb0 8a67 	vmoveq.f32	s16, s15
 800bdae:	eeb0 0a48 	vmov.f32	s0, s16
 800bdb2:	ecbd 8b04 	vpop	{d8-d9}
 800bdb6:	bd08      	pop	{r3, pc}
 800bdb8:	eddf 9a34 	vldr	s19, [pc, #208]	; 800be8c <powf+0x124>
 800bdbc:	eeb4 9a69 	vcmp.f32	s18, s19
 800bdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdc4:	d116      	bne.n	800bdf4 <powf+0x8c>
 800bdc6:	eef4 8a69 	vcmp.f32	s17, s19
 800bdca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdce:	d057      	beq.n	800be80 <powf+0x118>
 800bdd0:	eeb0 0a68 	vmov.f32	s0, s17
 800bdd4:	f002 f84d 	bl	800de72 <finitef>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d0e8      	beq.n	800bdae <powf+0x46>
 800bddc:	eef4 8ae9 	vcmpe.f32	s17, s19
 800bde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde4:	d5e3      	bpl.n	800bdae <powf+0x46>
 800bde6:	f002 f925 	bl	800e034 <__errno>
 800bdea:	2321      	movs	r3, #33	; 0x21
 800bdec:	6003      	str	r3, [r0, #0]
 800bdee:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800be90 <powf+0x128>
 800bdf2:	e7dc      	b.n	800bdae <powf+0x46>
 800bdf4:	f002 f83d 	bl	800de72 <finitef>
 800bdf8:	bb50      	cbnz	r0, 800be50 <powf+0xe8>
 800bdfa:	eeb0 0a49 	vmov.f32	s0, s18
 800bdfe:	f002 f838 	bl	800de72 <finitef>
 800be02:	b328      	cbz	r0, 800be50 <powf+0xe8>
 800be04:	eeb0 0a68 	vmov.f32	s0, s17
 800be08:	f002 f833 	bl	800de72 <finitef>
 800be0c:	b300      	cbz	r0, 800be50 <powf+0xe8>
 800be0e:	eeb4 8a48 	vcmp.f32	s16, s16
 800be12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be16:	d706      	bvc.n	800be26 <powf+0xbe>
 800be18:	f002 f90c 	bl	800e034 <__errno>
 800be1c:	2321      	movs	r3, #33	; 0x21
 800be1e:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800be22:	6003      	str	r3, [r0, #0]
 800be24:	e7c3      	b.n	800bdae <powf+0x46>
 800be26:	f002 f905 	bl	800e034 <__errno>
 800be2a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800be2e:	2322      	movs	r3, #34	; 0x22
 800be30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be34:	6003      	str	r3, [r0, #0]
 800be36:	d508      	bpl.n	800be4a <powf+0xe2>
 800be38:	eeb0 0a68 	vmov.f32	s0, s17
 800be3c:	f002 f82c 	bl	800de98 <rintf>
 800be40:	eeb4 0a68 	vcmp.f32	s0, s17
 800be44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be48:	d1d1      	bne.n	800bdee <powf+0x86>
 800be4a:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800be94 <powf+0x12c>
 800be4e:	e7ae      	b.n	800bdae <powf+0x46>
 800be50:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800be54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be58:	d1a9      	bne.n	800bdae <powf+0x46>
 800be5a:	eeb0 0a49 	vmov.f32	s0, s18
 800be5e:	f002 f808 	bl	800de72 <finitef>
 800be62:	2800      	cmp	r0, #0
 800be64:	d0a3      	beq.n	800bdae <powf+0x46>
 800be66:	eeb0 0a68 	vmov.f32	s0, s17
 800be6a:	f002 f802 	bl	800de72 <finitef>
 800be6e:	2800      	cmp	r0, #0
 800be70:	d09d      	beq.n	800bdae <powf+0x46>
 800be72:	f002 f8df 	bl	800e034 <__errno>
 800be76:	2322      	movs	r3, #34	; 0x22
 800be78:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800be8c <powf+0x124>
 800be7c:	6003      	str	r3, [r0, #0]
 800be7e:	e796      	b.n	800bdae <powf+0x46>
 800be80:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800be84:	e793      	b.n	800bdae <powf+0x46>
 800be86:	bf00      	nop
 800be88:	2000005d 	.word	0x2000005d
 800be8c:	00000000 	.word	0x00000000
 800be90:	ff800000 	.word	0xff800000
 800be94:	7f800000 	.word	0x7f800000

0800be98 <__ieee754_asin>:
 800be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	ed2d 8b04 	vpush	{d8-d9}
 800bea0:	ec55 4b10 	vmov	r4, r5, d0
 800bea4:	4bcc      	ldr	r3, [pc, #816]	; (800c1d8 <__ieee754_asin+0x340>)
 800bea6:	b083      	sub	sp, #12
 800bea8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800beac:	4598      	cmp	r8, r3
 800beae:	9501      	str	r5, [sp, #4]
 800beb0:	dd35      	ble.n	800bf1e <__ieee754_asin+0x86>
 800beb2:	ee10 3a10 	vmov	r3, s0
 800beb6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800beba:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800bebe:	ea58 0303 	orrs.w	r3, r8, r3
 800bec2:	d117      	bne.n	800bef4 <__ieee754_asin+0x5c>
 800bec4:	a3aa      	add	r3, pc, #680	; (adr r3, 800c170 <__ieee754_asin+0x2d8>)
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	ee10 0a10 	vmov	r0, s0
 800bece:	4629      	mov	r1, r5
 800bed0:	f7f4 fb9a 	bl	8000608 <__aeabi_dmul>
 800bed4:	a3a8      	add	r3, pc, #672	; (adr r3, 800c178 <__ieee754_asin+0x2e0>)
 800bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beda:	4606      	mov	r6, r0
 800bedc:	460f      	mov	r7, r1
 800bede:	4620      	mov	r0, r4
 800bee0:	4629      	mov	r1, r5
 800bee2:	f7f4 fb91 	bl	8000608 <__aeabi_dmul>
 800bee6:	4602      	mov	r2, r0
 800bee8:	460b      	mov	r3, r1
 800beea:	4630      	mov	r0, r6
 800beec:	4639      	mov	r1, r7
 800beee:	f7f4 f9d5 	bl	800029c <__adddf3>
 800bef2:	e00b      	b.n	800bf0c <__ieee754_asin+0x74>
 800bef4:	ee10 2a10 	vmov	r2, s0
 800bef8:	462b      	mov	r3, r5
 800befa:	ee10 0a10 	vmov	r0, s0
 800befe:	4629      	mov	r1, r5
 800bf00:	f7f4 f9ca 	bl	8000298 <__aeabi_dsub>
 800bf04:	4602      	mov	r2, r0
 800bf06:	460b      	mov	r3, r1
 800bf08:	f7f4 fca8 	bl	800085c <__aeabi_ddiv>
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	460d      	mov	r5, r1
 800bf10:	ec45 4b10 	vmov	d0, r4, r5
 800bf14:	b003      	add	sp, #12
 800bf16:	ecbd 8b04 	vpop	{d8-d9}
 800bf1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf1e:	4baf      	ldr	r3, [pc, #700]	; (800c1dc <__ieee754_asin+0x344>)
 800bf20:	4598      	cmp	r8, r3
 800bf22:	dc11      	bgt.n	800bf48 <__ieee754_asin+0xb0>
 800bf24:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bf28:	f280 80ae 	bge.w	800c088 <__ieee754_asin+0x1f0>
 800bf2c:	a394      	add	r3, pc, #592	; (adr r3, 800c180 <__ieee754_asin+0x2e8>)
 800bf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf32:	ee10 0a10 	vmov	r0, s0
 800bf36:	4629      	mov	r1, r5
 800bf38:	f7f4 f9b0 	bl	800029c <__adddf3>
 800bf3c:	4ba8      	ldr	r3, [pc, #672]	; (800c1e0 <__ieee754_asin+0x348>)
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f7f4 fdf2 	bl	8000b28 <__aeabi_dcmpgt>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d1e3      	bne.n	800bf10 <__ieee754_asin+0x78>
 800bf48:	ec45 4b10 	vmov	d0, r4, r5
 800bf4c:	f001 fe70 	bl	800dc30 <fabs>
 800bf50:	49a3      	ldr	r1, [pc, #652]	; (800c1e0 <__ieee754_asin+0x348>)
 800bf52:	ec53 2b10 	vmov	r2, r3, d0
 800bf56:	2000      	movs	r0, #0
 800bf58:	f7f4 f99e 	bl	8000298 <__aeabi_dsub>
 800bf5c:	4ba1      	ldr	r3, [pc, #644]	; (800c1e4 <__ieee754_asin+0x34c>)
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f7f4 fb52 	bl	8000608 <__aeabi_dmul>
 800bf64:	a388      	add	r3, pc, #544	; (adr r3, 800c188 <__ieee754_asin+0x2f0>)
 800bf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	460d      	mov	r5, r1
 800bf6e:	f7f4 fb4b 	bl	8000608 <__aeabi_dmul>
 800bf72:	a387      	add	r3, pc, #540	; (adr r3, 800c190 <__ieee754_asin+0x2f8>)
 800bf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf78:	f7f4 f990 	bl	800029c <__adddf3>
 800bf7c:	4622      	mov	r2, r4
 800bf7e:	462b      	mov	r3, r5
 800bf80:	f7f4 fb42 	bl	8000608 <__aeabi_dmul>
 800bf84:	a384      	add	r3, pc, #528	; (adr r3, 800c198 <__ieee754_asin+0x300>)
 800bf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8a:	f7f4 f985 	bl	8000298 <__aeabi_dsub>
 800bf8e:	4622      	mov	r2, r4
 800bf90:	462b      	mov	r3, r5
 800bf92:	f7f4 fb39 	bl	8000608 <__aeabi_dmul>
 800bf96:	a382      	add	r3, pc, #520	; (adr r3, 800c1a0 <__ieee754_asin+0x308>)
 800bf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9c:	f7f4 f97e 	bl	800029c <__adddf3>
 800bfa0:	4622      	mov	r2, r4
 800bfa2:	462b      	mov	r3, r5
 800bfa4:	f7f4 fb30 	bl	8000608 <__aeabi_dmul>
 800bfa8:	a37f      	add	r3, pc, #508	; (adr r3, 800c1a8 <__ieee754_asin+0x310>)
 800bfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfae:	f7f4 f973 	bl	8000298 <__aeabi_dsub>
 800bfb2:	4622      	mov	r2, r4
 800bfb4:	462b      	mov	r3, r5
 800bfb6:	f7f4 fb27 	bl	8000608 <__aeabi_dmul>
 800bfba:	a37d      	add	r3, pc, #500	; (adr r3, 800c1b0 <__ieee754_asin+0x318>)
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	f7f4 f96c 	bl	800029c <__adddf3>
 800bfc4:	4622      	mov	r2, r4
 800bfc6:	462b      	mov	r3, r5
 800bfc8:	f7f4 fb1e 	bl	8000608 <__aeabi_dmul>
 800bfcc:	a37a      	add	r3, pc, #488	; (adr r3, 800c1b8 <__ieee754_asin+0x320>)
 800bfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd2:	ec41 0b18 	vmov	d8, r0, r1
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	4629      	mov	r1, r5
 800bfda:	f7f4 fb15 	bl	8000608 <__aeabi_dmul>
 800bfde:	a378      	add	r3, pc, #480	; (adr r3, 800c1c0 <__ieee754_asin+0x328>)
 800bfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe4:	f7f4 f958 	bl	8000298 <__aeabi_dsub>
 800bfe8:	4622      	mov	r2, r4
 800bfea:	462b      	mov	r3, r5
 800bfec:	f7f4 fb0c 	bl	8000608 <__aeabi_dmul>
 800bff0:	a375      	add	r3, pc, #468	; (adr r3, 800c1c8 <__ieee754_asin+0x330>)
 800bff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff6:	f7f4 f951 	bl	800029c <__adddf3>
 800bffa:	4622      	mov	r2, r4
 800bffc:	462b      	mov	r3, r5
 800bffe:	f7f4 fb03 	bl	8000608 <__aeabi_dmul>
 800c002:	a373      	add	r3, pc, #460	; (adr r3, 800c1d0 <__ieee754_asin+0x338>)
 800c004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c008:	f7f4 f946 	bl	8000298 <__aeabi_dsub>
 800c00c:	4622      	mov	r2, r4
 800c00e:	462b      	mov	r3, r5
 800c010:	f7f4 fafa 	bl	8000608 <__aeabi_dmul>
 800c014:	4b72      	ldr	r3, [pc, #456]	; (800c1e0 <__ieee754_asin+0x348>)
 800c016:	2200      	movs	r2, #0
 800c018:	f7f4 f940 	bl	800029c <__adddf3>
 800c01c:	ec45 4b10 	vmov	d0, r4, r5
 800c020:	4606      	mov	r6, r0
 800c022:	460f      	mov	r7, r1
 800c024:	f000 fc22 	bl	800c86c <__ieee754_sqrt>
 800c028:	4b6f      	ldr	r3, [pc, #444]	; (800c1e8 <__ieee754_asin+0x350>)
 800c02a:	4598      	cmp	r8, r3
 800c02c:	ec5b ab10 	vmov	sl, fp, d0
 800c030:	f340 80dc 	ble.w	800c1ec <__ieee754_asin+0x354>
 800c034:	4632      	mov	r2, r6
 800c036:	463b      	mov	r3, r7
 800c038:	ec51 0b18 	vmov	r0, r1, d8
 800c03c:	f7f4 fc0e 	bl	800085c <__aeabi_ddiv>
 800c040:	4652      	mov	r2, sl
 800c042:	465b      	mov	r3, fp
 800c044:	f7f4 fae0 	bl	8000608 <__aeabi_dmul>
 800c048:	4652      	mov	r2, sl
 800c04a:	465b      	mov	r3, fp
 800c04c:	f7f4 f926 	bl	800029c <__adddf3>
 800c050:	4602      	mov	r2, r0
 800c052:	460b      	mov	r3, r1
 800c054:	f7f4 f922 	bl	800029c <__adddf3>
 800c058:	a347      	add	r3, pc, #284	; (adr r3, 800c178 <__ieee754_asin+0x2e0>)
 800c05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05e:	f7f4 f91b 	bl	8000298 <__aeabi_dsub>
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	a142      	add	r1, pc, #264	; (adr r1, 800c170 <__ieee754_asin+0x2d8>)
 800c068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c06c:	f7f4 f914 	bl	8000298 <__aeabi_dsub>
 800c070:	9b01      	ldr	r3, [sp, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	bfdc      	itt	le
 800c076:	4602      	movle	r2, r0
 800c078:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800c07c:	4604      	mov	r4, r0
 800c07e:	460d      	mov	r5, r1
 800c080:	bfdc      	itt	le
 800c082:	4614      	movle	r4, r2
 800c084:	461d      	movle	r5, r3
 800c086:	e743      	b.n	800bf10 <__ieee754_asin+0x78>
 800c088:	ee10 2a10 	vmov	r2, s0
 800c08c:	ee10 0a10 	vmov	r0, s0
 800c090:	462b      	mov	r3, r5
 800c092:	4629      	mov	r1, r5
 800c094:	f7f4 fab8 	bl	8000608 <__aeabi_dmul>
 800c098:	a33b      	add	r3, pc, #236	; (adr r3, 800c188 <__ieee754_asin+0x2f0>)
 800c09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09e:	4606      	mov	r6, r0
 800c0a0:	460f      	mov	r7, r1
 800c0a2:	f7f4 fab1 	bl	8000608 <__aeabi_dmul>
 800c0a6:	a33a      	add	r3, pc, #232	; (adr r3, 800c190 <__ieee754_asin+0x2f8>)
 800c0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ac:	f7f4 f8f6 	bl	800029c <__adddf3>
 800c0b0:	4632      	mov	r2, r6
 800c0b2:	463b      	mov	r3, r7
 800c0b4:	f7f4 faa8 	bl	8000608 <__aeabi_dmul>
 800c0b8:	a337      	add	r3, pc, #220	; (adr r3, 800c198 <__ieee754_asin+0x300>)
 800c0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0be:	f7f4 f8eb 	bl	8000298 <__aeabi_dsub>
 800c0c2:	4632      	mov	r2, r6
 800c0c4:	463b      	mov	r3, r7
 800c0c6:	f7f4 fa9f 	bl	8000608 <__aeabi_dmul>
 800c0ca:	a335      	add	r3, pc, #212	; (adr r3, 800c1a0 <__ieee754_asin+0x308>)
 800c0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d0:	f7f4 f8e4 	bl	800029c <__adddf3>
 800c0d4:	4632      	mov	r2, r6
 800c0d6:	463b      	mov	r3, r7
 800c0d8:	f7f4 fa96 	bl	8000608 <__aeabi_dmul>
 800c0dc:	a332      	add	r3, pc, #200	; (adr r3, 800c1a8 <__ieee754_asin+0x310>)
 800c0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e2:	f7f4 f8d9 	bl	8000298 <__aeabi_dsub>
 800c0e6:	4632      	mov	r2, r6
 800c0e8:	463b      	mov	r3, r7
 800c0ea:	f7f4 fa8d 	bl	8000608 <__aeabi_dmul>
 800c0ee:	a330      	add	r3, pc, #192	; (adr r3, 800c1b0 <__ieee754_asin+0x318>)
 800c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f4:	f7f4 f8d2 	bl	800029c <__adddf3>
 800c0f8:	4632      	mov	r2, r6
 800c0fa:	463b      	mov	r3, r7
 800c0fc:	f7f4 fa84 	bl	8000608 <__aeabi_dmul>
 800c100:	a32d      	add	r3, pc, #180	; (adr r3, 800c1b8 <__ieee754_asin+0x320>)
 800c102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c106:	4680      	mov	r8, r0
 800c108:	4689      	mov	r9, r1
 800c10a:	4630      	mov	r0, r6
 800c10c:	4639      	mov	r1, r7
 800c10e:	f7f4 fa7b 	bl	8000608 <__aeabi_dmul>
 800c112:	a32b      	add	r3, pc, #172	; (adr r3, 800c1c0 <__ieee754_asin+0x328>)
 800c114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c118:	f7f4 f8be 	bl	8000298 <__aeabi_dsub>
 800c11c:	4632      	mov	r2, r6
 800c11e:	463b      	mov	r3, r7
 800c120:	f7f4 fa72 	bl	8000608 <__aeabi_dmul>
 800c124:	a328      	add	r3, pc, #160	; (adr r3, 800c1c8 <__ieee754_asin+0x330>)
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	f7f4 f8b7 	bl	800029c <__adddf3>
 800c12e:	4632      	mov	r2, r6
 800c130:	463b      	mov	r3, r7
 800c132:	f7f4 fa69 	bl	8000608 <__aeabi_dmul>
 800c136:	a326      	add	r3, pc, #152	; (adr r3, 800c1d0 <__ieee754_asin+0x338>)
 800c138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13c:	f7f4 f8ac 	bl	8000298 <__aeabi_dsub>
 800c140:	4632      	mov	r2, r6
 800c142:	463b      	mov	r3, r7
 800c144:	f7f4 fa60 	bl	8000608 <__aeabi_dmul>
 800c148:	4b25      	ldr	r3, [pc, #148]	; (800c1e0 <__ieee754_asin+0x348>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	f7f4 f8a6 	bl	800029c <__adddf3>
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	4640      	mov	r0, r8
 800c156:	4649      	mov	r1, r9
 800c158:	f7f4 fb80 	bl	800085c <__aeabi_ddiv>
 800c15c:	4622      	mov	r2, r4
 800c15e:	462b      	mov	r3, r5
 800c160:	f7f4 fa52 	bl	8000608 <__aeabi_dmul>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4620      	mov	r0, r4
 800c16a:	4629      	mov	r1, r5
 800c16c:	e6bf      	b.n	800beee <__ieee754_asin+0x56>
 800c16e:	bf00      	nop
 800c170:	54442d18 	.word	0x54442d18
 800c174:	3ff921fb 	.word	0x3ff921fb
 800c178:	33145c07 	.word	0x33145c07
 800c17c:	3c91a626 	.word	0x3c91a626
 800c180:	8800759c 	.word	0x8800759c
 800c184:	7e37e43c 	.word	0x7e37e43c
 800c188:	0dfdf709 	.word	0x0dfdf709
 800c18c:	3f023de1 	.word	0x3f023de1
 800c190:	7501b288 	.word	0x7501b288
 800c194:	3f49efe0 	.word	0x3f49efe0
 800c198:	b5688f3b 	.word	0xb5688f3b
 800c19c:	3fa48228 	.word	0x3fa48228
 800c1a0:	0e884455 	.word	0x0e884455
 800c1a4:	3fc9c155 	.word	0x3fc9c155
 800c1a8:	03eb6f7d 	.word	0x03eb6f7d
 800c1ac:	3fd4d612 	.word	0x3fd4d612
 800c1b0:	55555555 	.word	0x55555555
 800c1b4:	3fc55555 	.word	0x3fc55555
 800c1b8:	b12e9282 	.word	0xb12e9282
 800c1bc:	3fb3b8c5 	.word	0x3fb3b8c5
 800c1c0:	1b8d0159 	.word	0x1b8d0159
 800c1c4:	3fe6066c 	.word	0x3fe6066c
 800c1c8:	9c598ac8 	.word	0x9c598ac8
 800c1cc:	40002ae5 	.word	0x40002ae5
 800c1d0:	1c8a2d4b 	.word	0x1c8a2d4b
 800c1d4:	40033a27 	.word	0x40033a27
 800c1d8:	3fefffff 	.word	0x3fefffff
 800c1dc:	3fdfffff 	.word	0x3fdfffff
 800c1e0:	3ff00000 	.word	0x3ff00000
 800c1e4:	3fe00000 	.word	0x3fe00000
 800c1e8:	3fef3332 	.word	0x3fef3332
 800c1ec:	ee10 2a10 	vmov	r2, s0
 800c1f0:	ee10 0a10 	vmov	r0, s0
 800c1f4:	465b      	mov	r3, fp
 800c1f6:	4659      	mov	r1, fp
 800c1f8:	f7f4 f850 	bl	800029c <__adddf3>
 800c1fc:	4632      	mov	r2, r6
 800c1fe:	463b      	mov	r3, r7
 800c200:	ec41 0b19 	vmov	d9, r0, r1
 800c204:	ec51 0b18 	vmov	r0, r1, d8
 800c208:	f7f4 fb28 	bl	800085c <__aeabi_ddiv>
 800c20c:	4602      	mov	r2, r0
 800c20e:	460b      	mov	r3, r1
 800c210:	ec51 0b19 	vmov	r0, r1, d9
 800c214:	f7f4 f9f8 	bl	8000608 <__aeabi_dmul>
 800c218:	f04f 0800 	mov.w	r8, #0
 800c21c:	4606      	mov	r6, r0
 800c21e:	460f      	mov	r7, r1
 800c220:	4642      	mov	r2, r8
 800c222:	465b      	mov	r3, fp
 800c224:	4640      	mov	r0, r8
 800c226:	4659      	mov	r1, fp
 800c228:	f7f4 f9ee 	bl	8000608 <__aeabi_dmul>
 800c22c:	4602      	mov	r2, r0
 800c22e:	460b      	mov	r3, r1
 800c230:	4620      	mov	r0, r4
 800c232:	4629      	mov	r1, r5
 800c234:	f7f4 f830 	bl	8000298 <__aeabi_dsub>
 800c238:	4642      	mov	r2, r8
 800c23a:	4604      	mov	r4, r0
 800c23c:	460d      	mov	r5, r1
 800c23e:	465b      	mov	r3, fp
 800c240:	4650      	mov	r0, sl
 800c242:	4659      	mov	r1, fp
 800c244:	f7f4 f82a 	bl	800029c <__adddf3>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	4620      	mov	r0, r4
 800c24e:	4629      	mov	r1, r5
 800c250:	f7f4 fb04 	bl	800085c <__aeabi_ddiv>
 800c254:	4602      	mov	r2, r0
 800c256:	460b      	mov	r3, r1
 800c258:	f7f4 f820 	bl	800029c <__adddf3>
 800c25c:	4602      	mov	r2, r0
 800c25e:	460b      	mov	r3, r1
 800c260:	a113      	add	r1, pc, #76	; (adr r1, 800c2b0 <__ieee754_asin+0x418>)
 800c262:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c266:	f7f4 f817 	bl	8000298 <__aeabi_dsub>
 800c26a:	4602      	mov	r2, r0
 800c26c:	460b      	mov	r3, r1
 800c26e:	4630      	mov	r0, r6
 800c270:	4639      	mov	r1, r7
 800c272:	f7f4 f811 	bl	8000298 <__aeabi_dsub>
 800c276:	4642      	mov	r2, r8
 800c278:	4604      	mov	r4, r0
 800c27a:	460d      	mov	r5, r1
 800c27c:	465b      	mov	r3, fp
 800c27e:	4640      	mov	r0, r8
 800c280:	4659      	mov	r1, fp
 800c282:	f7f4 f80b 	bl	800029c <__adddf3>
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	a10b      	add	r1, pc, #44	; (adr r1, 800c2b8 <__ieee754_asin+0x420>)
 800c28c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c290:	f7f4 f802 	bl	8000298 <__aeabi_dsub>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4620      	mov	r0, r4
 800c29a:	4629      	mov	r1, r5
 800c29c:	f7f3 fffc 	bl	8000298 <__aeabi_dsub>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	a104      	add	r1, pc, #16	; (adr r1, 800c2b8 <__ieee754_asin+0x420>)
 800c2a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2aa:	e6df      	b.n	800c06c <__ieee754_asin+0x1d4>
 800c2ac:	f3af 8000 	nop.w
 800c2b0:	33145c07 	.word	0x33145c07
 800c2b4:	3c91a626 	.word	0x3c91a626
 800c2b8:	54442d18 	.word	0x54442d18
 800c2bc:	3fe921fb 	.word	0x3fe921fb

0800c2c0 <__ieee754_atan2>:
 800c2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2c4:	ec57 6b11 	vmov	r6, r7, d1
 800c2c8:	4273      	negs	r3, r6
 800c2ca:	f8df e184 	ldr.w	lr, [pc, #388]	; 800c450 <__ieee754_atan2+0x190>
 800c2ce:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c2d2:	4333      	orrs	r3, r6
 800c2d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c2d8:	4573      	cmp	r3, lr
 800c2da:	ec51 0b10 	vmov	r0, r1, d0
 800c2de:	ee11 8a10 	vmov	r8, s2
 800c2e2:	d80a      	bhi.n	800c2fa <__ieee754_atan2+0x3a>
 800c2e4:	4244      	negs	r4, r0
 800c2e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c2ea:	4304      	orrs	r4, r0
 800c2ec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c2f0:	4574      	cmp	r4, lr
 800c2f2:	ee10 9a10 	vmov	r9, s0
 800c2f6:	468c      	mov	ip, r1
 800c2f8:	d907      	bls.n	800c30a <__ieee754_atan2+0x4a>
 800c2fa:	4632      	mov	r2, r6
 800c2fc:	463b      	mov	r3, r7
 800c2fe:	f7f3 ffcd 	bl	800029c <__adddf3>
 800c302:	ec41 0b10 	vmov	d0, r0, r1
 800c306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c30a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c30e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c312:	4334      	orrs	r4, r6
 800c314:	d103      	bne.n	800c31e <__ieee754_atan2+0x5e>
 800c316:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c31a:	f001 bae9 	b.w	800d8f0 <atan>
 800c31e:	17bc      	asrs	r4, r7, #30
 800c320:	f004 0402 	and.w	r4, r4, #2
 800c324:	ea53 0909 	orrs.w	r9, r3, r9
 800c328:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c32c:	d107      	bne.n	800c33e <__ieee754_atan2+0x7e>
 800c32e:	2c02      	cmp	r4, #2
 800c330:	d060      	beq.n	800c3f4 <__ieee754_atan2+0x134>
 800c332:	2c03      	cmp	r4, #3
 800c334:	d1e5      	bne.n	800c302 <__ieee754_atan2+0x42>
 800c336:	a142      	add	r1, pc, #264	; (adr r1, 800c440 <__ieee754_atan2+0x180>)
 800c338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c33c:	e7e1      	b.n	800c302 <__ieee754_atan2+0x42>
 800c33e:	ea52 0808 	orrs.w	r8, r2, r8
 800c342:	d106      	bne.n	800c352 <__ieee754_atan2+0x92>
 800c344:	f1bc 0f00 	cmp.w	ip, #0
 800c348:	da5f      	bge.n	800c40a <__ieee754_atan2+0x14a>
 800c34a:	a13f      	add	r1, pc, #252	; (adr r1, 800c448 <__ieee754_atan2+0x188>)
 800c34c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c350:	e7d7      	b.n	800c302 <__ieee754_atan2+0x42>
 800c352:	4572      	cmp	r2, lr
 800c354:	d10f      	bne.n	800c376 <__ieee754_atan2+0xb6>
 800c356:	4293      	cmp	r3, r2
 800c358:	f104 34ff 	add.w	r4, r4, #4294967295
 800c35c:	d107      	bne.n	800c36e <__ieee754_atan2+0xae>
 800c35e:	2c02      	cmp	r4, #2
 800c360:	d84c      	bhi.n	800c3fc <__ieee754_atan2+0x13c>
 800c362:	4b35      	ldr	r3, [pc, #212]	; (800c438 <__ieee754_atan2+0x178>)
 800c364:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c368:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c36c:	e7c9      	b.n	800c302 <__ieee754_atan2+0x42>
 800c36e:	2c02      	cmp	r4, #2
 800c370:	d848      	bhi.n	800c404 <__ieee754_atan2+0x144>
 800c372:	4b32      	ldr	r3, [pc, #200]	; (800c43c <__ieee754_atan2+0x17c>)
 800c374:	e7f6      	b.n	800c364 <__ieee754_atan2+0xa4>
 800c376:	4573      	cmp	r3, lr
 800c378:	d0e4      	beq.n	800c344 <__ieee754_atan2+0x84>
 800c37a:	1a9b      	subs	r3, r3, r2
 800c37c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c380:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c384:	da1e      	bge.n	800c3c4 <__ieee754_atan2+0x104>
 800c386:	2f00      	cmp	r7, #0
 800c388:	da01      	bge.n	800c38e <__ieee754_atan2+0xce>
 800c38a:	323c      	adds	r2, #60	; 0x3c
 800c38c:	db1e      	blt.n	800c3cc <__ieee754_atan2+0x10c>
 800c38e:	4632      	mov	r2, r6
 800c390:	463b      	mov	r3, r7
 800c392:	f7f4 fa63 	bl	800085c <__aeabi_ddiv>
 800c396:	ec41 0b10 	vmov	d0, r0, r1
 800c39a:	f001 fc49 	bl	800dc30 <fabs>
 800c39e:	f001 faa7 	bl	800d8f0 <atan>
 800c3a2:	ec51 0b10 	vmov	r0, r1, d0
 800c3a6:	2c01      	cmp	r4, #1
 800c3a8:	d013      	beq.n	800c3d2 <__ieee754_atan2+0x112>
 800c3aa:	2c02      	cmp	r4, #2
 800c3ac:	d015      	beq.n	800c3da <__ieee754_atan2+0x11a>
 800c3ae:	2c00      	cmp	r4, #0
 800c3b0:	d0a7      	beq.n	800c302 <__ieee754_atan2+0x42>
 800c3b2:	a319      	add	r3, pc, #100	; (adr r3, 800c418 <__ieee754_atan2+0x158>)
 800c3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b8:	f7f3 ff6e 	bl	8000298 <__aeabi_dsub>
 800c3bc:	a318      	add	r3, pc, #96	; (adr r3, 800c420 <__ieee754_atan2+0x160>)
 800c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c2:	e014      	b.n	800c3ee <__ieee754_atan2+0x12e>
 800c3c4:	a118      	add	r1, pc, #96	; (adr r1, 800c428 <__ieee754_atan2+0x168>)
 800c3c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ca:	e7ec      	b.n	800c3a6 <__ieee754_atan2+0xe6>
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	e7e9      	b.n	800c3a6 <__ieee754_atan2+0xe6>
 800c3d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	e793      	b.n	800c302 <__ieee754_atan2+0x42>
 800c3da:	a30f      	add	r3, pc, #60	; (adr r3, 800c418 <__ieee754_atan2+0x158>)
 800c3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e0:	f7f3 ff5a 	bl	8000298 <__aeabi_dsub>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	a10d      	add	r1, pc, #52	; (adr r1, 800c420 <__ieee754_atan2+0x160>)
 800c3ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ee:	f7f3 ff53 	bl	8000298 <__aeabi_dsub>
 800c3f2:	e786      	b.n	800c302 <__ieee754_atan2+0x42>
 800c3f4:	a10a      	add	r1, pc, #40	; (adr r1, 800c420 <__ieee754_atan2+0x160>)
 800c3f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3fa:	e782      	b.n	800c302 <__ieee754_atan2+0x42>
 800c3fc:	a10c      	add	r1, pc, #48	; (adr r1, 800c430 <__ieee754_atan2+0x170>)
 800c3fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c402:	e77e      	b.n	800c302 <__ieee754_atan2+0x42>
 800c404:	2000      	movs	r0, #0
 800c406:	2100      	movs	r1, #0
 800c408:	e77b      	b.n	800c302 <__ieee754_atan2+0x42>
 800c40a:	a107      	add	r1, pc, #28	; (adr r1, 800c428 <__ieee754_atan2+0x168>)
 800c40c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c410:	e777      	b.n	800c302 <__ieee754_atan2+0x42>
 800c412:	bf00      	nop
 800c414:	f3af 8000 	nop.w
 800c418:	33145c07 	.word	0x33145c07
 800c41c:	3ca1a626 	.word	0x3ca1a626
 800c420:	54442d18 	.word	0x54442d18
 800c424:	400921fb 	.word	0x400921fb
 800c428:	54442d18 	.word	0x54442d18
 800c42c:	3ff921fb 	.word	0x3ff921fb
 800c430:	54442d18 	.word	0x54442d18
 800c434:	3fe921fb 	.word	0x3fe921fb
 800c438:	08013348 	.word	0x08013348
 800c43c:	08013360 	.word	0x08013360
 800c440:	54442d18 	.word	0x54442d18
 800c444:	c00921fb 	.word	0xc00921fb
 800c448:	54442d18 	.word	0x54442d18
 800c44c:	bff921fb 	.word	0xbff921fb
 800c450:	7ff00000 	.word	0x7ff00000
 800c454:	00000000 	.word	0x00000000

0800c458 <__ieee754_rem_pio2>:
 800c458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45c:	ed2d 8b02 	vpush	{d8}
 800c460:	ec55 4b10 	vmov	r4, r5, d0
 800c464:	4bca      	ldr	r3, [pc, #808]	; (800c790 <__ieee754_rem_pio2+0x338>)
 800c466:	b08b      	sub	sp, #44	; 0x2c
 800c468:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c46c:	4598      	cmp	r8, r3
 800c46e:	4682      	mov	sl, r0
 800c470:	9502      	str	r5, [sp, #8]
 800c472:	dc08      	bgt.n	800c486 <__ieee754_rem_pio2+0x2e>
 800c474:	2200      	movs	r2, #0
 800c476:	2300      	movs	r3, #0
 800c478:	ed80 0b00 	vstr	d0, [r0]
 800c47c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c480:	f04f 0b00 	mov.w	fp, #0
 800c484:	e028      	b.n	800c4d8 <__ieee754_rem_pio2+0x80>
 800c486:	4bc3      	ldr	r3, [pc, #780]	; (800c794 <__ieee754_rem_pio2+0x33c>)
 800c488:	4598      	cmp	r8, r3
 800c48a:	dc78      	bgt.n	800c57e <__ieee754_rem_pio2+0x126>
 800c48c:	9b02      	ldr	r3, [sp, #8]
 800c48e:	4ec2      	ldr	r6, [pc, #776]	; (800c798 <__ieee754_rem_pio2+0x340>)
 800c490:	2b00      	cmp	r3, #0
 800c492:	ee10 0a10 	vmov	r0, s0
 800c496:	a3b0      	add	r3, pc, #704	; (adr r3, 800c758 <__ieee754_rem_pio2+0x300>)
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	4629      	mov	r1, r5
 800c49e:	dd39      	ble.n	800c514 <__ieee754_rem_pio2+0xbc>
 800c4a0:	f7f3 fefa 	bl	8000298 <__aeabi_dsub>
 800c4a4:	45b0      	cmp	r8, r6
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	460d      	mov	r5, r1
 800c4aa:	d01b      	beq.n	800c4e4 <__ieee754_rem_pio2+0x8c>
 800c4ac:	a3ac      	add	r3, pc, #688	; (adr r3, 800c760 <__ieee754_rem_pio2+0x308>)
 800c4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b2:	f7f3 fef1 	bl	8000298 <__aeabi_dsub>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	e9ca 2300 	strd	r2, r3, [sl]
 800c4be:	4620      	mov	r0, r4
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	f7f3 fee9 	bl	8000298 <__aeabi_dsub>
 800c4c6:	a3a6      	add	r3, pc, #664	; (adr r3, 800c760 <__ieee754_rem_pio2+0x308>)
 800c4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4cc:	f7f3 fee4 	bl	8000298 <__aeabi_dsub>
 800c4d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c4d4:	f04f 0b01 	mov.w	fp, #1
 800c4d8:	4658      	mov	r0, fp
 800c4da:	b00b      	add	sp, #44	; 0x2c
 800c4dc:	ecbd 8b02 	vpop	{d8}
 800c4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e4:	a3a0      	add	r3, pc, #640	; (adr r3, 800c768 <__ieee754_rem_pio2+0x310>)
 800c4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ea:	f7f3 fed5 	bl	8000298 <__aeabi_dsub>
 800c4ee:	a3a0      	add	r3, pc, #640	; (adr r3, 800c770 <__ieee754_rem_pio2+0x318>)
 800c4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f4:	4604      	mov	r4, r0
 800c4f6:	460d      	mov	r5, r1
 800c4f8:	f7f3 fece 	bl	8000298 <__aeabi_dsub>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	460b      	mov	r3, r1
 800c500:	e9ca 2300 	strd	r2, r3, [sl]
 800c504:	4620      	mov	r0, r4
 800c506:	4629      	mov	r1, r5
 800c508:	f7f3 fec6 	bl	8000298 <__aeabi_dsub>
 800c50c:	a398      	add	r3, pc, #608	; (adr r3, 800c770 <__ieee754_rem_pio2+0x318>)
 800c50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c512:	e7db      	b.n	800c4cc <__ieee754_rem_pio2+0x74>
 800c514:	f7f3 fec2 	bl	800029c <__adddf3>
 800c518:	45b0      	cmp	r8, r6
 800c51a:	4604      	mov	r4, r0
 800c51c:	460d      	mov	r5, r1
 800c51e:	d016      	beq.n	800c54e <__ieee754_rem_pio2+0xf6>
 800c520:	a38f      	add	r3, pc, #572	; (adr r3, 800c760 <__ieee754_rem_pio2+0x308>)
 800c522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c526:	f7f3 feb9 	bl	800029c <__adddf3>
 800c52a:	4602      	mov	r2, r0
 800c52c:	460b      	mov	r3, r1
 800c52e:	e9ca 2300 	strd	r2, r3, [sl]
 800c532:	4620      	mov	r0, r4
 800c534:	4629      	mov	r1, r5
 800c536:	f7f3 feaf 	bl	8000298 <__aeabi_dsub>
 800c53a:	a389      	add	r3, pc, #548	; (adr r3, 800c760 <__ieee754_rem_pio2+0x308>)
 800c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c540:	f7f3 feac 	bl	800029c <__adddf3>
 800c544:	f04f 3bff 	mov.w	fp, #4294967295
 800c548:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c54c:	e7c4      	b.n	800c4d8 <__ieee754_rem_pio2+0x80>
 800c54e:	a386      	add	r3, pc, #536	; (adr r3, 800c768 <__ieee754_rem_pio2+0x310>)
 800c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c554:	f7f3 fea2 	bl	800029c <__adddf3>
 800c558:	a385      	add	r3, pc, #532	; (adr r3, 800c770 <__ieee754_rem_pio2+0x318>)
 800c55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55e:	4604      	mov	r4, r0
 800c560:	460d      	mov	r5, r1
 800c562:	f7f3 fe9b 	bl	800029c <__adddf3>
 800c566:	4602      	mov	r2, r0
 800c568:	460b      	mov	r3, r1
 800c56a:	e9ca 2300 	strd	r2, r3, [sl]
 800c56e:	4620      	mov	r0, r4
 800c570:	4629      	mov	r1, r5
 800c572:	f7f3 fe91 	bl	8000298 <__aeabi_dsub>
 800c576:	a37e      	add	r3, pc, #504	; (adr r3, 800c770 <__ieee754_rem_pio2+0x318>)
 800c578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57c:	e7e0      	b.n	800c540 <__ieee754_rem_pio2+0xe8>
 800c57e:	4b87      	ldr	r3, [pc, #540]	; (800c79c <__ieee754_rem_pio2+0x344>)
 800c580:	4598      	cmp	r8, r3
 800c582:	f300 80d9 	bgt.w	800c738 <__ieee754_rem_pio2+0x2e0>
 800c586:	f001 fb53 	bl	800dc30 <fabs>
 800c58a:	ec55 4b10 	vmov	r4, r5, d0
 800c58e:	ee10 0a10 	vmov	r0, s0
 800c592:	a379      	add	r3, pc, #484	; (adr r3, 800c778 <__ieee754_rem_pio2+0x320>)
 800c594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c598:	4629      	mov	r1, r5
 800c59a:	f7f4 f835 	bl	8000608 <__aeabi_dmul>
 800c59e:	4b80      	ldr	r3, [pc, #512]	; (800c7a0 <__ieee754_rem_pio2+0x348>)
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f7f3 fe7b 	bl	800029c <__adddf3>
 800c5a6:	f7f4 fadf 	bl	8000b68 <__aeabi_d2iz>
 800c5aa:	4683      	mov	fp, r0
 800c5ac:	f7f3 ffc2 	bl	8000534 <__aeabi_i2d>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	ec43 2b18 	vmov	d8, r2, r3
 800c5b8:	a367      	add	r3, pc, #412	; (adr r3, 800c758 <__ieee754_rem_pio2+0x300>)
 800c5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5be:	f7f4 f823 	bl	8000608 <__aeabi_dmul>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	f7f3 fe65 	bl	8000298 <__aeabi_dsub>
 800c5ce:	a364      	add	r3, pc, #400	; (adr r3, 800c760 <__ieee754_rem_pio2+0x308>)
 800c5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d4:	4606      	mov	r6, r0
 800c5d6:	460f      	mov	r7, r1
 800c5d8:	ec51 0b18 	vmov	r0, r1, d8
 800c5dc:	f7f4 f814 	bl	8000608 <__aeabi_dmul>
 800c5e0:	f1bb 0f1f 	cmp.w	fp, #31
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	460d      	mov	r5, r1
 800c5e8:	dc0d      	bgt.n	800c606 <__ieee754_rem_pio2+0x1ae>
 800c5ea:	4b6e      	ldr	r3, [pc, #440]	; (800c7a4 <__ieee754_rem_pio2+0x34c>)
 800c5ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c5f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f4:	4543      	cmp	r3, r8
 800c5f6:	d006      	beq.n	800c606 <__ieee754_rem_pio2+0x1ae>
 800c5f8:	4622      	mov	r2, r4
 800c5fa:	462b      	mov	r3, r5
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	4639      	mov	r1, r7
 800c600:	f7f3 fe4a 	bl	8000298 <__aeabi_dsub>
 800c604:	e00f      	b.n	800c626 <__ieee754_rem_pio2+0x1ce>
 800c606:	462b      	mov	r3, r5
 800c608:	4622      	mov	r2, r4
 800c60a:	4630      	mov	r0, r6
 800c60c:	4639      	mov	r1, r7
 800c60e:	f7f3 fe43 	bl	8000298 <__aeabi_dsub>
 800c612:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c616:	9303      	str	r3, [sp, #12]
 800c618:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c61c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c620:	f1b8 0f10 	cmp.w	r8, #16
 800c624:	dc02      	bgt.n	800c62c <__ieee754_rem_pio2+0x1d4>
 800c626:	e9ca 0100 	strd	r0, r1, [sl]
 800c62a:	e039      	b.n	800c6a0 <__ieee754_rem_pio2+0x248>
 800c62c:	a34e      	add	r3, pc, #312	; (adr r3, 800c768 <__ieee754_rem_pio2+0x310>)
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	ec51 0b18 	vmov	r0, r1, d8
 800c636:	f7f3 ffe7 	bl	8000608 <__aeabi_dmul>
 800c63a:	4604      	mov	r4, r0
 800c63c:	460d      	mov	r5, r1
 800c63e:	4602      	mov	r2, r0
 800c640:	460b      	mov	r3, r1
 800c642:	4630      	mov	r0, r6
 800c644:	4639      	mov	r1, r7
 800c646:	f7f3 fe27 	bl	8000298 <__aeabi_dsub>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4680      	mov	r8, r0
 800c650:	4689      	mov	r9, r1
 800c652:	4630      	mov	r0, r6
 800c654:	4639      	mov	r1, r7
 800c656:	f7f3 fe1f 	bl	8000298 <__aeabi_dsub>
 800c65a:	4622      	mov	r2, r4
 800c65c:	462b      	mov	r3, r5
 800c65e:	f7f3 fe1b 	bl	8000298 <__aeabi_dsub>
 800c662:	a343      	add	r3, pc, #268	; (adr r3, 800c770 <__ieee754_rem_pio2+0x318>)
 800c664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c668:	4604      	mov	r4, r0
 800c66a:	460d      	mov	r5, r1
 800c66c:	ec51 0b18 	vmov	r0, r1, d8
 800c670:	f7f3 ffca 	bl	8000608 <__aeabi_dmul>
 800c674:	4622      	mov	r2, r4
 800c676:	462b      	mov	r3, r5
 800c678:	f7f3 fe0e 	bl	8000298 <__aeabi_dsub>
 800c67c:	4602      	mov	r2, r0
 800c67e:	460b      	mov	r3, r1
 800c680:	4604      	mov	r4, r0
 800c682:	460d      	mov	r5, r1
 800c684:	4640      	mov	r0, r8
 800c686:	4649      	mov	r1, r9
 800c688:	f7f3 fe06 	bl	8000298 <__aeabi_dsub>
 800c68c:	9a03      	ldr	r2, [sp, #12]
 800c68e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c692:	1ad3      	subs	r3, r2, r3
 800c694:	2b31      	cmp	r3, #49	; 0x31
 800c696:	dc24      	bgt.n	800c6e2 <__ieee754_rem_pio2+0x28a>
 800c698:	e9ca 0100 	strd	r0, r1, [sl]
 800c69c:	4646      	mov	r6, r8
 800c69e:	464f      	mov	r7, r9
 800c6a0:	e9da 8900 	ldrd	r8, r9, [sl]
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	4642      	mov	r2, r8
 800c6a8:	464b      	mov	r3, r9
 800c6aa:	4639      	mov	r1, r7
 800c6ac:	f7f3 fdf4 	bl	8000298 <__aeabi_dsub>
 800c6b0:	462b      	mov	r3, r5
 800c6b2:	4622      	mov	r2, r4
 800c6b4:	f7f3 fdf0 	bl	8000298 <__aeabi_dsub>
 800c6b8:	9b02      	ldr	r3, [sp, #8]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c6c0:	f6bf af0a 	bge.w	800c4d8 <__ieee754_rem_pio2+0x80>
 800c6c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c6c8:	f8ca 3004 	str.w	r3, [sl, #4]
 800c6cc:	f8ca 8000 	str.w	r8, [sl]
 800c6d0:	f8ca 0008 	str.w	r0, [sl, #8]
 800c6d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6d8:	f8ca 300c 	str.w	r3, [sl, #12]
 800c6dc:	f1cb 0b00 	rsb	fp, fp, #0
 800c6e0:	e6fa      	b.n	800c4d8 <__ieee754_rem_pio2+0x80>
 800c6e2:	a327      	add	r3, pc, #156	; (adr r3, 800c780 <__ieee754_rem_pio2+0x328>)
 800c6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e8:	ec51 0b18 	vmov	r0, r1, d8
 800c6ec:	f7f3 ff8c 	bl	8000608 <__aeabi_dmul>
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	460d      	mov	r5, r1
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	f7f3 fdcc 	bl	8000298 <__aeabi_dsub>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	4606      	mov	r6, r0
 800c706:	460f      	mov	r7, r1
 800c708:	4640      	mov	r0, r8
 800c70a:	4649      	mov	r1, r9
 800c70c:	f7f3 fdc4 	bl	8000298 <__aeabi_dsub>
 800c710:	4622      	mov	r2, r4
 800c712:	462b      	mov	r3, r5
 800c714:	f7f3 fdc0 	bl	8000298 <__aeabi_dsub>
 800c718:	a31b      	add	r3, pc, #108	; (adr r3, 800c788 <__ieee754_rem_pio2+0x330>)
 800c71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71e:	4604      	mov	r4, r0
 800c720:	460d      	mov	r5, r1
 800c722:	ec51 0b18 	vmov	r0, r1, d8
 800c726:	f7f3 ff6f 	bl	8000608 <__aeabi_dmul>
 800c72a:	4622      	mov	r2, r4
 800c72c:	462b      	mov	r3, r5
 800c72e:	f7f3 fdb3 	bl	8000298 <__aeabi_dsub>
 800c732:	4604      	mov	r4, r0
 800c734:	460d      	mov	r5, r1
 800c736:	e75f      	b.n	800c5f8 <__ieee754_rem_pio2+0x1a0>
 800c738:	4b1b      	ldr	r3, [pc, #108]	; (800c7a8 <__ieee754_rem_pio2+0x350>)
 800c73a:	4598      	cmp	r8, r3
 800c73c:	dd36      	ble.n	800c7ac <__ieee754_rem_pio2+0x354>
 800c73e:	ee10 2a10 	vmov	r2, s0
 800c742:	462b      	mov	r3, r5
 800c744:	4620      	mov	r0, r4
 800c746:	4629      	mov	r1, r5
 800c748:	f7f3 fda6 	bl	8000298 <__aeabi_dsub>
 800c74c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c750:	e9ca 0100 	strd	r0, r1, [sl]
 800c754:	e694      	b.n	800c480 <__ieee754_rem_pio2+0x28>
 800c756:	bf00      	nop
 800c758:	54400000 	.word	0x54400000
 800c75c:	3ff921fb 	.word	0x3ff921fb
 800c760:	1a626331 	.word	0x1a626331
 800c764:	3dd0b461 	.word	0x3dd0b461
 800c768:	1a600000 	.word	0x1a600000
 800c76c:	3dd0b461 	.word	0x3dd0b461
 800c770:	2e037073 	.word	0x2e037073
 800c774:	3ba3198a 	.word	0x3ba3198a
 800c778:	6dc9c883 	.word	0x6dc9c883
 800c77c:	3fe45f30 	.word	0x3fe45f30
 800c780:	2e000000 	.word	0x2e000000
 800c784:	3ba3198a 	.word	0x3ba3198a
 800c788:	252049c1 	.word	0x252049c1
 800c78c:	397b839a 	.word	0x397b839a
 800c790:	3fe921fb 	.word	0x3fe921fb
 800c794:	4002d97b 	.word	0x4002d97b
 800c798:	3ff921fb 	.word	0x3ff921fb
 800c79c:	413921fb 	.word	0x413921fb
 800c7a0:	3fe00000 	.word	0x3fe00000
 800c7a4:	08013378 	.word	0x08013378
 800c7a8:	7fefffff 	.word	0x7fefffff
 800c7ac:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c7b0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c7b4:	ee10 0a10 	vmov	r0, s0
 800c7b8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c7bc:	ee10 6a10 	vmov	r6, s0
 800c7c0:	460f      	mov	r7, r1
 800c7c2:	f7f4 f9d1 	bl	8000b68 <__aeabi_d2iz>
 800c7c6:	f7f3 feb5 	bl	8000534 <__aeabi_i2d>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	4639      	mov	r1, r7
 800c7d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c7d6:	f7f3 fd5f 	bl	8000298 <__aeabi_dsub>
 800c7da:	4b22      	ldr	r3, [pc, #136]	; (800c864 <__ieee754_rem_pio2+0x40c>)
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f7f3 ff13 	bl	8000608 <__aeabi_dmul>
 800c7e2:	460f      	mov	r7, r1
 800c7e4:	4606      	mov	r6, r0
 800c7e6:	f7f4 f9bf 	bl	8000b68 <__aeabi_d2iz>
 800c7ea:	f7f3 fea3 	bl	8000534 <__aeabi_i2d>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	4639      	mov	r1, r7
 800c7f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c7fa:	f7f3 fd4d 	bl	8000298 <__aeabi_dsub>
 800c7fe:	4b19      	ldr	r3, [pc, #100]	; (800c864 <__ieee754_rem_pio2+0x40c>)
 800c800:	2200      	movs	r2, #0
 800c802:	f7f3 ff01 	bl	8000608 <__aeabi_dmul>
 800c806:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c80a:	ad04      	add	r5, sp, #16
 800c80c:	f04f 0803 	mov.w	r8, #3
 800c810:	46a9      	mov	r9, r5
 800c812:	2600      	movs	r6, #0
 800c814:	2700      	movs	r7, #0
 800c816:	4632      	mov	r2, r6
 800c818:	463b      	mov	r3, r7
 800c81a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c81e:	46c3      	mov	fp, r8
 800c820:	3d08      	subs	r5, #8
 800c822:	f108 38ff 	add.w	r8, r8, #4294967295
 800c826:	f7f4 f957 	bl	8000ad8 <__aeabi_dcmpeq>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d1f3      	bne.n	800c816 <__ieee754_rem_pio2+0x3be>
 800c82e:	4b0e      	ldr	r3, [pc, #56]	; (800c868 <__ieee754_rem_pio2+0x410>)
 800c830:	9301      	str	r3, [sp, #4]
 800c832:	2302      	movs	r3, #2
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	4622      	mov	r2, r4
 800c838:	465b      	mov	r3, fp
 800c83a:	4651      	mov	r1, sl
 800c83c:	4648      	mov	r0, r9
 800c83e:	f000 fc57 	bl	800d0f0 <__kernel_rem_pio2>
 800c842:	9b02      	ldr	r3, [sp, #8]
 800c844:	2b00      	cmp	r3, #0
 800c846:	4683      	mov	fp, r0
 800c848:	f6bf ae46 	bge.w	800c4d8 <__ieee754_rem_pio2+0x80>
 800c84c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c850:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c854:	f8ca 3004 	str.w	r3, [sl, #4]
 800c858:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c85c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c860:	e73a      	b.n	800c6d8 <__ieee754_rem_pio2+0x280>
 800c862:	bf00      	nop
 800c864:	41700000 	.word	0x41700000
 800c868:	080133f8 	.word	0x080133f8

0800c86c <__ieee754_sqrt>:
 800c86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c870:	ec55 4b10 	vmov	r4, r5, d0
 800c874:	4e56      	ldr	r6, [pc, #344]	; (800c9d0 <__ieee754_sqrt+0x164>)
 800c876:	43ae      	bics	r6, r5
 800c878:	ee10 0a10 	vmov	r0, s0
 800c87c:	ee10 3a10 	vmov	r3, s0
 800c880:	4629      	mov	r1, r5
 800c882:	462a      	mov	r2, r5
 800c884:	d110      	bne.n	800c8a8 <__ieee754_sqrt+0x3c>
 800c886:	ee10 2a10 	vmov	r2, s0
 800c88a:	462b      	mov	r3, r5
 800c88c:	f7f3 febc 	bl	8000608 <__aeabi_dmul>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	4620      	mov	r0, r4
 800c896:	4629      	mov	r1, r5
 800c898:	f7f3 fd00 	bl	800029c <__adddf3>
 800c89c:	4604      	mov	r4, r0
 800c89e:	460d      	mov	r5, r1
 800c8a0:	ec45 4b10 	vmov	d0, r4, r5
 800c8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a8:	2d00      	cmp	r5, #0
 800c8aa:	dc10      	bgt.n	800c8ce <__ieee754_sqrt+0x62>
 800c8ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c8b0:	4330      	orrs	r0, r6
 800c8b2:	d0f5      	beq.n	800c8a0 <__ieee754_sqrt+0x34>
 800c8b4:	b15d      	cbz	r5, 800c8ce <__ieee754_sqrt+0x62>
 800c8b6:	ee10 2a10 	vmov	r2, s0
 800c8ba:	462b      	mov	r3, r5
 800c8bc:	ee10 0a10 	vmov	r0, s0
 800c8c0:	f7f3 fcea 	bl	8000298 <__aeabi_dsub>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	f7f3 ffc8 	bl	800085c <__aeabi_ddiv>
 800c8cc:	e7e6      	b.n	800c89c <__ieee754_sqrt+0x30>
 800c8ce:	1509      	asrs	r1, r1, #20
 800c8d0:	d076      	beq.n	800c9c0 <__ieee754_sqrt+0x154>
 800c8d2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c8d6:	07ce      	lsls	r6, r1, #31
 800c8d8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c8dc:	bf5e      	ittt	pl
 800c8de:	0fda      	lsrpl	r2, r3, #31
 800c8e0:	005b      	lslpl	r3, r3, #1
 800c8e2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c8e6:	0fda      	lsrs	r2, r3, #31
 800c8e8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c8ec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	106d      	asrs	r5, r5, #1
 800c8f4:	005b      	lsls	r3, r3, #1
 800c8f6:	f04f 0e16 	mov.w	lr, #22
 800c8fa:	4684      	mov	ip, r0
 800c8fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c900:	eb0c 0401 	add.w	r4, ip, r1
 800c904:	4294      	cmp	r4, r2
 800c906:	bfde      	ittt	le
 800c908:	1b12      	suble	r2, r2, r4
 800c90a:	eb04 0c01 	addle.w	ip, r4, r1
 800c90e:	1840      	addle	r0, r0, r1
 800c910:	0052      	lsls	r2, r2, #1
 800c912:	f1be 0e01 	subs.w	lr, lr, #1
 800c916:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c91a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c91e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c922:	d1ed      	bne.n	800c900 <__ieee754_sqrt+0x94>
 800c924:	4671      	mov	r1, lr
 800c926:	2720      	movs	r7, #32
 800c928:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c92c:	4562      	cmp	r2, ip
 800c92e:	eb04 060e 	add.w	r6, r4, lr
 800c932:	dc02      	bgt.n	800c93a <__ieee754_sqrt+0xce>
 800c934:	d113      	bne.n	800c95e <__ieee754_sqrt+0xf2>
 800c936:	429e      	cmp	r6, r3
 800c938:	d811      	bhi.n	800c95e <__ieee754_sqrt+0xf2>
 800c93a:	2e00      	cmp	r6, #0
 800c93c:	eb06 0e04 	add.w	lr, r6, r4
 800c940:	da43      	bge.n	800c9ca <__ieee754_sqrt+0x15e>
 800c942:	f1be 0f00 	cmp.w	lr, #0
 800c946:	db40      	blt.n	800c9ca <__ieee754_sqrt+0x15e>
 800c948:	f10c 0801 	add.w	r8, ip, #1
 800c94c:	eba2 020c 	sub.w	r2, r2, ip
 800c950:	429e      	cmp	r6, r3
 800c952:	bf88      	it	hi
 800c954:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c958:	1b9b      	subs	r3, r3, r6
 800c95a:	4421      	add	r1, r4
 800c95c:	46c4      	mov	ip, r8
 800c95e:	0052      	lsls	r2, r2, #1
 800c960:	3f01      	subs	r7, #1
 800c962:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c966:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c96a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c96e:	d1dd      	bne.n	800c92c <__ieee754_sqrt+0xc0>
 800c970:	4313      	orrs	r3, r2
 800c972:	d006      	beq.n	800c982 <__ieee754_sqrt+0x116>
 800c974:	1c4c      	adds	r4, r1, #1
 800c976:	bf13      	iteet	ne
 800c978:	3101      	addne	r1, #1
 800c97a:	3001      	addeq	r0, #1
 800c97c:	4639      	moveq	r1, r7
 800c97e:	f021 0101 	bicne.w	r1, r1, #1
 800c982:	1043      	asrs	r3, r0, #1
 800c984:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c988:	0849      	lsrs	r1, r1, #1
 800c98a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c98e:	07c2      	lsls	r2, r0, #31
 800c990:	bf48      	it	mi
 800c992:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c996:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c99a:	460c      	mov	r4, r1
 800c99c:	463d      	mov	r5, r7
 800c99e:	e77f      	b.n	800c8a0 <__ieee754_sqrt+0x34>
 800c9a0:	0ada      	lsrs	r2, r3, #11
 800c9a2:	3815      	subs	r0, #21
 800c9a4:	055b      	lsls	r3, r3, #21
 800c9a6:	2a00      	cmp	r2, #0
 800c9a8:	d0fa      	beq.n	800c9a0 <__ieee754_sqrt+0x134>
 800c9aa:	02d7      	lsls	r7, r2, #11
 800c9ac:	d50a      	bpl.n	800c9c4 <__ieee754_sqrt+0x158>
 800c9ae:	f1c1 0420 	rsb	r4, r1, #32
 800c9b2:	fa23 f404 	lsr.w	r4, r3, r4
 800c9b6:	1e4d      	subs	r5, r1, #1
 800c9b8:	408b      	lsls	r3, r1
 800c9ba:	4322      	orrs	r2, r4
 800c9bc:	1b41      	subs	r1, r0, r5
 800c9be:	e788      	b.n	800c8d2 <__ieee754_sqrt+0x66>
 800c9c0:	4608      	mov	r0, r1
 800c9c2:	e7f0      	b.n	800c9a6 <__ieee754_sqrt+0x13a>
 800c9c4:	0052      	lsls	r2, r2, #1
 800c9c6:	3101      	adds	r1, #1
 800c9c8:	e7ef      	b.n	800c9aa <__ieee754_sqrt+0x13e>
 800c9ca:	46e0      	mov	r8, ip
 800c9cc:	e7be      	b.n	800c94c <__ieee754_sqrt+0xe0>
 800c9ce:	bf00      	nop
 800c9d0:	7ff00000 	.word	0x7ff00000

0800c9d4 <__ieee754_powf>:
 800c9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d8:	ee10 5a90 	vmov	r5, s1
 800c9dc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800c9e0:	ed2d 8b02 	vpush	{d8}
 800c9e4:	eeb0 8a40 	vmov.f32	s16, s0
 800c9e8:	eef0 8a60 	vmov.f32	s17, s1
 800c9ec:	f000 8291 	beq.w	800cf12 <__ieee754_powf+0x53e>
 800c9f0:	ee10 8a10 	vmov	r8, s0
 800c9f4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800c9f8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c9fc:	dc06      	bgt.n	800ca0c <__ieee754_powf+0x38>
 800c9fe:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800ca02:	dd0a      	ble.n	800ca1a <__ieee754_powf+0x46>
 800ca04:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ca08:	f000 8283 	beq.w	800cf12 <__ieee754_powf+0x53e>
 800ca0c:	ecbd 8b02 	vpop	{d8}
 800ca10:	48d8      	ldr	r0, [pc, #864]	; (800cd74 <__ieee754_powf+0x3a0>)
 800ca12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca16:	f001 ba39 	b.w	800de8c <nanf>
 800ca1a:	f1b8 0f00 	cmp.w	r8, #0
 800ca1e:	da1f      	bge.n	800ca60 <__ieee754_powf+0x8c>
 800ca20:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800ca24:	da2e      	bge.n	800ca84 <__ieee754_powf+0xb0>
 800ca26:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ca2a:	f2c0 827b 	blt.w	800cf24 <__ieee754_powf+0x550>
 800ca2e:	15fb      	asrs	r3, r7, #23
 800ca30:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ca34:	fa47 f603 	asr.w	r6, r7, r3
 800ca38:	fa06 f303 	lsl.w	r3, r6, r3
 800ca3c:	42bb      	cmp	r3, r7
 800ca3e:	f040 8271 	bne.w	800cf24 <__ieee754_powf+0x550>
 800ca42:	f006 0601 	and.w	r6, r6, #1
 800ca46:	f1c6 0602 	rsb	r6, r6, #2
 800ca4a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ca4e:	d120      	bne.n	800ca92 <__ieee754_powf+0xbe>
 800ca50:	2d00      	cmp	r5, #0
 800ca52:	f280 8264 	bge.w	800cf1e <__ieee754_powf+0x54a>
 800ca56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ca5a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ca5e:	e00d      	b.n	800ca7c <__ieee754_powf+0xa8>
 800ca60:	2600      	movs	r6, #0
 800ca62:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800ca66:	d1f0      	bne.n	800ca4a <__ieee754_powf+0x76>
 800ca68:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ca6c:	f000 8251 	beq.w	800cf12 <__ieee754_powf+0x53e>
 800ca70:	dd0a      	ble.n	800ca88 <__ieee754_powf+0xb4>
 800ca72:	2d00      	cmp	r5, #0
 800ca74:	f280 8250 	bge.w	800cf18 <__ieee754_powf+0x544>
 800ca78:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800cd78 <__ieee754_powf+0x3a4>
 800ca7c:	ecbd 8b02 	vpop	{d8}
 800ca80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca84:	2602      	movs	r6, #2
 800ca86:	e7ec      	b.n	800ca62 <__ieee754_powf+0x8e>
 800ca88:	2d00      	cmp	r5, #0
 800ca8a:	daf5      	bge.n	800ca78 <__ieee754_powf+0xa4>
 800ca8c:	eeb1 0a68 	vneg.f32	s0, s17
 800ca90:	e7f4      	b.n	800ca7c <__ieee754_powf+0xa8>
 800ca92:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800ca96:	d102      	bne.n	800ca9e <__ieee754_powf+0xca>
 800ca98:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ca9c:	e7ee      	b.n	800ca7c <__ieee754_powf+0xa8>
 800ca9e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800caa2:	eeb0 0a48 	vmov.f32	s0, s16
 800caa6:	d108      	bne.n	800caba <__ieee754_powf+0xe6>
 800caa8:	f1b8 0f00 	cmp.w	r8, #0
 800caac:	db05      	blt.n	800caba <__ieee754_powf+0xe6>
 800caae:	ecbd 8b02 	vpop	{d8}
 800cab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cab6:	f000 ba4d 	b.w	800cf54 <__ieee754_sqrtf>
 800caba:	f001 f9d3 	bl	800de64 <fabsf>
 800cabe:	b124      	cbz	r4, 800caca <__ieee754_powf+0xf6>
 800cac0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800cac4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800cac8:	d117      	bne.n	800cafa <__ieee754_powf+0x126>
 800caca:	2d00      	cmp	r5, #0
 800cacc:	bfbc      	itt	lt
 800cace:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800cad2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800cad6:	f1b8 0f00 	cmp.w	r8, #0
 800cada:	dacf      	bge.n	800ca7c <__ieee754_powf+0xa8>
 800cadc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800cae0:	ea54 0306 	orrs.w	r3, r4, r6
 800cae4:	d104      	bne.n	800caf0 <__ieee754_powf+0x11c>
 800cae6:	ee70 7a40 	vsub.f32	s15, s0, s0
 800caea:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800caee:	e7c5      	b.n	800ca7c <__ieee754_powf+0xa8>
 800caf0:	2e01      	cmp	r6, #1
 800caf2:	d1c3      	bne.n	800ca7c <__ieee754_powf+0xa8>
 800caf4:	eeb1 0a40 	vneg.f32	s0, s0
 800caf8:	e7c0      	b.n	800ca7c <__ieee754_powf+0xa8>
 800cafa:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800cafe:	3801      	subs	r0, #1
 800cb00:	ea56 0300 	orrs.w	r3, r6, r0
 800cb04:	d104      	bne.n	800cb10 <__ieee754_powf+0x13c>
 800cb06:	ee38 8a48 	vsub.f32	s16, s16, s16
 800cb0a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800cb0e:	e7b5      	b.n	800ca7c <__ieee754_powf+0xa8>
 800cb10:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800cb14:	dd6b      	ble.n	800cbee <__ieee754_powf+0x21a>
 800cb16:	4b99      	ldr	r3, [pc, #612]	; (800cd7c <__ieee754_powf+0x3a8>)
 800cb18:	429c      	cmp	r4, r3
 800cb1a:	dc06      	bgt.n	800cb2a <__ieee754_powf+0x156>
 800cb1c:	2d00      	cmp	r5, #0
 800cb1e:	daab      	bge.n	800ca78 <__ieee754_powf+0xa4>
 800cb20:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800cd80 <__ieee754_powf+0x3ac>
 800cb24:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cb28:	e7a8      	b.n	800ca7c <__ieee754_powf+0xa8>
 800cb2a:	4b96      	ldr	r3, [pc, #600]	; (800cd84 <__ieee754_powf+0x3b0>)
 800cb2c:	429c      	cmp	r4, r3
 800cb2e:	dd02      	ble.n	800cb36 <__ieee754_powf+0x162>
 800cb30:	2d00      	cmp	r5, #0
 800cb32:	dcf5      	bgt.n	800cb20 <__ieee754_powf+0x14c>
 800cb34:	e7a0      	b.n	800ca78 <__ieee754_powf+0xa4>
 800cb36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cb3a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cb3e:	eddf 6a92 	vldr	s13, [pc, #584]	; 800cd88 <__ieee754_powf+0x3b4>
 800cb42:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800cb46:	eee0 6a67 	vfms.f32	s13, s0, s15
 800cb4a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cb4e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800cb52:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cb56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb5a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800cd8c <__ieee754_powf+0x3b8>
 800cb5e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800cb62:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800cd90 <__ieee754_powf+0x3bc>
 800cb66:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cb6a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800cd94 <__ieee754_powf+0x3c0>
 800cb6e:	eef0 6a67 	vmov.f32	s13, s15
 800cb72:	eee0 6a07 	vfma.f32	s13, s0, s14
 800cb76:	ee16 3a90 	vmov	r3, s13
 800cb7a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cb7e:	f023 030f 	bic.w	r3, r3, #15
 800cb82:	ee00 3a90 	vmov	s1, r3
 800cb86:	eee0 0a47 	vfms.f32	s1, s0, s14
 800cb8a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cb8e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800cb92:	f025 050f 	bic.w	r5, r5, #15
 800cb96:	ee07 5a10 	vmov	s14, r5
 800cb9a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800cb9e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800cba2:	ee07 3a90 	vmov	s15, r3
 800cba6:	eee7 0a27 	vfma.f32	s1, s14, s15
 800cbaa:	3e01      	subs	r6, #1
 800cbac:	ea56 0200 	orrs.w	r2, r6, r0
 800cbb0:	ee07 5a10 	vmov	s14, r5
 800cbb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbb8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800cbbc:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800cbc0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800cbc4:	ee17 4a10 	vmov	r4, s14
 800cbc8:	bf08      	it	eq
 800cbca:	eeb0 8a40 	vmoveq.f32	s16, s0
 800cbce:	2c00      	cmp	r4, #0
 800cbd0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cbd4:	f340 8184 	ble.w	800cee0 <__ieee754_powf+0x50c>
 800cbd8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800cbdc:	f340 80fc 	ble.w	800cdd8 <__ieee754_powf+0x404>
 800cbe0:	eddf 7a67 	vldr	s15, [pc, #412]	; 800cd80 <__ieee754_powf+0x3ac>
 800cbe4:	ee28 0a27 	vmul.f32	s0, s16, s15
 800cbe8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cbec:	e746      	b.n	800ca7c <__ieee754_powf+0xa8>
 800cbee:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800cbf2:	bf01      	itttt	eq
 800cbf4:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800cd98 <__ieee754_powf+0x3c4>
 800cbf8:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800cbfc:	f06f 0217 	mvneq.w	r2, #23
 800cc00:	ee17 4a90 	vmoveq	r4, s15
 800cc04:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800cc08:	bf18      	it	ne
 800cc0a:	2200      	movne	r2, #0
 800cc0c:	3b7f      	subs	r3, #127	; 0x7f
 800cc0e:	4413      	add	r3, r2
 800cc10:	4a62      	ldr	r2, [pc, #392]	; (800cd9c <__ieee754_powf+0x3c8>)
 800cc12:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800cc16:	4294      	cmp	r4, r2
 800cc18:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800cc1c:	dd06      	ble.n	800cc2c <__ieee754_powf+0x258>
 800cc1e:	4a60      	ldr	r2, [pc, #384]	; (800cda0 <__ieee754_powf+0x3cc>)
 800cc20:	4294      	cmp	r4, r2
 800cc22:	f340 80a4 	ble.w	800cd6e <__ieee754_powf+0x39a>
 800cc26:	3301      	adds	r3, #1
 800cc28:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800cc2c:	2400      	movs	r4, #0
 800cc2e:	4a5d      	ldr	r2, [pc, #372]	; (800cda4 <__ieee754_powf+0x3d0>)
 800cc30:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800cc34:	ee07 1a90 	vmov	s15, r1
 800cc38:	ed92 7a00 	vldr	s14, [r2]
 800cc3c:	4a5a      	ldr	r2, [pc, #360]	; (800cda8 <__ieee754_powf+0x3d4>)
 800cc3e:	ee37 6a27 	vadd.f32	s12, s14, s15
 800cc42:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800cc46:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800cc4a:	1049      	asrs	r1, r1, #1
 800cc4c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800cc50:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800cc54:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800cc58:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800cc5c:	ee06 1a10 	vmov	s12, r1
 800cc60:	ee65 4a26 	vmul.f32	s9, s10, s13
 800cc64:	ee36 7a47 	vsub.f32	s14, s12, s14
 800cc68:	ee14 7a90 	vmov	r7, s9
 800cc6c:	4017      	ands	r7, r2
 800cc6e:	ee05 7a90 	vmov	s11, r7
 800cc72:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800cc76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc7a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800cdac <__ieee754_powf+0x3d8>
 800cc7e:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800cc82:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800cc86:	ee25 6a26 	vmul.f32	s12, s10, s13
 800cc8a:	eddf 6a49 	vldr	s13, [pc, #292]	; 800cdb0 <__ieee754_powf+0x3dc>
 800cc8e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800cc92:	eddf 6a48 	vldr	s13, [pc, #288]	; 800cdb4 <__ieee754_powf+0x3e0>
 800cc96:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cc9a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800cd88 <__ieee754_powf+0x3b4>
 800cc9e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cca2:	eddf 6a45 	vldr	s13, [pc, #276]	; 800cdb8 <__ieee754_powf+0x3e4>
 800cca6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ccaa:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800cdbc <__ieee754_powf+0x3e8>
 800ccae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ccb2:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800ccb6:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800ccba:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ccbe:	eee5 6a07 	vfma.f32	s13, s10, s14
 800ccc2:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800ccc6:	eef0 7a45 	vmov.f32	s15, s10
 800ccca:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ccce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccd2:	ee17 1a90 	vmov	r1, s15
 800ccd6:	4011      	ands	r1, r2
 800ccd8:	ee07 1a90 	vmov	s15, r1
 800ccdc:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800cce0:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800cce4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800cce8:	ee27 7a24 	vmul.f32	s14, s14, s9
 800ccec:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ccf0:	eeb0 6a47 	vmov.f32	s12, s14
 800ccf4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800ccf8:	ee16 1a10 	vmov	r1, s12
 800ccfc:	4011      	ands	r1, r2
 800ccfe:	ee06 1a90 	vmov	s13, r1
 800cd02:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800cd06:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800cdc0 <__ieee754_powf+0x3ec>
 800cd0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800cdc4 <__ieee754_powf+0x3f0>
 800cd0e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cd12:	ee06 1a10 	vmov	s12, r1
 800cd16:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd1a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800cdc8 <__ieee754_powf+0x3f4>
 800cd1e:	492b      	ldr	r1, [pc, #172]	; (800cdcc <__ieee754_powf+0x3f8>)
 800cd20:	eea6 7a27 	vfma.f32	s14, s12, s15
 800cd24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cd28:	edd1 7a00 	vldr	s15, [r1]
 800cd2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd30:	ee07 3a90 	vmov	s15, r3
 800cd34:	4b26      	ldr	r3, [pc, #152]	; (800cdd0 <__ieee754_powf+0x3fc>)
 800cd36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cd3a:	eef0 7a47 	vmov.f32	s15, s14
 800cd3e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cd42:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd46:	edd4 0a00 	vldr	s1, [r4]
 800cd4a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800cd4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd52:	ee17 3a90 	vmov	r3, s15
 800cd56:	4013      	ands	r3, r2
 800cd58:	ee07 3a90 	vmov	s15, r3
 800cd5c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800cd60:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800cd64:	eee6 6a65 	vfms.f32	s13, s12, s11
 800cd68:	ee77 7a66 	vsub.f32	s15, s14, s13
 800cd6c:	e70f      	b.n	800cb8e <__ieee754_powf+0x1ba>
 800cd6e:	2401      	movs	r4, #1
 800cd70:	e75d      	b.n	800cc2e <__ieee754_powf+0x25a>
 800cd72:	bf00      	nop
 800cd74:	08013a1b 	.word	0x08013a1b
 800cd78:	00000000 	.word	0x00000000
 800cd7c:	3f7ffff7 	.word	0x3f7ffff7
 800cd80:	7149f2ca 	.word	0x7149f2ca
 800cd84:	3f800007 	.word	0x3f800007
 800cd88:	3eaaaaab 	.word	0x3eaaaaab
 800cd8c:	3fb8aa3b 	.word	0x3fb8aa3b
 800cd90:	36eca570 	.word	0x36eca570
 800cd94:	3fb8aa00 	.word	0x3fb8aa00
 800cd98:	4b800000 	.word	0x4b800000
 800cd9c:	001cc471 	.word	0x001cc471
 800cda0:	005db3d6 	.word	0x005db3d6
 800cda4:	08013500 	.word	0x08013500
 800cda8:	fffff000 	.word	0xfffff000
 800cdac:	3e6c3255 	.word	0x3e6c3255
 800cdb0:	3e53f142 	.word	0x3e53f142
 800cdb4:	3e8ba305 	.word	0x3e8ba305
 800cdb8:	3edb6db7 	.word	0x3edb6db7
 800cdbc:	3f19999a 	.word	0x3f19999a
 800cdc0:	3f76384f 	.word	0x3f76384f
 800cdc4:	3f763800 	.word	0x3f763800
 800cdc8:	369dc3a0 	.word	0x369dc3a0
 800cdcc:	08013510 	.word	0x08013510
 800cdd0:	08013508 	.word	0x08013508
 800cdd4:	3338aa3c 	.word	0x3338aa3c
 800cdd8:	f040 8092 	bne.w	800cf00 <__ieee754_powf+0x52c>
 800cddc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800cdd4 <__ieee754_powf+0x400>
 800cde0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cde4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800cde8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf0:	f73f aef6 	bgt.w	800cbe0 <__ieee754_powf+0x20c>
 800cdf4:	15db      	asrs	r3, r3, #23
 800cdf6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800cdfa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cdfe:	4103      	asrs	r3, r0
 800ce00:	4423      	add	r3, r4
 800ce02:	4949      	ldr	r1, [pc, #292]	; (800cf28 <__ieee754_powf+0x554>)
 800ce04:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ce08:	3a7f      	subs	r2, #127	; 0x7f
 800ce0a:	4111      	asrs	r1, r2
 800ce0c:	ea23 0101 	bic.w	r1, r3, r1
 800ce10:	ee07 1a10 	vmov	s14, r1
 800ce14:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800ce18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ce1c:	f1c2 0217 	rsb	r2, r2, #23
 800ce20:	4110      	asrs	r0, r2
 800ce22:	2c00      	cmp	r4, #0
 800ce24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce28:	bfb8      	it	lt
 800ce2a:	4240      	neglt	r0, r0
 800ce2c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ce30:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800cf2c <__ieee754_powf+0x558>
 800ce34:	ee17 3a10 	vmov	r3, s14
 800ce38:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ce3c:	f023 030f 	bic.w	r3, r3, #15
 800ce40:	ee07 3a10 	vmov	s14, r3
 800ce44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce48:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ce4c:	eddf 7a38 	vldr	s15, [pc, #224]	; 800cf30 <__ieee754_powf+0x55c>
 800ce50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce54:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800ce58:	eddf 6a36 	vldr	s13, [pc, #216]	; 800cf34 <__ieee754_powf+0x560>
 800ce5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ce60:	eea7 0a26 	vfma.f32	s0, s14, s13
 800ce64:	eeb0 6a40 	vmov.f32	s12, s0
 800ce68:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ce6c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ce70:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ce74:	eddf 6a30 	vldr	s13, [pc, #192]	; 800cf38 <__ieee754_powf+0x564>
 800ce78:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800cf3c <__ieee754_powf+0x568>
 800ce7c:	eea7 6a26 	vfma.f32	s12, s14, s13
 800ce80:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800cf40 <__ieee754_powf+0x56c>
 800ce84:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ce88:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800cf44 <__ieee754_powf+0x570>
 800ce8c:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ce90:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800cf48 <__ieee754_powf+0x574>
 800ce94:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ce98:	eeb0 6a40 	vmov.f32	s12, s0
 800ce9c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800cea0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cea4:	eeb0 7a46 	vmov.f32	s14, s12
 800cea8:	ee77 6a66 	vsub.f32	s13, s14, s13
 800ceac:	ee20 6a06 	vmul.f32	s12, s0, s12
 800ceb0:	eee0 7a27 	vfma.f32	s15, s0, s15
 800ceb4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ceb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cebc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cec0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cec4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cec8:	ee10 3a10 	vmov	r3, s0
 800cecc:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ced0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ced4:	da1a      	bge.n	800cf0c <__ieee754_powf+0x538>
 800ced6:	f001 f83b 	bl	800df50 <scalbnf>
 800ceda:	ee20 0a08 	vmul.f32	s0, s0, s16
 800cede:	e5cd      	b.n	800ca7c <__ieee754_powf+0xa8>
 800cee0:	4a1a      	ldr	r2, [pc, #104]	; (800cf4c <__ieee754_powf+0x578>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	dd02      	ble.n	800ceec <__ieee754_powf+0x518>
 800cee6:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800cf50 <__ieee754_powf+0x57c>
 800ceea:	e67b      	b.n	800cbe4 <__ieee754_powf+0x210>
 800ceec:	d108      	bne.n	800cf00 <__ieee754_powf+0x52c>
 800ceee:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cef2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800cef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cefa:	f6ff af7b 	blt.w	800cdf4 <__ieee754_powf+0x420>
 800cefe:	e7f2      	b.n	800cee6 <__ieee754_powf+0x512>
 800cf00:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800cf04:	f73f af76 	bgt.w	800cdf4 <__ieee754_powf+0x420>
 800cf08:	2000      	movs	r0, #0
 800cf0a:	e78f      	b.n	800ce2c <__ieee754_powf+0x458>
 800cf0c:	ee00 3a10 	vmov	s0, r3
 800cf10:	e7e3      	b.n	800ceda <__ieee754_powf+0x506>
 800cf12:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cf16:	e5b1      	b.n	800ca7c <__ieee754_powf+0xa8>
 800cf18:	eeb0 0a68 	vmov.f32	s0, s17
 800cf1c:	e5ae      	b.n	800ca7c <__ieee754_powf+0xa8>
 800cf1e:	eeb0 0a48 	vmov.f32	s0, s16
 800cf22:	e5ab      	b.n	800ca7c <__ieee754_powf+0xa8>
 800cf24:	2600      	movs	r6, #0
 800cf26:	e590      	b.n	800ca4a <__ieee754_powf+0x76>
 800cf28:	007fffff 	.word	0x007fffff
 800cf2c:	3f317218 	.word	0x3f317218
 800cf30:	35bfbe8c 	.word	0x35bfbe8c
 800cf34:	3f317200 	.word	0x3f317200
 800cf38:	3331bb4c 	.word	0x3331bb4c
 800cf3c:	b5ddea0e 	.word	0xb5ddea0e
 800cf40:	388ab355 	.word	0x388ab355
 800cf44:	bb360b61 	.word	0xbb360b61
 800cf48:	3e2aaaab 	.word	0x3e2aaaab
 800cf4c:	43160000 	.word	0x43160000
 800cf50:	0da24260 	.word	0x0da24260

0800cf54 <__ieee754_sqrtf>:
 800cf54:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cf58:	4770      	bx	lr
 800cf5a:	0000      	movs	r0, r0
 800cf5c:	0000      	movs	r0, r0
	...

0800cf60 <__kernel_cos>:
 800cf60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf64:	ec57 6b10 	vmov	r6, r7, d0
 800cf68:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cf6c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800cf70:	ed8d 1b00 	vstr	d1, [sp]
 800cf74:	da07      	bge.n	800cf86 <__kernel_cos+0x26>
 800cf76:	ee10 0a10 	vmov	r0, s0
 800cf7a:	4639      	mov	r1, r7
 800cf7c:	f7f3 fdf4 	bl	8000b68 <__aeabi_d2iz>
 800cf80:	2800      	cmp	r0, #0
 800cf82:	f000 8088 	beq.w	800d096 <__kernel_cos+0x136>
 800cf86:	4632      	mov	r2, r6
 800cf88:	463b      	mov	r3, r7
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	4639      	mov	r1, r7
 800cf8e:	f7f3 fb3b 	bl	8000608 <__aeabi_dmul>
 800cf92:	4b51      	ldr	r3, [pc, #324]	; (800d0d8 <__kernel_cos+0x178>)
 800cf94:	2200      	movs	r2, #0
 800cf96:	4604      	mov	r4, r0
 800cf98:	460d      	mov	r5, r1
 800cf9a:	f7f3 fb35 	bl	8000608 <__aeabi_dmul>
 800cf9e:	a340      	add	r3, pc, #256	; (adr r3, 800d0a0 <__kernel_cos+0x140>)
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	4682      	mov	sl, r0
 800cfa6:	468b      	mov	fp, r1
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	4629      	mov	r1, r5
 800cfac:	f7f3 fb2c 	bl	8000608 <__aeabi_dmul>
 800cfb0:	a33d      	add	r3, pc, #244	; (adr r3, 800d0a8 <__kernel_cos+0x148>)
 800cfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb6:	f7f3 f971 	bl	800029c <__adddf3>
 800cfba:	4622      	mov	r2, r4
 800cfbc:	462b      	mov	r3, r5
 800cfbe:	f7f3 fb23 	bl	8000608 <__aeabi_dmul>
 800cfc2:	a33b      	add	r3, pc, #236	; (adr r3, 800d0b0 <__kernel_cos+0x150>)
 800cfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc8:	f7f3 f966 	bl	8000298 <__aeabi_dsub>
 800cfcc:	4622      	mov	r2, r4
 800cfce:	462b      	mov	r3, r5
 800cfd0:	f7f3 fb1a 	bl	8000608 <__aeabi_dmul>
 800cfd4:	a338      	add	r3, pc, #224	; (adr r3, 800d0b8 <__kernel_cos+0x158>)
 800cfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfda:	f7f3 f95f 	bl	800029c <__adddf3>
 800cfde:	4622      	mov	r2, r4
 800cfe0:	462b      	mov	r3, r5
 800cfe2:	f7f3 fb11 	bl	8000608 <__aeabi_dmul>
 800cfe6:	a336      	add	r3, pc, #216	; (adr r3, 800d0c0 <__kernel_cos+0x160>)
 800cfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfec:	f7f3 f954 	bl	8000298 <__aeabi_dsub>
 800cff0:	4622      	mov	r2, r4
 800cff2:	462b      	mov	r3, r5
 800cff4:	f7f3 fb08 	bl	8000608 <__aeabi_dmul>
 800cff8:	a333      	add	r3, pc, #204	; (adr r3, 800d0c8 <__kernel_cos+0x168>)
 800cffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffe:	f7f3 f94d 	bl	800029c <__adddf3>
 800d002:	4622      	mov	r2, r4
 800d004:	462b      	mov	r3, r5
 800d006:	f7f3 faff 	bl	8000608 <__aeabi_dmul>
 800d00a:	4622      	mov	r2, r4
 800d00c:	462b      	mov	r3, r5
 800d00e:	f7f3 fafb 	bl	8000608 <__aeabi_dmul>
 800d012:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d016:	4604      	mov	r4, r0
 800d018:	460d      	mov	r5, r1
 800d01a:	4630      	mov	r0, r6
 800d01c:	4639      	mov	r1, r7
 800d01e:	f7f3 faf3 	bl	8000608 <__aeabi_dmul>
 800d022:	460b      	mov	r3, r1
 800d024:	4602      	mov	r2, r0
 800d026:	4629      	mov	r1, r5
 800d028:	4620      	mov	r0, r4
 800d02a:	f7f3 f935 	bl	8000298 <__aeabi_dsub>
 800d02e:	4b2b      	ldr	r3, [pc, #172]	; (800d0dc <__kernel_cos+0x17c>)
 800d030:	4598      	cmp	r8, r3
 800d032:	4606      	mov	r6, r0
 800d034:	460f      	mov	r7, r1
 800d036:	dc10      	bgt.n	800d05a <__kernel_cos+0xfa>
 800d038:	4602      	mov	r2, r0
 800d03a:	460b      	mov	r3, r1
 800d03c:	4650      	mov	r0, sl
 800d03e:	4659      	mov	r1, fp
 800d040:	f7f3 f92a 	bl	8000298 <__aeabi_dsub>
 800d044:	460b      	mov	r3, r1
 800d046:	4926      	ldr	r1, [pc, #152]	; (800d0e0 <__kernel_cos+0x180>)
 800d048:	4602      	mov	r2, r0
 800d04a:	2000      	movs	r0, #0
 800d04c:	f7f3 f924 	bl	8000298 <__aeabi_dsub>
 800d050:	ec41 0b10 	vmov	d0, r0, r1
 800d054:	b003      	add	sp, #12
 800d056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05a:	4b22      	ldr	r3, [pc, #136]	; (800d0e4 <__kernel_cos+0x184>)
 800d05c:	4920      	ldr	r1, [pc, #128]	; (800d0e0 <__kernel_cos+0x180>)
 800d05e:	4598      	cmp	r8, r3
 800d060:	bfcc      	ite	gt
 800d062:	4d21      	ldrgt	r5, [pc, #132]	; (800d0e8 <__kernel_cos+0x188>)
 800d064:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d068:	2400      	movs	r4, #0
 800d06a:	4622      	mov	r2, r4
 800d06c:	462b      	mov	r3, r5
 800d06e:	2000      	movs	r0, #0
 800d070:	f7f3 f912 	bl	8000298 <__aeabi_dsub>
 800d074:	4622      	mov	r2, r4
 800d076:	4680      	mov	r8, r0
 800d078:	4689      	mov	r9, r1
 800d07a:	462b      	mov	r3, r5
 800d07c:	4650      	mov	r0, sl
 800d07e:	4659      	mov	r1, fp
 800d080:	f7f3 f90a 	bl	8000298 <__aeabi_dsub>
 800d084:	4632      	mov	r2, r6
 800d086:	463b      	mov	r3, r7
 800d088:	f7f3 f906 	bl	8000298 <__aeabi_dsub>
 800d08c:	4602      	mov	r2, r0
 800d08e:	460b      	mov	r3, r1
 800d090:	4640      	mov	r0, r8
 800d092:	4649      	mov	r1, r9
 800d094:	e7da      	b.n	800d04c <__kernel_cos+0xec>
 800d096:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d0d0 <__kernel_cos+0x170>
 800d09a:	e7db      	b.n	800d054 <__kernel_cos+0xf4>
 800d09c:	f3af 8000 	nop.w
 800d0a0:	be8838d4 	.word	0xbe8838d4
 800d0a4:	bda8fae9 	.word	0xbda8fae9
 800d0a8:	bdb4b1c4 	.word	0xbdb4b1c4
 800d0ac:	3e21ee9e 	.word	0x3e21ee9e
 800d0b0:	809c52ad 	.word	0x809c52ad
 800d0b4:	3e927e4f 	.word	0x3e927e4f
 800d0b8:	19cb1590 	.word	0x19cb1590
 800d0bc:	3efa01a0 	.word	0x3efa01a0
 800d0c0:	16c15177 	.word	0x16c15177
 800d0c4:	3f56c16c 	.word	0x3f56c16c
 800d0c8:	5555554c 	.word	0x5555554c
 800d0cc:	3fa55555 	.word	0x3fa55555
 800d0d0:	00000000 	.word	0x00000000
 800d0d4:	3ff00000 	.word	0x3ff00000
 800d0d8:	3fe00000 	.word	0x3fe00000
 800d0dc:	3fd33332 	.word	0x3fd33332
 800d0e0:	3ff00000 	.word	0x3ff00000
 800d0e4:	3fe90000 	.word	0x3fe90000
 800d0e8:	3fd20000 	.word	0x3fd20000
 800d0ec:	00000000 	.word	0x00000000

0800d0f0 <__kernel_rem_pio2>:
 800d0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f4:	ed2d 8b02 	vpush	{d8}
 800d0f8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d0fc:	f112 0f14 	cmn.w	r2, #20
 800d100:	9308      	str	r3, [sp, #32]
 800d102:	9101      	str	r1, [sp, #4]
 800d104:	4bc6      	ldr	r3, [pc, #792]	; (800d420 <__kernel_rem_pio2+0x330>)
 800d106:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d108:	9009      	str	r0, [sp, #36]	; 0x24
 800d10a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d10e:	9304      	str	r3, [sp, #16]
 800d110:	9b08      	ldr	r3, [sp, #32]
 800d112:	f103 33ff 	add.w	r3, r3, #4294967295
 800d116:	bfa8      	it	ge
 800d118:	1ed4      	subge	r4, r2, #3
 800d11a:	9306      	str	r3, [sp, #24]
 800d11c:	bfb2      	itee	lt
 800d11e:	2400      	movlt	r4, #0
 800d120:	2318      	movge	r3, #24
 800d122:	fb94 f4f3 	sdivge	r4, r4, r3
 800d126:	f06f 0317 	mvn.w	r3, #23
 800d12a:	fb04 3303 	mla	r3, r4, r3, r3
 800d12e:	eb03 0a02 	add.w	sl, r3, r2
 800d132:	9b04      	ldr	r3, [sp, #16]
 800d134:	9a06      	ldr	r2, [sp, #24]
 800d136:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d410 <__kernel_rem_pio2+0x320>
 800d13a:	eb03 0802 	add.w	r8, r3, r2
 800d13e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d140:	1aa7      	subs	r7, r4, r2
 800d142:	ae20      	add	r6, sp, #128	; 0x80
 800d144:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d148:	2500      	movs	r5, #0
 800d14a:	4545      	cmp	r5, r8
 800d14c:	dd18      	ble.n	800d180 <__kernel_rem_pio2+0x90>
 800d14e:	9b08      	ldr	r3, [sp, #32]
 800d150:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d154:	aa20      	add	r2, sp, #128	; 0x80
 800d156:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800d410 <__kernel_rem_pio2+0x320>
 800d15a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d15e:	f1c3 0301 	rsb	r3, r3, #1
 800d162:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d166:	9307      	str	r3, [sp, #28]
 800d168:	9b07      	ldr	r3, [sp, #28]
 800d16a:	9a04      	ldr	r2, [sp, #16]
 800d16c:	4443      	add	r3, r8
 800d16e:	429a      	cmp	r2, r3
 800d170:	db2f      	blt.n	800d1d2 <__kernel_rem_pio2+0xe2>
 800d172:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d176:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d17a:	462f      	mov	r7, r5
 800d17c:	2600      	movs	r6, #0
 800d17e:	e01b      	b.n	800d1b8 <__kernel_rem_pio2+0xc8>
 800d180:	42ef      	cmn	r7, r5
 800d182:	d407      	bmi.n	800d194 <__kernel_rem_pio2+0xa4>
 800d184:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d188:	f7f3 f9d4 	bl	8000534 <__aeabi_i2d>
 800d18c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d190:	3501      	adds	r5, #1
 800d192:	e7da      	b.n	800d14a <__kernel_rem_pio2+0x5a>
 800d194:	ec51 0b18 	vmov	r0, r1, d8
 800d198:	e7f8      	b.n	800d18c <__kernel_rem_pio2+0x9c>
 800d19a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d19e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d1a2:	f7f3 fa31 	bl	8000608 <__aeabi_dmul>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1ae:	f7f3 f875 	bl	800029c <__adddf3>
 800d1b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1b6:	3601      	adds	r6, #1
 800d1b8:	9b06      	ldr	r3, [sp, #24]
 800d1ba:	429e      	cmp	r6, r3
 800d1bc:	f1a7 0708 	sub.w	r7, r7, #8
 800d1c0:	ddeb      	ble.n	800d19a <__kernel_rem_pio2+0xaa>
 800d1c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1c6:	3508      	adds	r5, #8
 800d1c8:	ecab 7b02 	vstmia	fp!, {d7}
 800d1cc:	f108 0801 	add.w	r8, r8, #1
 800d1d0:	e7ca      	b.n	800d168 <__kernel_rem_pio2+0x78>
 800d1d2:	9b04      	ldr	r3, [sp, #16]
 800d1d4:	aa0c      	add	r2, sp, #48	; 0x30
 800d1d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d1da:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1dc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d1de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d1e2:	9c04      	ldr	r4, [sp, #16]
 800d1e4:	930a      	str	r3, [sp, #40]	; 0x28
 800d1e6:	ab98      	add	r3, sp, #608	; 0x260
 800d1e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d1ec:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d1f0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d1f4:	f8cd b008 	str.w	fp, [sp, #8]
 800d1f8:	4625      	mov	r5, r4
 800d1fa:	2d00      	cmp	r5, #0
 800d1fc:	dc78      	bgt.n	800d2f0 <__kernel_rem_pio2+0x200>
 800d1fe:	ec47 6b10 	vmov	d0, r6, r7
 800d202:	4650      	mov	r0, sl
 800d204:	f000 fda8 	bl	800dd58 <scalbn>
 800d208:	ec57 6b10 	vmov	r6, r7, d0
 800d20c:	2200      	movs	r2, #0
 800d20e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d212:	ee10 0a10 	vmov	r0, s0
 800d216:	4639      	mov	r1, r7
 800d218:	f7f3 f9f6 	bl	8000608 <__aeabi_dmul>
 800d21c:	ec41 0b10 	vmov	d0, r0, r1
 800d220:	f000 fd12 	bl	800dc48 <floor>
 800d224:	4b7f      	ldr	r3, [pc, #508]	; (800d424 <__kernel_rem_pio2+0x334>)
 800d226:	ec51 0b10 	vmov	r0, r1, d0
 800d22a:	2200      	movs	r2, #0
 800d22c:	f7f3 f9ec 	bl	8000608 <__aeabi_dmul>
 800d230:	4602      	mov	r2, r0
 800d232:	460b      	mov	r3, r1
 800d234:	4630      	mov	r0, r6
 800d236:	4639      	mov	r1, r7
 800d238:	f7f3 f82e 	bl	8000298 <__aeabi_dsub>
 800d23c:	460f      	mov	r7, r1
 800d23e:	4606      	mov	r6, r0
 800d240:	f7f3 fc92 	bl	8000b68 <__aeabi_d2iz>
 800d244:	9007      	str	r0, [sp, #28]
 800d246:	f7f3 f975 	bl	8000534 <__aeabi_i2d>
 800d24a:	4602      	mov	r2, r0
 800d24c:	460b      	mov	r3, r1
 800d24e:	4630      	mov	r0, r6
 800d250:	4639      	mov	r1, r7
 800d252:	f7f3 f821 	bl	8000298 <__aeabi_dsub>
 800d256:	f1ba 0f00 	cmp.w	sl, #0
 800d25a:	4606      	mov	r6, r0
 800d25c:	460f      	mov	r7, r1
 800d25e:	dd70      	ble.n	800d342 <__kernel_rem_pio2+0x252>
 800d260:	1e62      	subs	r2, r4, #1
 800d262:	ab0c      	add	r3, sp, #48	; 0x30
 800d264:	9d07      	ldr	r5, [sp, #28]
 800d266:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d26a:	f1ca 0118 	rsb	r1, sl, #24
 800d26e:	fa40 f301 	asr.w	r3, r0, r1
 800d272:	441d      	add	r5, r3
 800d274:	408b      	lsls	r3, r1
 800d276:	1ac0      	subs	r0, r0, r3
 800d278:	ab0c      	add	r3, sp, #48	; 0x30
 800d27a:	9507      	str	r5, [sp, #28]
 800d27c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d280:	f1ca 0317 	rsb	r3, sl, #23
 800d284:	fa40 f303 	asr.w	r3, r0, r3
 800d288:	9302      	str	r3, [sp, #8]
 800d28a:	9b02      	ldr	r3, [sp, #8]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	dd66      	ble.n	800d35e <__kernel_rem_pio2+0x26e>
 800d290:	9b07      	ldr	r3, [sp, #28]
 800d292:	2200      	movs	r2, #0
 800d294:	3301      	adds	r3, #1
 800d296:	9307      	str	r3, [sp, #28]
 800d298:	4615      	mov	r5, r2
 800d29a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d29e:	4294      	cmp	r4, r2
 800d2a0:	f300 8099 	bgt.w	800d3d6 <__kernel_rem_pio2+0x2e6>
 800d2a4:	f1ba 0f00 	cmp.w	sl, #0
 800d2a8:	dd07      	ble.n	800d2ba <__kernel_rem_pio2+0x1ca>
 800d2aa:	f1ba 0f01 	cmp.w	sl, #1
 800d2ae:	f000 80a5 	beq.w	800d3fc <__kernel_rem_pio2+0x30c>
 800d2b2:	f1ba 0f02 	cmp.w	sl, #2
 800d2b6:	f000 80c1 	beq.w	800d43c <__kernel_rem_pio2+0x34c>
 800d2ba:	9b02      	ldr	r3, [sp, #8]
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d14e      	bne.n	800d35e <__kernel_rem_pio2+0x26e>
 800d2c0:	4632      	mov	r2, r6
 800d2c2:	463b      	mov	r3, r7
 800d2c4:	4958      	ldr	r1, [pc, #352]	; (800d428 <__kernel_rem_pio2+0x338>)
 800d2c6:	2000      	movs	r0, #0
 800d2c8:	f7f2 ffe6 	bl	8000298 <__aeabi_dsub>
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	460f      	mov	r7, r1
 800d2d0:	2d00      	cmp	r5, #0
 800d2d2:	d044      	beq.n	800d35e <__kernel_rem_pio2+0x26e>
 800d2d4:	4650      	mov	r0, sl
 800d2d6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d418 <__kernel_rem_pio2+0x328>
 800d2da:	f000 fd3d 	bl	800dd58 <scalbn>
 800d2de:	4630      	mov	r0, r6
 800d2e0:	4639      	mov	r1, r7
 800d2e2:	ec53 2b10 	vmov	r2, r3, d0
 800d2e6:	f7f2 ffd7 	bl	8000298 <__aeabi_dsub>
 800d2ea:	4606      	mov	r6, r0
 800d2ec:	460f      	mov	r7, r1
 800d2ee:	e036      	b.n	800d35e <__kernel_rem_pio2+0x26e>
 800d2f0:	4b4e      	ldr	r3, [pc, #312]	; (800d42c <__kernel_rem_pio2+0x33c>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	f7f3 f986 	bl	8000608 <__aeabi_dmul>
 800d2fc:	f7f3 fc34 	bl	8000b68 <__aeabi_d2iz>
 800d300:	f7f3 f918 	bl	8000534 <__aeabi_i2d>
 800d304:	4b4a      	ldr	r3, [pc, #296]	; (800d430 <__kernel_rem_pio2+0x340>)
 800d306:	2200      	movs	r2, #0
 800d308:	4680      	mov	r8, r0
 800d30a:	4689      	mov	r9, r1
 800d30c:	f7f3 f97c 	bl	8000608 <__aeabi_dmul>
 800d310:	4602      	mov	r2, r0
 800d312:	460b      	mov	r3, r1
 800d314:	4630      	mov	r0, r6
 800d316:	4639      	mov	r1, r7
 800d318:	f7f2 ffbe 	bl	8000298 <__aeabi_dsub>
 800d31c:	f7f3 fc24 	bl	8000b68 <__aeabi_d2iz>
 800d320:	9b02      	ldr	r3, [sp, #8]
 800d322:	f843 0b04 	str.w	r0, [r3], #4
 800d326:	3d01      	subs	r5, #1
 800d328:	9302      	str	r3, [sp, #8]
 800d32a:	ab70      	add	r3, sp, #448	; 0x1c0
 800d32c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d334:	4640      	mov	r0, r8
 800d336:	4649      	mov	r1, r9
 800d338:	f7f2 ffb0 	bl	800029c <__adddf3>
 800d33c:	4606      	mov	r6, r0
 800d33e:	460f      	mov	r7, r1
 800d340:	e75b      	b.n	800d1fa <__kernel_rem_pio2+0x10a>
 800d342:	d105      	bne.n	800d350 <__kernel_rem_pio2+0x260>
 800d344:	1e63      	subs	r3, r4, #1
 800d346:	aa0c      	add	r2, sp, #48	; 0x30
 800d348:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d34c:	15c3      	asrs	r3, r0, #23
 800d34e:	e79b      	b.n	800d288 <__kernel_rem_pio2+0x198>
 800d350:	4b38      	ldr	r3, [pc, #224]	; (800d434 <__kernel_rem_pio2+0x344>)
 800d352:	2200      	movs	r2, #0
 800d354:	f7f3 fbde 	bl	8000b14 <__aeabi_dcmpge>
 800d358:	2800      	cmp	r0, #0
 800d35a:	d139      	bne.n	800d3d0 <__kernel_rem_pio2+0x2e0>
 800d35c:	9002      	str	r0, [sp, #8]
 800d35e:	2200      	movs	r2, #0
 800d360:	2300      	movs	r3, #0
 800d362:	4630      	mov	r0, r6
 800d364:	4639      	mov	r1, r7
 800d366:	f7f3 fbb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800d36a:	2800      	cmp	r0, #0
 800d36c:	f000 80b4 	beq.w	800d4d8 <__kernel_rem_pio2+0x3e8>
 800d370:	f104 3bff 	add.w	fp, r4, #4294967295
 800d374:	465b      	mov	r3, fp
 800d376:	2200      	movs	r2, #0
 800d378:	9904      	ldr	r1, [sp, #16]
 800d37a:	428b      	cmp	r3, r1
 800d37c:	da65      	bge.n	800d44a <__kernel_rem_pio2+0x35a>
 800d37e:	2a00      	cmp	r2, #0
 800d380:	d07b      	beq.n	800d47a <__kernel_rem_pio2+0x38a>
 800d382:	ab0c      	add	r3, sp, #48	; 0x30
 800d384:	f1aa 0a18 	sub.w	sl, sl, #24
 800d388:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	f000 80a0 	beq.w	800d4d2 <__kernel_rem_pio2+0x3e2>
 800d392:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d418 <__kernel_rem_pio2+0x328>
 800d396:	4650      	mov	r0, sl
 800d398:	f000 fcde 	bl	800dd58 <scalbn>
 800d39c:	4f23      	ldr	r7, [pc, #140]	; (800d42c <__kernel_rem_pio2+0x33c>)
 800d39e:	ec55 4b10 	vmov	r4, r5, d0
 800d3a2:	46d8      	mov	r8, fp
 800d3a4:	2600      	movs	r6, #0
 800d3a6:	f1b8 0f00 	cmp.w	r8, #0
 800d3aa:	f280 80cf 	bge.w	800d54c <__kernel_rem_pio2+0x45c>
 800d3ae:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800d410 <__kernel_rem_pio2+0x320>
 800d3b2:	465f      	mov	r7, fp
 800d3b4:	f04f 0800 	mov.w	r8, #0
 800d3b8:	2f00      	cmp	r7, #0
 800d3ba:	f2c0 80fd 	blt.w	800d5b8 <__kernel_rem_pio2+0x4c8>
 800d3be:	ab70      	add	r3, sp, #448	; 0x1c0
 800d3c0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d438 <__kernel_rem_pio2+0x348>
 800d3c4:	ec55 4b18 	vmov	r4, r5, d8
 800d3c8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d3cc:	2600      	movs	r6, #0
 800d3ce:	e0e5      	b.n	800d59c <__kernel_rem_pio2+0x4ac>
 800d3d0:	2302      	movs	r3, #2
 800d3d2:	9302      	str	r3, [sp, #8]
 800d3d4:	e75c      	b.n	800d290 <__kernel_rem_pio2+0x1a0>
 800d3d6:	f8db 3000 	ldr.w	r3, [fp]
 800d3da:	b955      	cbnz	r5, 800d3f2 <__kernel_rem_pio2+0x302>
 800d3dc:	b123      	cbz	r3, 800d3e8 <__kernel_rem_pio2+0x2f8>
 800d3de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d3e2:	f8cb 3000 	str.w	r3, [fp]
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	3201      	adds	r2, #1
 800d3ea:	f10b 0b04 	add.w	fp, fp, #4
 800d3ee:	461d      	mov	r5, r3
 800d3f0:	e755      	b.n	800d29e <__kernel_rem_pio2+0x1ae>
 800d3f2:	1acb      	subs	r3, r1, r3
 800d3f4:	f8cb 3000 	str.w	r3, [fp]
 800d3f8:	462b      	mov	r3, r5
 800d3fa:	e7f5      	b.n	800d3e8 <__kernel_rem_pio2+0x2f8>
 800d3fc:	1e62      	subs	r2, r4, #1
 800d3fe:	ab0c      	add	r3, sp, #48	; 0x30
 800d400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d404:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d408:	a90c      	add	r1, sp, #48	; 0x30
 800d40a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d40e:	e754      	b.n	800d2ba <__kernel_rem_pio2+0x1ca>
	...
 800d41c:	3ff00000 	.word	0x3ff00000
 800d420:	08013558 	.word	0x08013558
 800d424:	40200000 	.word	0x40200000
 800d428:	3ff00000 	.word	0x3ff00000
 800d42c:	3e700000 	.word	0x3e700000
 800d430:	41700000 	.word	0x41700000
 800d434:	3fe00000 	.word	0x3fe00000
 800d438:	08013518 	.word	0x08013518
 800d43c:	1e62      	subs	r2, r4, #1
 800d43e:	ab0c      	add	r3, sp, #48	; 0x30
 800d440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d444:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d448:	e7de      	b.n	800d408 <__kernel_rem_pio2+0x318>
 800d44a:	a90c      	add	r1, sp, #48	; 0x30
 800d44c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d450:	3b01      	subs	r3, #1
 800d452:	430a      	orrs	r2, r1
 800d454:	e790      	b.n	800d378 <__kernel_rem_pio2+0x288>
 800d456:	3301      	adds	r3, #1
 800d458:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d45c:	2900      	cmp	r1, #0
 800d45e:	d0fa      	beq.n	800d456 <__kernel_rem_pio2+0x366>
 800d460:	9a08      	ldr	r2, [sp, #32]
 800d462:	18e3      	adds	r3, r4, r3
 800d464:	18a6      	adds	r6, r4, r2
 800d466:	aa20      	add	r2, sp, #128	; 0x80
 800d468:	1c65      	adds	r5, r4, #1
 800d46a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d46e:	9302      	str	r3, [sp, #8]
 800d470:	9b02      	ldr	r3, [sp, #8]
 800d472:	42ab      	cmp	r3, r5
 800d474:	da04      	bge.n	800d480 <__kernel_rem_pio2+0x390>
 800d476:	461c      	mov	r4, r3
 800d478:	e6b5      	b.n	800d1e6 <__kernel_rem_pio2+0xf6>
 800d47a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d47c:	2301      	movs	r3, #1
 800d47e:	e7eb      	b.n	800d458 <__kernel_rem_pio2+0x368>
 800d480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d486:	f7f3 f855 	bl	8000534 <__aeabi_i2d>
 800d48a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d48e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d490:	46b3      	mov	fp, r6
 800d492:	461c      	mov	r4, r3
 800d494:	2700      	movs	r7, #0
 800d496:	f04f 0800 	mov.w	r8, #0
 800d49a:	f04f 0900 	mov.w	r9, #0
 800d49e:	9b06      	ldr	r3, [sp, #24]
 800d4a0:	429f      	cmp	r7, r3
 800d4a2:	dd06      	ble.n	800d4b2 <__kernel_rem_pio2+0x3c2>
 800d4a4:	ab70      	add	r3, sp, #448	; 0x1c0
 800d4a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d4aa:	e9c3 8900 	strd	r8, r9, [r3]
 800d4ae:	3501      	adds	r5, #1
 800d4b0:	e7de      	b.n	800d470 <__kernel_rem_pio2+0x380>
 800d4b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d4b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d4ba:	f7f3 f8a5 	bl	8000608 <__aeabi_dmul>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	4640      	mov	r0, r8
 800d4c4:	4649      	mov	r1, r9
 800d4c6:	f7f2 fee9 	bl	800029c <__adddf3>
 800d4ca:	3701      	adds	r7, #1
 800d4cc:	4680      	mov	r8, r0
 800d4ce:	4689      	mov	r9, r1
 800d4d0:	e7e5      	b.n	800d49e <__kernel_rem_pio2+0x3ae>
 800d4d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d4d6:	e754      	b.n	800d382 <__kernel_rem_pio2+0x292>
 800d4d8:	ec47 6b10 	vmov	d0, r6, r7
 800d4dc:	f1ca 0000 	rsb	r0, sl, #0
 800d4e0:	f000 fc3a 	bl	800dd58 <scalbn>
 800d4e4:	ec57 6b10 	vmov	r6, r7, d0
 800d4e8:	4b9f      	ldr	r3, [pc, #636]	; (800d768 <__kernel_rem_pio2+0x678>)
 800d4ea:	ee10 0a10 	vmov	r0, s0
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	4639      	mov	r1, r7
 800d4f2:	f7f3 fb0f 	bl	8000b14 <__aeabi_dcmpge>
 800d4f6:	b300      	cbz	r0, 800d53a <__kernel_rem_pio2+0x44a>
 800d4f8:	4b9c      	ldr	r3, [pc, #624]	; (800d76c <__kernel_rem_pio2+0x67c>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	4639      	mov	r1, r7
 800d500:	f7f3 f882 	bl	8000608 <__aeabi_dmul>
 800d504:	f7f3 fb30 	bl	8000b68 <__aeabi_d2iz>
 800d508:	4605      	mov	r5, r0
 800d50a:	f7f3 f813 	bl	8000534 <__aeabi_i2d>
 800d50e:	4b96      	ldr	r3, [pc, #600]	; (800d768 <__kernel_rem_pio2+0x678>)
 800d510:	2200      	movs	r2, #0
 800d512:	f7f3 f879 	bl	8000608 <__aeabi_dmul>
 800d516:	460b      	mov	r3, r1
 800d518:	4602      	mov	r2, r0
 800d51a:	4639      	mov	r1, r7
 800d51c:	4630      	mov	r0, r6
 800d51e:	f7f2 febb 	bl	8000298 <__aeabi_dsub>
 800d522:	f7f3 fb21 	bl	8000b68 <__aeabi_d2iz>
 800d526:	f104 0b01 	add.w	fp, r4, #1
 800d52a:	ab0c      	add	r3, sp, #48	; 0x30
 800d52c:	f10a 0a18 	add.w	sl, sl, #24
 800d530:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d534:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800d538:	e72b      	b.n	800d392 <__kernel_rem_pio2+0x2a2>
 800d53a:	4630      	mov	r0, r6
 800d53c:	4639      	mov	r1, r7
 800d53e:	f7f3 fb13 	bl	8000b68 <__aeabi_d2iz>
 800d542:	ab0c      	add	r3, sp, #48	; 0x30
 800d544:	46a3      	mov	fp, r4
 800d546:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d54a:	e722      	b.n	800d392 <__kernel_rem_pio2+0x2a2>
 800d54c:	ab70      	add	r3, sp, #448	; 0x1c0
 800d54e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800d552:	ab0c      	add	r3, sp, #48	; 0x30
 800d554:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d558:	f7f2 ffec 	bl	8000534 <__aeabi_i2d>
 800d55c:	4622      	mov	r2, r4
 800d55e:	462b      	mov	r3, r5
 800d560:	f7f3 f852 	bl	8000608 <__aeabi_dmul>
 800d564:	4632      	mov	r2, r6
 800d566:	e9c9 0100 	strd	r0, r1, [r9]
 800d56a:	463b      	mov	r3, r7
 800d56c:	4620      	mov	r0, r4
 800d56e:	4629      	mov	r1, r5
 800d570:	f7f3 f84a 	bl	8000608 <__aeabi_dmul>
 800d574:	f108 38ff 	add.w	r8, r8, #4294967295
 800d578:	4604      	mov	r4, r0
 800d57a:	460d      	mov	r5, r1
 800d57c:	e713      	b.n	800d3a6 <__kernel_rem_pio2+0x2b6>
 800d57e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d582:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d586:	f7f3 f83f 	bl	8000608 <__aeabi_dmul>
 800d58a:	4602      	mov	r2, r0
 800d58c:	460b      	mov	r3, r1
 800d58e:	4620      	mov	r0, r4
 800d590:	4629      	mov	r1, r5
 800d592:	f7f2 fe83 	bl	800029c <__adddf3>
 800d596:	3601      	adds	r6, #1
 800d598:	4604      	mov	r4, r0
 800d59a:	460d      	mov	r5, r1
 800d59c:	9b04      	ldr	r3, [sp, #16]
 800d59e:	429e      	cmp	r6, r3
 800d5a0:	dc01      	bgt.n	800d5a6 <__kernel_rem_pio2+0x4b6>
 800d5a2:	45b0      	cmp	r8, r6
 800d5a4:	daeb      	bge.n	800d57e <__kernel_rem_pio2+0x48e>
 800d5a6:	ab48      	add	r3, sp, #288	; 0x120
 800d5a8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d5ac:	e9c3 4500 	strd	r4, r5, [r3]
 800d5b0:	3f01      	subs	r7, #1
 800d5b2:	f108 0801 	add.w	r8, r8, #1
 800d5b6:	e6ff      	b.n	800d3b8 <__kernel_rem_pio2+0x2c8>
 800d5b8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d5ba:	2b02      	cmp	r3, #2
 800d5bc:	dc0b      	bgt.n	800d5d6 <__kernel_rem_pio2+0x4e6>
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	dc6e      	bgt.n	800d6a0 <__kernel_rem_pio2+0x5b0>
 800d5c2:	d045      	beq.n	800d650 <__kernel_rem_pio2+0x560>
 800d5c4:	9b07      	ldr	r3, [sp, #28]
 800d5c6:	f003 0007 	and.w	r0, r3, #7
 800d5ca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d5ce:	ecbd 8b02 	vpop	{d8}
 800d5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5d6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d5d8:	2b03      	cmp	r3, #3
 800d5da:	d1f3      	bne.n	800d5c4 <__kernel_rem_pio2+0x4d4>
 800d5dc:	ab48      	add	r3, sp, #288	; 0x120
 800d5de:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800d5e2:	46d0      	mov	r8, sl
 800d5e4:	46d9      	mov	r9, fp
 800d5e6:	f1b9 0f00 	cmp.w	r9, #0
 800d5ea:	f1a8 0808 	sub.w	r8, r8, #8
 800d5ee:	dc64      	bgt.n	800d6ba <__kernel_rem_pio2+0x5ca>
 800d5f0:	465c      	mov	r4, fp
 800d5f2:	2c01      	cmp	r4, #1
 800d5f4:	f1aa 0a08 	sub.w	sl, sl, #8
 800d5f8:	dc7e      	bgt.n	800d6f8 <__kernel_rem_pio2+0x608>
 800d5fa:	2000      	movs	r0, #0
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	f1bb 0f01 	cmp.w	fp, #1
 800d602:	f300 8097 	bgt.w	800d734 <__kernel_rem_pio2+0x644>
 800d606:	9b02      	ldr	r3, [sp, #8]
 800d608:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800d60c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d610:	2b00      	cmp	r3, #0
 800d612:	f040 8099 	bne.w	800d748 <__kernel_rem_pio2+0x658>
 800d616:	9b01      	ldr	r3, [sp, #4]
 800d618:	e9c3 5600 	strd	r5, r6, [r3]
 800d61c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d620:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d624:	e7ce      	b.n	800d5c4 <__kernel_rem_pio2+0x4d4>
 800d626:	ab48      	add	r3, sp, #288	; 0x120
 800d628:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d630:	f7f2 fe34 	bl	800029c <__adddf3>
 800d634:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d638:	f1bb 0f00 	cmp.w	fp, #0
 800d63c:	daf3      	bge.n	800d626 <__kernel_rem_pio2+0x536>
 800d63e:	9b02      	ldr	r3, [sp, #8]
 800d640:	b113      	cbz	r3, 800d648 <__kernel_rem_pio2+0x558>
 800d642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d646:	4619      	mov	r1, r3
 800d648:	9b01      	ldr	r3, [sp, #4]
 800d64a:	e9c3 0100 	strd	r0, r1, [r3]
 800d64e:	e7b9      	b.n	800d5c4 <__kernel_rem_pio2+0x4d4>
 800d650:	2000      	movs	r0, #0
 800d652:	2100      	movs	r1, #0
 800d654:	e7f0      	b.n	800d638 <__kernel_rem_pio2+0x548>
 800d656:	ab48      	add	r3, sp, #288	; 0x120
 800d658:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d660:	f7f2 fe1c 	bl	800029c <__adddf3>
 800d664:	3c01      	subs	r4, #1
 800d666:	2c00      	cmp	r4, #0
 800d668:	daf5      	bge.n	800d656 <__kernel_rem_pio2+0x566>
 800d66a:	9b02      	ldr	r3, [sp, #8]
 800d66c:	b1e3      	cbz	r3, 800d6a8 <__kernel_rem_pio2+0x5b8>
 800d66e:	4602      	mov	r2, r0
 800d670:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d674:	9c01      	ldr	r4, [sp, #4]
 800d676:	e9c4 2300 	strd	r2, r3, [r4]
 800d67a:	4602      	mov	r2, r0
 800d67c:	460b      	mov	r3, r1
 800d67e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d682:	f7f2 fe09 	bl	8000298 <__aeabi_dsub>
 800d686:	ad4a      	add	r5, sp, #296	; 0x128
 800d688:	2401      	movs	r4, #1
 800d68a:	45a3      	cmp	fp, r4
 800d68c:	da0f      	bge.n	800d6ae <__kernel_rem_pio2+0x5be>
 800d68e:	9b02      	ldr	r3, [sp, #8]
 800d690:	b113      	cbz	r3, 800d698 <__kernel_rem_pio2+0x5a8>
 800d692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d696:	4619      	mov	r1, r3
 800d698:	9b01      	ldr	r3, [sp, #4]
 800d69a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d69e:	e791      	b.n	800d5c4 <__kernel_rem_pio2+0x4d4>
 800d6a0:	465c      	mov	r4, fp
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	e7de      	b.n	800d666 <__kernel_rem_pio2+0x576>
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	e7e2      	b.n	800d674 <__kernel_rem_pio2+0x584>
 800d6ae:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d6b2:	f7f2 fdf3 	bl	800029c <__adddf3>
 800d6b6:	3401      	adds	r4, #1
 800d6b8:	e7e7      	b.n	800d68a <__kernel_rem_pio2+0x59a>
 800d6ba:	e9d8 4500 	ldrd	r4, r5, [r8]
 800d6be:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	4632      	mov	r2, r6
 800d6c6:	463b      	mov	r3, r7
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	f7f2 fde7 	bl	800029c <__adddf3>
 800d6ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	4629      	mov	r1, r5
 800d6da:	f7f2 fddd 	bl	8000298 <__aeabi_dsub>
 800d6de:	4632      	mov	r2, r6
 800d6e0:	463b      	mov	r3, r7
 800d6e2:	f7f2 fddb 	bl	800029c <__adddf3>
 800d6e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d6ea:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800d6ee:	ed88 7b00 	vstr	d7, [r8]
 800d6f2:	f109 39ff 	add.w	r9, r9, #4294967295
 800d6f6:	e776      	b.n	800d5e6 <__kernel_rem_pio2+0x4f6>
 800d6f8:	e9da 8900 	ldrd	r8, r9, [sl]
 800d6fc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d700:	4640      	mov	r0, r8
 800d702:	4632      	mov	r2, r6
 800d704:	463b      	mov	r3, r7
 800d706:	4649      	mov	r1, r9
 800d708:	f7f2 fdc8 	bl	800029c <__adddf3>
 800d70c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d710:	4602      	mov	r2, r0
 800d712:	460b      	mov	r3, r1
 800d714:	4640      	mov	r0, r8
 800d716:	4649      	mov	r1, r9
 800d718:	f7f2 fdbe 	bl	8000298 <__aeabi_dsub>
 800d71c:	4632      	mov	r2, r6
 800d71e:	463b      	mov	r3, r7
 800d720:	f7f2 fdbc 	bl	800029c <__adddf3>
 800d724:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d728:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d72c:	ed8a 7b00 	vstr	d7, [sl]
 800d730:	3c01      	subs	r4, #1
 800d732:	e75e      	b.n	800d5f2 <__kernel_rem_pio2+0x502>
 800d734:	ab48      	add	r3, sp, #288	; 0x120
 800d736:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73e:	f7f2 fdad 	bl	800029c <__adddf3>
 800d742:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d746:	e75a      	b.n	800d5fe <__kernel_rem_pio2+0x50e>
 800d748:	9b01      	ldr	r3, [sp, #4]
 800d74a:	9a01      	ldr	r2, [sp, #4]
 800d74c:	601d      	str	r5, [r3, #0]
 800d74e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d752:	605c      	str	r4, [r3, #4]
 800d754:	609f      	str	r7, [r3, #8]
 800d756:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d75a:	60d3      	str	r3, [r2, #12]
 800d75c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d760:	6110      	str	r0, [r2, #16]
 800d762:	6153      	str	r3, [r2, #20]
 800d764:	e72e      	b.n	800d5c4 <__kernel_rem_pio2+0x4d4>
 800d766:	bf00      	nop
 800d768:	41700000 	.word	0x41700000
 800d76c:	3e700000 	.word	0x3e700000

0800d770 <__kernel_sin>:
 800d770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d774:	ed2d 8b04 	vpush	{d8-d9}
 800d778:	eeb0 8a41 	vmov.f32	s16, s2
 800d77c:	eef0 8a61 	vmov.f32	s17, s3
 800d780:	ec55 4b10 	vmov	r4, r5, d0
 800d784:	b083      	sub	sp, #12
 800d786:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d78a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d78e:	9001      	str	r0, [sp, #4]
 800d790:	da06      	bge.n	800d7a0 <__kernel_sin+0x30>
 800d792:	ee10 0a10 	vmov	r0, s0
 800d796:	4629      	mov	r1, r5
 800d798:	f7f3 f9e6 	bl	8000b68 <__aeabi_d2iz>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d051      	beq.n	800d844 <__kernel_sin+0xd4>
 800d7a0:	4622      	mov	r2, r4
 800d7a2:	462b      	mov	r3, r5
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	4629      	mov	r1, r5
 800d7a8:	f7f2 ff2e 	bl	8000608 <__aeabi_dmul>
 800d7ac:	4682      	mov	sl, r0
 800d7ae:	468b      	mov	fp, r1
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	4629      	mov	r1, r5
 800d7b8:	f7f2 ff26 	bl	8000608 <__aeabi_dmul>
 800d7bc:	a341      	add	r3, pc, #260	; (adr r3, 800d8c4 <__kernel_sin+0x154>)
 800d7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c2:	4680      	mov	r8, r0
 800d7c4:	4689      	mov	r9, r1
 800d7c6:	4650      	mov	r0, sl
 800d7c8:	4659      	mov	r1, fp
 800d7ca:	f7f2 ff1d 	bl	8000608 <__aeabi_dmul>
 800d7ce:	a33f      	add	r3, pc, #252	; (adr r3, 800d8cc <__kernel_sin+0x15c>)
 800d7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d4:	f7f2 fd60 	bl	8000298 <__aeabi_dsub>
 800d7d8:	4652      	mov	r2, sl
 800d7da:	465b      	mov	r3, fp
 800d7dc:	f7f2 ff14 	bl	8000608 <__aeabi_dmul>
 800d7e0:	a33c      	add	r3, pc, #240	; (adr r3, 800d8d4 <__kernel_sin+0x164>)
 800d7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e6:	f7f2 fd59 	bl	800029c <__adddf3>
 800d7ea:	4652      	mov	r2, sl
 800d7ec:	465b      	mov	r3, fp
 800d7ee:	f7f2 ff0b 	bl	8000608 <__aeabi_dmul>
 800d7f2:	a33a      	add	r3, pc, #232	; (adr r3, 800d8dc <__kernel_sin+0x16c>)
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	f7f2 fd4e 	bl	8000298 <__aeabi_dsub>
 800d7fc:	4652      	mov	r2, sl
 800d7fe:	465b      	mov	r3, fp
 800d800:	f7f2 ff02 	bl	8000608 <__aeabi_dmul>
 800d804:	a337      	add	r3, pc, #220	; (adr r3, 800d8e4 <__kernel_sin+0x174>)
 800d806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80a:	f7f2 fd47 	bl	800029c <__adddf3>
 800d80e:	9b01      	ldr	r3, [sp, #4]
 800d810:	4606      	mov	r6, r0
 800d812:	460f      	mov	r7, r1
 800d814:	b9eb      	cbnz	r3, 800d852 <__kernel_sin+0xe2>
 800d816:	4602      	mov	r2, r0
 800d818:	460b      	mov	r3, r1
 800d81a:	4650      	mov	r0, sl
 800d81c:	4659      	mov	r1, fp
 800d81e:	f7f2 fef3 	bl	8000608 <__aeabi_dmul>
 800d822:	a325      	add	r3, pc, #148	; (adr r3, 800d8b8 <__kernel_sin+0x148>)
 800d824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d828:	f7f2 fd36 	bl	8000298 <__aeabi_dsub>
 800d82c:	4642      	mov	r2, r8
 800d82e:	464b      	mov	r3, r9
 800d830:	f7f2 feea 	bl	8000608 <__aeabi_dmul>
 800d834:	4602      	mov	r2, r0
 800d836:	460b      	mov	r3, r1
 800d838:	4620      	mov	r0, r4
 800d83a:	4629      	mov	r1, r5
 800d83c:	f7f2 fd2e 	bl	800029c <__adddf3>
 800d840:	4604      	mov	r4, r0
 800d842:	460d      	mov	r5, r1
 800d844:	ec45 4b10 	vmov	d0, r4, r5
 800d848:	b003      	add	sp, #12
 800d84a:	ecbd 8b04 	vpop	{d8-d9}
 800d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d852:	4b1b      	ldr	r3, [pc, #108]	; (800d8c0 <__kernel_sin+0x150>)
 800d854:	ec51 0b18 	vmov	r0, r1, d8
 800d858:	2200      	movs	r2, #0
 800d85a:	f7f2 fed5 	bl	8000608 <__aeabi_dmul>
 800d85e:	4632      	mov	r2, r6
 800d860:	ec41 0b19 	vmov	d9, r0, r1
 800d864:	463b      	mov	r3, r7
 800d866:	4640      	mov	r0, r8
 800d868:	4649      	mov	r1, r9
 800d86a:	f7f2 fecd 	bl	8000608 <__aeabi_dmul>
 800d86e:	4602      	mov	r2, r0
 800d870:	460b      	mov	r3, r1
 800d872:	ec51 0b19 	vmov	r0, r1, d9
 800d876:	f7f2 fd0f 	bl	8000298 <__aeabi_dsub>
 800d87a:	4652      	mov	r2, sl
 800d87c:	465b      	mov	r3, fp
 800d87e:	f7f2 fec3 	bl	8000608 <__aeabi_dmul>
 800d882:	ec53 2b18 	vmov	r2, r3, d8
 800d886:	f7f2 fd07 	bl	8000298 <__aeabi_dsub>
 800d88a:	a30b      	add	r3, pc, #44	; (adr r3, 800d8b8 <__kernel_sin+0x148>)
 800d88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d890:	4606      	mov	r6, r0
 800d892:	460f      	mov	r7, r1
 800d894:	4640      	mov	r0, r8
 800d896:	4649      	mov	r1, r9
 800d898:	f7f2 feb6 	bl	8000608 <__aeabi_dmul>
 800d89c:	4602      	mov	r2, r0
 800d89e:	460b      	mov	r3, r1
 800d8a0:	4630      	mov	r0, r6
 800d8a2:	4639      	mov	r1, r7
 800d8a4:	f7f2 fcfa 	bl	800029c <__adddf3>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	4629      	mov	r1, r5
 800d8b0:	f7f2 fcf2 	bl	8000298 <__aeabi_dsub>
 800d8b4:	e7c4      	b.n	800d840 <__kernel_sin+0xd0>
 800d8b6:	bf00      	nop
 800d8b8:	55555549 	.word	0x55555549
 800d8bc:	3fc55555 	.word	0x3fc55555
 800d8c0:	3fe00000 	.word	0x3fe00000
 800d8c4:	5acfd57c 	.word	0x5acfd57c
 800d8c8:	3de5d93a 	.word	0x3de5d93a
 800d8cc:	8a2b9ceb 	.word	0x8a2b9ceb
 800d8d0:	3e5ae5e6 	.word	0x3e5ae5e6
 800d8d4:	57b1fe7d 	.word	0x57b1fe7d
 800d8d8:	3ec71de3 	.word	0x3ec71de3
 800d8dc:	19c161d5 	.word	0x19c161d5
 800d8e0:	3f2a01a0 	.word	0x3f2a01a0
 800d8e4:	1110f8a6 	.word	0x1110f8a6
 800d8e8:	3f811111 	.word	0x3f811111
 800d8ec:	00000000 	.word	0x00000000

0800d8f0 <atan>:
 800d8f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f4:	ec55 4b10 	vmov	r4, r5, d0
 800d8f8:	4bc3      	ldr	r3, [pc, #780]	; (800dc08 <atan+0x318>)
 800d8fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d8fe:	429e      	cmp	r6, r3
 800d900:	46ab      	mov	fp, r5
 800d902:	dd18      	ble.n	800d936 <atan+0x46>
 800d904:	4bc1      	ldr	r3, [pc, #772]	; (800dc0c <atan+0x31c>)
 800d906:	429e      	cmp	r6, r3
 800d908:	dc01      	bgt.n	800d90e <atan+0x1e>
 800d90a:	d109      	bne.n	800d920 <atan+0x30>
 800d90c:	b144      	cbz	r4, 800d920 <atan+0x30>
 800d90e:	4622      	mov	r2, r4
 800d910:	462b      	mov	r3, r5
 800d912:	4620      	mov	r0, r4
 800d914:	4629      	mov	r1, r5
 800d916:	f7f2 fcc1 	bl	800029c <__adddf3>
 800d91a:	4604      	mov	r4, r0
 800d91c:	460d      	mov	r5, r1
 800d91e:	e006      	b.n	800d92e <atan+0x3e>
 800d920:	f1bb 0f00 	cmp.w	fp, #0
 800d924:	f300 8131 	bgt.w	800db8a <atan+0x29a>
 800d928:	a59b      	add	r5, pc, #620	; (adr r5, 800db98 <atan+0x2a8>)
 800d92a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d92e:	ec45 4b10 	vmov	d0, r4, r5
 800d932:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d936:	4bb6      	ldr	r3, [pc, #728]	; (800dc10 <atan+0x320>)
 800d938:	429e      	cmp	r6, r3
 800d93a:	dc14      	bgt.n	800d966 <atan+0x76>
 800d93c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d940:	429e      	cmp	r6, r3
 800d942:	dc0d      	bgt.n	800d960 <atan+0x70>
 800d944:	a396      	add	r3, pc, #600	; (adr r3, 800dba0 <atan+0x2b0>)
 800d946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94a:	ee10 0a10 	vmov	r0, s0
 800d94e:	4629      	mov	r1, r5
 800d950:	f7f2 fca4 	bl	800029c <__adddf3>
 800d954:	4baf      	ldr	r3, [pc, #700]	; (800dc14 <atan+0x324>)
 800d956:	2200      	movs	r2, #0
 800d958:	f7f3 f8e6 	bl	8000b28 <__aeabi_dcmpgt>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	d1e6      	bne.n	800d92e <atan+0x3e>
 800d960:	f04f 3aff 	mov.w	sl, #4294967295
 800d964:	e02b      	b.n	800d9be <atan+0xce>
 800d966:	f000 f963 	bl	800dc30 <fabs>
 800d96a:	4bab      	ldr	r3, [pc, #684]	; (800dc18 <atan+0x328>)
 800d96c:	429e      	cmp	r6, r3
 800d96e:	ec55 4b10 	vmov	r4, r5, d0
 800d972:	f300 80bf 	bgt.w	800daf4 <atan+0x204>
 800d976:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d97a:	429e      	cmp	r6, r3
 800d97c:	f300 80a0 	bgt.w	800dac0 <atan+0x1d0>
 800d980:	ee10 2a10 	vmov	r2, s0
 800d984:	ee10 0a10 	vmov	r0, s0
 800d988:	462b      	mov	r3, r5
 800d98a:	4629      	mov	r1, r5
 800d98c:	f7f2 fc86 	bl	800029c <__adddf3>
 800d990:	4ba0      	ldr	r3, [pc, #640]	; (800dc14 <atan+0x324>)
 800d992:	2200      	movs	r2, #0
 800d994:	f7f2 fc80 	bl	8000298 <__aeabi_dsub>
 800d998:	2200      	movs	r2, #0
 800d99a:	4606      	mov	r6, r0
 800d99c:	460f      	mov	r7, r1
 800d99e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	4629      	mov	r1, r5
 800d9a6:	f7f2 fc79 	bl	800029c <__adddf3>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	4639      	mov	r1, r7
 800d9b2:	f7f2 ff53 	bl	800085c <__aeabi_ddiv>
 800d9b6:	f04f 0a00 	mov.w	sl, #0
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	460d      	mov	r5, r1
 800d9be:	4622      	mov	r2, r4
 800d9c0:	462b      	mov	r3, r5
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	4629      	mov	r1, r5
 800d9c6:	f7f2 fe1f 	bl	8000608 <__aeabi_dmul>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	4680      	mov	r8, r0
 800d9d0:	4689      	mov	r9, r1
 800d9d2:	f7f2 fe19 	bl	8000608 <__aeabi_dmul>
 800d9d6:	a374      	add	r3, pc, #464	; (adr r3, 800dba8 <atan+0x2b8>)
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	4606      	mov	r6, r0
 800d9de:	460f      	mov	r7, r1
 800d9e0:	f7f2 fe12 	bl	8000608 <__aeabi_dmul>
 800d9e4:	a372      	add	r3, pc, #456	; (adr r3, 800dbb0 <atan+0x2c0>)
 800d9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ea:	f7f2 fc57 	bl	800029c <__adddf3>
 800d9ee:	4632      	mov	r2, r6
 800d9f0:	463b      	mov	r3, r7
 800d9f2:	f7f2 fe09 	bl	8000608 <__aeabi_dmul>
 800d9f6:	a370      	add	r3, pc, #448	; (adr r3, 800dbb8 <atan+0x2c8>)
 800d9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fc:	f7f2 fc4e 	bl	800029c <__adddf3>
 800da00:	4632      	mov	r2, r6
 800da02:	463b      	mov	r3, r7
 800da04:	f7f2 fe00 	bl	8000608 <__aeabi_dmul>
 800da08:	a36d      	add	r3, pc, #436	; (adr r3, 800dbc0 <atan+0x2d0>)
 800da0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0e:	f7f2 fc45 	bl	800029c <__adddf3>
 800da12:	4632      	mov	r2, r6
 800da14:	463b      	mov	r3, r7
 800da16:	f7f2 fdf7 	bl	8000608 <__aeabi_dmul>
 800da1a:	a36b      	add	r3, pc, #428	; (adr r3, 800dbc8 <atan+0x2d8>)
 800da1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da20:	f7f2 fc3c 	bl	800029c <__adddf3>
 800da24:	4632      	mov	r2, r6
 800da26:	463b      	mov	r3, r7
 800da28:	f7f2 fdee 	bl	8000608 <__aeabi_dmul>
 800da2c:	a368      	add	r3, pc, #416	; (adr r3, 800dbd0 <atan+0x2e0>)
 800da2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da32:	f7f2 fc33 	bl	800029c <__adddf3>
 800da36:	4642      	mov	r2, r8
 800da38:	464b      	mov	r3, r9
 800da3a:	f7f2 fde5 	bl	8000608 <__aeabi_dmul>
 800da3e:	a366      	add	r3, pc, #408	; (adr r3, 800dbd8 <atan+0x2e8>)
 800da40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da44:	4680      	mov	r8, r0
 800da46:	4689      	mov	r9, r1
 800da48:	4630      	mov	r0, r6
 800da4a:	4639      	mov	r1, r7
 800da4c:	f7f2 fddc 	bl	8000608 <__aeabi_dmul>
 800da50:	a363      	add	r3, pc, #396	; (adr r3, 800dbe0 <atan+0x2f0>)
 800da52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da56:	f7f2 fc1f 	bl	8000298 <__aeabi_dsub>
 800da5a:	4632      	mov	r2, r6
 800da5c:	463b      	mov	r3, r7
 800da5e:	f7f2 fdd3 	bl	8000608 <__aeabi_dmul>
 800da62:	a361      	add	r3, pc, #388	; (adr r3, 800dbe8 <atan+0x2f8>)
 800da64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da68:	f7f2 fc16 	bl	8000298 <__aeabi_dsub>
 800da6c:	4632      	mov	r2, r6
 800da6e:	463b      	mov	r3, r7
 800da70:	f7f2 fdca 	bl	8000608 <__aeabi_dmul>
 800da74:	a35e      	add	r3, pc, #376	; (adr r3, 800dbf0 <atan+0x300>)
 800da76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7a:	f7f2 fc0d 	bl	8000298 <__aeabi_dsub>
 800da7e:	4632      	mov	r2, r6
 800da80:	463b      	mov	r3, r7
 800da82:	f7f2 fdc1 	bl	8000608 <__aeabi_dmul>
 800da86:	a35c      	add	r3, pc, #368	; (adr r3, 800dbf8 <atan+0x308>)
 800da88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8c:	f7f2 fc04 	bl	8000298 <__aeabi_dsub>
 800da90:	4632      	mov	r2, r6
 800da92:	463b      	mov	r3, r7
 800da94:	f7f2 fdb8 	bl	8000608 <__aeabi_dmul>
 800da98:	4602      	mov	r2, r0
 800da9a:	460b      	mov	r3, r1
 800da9c:	4640      	mov	r0, r8
 800da9e:	4649      	mov	r1, r9
 800daa0:	f7f2 fbfc 	bl	800029c <__adddf3>
 800daa4:	4622      	mov	r2, r4
 800daa6:	462b      	mov	r3, r5
 800daa8:	f7f2 fdae 	bl	8000608 <__aeabi_dmul>
 800daac:	f1ba 3fff 	cmp.w	sl, #4294967295
 800dab0:	4602      	mov	r2, r0
 800dab2:	460b      	mov	r3, r1
 800dab4:	d14b      	bne.n	800db4e <atan+0x25e>
 800dab6:	4620      	mov	r0, r4
 800dab8:	4629      	mov	r1, r5
 800daba:	f7f2 fbed 	bl	8000298 <__aeabi_dsub>
 800dabe:	e72c      	b.n	800d91a <atan+0x2a>
 800dac0:	ee10 0a10 	vmov	r0, s0
 800dac4:	4b53      	ldr	r3, [pc, #332]	; (800dc14 <atan+0x324>)
 800dac6:	2200      	movs	r2, #0
 800dac8:	4629      	mov	r1, r5
 800daca:	f7f2 fbe5 	bl	8000298 <__aeabi_dsub>
 800dace:	4b51      	ldr	r3, [pc, #324]	; (800dc14 <atan+0x324>)
 800dad0:	4606      	mov	r6, r0
 800dad2:	460f      	mov	r7, r1
 800dad4:	2200      	movs	r2, #0
 800dad6:	4620      	mov	r0, r4
 800dad8:	4629      	mov	r1, r5
 800dada:	f7f2 fbdf 	bl	800029c <__adddf3>
 800dade:	4602      	mov	r2, r0
 800dae0:	460b      	mov	r3, r1
 800dae2:	4630      	mov	r0, r6
 800dae4:	4639      	mov	r1, r7
 800dae6:	f7f2 feb9 	bl	800085c <__aeabi_ddiv>
 800daea:	f04f 0a01 	mov.w	sl, #1
 800daee:	4604      	mov	r4, r0
 800daf0:	460d      	mov	r5, r1
 800daf2:	e764      	b.n	800d9be <atan+0xce>
 800daf4:	4b49      	ldr	r3, [pc, #292]	; (800dc1c <atan+0x32c>)
 800daf6:	429e      	cmp	r6, r3
 800daf8:	da1d      	bge.n	800db36 <atan+0x246>
 800dafa:	ee10 0a10 	vmov	r0, s0
 800dafe:	4b48      	ldr	r3, [pc, #288]	; (800dc20 <atan+0x330>)
 800db00:	2200      	movs	r2, #0
 800db02:	4629      	mov	r1, r5
 800db04:	f7f2 fbc8 	bl	8000298 <__aeabi_dsub>
 800db08:	4b45      	ldr	r3, [pc, #276]	; (800dc20 <atan+0x330>)
 800db0a:	4606      	mov	r6, r0
 800db0c:	460f      	mov	r7, r1
 800db0e:	2200      	movs	r2, #0
 800db10:	4620      	mov	r0, r4
 800db12:	4629      	mov	r1, r5
 800db14:	f7f2 fd78 	bl	8000608 <__aeabi_dmul>
 800db18:	4b3e      	ldr	r3, [pc, #248]	; (800dc14 <atan+0x324>)
 800db1a:	2200      	movs	r2, #0
 800db1c:	f7f2 fbbe 	bl	800029c <__adddf3>
 800db20:	4602      	mov	r2, r0
 800db22:	460b      	mov	r3, r1
 800db24:	4630      	mov	r0, r6
 800db26:	4639      	mov	r1, r7
 800db28:	f7f2 fe98 	bl	800085c <__aeabi_ddiv>
 800db2c:	f04f 0a02 	mov.w	sl, #2
 800db30:	4604      	mov	r4, r0
 800db32:	460d      	mov	r5, r1
 800db34:	e743      	b.n	800d9be <atan+0xce>
 800db36:	462b      	mov	r3, r5
 800db38:	ee10 2a10 	vmov	r2, s0
 800db3c:	4939      	ldr	r1, [pc, #228]	; (800dc24 <atan+0x334>)
 800db3e:	2000      	movs	r0, #0
 800db40:	f7f2 fe8c 	bl	800085c <__aeabi_ddiv>
 800db44:	f04f 0a03 	mov.w	sl, #3
 800db48:	4604      	mov	r4, r0
 800db4a:	460d      	mov	r5, r1
 800db4c:	e737      	b.n	800d9be <atan+0xce>
 800db4e:	4b36      	ldr	r3, [pc, #216]	; (800dc28 <atan+0x338>)
 800db50:	4e36      	ldr	r6, [pc, #216]	; (800dc2c <atan+0x33c>)
 800db52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800db56:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800db5a:	e9da 2300 	ldrd	r2, r3, [sl]
 800db5e:	f7f2 fb9b 	bl	8000298 <__aeabi_dsub>
 800db62:	4622      	mov	r2, r4
 800db64:	462b      	mov	r3, r5
 800db66:	f7f2 fb97 	bl	8000298 <__aeabi_dsub>
 800db6a:	4602      	mov	r2, r0
 800db6c:	460b      	mov	r3, r1
 800db6e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800db72:	f7f2 fb91 	bl	8000298 <__aeabi_dsub>
 800db76:	f1bb 0f00 	cmp.w	fp, #0
 800db7a:	4604      	mov	r4, r0
 800db7c:	460d      	mov	r5, r1
 800db7e:	f6bf aed6 	bge.w	800d92e <atan+0x3e>
 800db82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db86:	461d      	mov	r5, r3
 800db88:	e6d1      	b.n	800d92e <atan+0x3e>
 800db8a:	a51d      	add	r5, pc, #116	; (adr r5, 800dc00 <atan+0x310>)
 800db8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800db90:	e6cd      	b.n	800d92e <atan+0x3e>
 800db92:	bf00      	nop
 800db94:	f3af 8000 	nop.w
 800db98:	54442d18 	.word	0x54442d18
 800db9c:	bff921fb 	.word	0xbff921fb
 800dba0:	8800759c 	.word	0x8800759c
 800dba4:	7e37e43c 	.word	0x7e37e43c
 800dba8:	e322da11 	.word	0xe322da11
 800dbac:	3f90ad3a 	.word	0x3f90ad3a
 800dbb0:	24760deb 	.word	0x24760deb
 800dbb4:	3fa97b4b 	.word	0x3fa97b4b
 800dbb8:	a0d03d51 	.word	0xa0d03d51
 800dbbc:	3fb10d66 	.word	0x3fb10d66
 800dbc0:	c54c206e 	.word	0xc54c206e
 800dbc4:	3fb745cd 	.word	0x3fb745cd
 800dbc8:	920083ff 	.word	0x920083ff
 800dbcc:	3fc24924 	.word	0x3fc24924
 800dbd0:	5555550d 	.word	0x5555550d
 800dbd4:	3fd55555 	.word	0x3fd55555
 800dbd8:	2c6a6c2f 	.word	0x2c6a6c2f
 800dbdc:	bfa2b444 	.word	0xbfa2b444
 800dbe0:	52defd9a 	.word	0x52defd9a
 800dbe4:	3fadde2d 	.word	0x3fadde2d
 800dbe8:	af749a6d 	.word	0xaf749a6d
 800dbec:	3fb3b0f2 	.word	0x3fb3b0f2
 800dbf0:	fe231671 	.word	0xfe231671
 800dbf4:	3fbc71c6 	.word	0x3fbc71c6
 800dbf8:	9998ebc4 	.word	0x9998ebc4
 800dbfc:	3fc99999 	.word	0x3fc99999
 800dc00:	54442d18 	.word	0x54442d18
 800dc04:	3ff921fb 	.word	0x3ff921fb
 800dc08:	440fffff 	.word	0x440fffff
 800dc0c:	7ff00000 	.word	0x7ff00000
 800dc10:	3fdbffff 	.word	0x3fdbffff
 800dc14:	3ff00000 	.word	0x3ff00000
 800dc18:	3ff2ffff 	.word	0x3ff2ffff
 800dc1c:	40038000 	.word	0x40038000
 800dc20:	3ff80000 	.word	0x3ff80000
 800dc24:	bff00000 	.word	0xbff00000
 800dc28:	08013588 	.word	0x08013588
 800dc2c:	08013568 	.word	0x08013568

0800dc30 <fabs>:
 800dc30:	ec51 0b10 	vmov	r0, r1, d0
 800dc34:	ee10 2a10 	vmov	r2, s0
 800dc38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dc3c:	ec43 2b10 	vmov	d0, r2, r3
 800dc40:	4770      	bx	lr
 800dc42:	0000      	movs	r0, r0
 800dc44:	0000      	movs	r0, r0
	...

0800dc48 <floor>:
 800dc48:	ec51 0b10 	vmov	r0, r1, d0
 800dc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800dc54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800dc58:	2e13      	cmp	r6, #19
 800dc5a:	ee10 5a10 	vmov	r5, s0
 800dc5e:	ee10 8a10 	vmov	r8, s0
 800dc62:	460c      	mov	r4, r1
 800dc64:	dc32      	bgt.n	800dccc <floor+0x84>
 800dc66:	2e00      	cmp	r6, #0
 800dc68:	da14      	bge.n	800dc94 <floor+0x4c>
 800dc6a:	a333      	add	r3, pc, #204	; (adr r3, 800dd38 <floor+0xf0>)
 800dc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc70:	f7f2 fb14 	bl	800029c <__adddf3>
 800dc74:	2200      	movs	r2, #0
 800dc76:	2300      	movs	r3, #0
 800dc78:	f7f2 ff56 	bl	8000b28 <__aeabi_dcmpgt>
 800dc7c:	b138      	cbz	r0, 800dc8e <floor+0x46>
 800dc7e:	2c00      	cmp	r4, #0
 800dc80:	da57      	bge.n	800dd32 <floor+0xea>
 800dc82:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dc86:	431d      	orrs	r5, r3
 800dc88:	d001      	beq.n	800dc8e <floor+0x46>
 800dc8a:	4c2d      	ldr	r4, [pc, #180]	; (800dd40 <floor+0xf8>)
 800dc8c:	2500      	movs	r5, #0
 800dc8e:	4621      	mov	r1, r4
 800dc90:	4628      	mov	r0, r5
 800dc92:	e025      	b.n	800dce0 <floor+0x98>
 800dc94:	4f2b      	ldr	r7, [pc, #172]	; (800dd44 <floor+0xfc>)
 800dc96:	4137      	asrs	r7, r6
 800dc98:	ea01 0307 	and.w	r3, r1, r7
 800dc9c:	4303      	orrs	r3, r0
 800dc9e:	d01f      	beq.n	800dce0 <floor+0x98>
 800dca0:	a325      	add	r3, pc, #148	; (adr r3, 800dd38 <floor+0xf0>)
 800dca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca6:	f7f2 faf9 	bl	800029c <__adddf3>
 800dcaa:	2200      	movs	r2, #0
 800dcac:	2300      	movs	r3, #0
 800dcae:	f7f2 ff3b 	bl	8000b28 <__aeabi_dcmpgt>
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	d0eb      	beq.n	800dc8e <floor+0x46>
 800dcb6:	2c00      	cmp	r4, #0
 800dcb8:	bfbe      	ittt	lt
 800dcba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dcbe:	fa43 f606 	asrlt.w	r6, r3, r6
 800dcc2:	19a4      	addlt	r4, r4, r6
 800dcc4:	ea24 0407 	bic.w	r4, r4, r7
 800dcc8:	2500      	movs	r5, #0
 800dcca:	e7e0      	b.n	800dc8e <floor+0x46>
 800dccc:	2e33      	cmp	r6, #51	; 0x33
 800dcce:	dd0b      	ble.n	800dce8 <floor+0xa0>
 800dcd0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dcd4:	d104      	bne.n	800dce0 <floor+0x98>
 800dcd6:	ee10 2a10 	vmov	r2, s0
 800dcda:	460b      	mov	r3, r1
 800dcdc:	f7f2 fade 	bl	800029c <__adddf3>
 800dce0:	ec41 0b10 	vmov	d0, r0, r1
 800dce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dce8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800dcec:	f04f 33ff 	mov.w	r3, #4294967295
 800dcf0:	fa23 f707 	lsr.w	r7, r3, r7
 800dcf4:	4207      	tst	r7, r0
 800dcf6:	d0f3      	beq.n	800dce0 <floor+0x98>
 800dcf8:	a30f      	add	r3, pc, #60	; (adr r3, 800dd38 <floor+0xf0>)
 800dcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfe:	f7f2 facd 	bl	800029c <__adddf3>
 800dd02:	2200      	movs	r2, #0
 800dd04:	2300      	movs	r3, #0
 800dd06:	f7f2 ff0f 	bl	8000b28 <__aeabi_dcmpgt>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	d0bf      	beq.n	800dc8e <floor+0x46>
 800dd0e:	2c00      	cmp	r4, #0
 800dd10:	da02      	bge.n	800dd18 <floor+0xd0>
 800dd12:	2e14      	cmp	r6, #20
 800dd14:	d103      	bne.n	800dd1e <floor+0xd6>
 800dd16:	3401      	adds	r4, #1
 800dd18:	ea25 0507 	bic.w	r5, r5, r7
 800dd1c:	e7b7      	b.n	800dc8e <floor+0x46>
 800dd1e:	2301      	movs	r3, #1
 800dd20:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800dd24:	fa03 f606 	lsl.w	r6, r3, r6
 800dd28:	4435      	add	r5, r6
 800dd2a:	4545      	cmp	r5, r8
 800dd2c:	bf38      	it	cc
 800dd2e:	18e4      	addcc	r4, r4, r3
 800dd30:	e7f2      	b.n	800dd18 <floor+0xd0>
 800dd32:	2500      	movs	r5, #0
 800dd34:	462c      	mov	r4, r5
 800dd36:	e7aa      	b.n	800dc8e <floor+0x46>
 800dd38:	8800759c 	.word	0x8800759c
 800dd3c:	7e37e43c 	.word	0x7e37e43c
 800dd40:	bff00000 	.word	0xbff00000
 800dd44:	000fffff 	.word	0x000fffff

0800dd48 <nan>:
 800dd48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dd50 <nan+0x8>
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	00000000 	.word	0x00000000
 800dd54:	7ff80000 	.word	0x7ff80000

0800dd58 <scalbn>:
 800dd58:	b570      	push	{r4, r5, r6, lr}
 800dd5a:	ec55 4b10 	vmov	r4, r5, d0
 800dd5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800dd62:	4606      	mov	r6, r0
 800dd64:	462b      	mov	r3, r5
 800dd66:	b99a      	cbnz	r2, 800dd90 <scalbn+0x38>
 800dd68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dd6c:	4323      	orrs	r3, r4
 800dd6e:	d036      	beq.n	800ddde <scalbn+0x86>
 800dd70:	4b39      	ldr	r3, [pc, #228]	; (800de58 <scalbn+0x100>)
 800dd72:	4629      	mov	r1, r5
 800dd74:	ee10 0a10 	vmov	r0, s0
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f7f2 fc45 	bl	8000608 <__aeabi_dmul>
 800dd7e:	4b37      	ldr	r3, [pc, #220]	; (800de5c <scalbn+0x104>)
 800dd80:	429e      	cmp	r6, r3
 800dd82:	4604      	mov	r4, r0
 800dd84:	460d      	mov	r5, r1
 800dd86:	da10      	bge.n	800ddaa <scalbn+0x52>
 800dd88:	a32b      	add	r3, pc, #172	; (adr r3, 800de38 <scalbn+0xe0>)
 800dd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8e:	e03a      	b.n	800de06 <scalbn+0xae>
 800dd90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dd94:	428a      	cmp	r2, r1
 800dd96:	d10c      	bne.n	800ddb2 <scalbn+0x5a>
 800dd98:	ee10 2a10 	vmov	r2, s0
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	4629      	mov	r1, r5
 800dda0:	f7f2 fa7c 	bl	800029c <__adddf3>
 800dda4:	4604      	mov	r4, r0
 800dda6:	460d      	mov	r5, r1
 800dda8:	e019      	b.n	800ddde <scalbn+0x86>
 800ddaa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ddae:	460b      	mov	r3, r1
 800ddb0:	3a36      	subs	r2, #54	; 0x36
 800ddb2:	4432      	add	r2, r6
 800ddb4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ddb8:	428a      	cmp	r2, r1
 800ddba:	dd08      	ble.n	800ddce <scalbn+0x76>
 800ddbc:	2d00      	cmp	r5, #0
 800ddbe:	a120      	add	r1, pc, #128	; (adr r1, 800de40 <scalbn+0xe8>)
 800ddc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddc4:	da1c      	bge.n	800de00 <scalbn+0xa8>
 800ddc6:	a120      	add	r1, pc, #128	; (adr r1, 800de48 <scalbn+0xf0>)
 800ddc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddcc:	e018      	b.n	800de00 <scalbn+0xa8>
 800ddce:	2a00      	cmp	r2, #0
 800ddd0:	dd08      	ble.n	800dde4 <scalbn+0x8c>
 800ddd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ddd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ddda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ddde:	ec45 4b10 	vmov	d0, r4, r5
 800dde2:	bd70      	pop	{r4, r5, r6, pc}
 800dde4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dde8:	da19      	bge.n	800de1e <scalbn+0xc6>
 800ddea:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ddee:	429e      	cmp	r6, r3
 800ddf0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ddf4:	dd0a      	ble.n	800de0c <scalbn+0xb4>
 800ddf6:	a112      	add	r1, pc, #72	; (adr r1, 800de40 <scalbn+0xe8>)
 800ddf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d1e2      	bne.n	800ddc6 <scalbn+0x6e>
 800de00:	a30f      	add	r3, pc, #60	; (adr r3, 800de40 <scalbn+0xe8>)
 800de02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de06:	f7f2 fbff 	bl	8000608 <__aeabi_dmul>
 800de0a:	e7cb      	b.n	800dda4 <scalbn+0x4c>
 800de0c:	a10a      	add	r1, pc, #40	; (adr r1, 800de38 <scalbn+0xe0>)
 800de0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d0b8      	beq.n	800dd88 <scalbn+0x30>
 800de16:	a10e      	add	r1, pc, #56	; (adr r1, 800de50 <scalbn+0xf8>)
 800de18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de1c:	e7b4      	b.n	800dd88 <scalbn+0x30>
 800de1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800de22:	3236      	adds	r2, #54	; 0x36
 800de24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800de28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800de2c:	4620      	mov	r0, r4
 800de2e:	4b0c      	ldr	r3, [pc, #48]	; (800de60 <scalbn+0x108>)
 800de30:	2200      	movs	r2, #0
 800de32:	e7e8      	b.n	800de06 <scalbn+0xae>
 800de34:	f3af 8000 	nop.w
 800de38:	c2f8f359 	.word	0xc2f8f359
 800de3c:	01a56e1f 	.word	0x01a56e1f
 800de40:	8800759c 	.word	0x8800759c
 800de44:	7e37e43c 	.word	0x7e37e43c
 800de48:	8800759c 	.word	0x8800759c
 800de4c:	fe37e43c 	.word	0xfe37e43c
 800de50:	c2f8f359 	.word	0xc2f8f359
 800de54:	81a56e1f 	.word	0x81a56e1f
 800de58:	43500000 	.word	0x43500000
 800de5c:	ffff3cb0 	.word	0xffff3cb0
 800de60:	3c900000 	.word	0x3c900000

0800de64 <fabsf>:
 800de64:	ee10 3a10 	vmov	r3, s0
 800de68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de6c:	ee00 3a10 	vmov	s0, r3
 800de70:	4770      	bx	lr

0800de72 <finitef>:
 800de72:	b082      	sub	sp, #8
 800de74:	ed8d 0a01 	vstr	s0, [sp, #4]
 800de78:	9801      	ldr	r0, [sp, #4]
 800de7a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800de7e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800de82:	bfac      	ite	ge
 800de84:	2000      	movge	r0, #0
 800de86:	2001      	movlt	r0, #1
 800de88:	b002      	add	sp, #8
 800de8a:	4770      	bx	lr

0800de8c <nanf>:
 800de8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800de94 <nanf+0x8>
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop
 800de94:	7fc00000 	.word	0x7fc00000

0800de98 <rintf>:
 800de98:	ee10 2a10 	vmov	r2, s0
 800de9c:	b513      	push	{r0, r1, r4, lr}
 800de9e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800dea2:	397f      	subs	r1, #127	; 0x7f
 800dea4:	2916      	cmp	r1, #22
 800dea6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800deaa:	dc47      	bgt.n	800df3c <rintf+0xa4>
 800deac:	b32b      	cbz	r3, 800defa <rintf+0x62>
 800deae:	2900      	cmp	r1, #0
 800deb0:	ee10 3a10 	vmov	r3, s0
 800deb4:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800deb8:	da21      	bge.n	800defe <rintf+0x66>
 800deba:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800debe:	425b      	negs	r3, r3
 800dec0:	4921      	ldr	r1, [pc, #132]	; (800df48 <rintf+0xb0>)
 800dec2:	0a5b      	lsrs	r3, r3, #9
 800dec4:	0d12      	lsrs	r2, r2, #20
 800dec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800deca:	0512      	lsls	r2, r2, #20
 800decc:	4313      	orrs	r3, r2
 800dece:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ded2:	ee07 3a90 	vmov	s15, r3
 800ded6:	edd1 6a00 	vldr	s13, [r1]
 800deda:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800dede:	ed8d 7a01 	vstr	s14, [sp, #4]
 800dee2:	eddd 7a01 	vldr	s15, [sp, #4]
 800dee6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800deea:	ee17 3a90 	vmov	r3, s15
 800deee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800def2:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800def6:	ee00 3a10 	vmov	s0, r3
 800defa:	b002      	add	sp, #8
 800defc:	bd10      	pop	{r4, pc}
 800defe:	4a13      	ldr	r2, [pc, #76]	; (800df4c <rintf+0xb4>)
 800df00:	410a      	asrs	r2, r1
 800df02:	4213      	tst	r3, r2
 800df04:	d0f9      	beq.n	800defa <rintf+0x62>
 800df06:	0854      	lsrs	r4, r2, #1
 800df08:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800df0c:	d006      	beq.n	800df1c <rintf+0x84>
 800df0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800df12:	ea23 0304 	bic.w	r3, r3, r4
 800df16:	fa42 f101 	asr.w	r1, r2, r1
 800df1a:	430b      	orrs	r3, r1
 800df1c:	4a0a      	ldr	r2, [pc, #40]	; (800df48 <rintf+0xb0>)
 800df1e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800df22:	ed90 7a00 	vldr	s14, [r0]
 800df26:	ee07 3a90 	vmov	s15, r3
 800df2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df2e:	edcd 7a01 	vstr	s15, [sp, #4]
 800df32:	ed9d 0a01 	vldr	s0, [sp, #4]
 800df36:	ee30 0a47 	vsub.f32	s0, s0, s14
 800df3a:	e7de      	b.n	800defa <rintf+0x62>
 800df3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800df40:	d3db      	bcc.n	800defa <rintf+0x62>
 800df42:	ee30 0a00 	vadd.f32	s0, s0, s0
 800df46:	e7d8      	b.n	800defa <rintf+0x62>
 800df48:	080135a8 	.word	0x080135a8
 800df4c:	007fffff 	.word	0x007fffff

0800df50 <scalbnf>:
 800df50:	ee10 3a10 	vmov	r3, s0
 800df54:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800df58:	d025      	beq.n	800dfa6 <scalbnf+0x56>
 800df5a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800df5e:	d302      	bcc.n	800df66 <scalbnf+0x16>
 800df60:	ee30 0a00 	vadd.f32	s0, s0, s0
 800df64:	4770      	bx	lr
 800df66:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800df6a:	d122      	bne.n	800dfb2 <scalbnf+0x62>
 800df6c:	4b2a      	ldr	r3, [pc, #168]	; (800e018 <scalbnf+0xc8>)
 800df6e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e01c <scalbnf+0xcc>
 800df72:	4298      	cmp	r0, r3
 800df74:	ee20 0a27 	vmul.f32	s0, s0, s15
 800df78:	db16      	blt.n	800dfa8 <scalbnf+0x58>
 800df7a:	ee10 3a10 	vmov	r3, s0
 800df7e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800df82:	3a19      	subs	r2, #25
 800df84:	4402      	add	r2, r0
 800df86:	2afe      	cmp	r2, #254	; 0xfe
 800df88:	dd15      	ble.n	800dfb6 <scalbnf+0x66>
 800df8a:	ee10 3a10 	vmov	r3, s0
 800df8e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e020 <scalbnf+0xd0>
 800df92:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e024 <scalbnf+0xd4>
 800df96:	2b00      	cmp	r3, #0
 800df98:	eeb0 7a67 	vmov.f32	s14, s15
 800df9c:	bfb8      	it	lt
 800df9e:	eef0 7a66 	vmovlt.f32	s15, s13
 800dfa2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800dfa6:	4770      	bx	lr
 800dfa8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e028 <scalbnf+0xd8>
 800dfac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dfb0:	4770      	bx	lr
 800dfb2:	0dd2      	lsrs	r2, r2, #23
 800dfb4:	e7e6      	b.n	800df84 <scalbnf+0x34>
 800dfb6:	2a00      	cmp	r2, #0
 800dfb8:	dd06      	ble.n	800dfc8 <scalbnf+0x78>
 800dfba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dfbe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800dfc2:	ee00 3a10 	vmov	s0, r3
 800dfc6:	4770      	bx	lr
 800dfc8:	f112 0f16 	cmn.w	r2, #22
 800dfcc:	da1a      	bge.n	800e004 <scalbnf+0xb4>
 800dfce:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dfd2:	4298      	cmp	r0, r3
 800dfd4:	ee10 3a10 	vmov	r3, s0
 800dfd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dfdc:	dd0a      	ble.n	800dff4 <scalbnf+0xa4>
 800dfde:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e020 <scalbnf+0xd0>
 800dfe2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e024 <scalbnf+0xd4>
 800dfe6:	eef0 7a40 	vmov.f32	s15, s0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	bf18      	it	ne
 800dfee:	eeb0 0a47 	vmovne.f32	s0, s14
 800dff2:	e7db      	b.n	800dfac <scalbnf+0x5c>
 800dff4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e028 <scalbnf+0xd8>
 800dff8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e02c <scalbnf+0xdc>
 800dffc:	eef0 7a40 	vmov.f32	s15, s0
 800e000:	2b00      	cmp	r3, #0
 800e002:	e7f3      	b.n	800dfec <scalbnf+0x9c>
 800e004:	3219      	adds	r2, #25
 800e006:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e00a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e00e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e030 <scalbnf+0xe0>
 800e012:	ee07 3a10 	vmov	s14, r3
 800e016:	e7c4      	b.n	800dfa2 <scalbnf+0x52>
 800e018:	ffff3cb0 	.word	0xffff3cb0
 800e01c:	4c000000 	.word	0x4c000000
 800e020:	7149f2ca 	.word	0x7149f2ca
 800e024:	f149f2ca 	.word	0xf149f2ca
 800e028:	0da24260 	.word	0x0da24260
 800e02c:	8da24260 	.word	0x8da24260
 800e030:	33000000 	.word	0x33000000

0800e034 <__errno>:
 800e034:	4b01      	ldr	r3, [pc, #4]	; (800e03c <__errno+0x8>)
 800e036:	6818      	ldr	r0, [r3, #0]
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	20000060 	.word	0x20000060

0800e040 <__libc_init_array>:
 800e040:	b570      	push	{r4, r5, r6, lr}
 800e042:	4d0d      	ldr	r5, [pc, #52]	; (800e078 <__libc_init_array+0x38>)
 800e044:	4c0d      	ldr	r4, [pc, #52]	; (800e07c <__libc_init_array+0x3c>)
 800e046:	1b64      	subs	r4, r4, r5
 800e048:	10a4      	asrs	r4, r4, #2
 800e04a:	2600      	movs	r6, #0
 800e04c:	42a6      	cmp	r6, r4
 800e04e:	d109      	bne.n	800e064 <__libc_init_array+0x24>
 800e050:	4d0b      	ldr	r5, [pc, #44]	; (800e080 <__libc_init_array+0x40>)
 800e052:	4c0c      	ldr	r4, [pc, #48]	; (800e084 <__libc_init_array+0x44>)
 800e054:	f005 f8a8 	bl	80131a8 <_init>
 800e058:	1b64      	subs	r4, r4, r5
 800e05a:	10a4      	asrs	r4, r4, #2
 800e05c:	2600      	movs	r6, #0
 800e05e:	42a6      	cmp	r6, r4
 800e060:	d105      	bne.n	800e06e <__libc_init_array+0x2e>
 800e062:	bd70      	pop	{r4, r5, r6, pc}
 800e064:	f855 3b04 	ldr.w	r3, [r5], #4
 800e068:	4798      	blx	r3
 800e06a:	3601      	adds	r6, #1
 800e06c:	e7ee      	b.n	800e04c <__libc_init_array+0xc>
 800e06e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e072:	4798      	blx	r3
 800e074:	3601      	adds	r6, #1
 800e076:	e7f2      	b.n	800e05e <__libc_init_array+0x1e>
 800e078:	08013a84 	.word	0x08013a84
 800e07c:	08013a84 	.word	0x08013a84
 800e080:	08013a84 	.word	0x08013a84
 800e084:	08013a88 	.word	0x08013a88

0800e088 <memset>:
 800e088:	4402      	add	r2, r0
 800e08a:	4603      	mov	r3, r0
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d100      	bne.n	800e092 <memset+0xa>
 800e090:	4770      	bx	lr
 800e092:	f803 1b01 	strb.w	r1, [r3], #1
 800e096:	e7f9      	b.n	800e08c <memset+0x4>

0800e098 <__cvt>:
 800e098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e09c:	ec55 4b10 	vmov	r4, r5, d0
 800e0a0:	2d00      	cmp	r5, #0
 800e0a2:	460e      	mov	r6, r1
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	462b      	mov	r3, r5
 800e0a8:	bfbb      	ittet	lt
 800e0aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e0ae:	461d      	movlt	r5, r3
 800e0b0:	2300      	movge	r3, #0
 800e0b2:	232d      	movlt	r3, #45	; 0x2d
 800e0b4:	700b      	strb	r3, [r1, #0]
 800e0b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e0bc:	4691      	mov	r9, r2
 800e0be:	f023 0820 	bic.w	r8, r3, #32
 800e0c2:	bfbc      	itt	lt
 800e0c4:	4622      	movlt	r2, r4
 800e0c6:	4614      	movlt	r4, r2
 800e0c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e0cc:	d005      	beq.n	800e0da <__cvt+0x42>
 800e0ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e0d2:	d100      	bne.n	800e0d6 <__cvt+0x3e>
 800e0d4:	3601      	adds	r6, #1
 800e0d6:	2102      	movs	r1, #2
 800e0d8:	e000      	b.n	800e0dc <__cvt+0x44>
 800e0da:	2103      	movs	r1, #3
 800e0dc:	ab03      	add	r3, sp, #12
 800e0de:	9301      	str	r3, [sp, #4]
 800e0e0:	ab02      	add	r3, sp, #8
 800e0e2:	9300      	str	r3, [sp, #0]
 800e0e4:	ec45 4b10 	vmov	d0, r4, r5
 800e0e8:	4653      	mov	r3, sl
 800e0ea:	4632      	mov	r2, r6
 800e0ec:	f001 fe88 	bl	800fe00 <_dtoa_r>
 800e0f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e0f4:	4607      	mov	r7, r0
 800e0f6:	d102      	bne.n	800e0fe <__cvt+0x66>
 800e0f8:	f019 0f01 	tst.w	r9, #1
 800e0fc:	d022      	beq.n	800e144 <__cvt+0xac>
 800e0fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e102:	eb07 0906 	add.w	r9, r7, r6
 800e106:	d110      	bne.n	800e12a <__cvt+0x92>
 800e108:	783b      	ldrb	r3, [r7, #0]
 800e10a:	2b30      	cmp	r3, #48	; 0x30
 800e10c:	d10a      	bne.n	800e124 <__cvt+0x8c>
 800e10e:	2200      	movs	r2, #0
 800e110:	2300      	movs	r3, #0
 800e112:	4620      	mov	r0, r4
 800e114:	4629      	mov	r1, r5
 800e116:	f7f2 fcdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800e11a:	b918      	cbnz	r0, 800e124 <__cvt+0x8c>
 800e11c:	f1c6 0601 	rsb	r6, r6, #1
 800e120:	f8ca 6000 	str.w	r6, [sl]
 800e124:	f8da 3000 	ldr.w	r3, [sl]
 800e128:	4499      	add	r9, r3
 800e12a:	2200      	movs	r2, #0
 800e12c:	2300      	movs	r3, #0
 800e12e:	4620      	mov	r0, r4
 800e130:	4629      	mov	r1, r5
 800e132:	f7f2 fcd1 	bl	8000ad8 <__aeabi_dcmpeq>
 800e136:	b108      	cbz	r0, 800e13c <__cvt+0xa4>
 800e138:	f8cd 900c 	str.w	r9, [sp, #12]
 800e13c:	2230      	movs	r2, #48	; 0x30
 800e13e:	9b03      	ldr	r3, [sp, #12]
 800e140:	454b      	cmp	r3, r9
 800e142:	d307      	bcc.n	800e154 <__cvt+0xbc>
 800e144:	9b03      	ldr	r3, [sp, #12]
 800e146:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e148:	1bdb      	subs	r3, r3, r7
 800e14a:	4638      	mov	r0, r7
 800e14c:	6013      	str	r3, [r2, #0]
 800e14e:	b004      	add	sp, #16
 800e150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e154:	1c59      	adds	r1, r3, #1
 800e156:	9103      	str	r1, [sp, #12]
 800e158:	701a      	strb	r2, [r3, #0]
 800e15a:	e7f0      	b.n	800e13e <__cvt+0xa6>

0800e15c <__exponent>:
 800e15c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e15e:	4603      	mov	r3, r0
 800e160:	2900      	cmp	r1, #0
 800e162:	bfb8      	it	lt
 800e164:	4249      	neglt	r1, r1
 800e166:	f803 2b02 	strb.w	r2, [r3], #2
 800e16a:	bfb4      	ite	lt
 800e16c:	222d      	movlt	r2, #45	; 0x2d
 800e16e:	222b      	movge	r2, #43	; 0x2b
 800e170:	2909      	cmp	r1, #9
 800e172:	7042      	strb	r2, [r0, #1]
 800e174:	dd2a      	ble.n	800e1cc <__exponent+0x70>
 800e176:	f10d 0407 	add.w	r4, sp, #7
 800e17a:	46a4      	mov	ip, r4
 800e17c:	270a      	movs	r7, #10
 800e17e:	46a6      	mov	lr, r4
 800e180:	460a      	mov	r2, r1
 800e182:	fb91 f6f7 	sdiv	r6, r1, r7
 800e186:	fb07 1516 	mls	r5, r7, r6, r1
 800e18a:	3530      	adds	r5, #48	; 0x30
 800e18c:	2a63      	cmp	r2, #99	; 0x63
 800e18e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e192:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e196:	4631      	mov	r1, r6
 800e198:	dcf1      	bgt.n	800e17e <__exponent+0x22>
 800e19a:	3130      	adds	r1, #48	; 0x30
 800e19c:	f1ae 0502 	sub.w	r5, lr, #2
 800e1a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e1a4:	1c44      	adds	r4, r0, #1
 800e1a6:	4629      	mov	r1, r5
 800e1a8:	4561      	cmp	r1, ip
 800e1aa:	d30a      	bcc.n	800e1c2 <__exponent+0x66>
 800e1ac:	f10d 0209 	add.w	r2, sp, #9
 800e1b0:	eba2 020e 	sub.w	r2, r2, lr
 800e1b4:	4565      	cmp	r5, ip
 800e1b6:	bf88      	it	hi
 800e1b8:	2200      	movhi	r2, #0
 800e1ba:	4413      	add	r3, r2
 800e1bc:	1a18      	subs	r0, r3, r0
 800e1be:	b003      	add	sp, #12
 800e1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e1ca:	e7ed      	b.n	800e1a8 <__exponent+0x4c>
 800e1cc:	2330      	movs	r3, #48	; 0x30
 800e1ce:	3130      	adds	r1, #48	; 0x30
 800e1d0:	7083      	strb	r3, [r0, #2]
 800e1d2:	70c1      	strb	r1, [r0, #3]
 800e1d4:	1d03      	adds	r3, r0, #4
 800e1d6:	e7f1      	b.n	800e1bc <__exponent+0x60>

0800e1d8 <_printf_float>:
 800e1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	ed2d 8b02 	vpush	{d8}
 800e1e0:	b08d      	sub	sp, #52	; 0x34
 800e1e2:	460c      	mov	r4, r1
 800e1e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e1e8:	4616      	mov	r6, r2
 800e1ea:	461f      	mov	r7, r3
 800e1ec:	4605      	mov	r5, r0
 800e1ee:	f002 ff63 	bl	80110b8 <_localeconv_r>
 800e1f2:	f8d0 a000 	ldr.w	sl, [r0]
 800e1f6:	4650      	mov	r0, sl
 800e1f8:	f7f1 fff2 	bl	80001e0 <strlen>
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800e200:	6823      	ldr	r3, [r4, #0]
 800e202:	9305      	str	r3, [sp, #20]
 800e204:	f8d8 3000 	ldr.w	r3, [r8]
 800e208:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e20c:	3307      	adds	r3, #7
 800e20e:	f023 0307 	bic.w	r3, r3, #7
 800e212:	f103 0208 	add.w	r2, r3, #8
 800e216:	f8c8 2000 	str.w	r2, [r8]
 800e21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e222:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e226:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e22a:	9307      	str	r3, [sp, #28]
 800e22c:	f8cd 8018 	str.w	r8, [sp, #24]
 800e230:	ee08 0a10 	vmov	s16, r0
 800e234:	4b9f      	ldr	r3, [pc, #636]	; (800e4b4 <_printf_float+0x2dc>)
 800e236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e23a:	f04f 32ff 	mov.w	r2, #4294967295
 800e23e:	f7f2 fc7d 	bl	8000b3c <__aeabi_dcmpun>
 800e242:	bb88      	cbnz	r0, 800e2a8 <_printf_float+0xd0>
 800e244:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e248:	4b9a      	ldr	r3, [pc, #616]	; (800e4b4 <_printf_float+0x2dc>)
 800e24a:	f04f 32ff 	mov.w	r2, #4294967295
 800e24e:	f7f2 fc57 	bl	8000b00 <__aeabi_dcmple>
 800e252:	bb48      	cbnz	r0, 800e2a8 <_printf_float+0xd0>
 800e254:	2200      	movs	r2, #0
 800e256:	2300      	movs	r3, #0
 800e258:	4640      	mov	r0, r8
 800e25a:	4649      	mov	r1, r9
 800e25c:	f7f2 fc46 	bl	8000aec <__aeabi_dcmplt>
 800e260:	b110      	cbz	r0, 800e268 <_printf_float+0x90>
 800e262:	232d      	movs	r3, #45	; 0x2d
 800e264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e268:	4b93      	ldr	r3, [pc, #588]	; (800e4b8 <_printf_float+0x2e0>)
 800e26a:	4894      	ldr	r0, [pc, #592]	; (800e4bc <_printf_float+0x2e4>)
 800e26c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e270:	bf94      	ite	ls
 800e272:	4698      	movls	r8, r3
 800e274:	4680      	movhi	r8, r0
 800e276:	2303      	movs	r3, #3
 800e278:	6123      	str	r3, [r4, #16]
 800e27a:	9b05      	ldr	r3, [sp, #20]
 800e27c:	f023 0204 	bic.w	r2, r3, #4
 800e280:	6022      	str	r2, [r4, #0]
 800e282:	f04f 0900 	mov.w	r9, #0
 800e286:	9700      	str	r7, [sp, #0]
 800e288:	4633      	mov	r3, r6
 800e28a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e28c:	4621      	mov	r1, r4
 800e28e:	4628      	mov	r0, r5
 800e290:	f000 f9d8 	bl	800e644 <_printf_common>
 800e294:	3001      	adds	r0, #1
 800e296:	f040 8090 	bne.w	800e3ba <_printf_float+0x1e2>
 800e29a:	f04f 30ff 	mov.w	r0, #4294967295
 800e29e:	b00d      	add	sp, #52	; 0x34
 800e2a0:	ecbd 8b02 	vpop	{d8}
 800e2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a8:	4642      	mov	r2, r8
 800e2aa:	464b      	mov	r3, r9
 800e2ac:	4640      	mov	r0, r8
 800e2ae:	4649      	mov	r1, r9
 800e2b0:	f7f2 fc44 	bl	8000b3c <__aeabi_dcmpun>
 800e2b4:	b140      	cbz	r0, 800e2c8 <_printf_float+0xf0>
 800e2b6:	464b      	mov	r3, r9
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	bfbc      	itt	lt
 800e2bc:	232d      	movlt	r3, #45	; 0x2d
 800e2be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e2c2:	487f      	ldr	r0, [pc, #508]	; (800e4c0 <_printf_float+0x2e8>)
 800e2c4:	4b7f      	ldr	r3, [pc, #508]	; (800e4c4 <_printf_float+0x2ec>)
 800e2c6:	e7d1      	b.n	800e26c <_printf_float+0x94>
 800e2c8:	6863      	ldr	r3, [r4, #4]
 800e2ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e2ce:	9206      	str	r2, [sp, #24]
 800e2d0:	1c5a      	adds	r2, r3, #1
 800e2d2:	d13f      	bne.n	800e354 <_printf_float+0x17c>
 800e2d4:	2306      	movs	r3, #6
 800e2d6:	6063      	str	r3, [r4, #4]
 800e2d8:	9b05      	ldr	r3, [sp, #20]
 800e2da:	6861      	ldr	r1, [r4, #4]
 800e2dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	9303      	str	r3, [sp, #12]
 800e2e4:	ab0a      	add	r3, sp, #40	; 0x28
 800e2e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e2ea:	ab09      	add	r3, sp, #36	; 0x24
 800e2ec:	ec49 8b10 	vmov	d0, r8, r9
 800e2f0:	9300      	str	r3, [sp, #0]
 800e2f2:	6022      	str	r2, [r4, #0]
 800e2f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	f7ff fecd 	bl	800e098 <__cvt>
 800e2fe:	9b06      	ldr	r3, [sp, #24]
 800e300:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e302:	2b47      	cmp	r3, #71	; 0x47
 800e304:	4680      	mov	r8, r0
 800e306:	d108      	bne.n	800e31a <_printf_float+0x142>
 800e308:	1cc8      	adds	r0, r1, #3
 800e30a:	db02      	blt.n	800e312 <_printf_float+0x13a>
 800e30c:	6863      	ldr	r3, [r4, #4]
 800e30e:	4299      	cmp	r1, r3
 800e310:	dd41      	ble.n	800e396 <_printf_float+0x1be>
 800e312:	f1ab 0b02 	sub.w	fp, fp, #2
 800e316:	fa5f fb8b 	uxtb.w	fp, fp
 800e31a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e31e:	d820      	bhi.n	800e362 <_printf_float+0x18a>
 800e320:	3901      	subs	r1, #1
 800e322:	465a      	mov	r2, fp
 800e324:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e328:	9109      	str	r1, [sp, #36]	; 0x24
 800e32a:	f7ff ff17 	bl	800e15c <__exponent>
 800e32e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e330:	1813      	adds	r3, r2, r0
 800e332:	2a01      	cmp	r2, #1
 800e334:	4681      	mov	r9, r0
 800e336:	6123      	str	r3, [r4, #16]
 800e338:	dc02      	bgt.n	800e340 <_printf_float+0x168>
 800e33a:	6822      	ldr	r2, [r4, #0]
 800e33c:	07d2      	lsls	r2, r2, #31
 800e33e:	d501      	bpl.n	800e344 <_printf_float+0x16c>
 800e340:	3301      	adds	r3, #1
 800e342:	6123      	str	r3, [r4, #16]
 800e344:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d09c      	beq.n	800e286 <_printf_float+0xae>
 800e34c:	232d      	movs	r3, #45	; 0x2d
 800e34e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e352:	e798      	b.n	800e286 <_printf_float+0xae>
 800e354:	9a06      	ldr	r2, [sp, #24]
 800e356:	2a47      	cmp	r2, #71	; 0x47
 800e358:	d1be      	bne.n	800e2d8 <_printf_float+0x100>
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d1bc      	bne.n	800e2d8 <_printf_float+0x100>
 800e35e:	2301      	movs	r3, #1
 800e360:	e7b9      	b.n	800e2d6 <_printf_float+0xfe>
 800e362:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e366:	d118      	bne.n	800e39a <_printf_float+0x1c2>
 800e368:	2900      	cmp	r1, #0
 800e36a:	6863      	ldr	r3, [r4, #4]
 800e36c:	dd0b      	ble.n	800e386 <_printf_float+0x1ae>
 800e36e:	6121      	str	r1, [r4, #16]
 800e370:	b913      	cbnz	r3, 800e378 <_printf_float+0x1a0>
 800e372:	6822      	ldr	r2, [r4, #0]
 800e374:	07d0      	lsls	r0, r2, #31
 800e376:	d502      	bpl.n	800e37e <_printf_float+0x1a6>
 800e378:	3301      	adds	r3, #1
 800e37a:	440b      	add	r3, r1
 800e37c:	6123      	str	r3, [r4, #16]
 800e37e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e380:	f04f 0900 	mov.w	r9, #0
 800e384:	e7de      	b.n	800e344 <_printf_float+0x16c>
 800e386:	b913      	cbnz	r3, 800e38e <_printf_float+0x1b6>
 800e388:	6822      	ldr	r2, [r4, #0]
 800e38a:	07d2      	lsls	r2, r2, #31
 800e38c:	d501      	bpl.n	800e392 <_printf_float+0x1ba>
 800e38e:	3302      	adds	r3, #2
 800e390:	e7f4      	b.n	800e37c <_printf_float+0x1a4>
 800e392:	2301      	movs	r3, #1
 800e394:	e7f2      	b.n	800e37c <_printf_float+0x1a4>
 800e396:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e39a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e39c:	4299      	cmp	r1, r3
 800e39e:	db05      	blt.n	800e3ac <_printf_float+0x1d4>
 800e3a0:	6823      	ldr	r3, [r4, #0]
 800e3a2:	6121      	str	r1, [r4, #16]
 800e3a4:	07d8      	lsls	r0, r3, #31
 800e3a6:	d5ea      	bpl.n	800e37e <_printf_float+0x1a6>
 800e3a8:	1c4b      	adds	r3, r1, #1
 800e3aa:	e7e7      	b.n	800e37c <_printf_float+0x1a4>
 800e3ac:	2900      	cmp	r1, #0
 800e3ae:	bfd4      	ite	le
 800e3b0:	f1c1 0202 	rsble	r2, r1, #2
 800e3b4:	2201      	movgt	r2, #1
 800e3b6:	4413      	add	r3, r2
 800e3b8:	e7e0      	b.n	800e37c <_printf_float+0x1a4>
 800e3ba:	6823      	ldr	r3, [r4, #0]
 800e3bc:	055a      	lsls	r2, r3, #21
 800e3be:	d407      	bmi.n	800e3d0 <_printf_float+0x1f8>
 800e3c0:	6923      	ldr	r3, [r4, #16]
 800e3c2:	4642      	mov	r2, r8
 800e3c4:	4631      	mov	r1, r6
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	47b8      	blx	r7
 800e3ca:	3001      	adds	r0, #1
 800e3cc:	d12c      	bne.n	800e428 <_printf_float+0x250>
 800e3ce:	e764      	b.n	800e29a <_printf_float+0xc2>
 800e3d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e3d4:	f240 80e0 	bls.w	800e598 <_printf_float+0x3c0>
 800e3d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3dc:	2200      	movs	r2, #0
 800e3de:	2300      	movs	r3, #0
 800e3e0:	f7f2 fb7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	d034      	beq.n	800e452 <_printf_float+0x27a>
 800e3e8:	4a37      	ldr	r2, [pc, #220]	; (800e4c8 <_printf_float+0x2f0>)
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	4631      	mov	r1, r6
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	47b8      	blx	r7
 800e3f2:	3001      	adds	r0, #1
 800e3f4:	f43f af51 	beq.w	800e29a <_printf_float+0xc2>
 800e3f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	db02      	blt.n	800e406 <_printf_float+0x22e>
 800e400:	6823      	ldr	r3, [r4, #0]
 800e402:	07d8      	lsls	r0, r3, #31
 800e404:	d510      	bpl.n	800e428 <_printf_float+0x250>
 800e406:	ee18 3a10 	vmov	r3, s16
 800e40a:	4652      	mov	r2, sl
 800e40c:	4631      	mov	r1, r6
 800e40e:	4628      	mov	r0, r5
 800e410:	47b8      	blx	r7
 800e412:	3001      	adds	r0, #1
 800e414:	f43f af41 	beq.w	800e29a <_printf_float+0xc2>
 800e418:	f04f 0800 	mov.w	r8, #0
 800e41c:	f104 091a 	add.w	r9, r4, #26
 800e420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e422:	3b01      	subs	r3, #1
 800e424:	4543      	cmp	r3, r8
 800e426:	dc09      	bgt.n	800e43c <_printf_float+0x264>
 800e428:	6823      	ldr	r3, [r4, #0]
 800e42a:	079b      	lsls	r3, r3, #30
 800e42c:	f100 8105 	bmi.w	800e63a <_printf_float+0x462>
 800e430:	68e0      	ldr	r0, [r4, #12]
 800e432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e434:	4298      	cmp	r0, r3
 800e436:	bfb8      	it	lt
 800e438:	4618      	movlt	r0, r3
 800e43a:	e730      	b.n	800e29e <_printf_float+0xc6>
 800e43c:	2301      	movs	r3, #1
 800e43e:	464a      	mov	r2, r9
 800e440:	4631      	mov	r1, r6
 800e442:	4628      	mov	r0, r5
 800e444:	47b8      	blx	r7
 800e446:	3001      	adds	r0, #1
 800e448:	f43f af27 	beq.w	800e29a <_printf_float+0xc2>
 800e44c:	f108 0801 	add.w	r8, r8, #1
 800e450:	e7e6      	b.n	800e420 <_printf_float+0x248>
 800e452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e454:	2b00      	cmp	r3, #0
 800e456:	dc39      	bgt.n	800e4cc <_printf_float+0x2f4>
 800e458:	4a1b      	ldr	r2, [pc, #108]	; (800e4c8 <_printf_float+0x2f0>)
 800e45a:	2301      	movs	r3, #1
 800e45c:	4631      	mov	r1, r6
 800e45e:	4628      	mov	r0, r5
 800e460:	47b8      	blx	r7
 800e462:	3001      	adds	r0, #1
 800e464:	f43f af19 	beq.w	800e29a <_printf_float+0xc2>
 800e468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e46c:	4313      	orrs	r3, r2
 800e46e:	d102      	bne.n	800e476 <_printf_float+0x29e>
 800e470:	6823      	ldr	r3, [r4, #0]
 800e472:	07d9      	lsls	r1, r3, #31
 800e474:	d5d8      	bpl.n	800e428 <_printf_float+0x250>
 800e476:	ee18 3a10 	vmov	r3, s16
 800e47a:	4652      	mov	r2, sl
 800e47c:	4631      	mov	r1, r6
 800e47e:	4628      	mov	r0, r5
 800e480:	47b8      	blx	r7
 800e482:	3001      	adds	r0, #1
 800e484:	f43f af09 	beq.w	800e29a <_printf_float+0xc2>
 800e488:	f04f 0900 	mov.w	r9, #0
 800e48c:	f104 0a1a 	add.w	sl, r4, #26
 800e490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e492:	425b      	negs	r3, r3
 800e494:	454b      	cmp	r3, r9
 800e496:	dc01      	bgt.n	800e49c <_printf_float+0x2c4>
 800e498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e49a:	e792      	b.n	800e3c2 <_printf_float+0x1ea>
 800e49c:	2301      	movs	r3, #1
 800e49e:	4652      	mov	r2, sl
 800e4a0:	4631      	mov	r1, r6
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	47b8      	blx	r7
 800e4a6:	3001      	adds	r0, #1
 800e4a8:	f43f aef7 	beq.w	800e29a <_printf_float+0xc2>
 800e4ac:	f109 0901 	add.w	r9, r9, #1
 800e4b0:	e7ee      	b.n	800e490 <_printf_float+0x2b8>
 800e4b2:	bf00      	nop
 800e4b4:	7fefffff 	.word	0x7fefffff
 800e4b8:	080135b4 	.word	0x080135b4
 800e4bc:	080135b8 	.word	0x080135b8
 800e4c0:	080135c0 	.word	0x080135c0
 800e4c4:	080135bc 	.word	0x080135bc
 800e4c8:	080139c9 	.word	0x080139c9
 800e4cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	bfa8      	it	ge
 800e4d4:	461a      	movge	r2, r3
 800e4d6:	2a00      	cmp	r2, #0
 800e4d8:	4691      	mov	r9, r2
 800e4da:	dc37      	bgt.n	800e54c <_printf_float+0x374>
 800e4dc:	f04f 0b00 	mov.w	fp, #0
 800e4e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4e4:	f104 021a 	add.w	r2, r4, #26
 800e4e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e4ea:	9305      	str	r3, [sp, #20]
 800e4ec:	eba3 0309 	sub.w	r3, r3, r9
 800e4f0:	455b      	cmp	r3, fp
 800e4f2:	dc33      	bgt.n	800e55c <_printf_float+0x384>
 800e4f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	db3b      	blt.n	800e574 <_printf_float+0x39c>
 800e4fc:	6823      	ldr	r3, [r4, #0]
 800e4fe:	07da      	lsls	r2, r3, #31
 800e500:	d438      	bmi.n	800e574 <_printf_float+0x39c>
 800e502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e504:	9b05      	ldr	r3, [sp, #20]
 800e506:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	eba2 0901 	sub.w	r9, r2, r1
 800e50e:	4599      	cmp	r9, r3
 800e510:	bfa8      	it	ge
 800e512:	4699      	movge	r9, r3
 800e514:	f1b9 0f00 	cmp.w	r9, #0
 800e518:	dc35      	bgt.n	800e586 <_printf_float+0x3ae>
 800e51a:	f04f 0800 	mov.w	r8, #0
 800e51e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e522:	f104 0a1a 	add.w	sl, r4, #26
 800e526:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e52a:	1a9b      	subs	r3, r3, r2
 800e52c:	eba3 0309 	sub.w	r3, r3, r9
 800e530:	4543      	cmp	r3, r8
 800e532:	f77f af79 	ble.w	800e428 <_printf_float+0x250>
 800e536:	2301      	movs	r3, #1
 800e538:	4652      	mov	r2, sl
 800e53a:	4631      	mov	r1, r6
 800e53c:	4628      	mov	r0, r5
 800e53e:	47b8      	blx	r7
 800e540:	3001      	adds	r0, #1
 800e542:	f43f aeaa 	beq.w	800e29a <_printf_float+0xc2>
 800e546:	f108 0801 	add.w	r8, r8, #1
 800e54a:	e7ec      	b.n	800e526 <_printf_float+0x34e>
 800e54c:	4613      	mov	r3, r2
 800e54e:	4631      	mov	r1, r6
 800e550:	4642      	mov	r2, r8
 800e552:	4628      	mov	r0, r5
 800e554:	47b8      	blx	r7
 800e556:	3001      	adds	r0, #1
 800e558:	d1c0      	bne.n	800e4dc <_printf_float+0x304>
 800e55a:	e69e      	b.n	800e29a <_printf_float+0xc2>
 800e55c:	2301      	movs	r3, #1
 800e55e:	4631      	mov	r1, r6
 800e560:	4628      	mov	r0, r5
 800e562:	9205      	str	r2, [sp, #20]
 800e564:	47b8      	blx	r7
 800e566:	3001      	adds	r0, #1
 800e568:	f43f ae97 	beq.w	800e29a <_printf_float+0xc2>
 800e56c:	9a05      	ldr	r2, [sp, #20]
 800e56e:	f10b 0b01 	add.w	fp, fp, #1
 800e572:	e7b9      	b.n	800e4e8 <_printf_float+0x310>
 800e574:	ee18 3a10 	vmov	r3, s16
 800e578:	4652      	mov	r2, sl
 800e57a:	4631      	mov	r1, r6
 800e57c:	4628      	mov	r0, r5
 800e57e:	47b8      	blx	r7
 800e580:	3001      	adds	r0, #1
 800e582:	d1be      	bne.n	800e502 <_printf_float+0x32a>
 800e584:	e689      	b.n	800e29a <_printf_float+0xc2>
 800e586:	9a05      	ldr	r2, [sp, #20]
 800e588:	464b      	mov	r3, r9
 800e58a:	4442      	add	r2, r8
 800e58c:	4631      	mov	r1, r6
 800e58e:	4628      	mov	r0, r5
 800e590:	47b8      	blx	r7
 800e592:	3001      	adds	r0, #1
 800e594:	d1c1      	bne.n	800e51a <_printf_float+0x342>
 800e596:	e680      	b.n	800e29a <_printf_float+0xc2>
 800e598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e59a:	2a01      	cmp	r2, #1
 800e59c:	dc01      	bgt.n	800e5a2 <_printf_float+0x3ca>
 800e59e:	07db      	lsls	r3, r3, #31
 800e5a0:	d538      	bpl.n	800e614 <_printf_float+0x43c>
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	4642      	mov	r2, r8
 800e5a6:	4631      	mov	r1, r6
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	47b8      	blx	r7
 800e5ac:	3001      	adds	r0, #1
 800e5ae:	f43f ae74 	beq.w	800e29a <_printf_float+0xc2>
 800e5b2:	ee18 3a10 	vmov	r3, s16
 800e5b6:	4652      	mov	r2, sl
 800e5b8:	4631      	mov	r1, r6
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	47b8      	blx	r7
 800e5be:	3001      	adds	r0, #1
 800e5c0:	f43f ae6b 	beq.w	800e29a <_printf_float+0xc2>
 800e5c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	f7f2 fa84 	bl	8000ad8 <__aeabi_dcmpeq>
 800e5d0:	b9d8      	cbnz	r0, 800e60a <_printf_float+0x432>
 800e5d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5d4:	f108 0201 	add.w	r2, r8, #1
 800e5d8:	3b01      	subs	r3, #1
 800e5da:	4631      	mov	r1, r6
 800e5dc:	4628      	mov	r0, r5
 800e5de:	47b8      	blx	r7
 800e5e0:	3001      	adds	r0, #1
 800e5e2:	d10e      	bne.n	800e602 <_printf_float+0x42a>
 800e5e4:	e659      	b.n	800e29a <_printf_float+0xc2>
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	4652      	mov	r2, sl
 800e5ea:	4631      	mov	r1, r6
 800e5ec:	4628      	mov	r0, r5
 800e5ee:	47b8      	blx	r7
 800e5f0:	3001      	adds	r0, #1
 800e5f2:	f43f ae52 	beq.w	800e29a <_printf_float+0xc2>
 800e5f6:	f108 0801 	add.w	r8, r8, #1
 800e5fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5fc:	3b01      	subs	r3, #1
 800e5fe:	4543      	cmp	r3, r8
 800e600:	dcf1      	bgt.n	800e5e6 <_printf_float+0x40e>
 800e602:	464b      	mov	r3, r9
 800e604:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e608:	e6dc      	b.n	800e3c4 <_printf_float+0x1ec>
 800e60a:	f04f 0800 	mov.w	r8, #0
 800e60e:	f104 0a1a 	add.w	sl, r4, #26
 800e612:	e7f2      	b.n	800e5fa <_printf_float+0x422>
 800e614:	2301      	movs	r3, #1
 800e616:	4642      	mov	r2, r8
 800e618:	e7df      	b.n	800e5da <_printf_float+0x402>
 800e61a:	2301      	movs	r3, #1
 800e61c:	464a      	mov	r2, r9
 800e61e:	4631      	mov	r1, r6
 800e620:	4628      	mov	r0, r5
 800e622:	47b8      	blx	r7
 800e624:	3001      	adds	r0, #1
 800e626:	f43f ae38 	beq.w	800e29a <_printf_float+0xc2>
 800e62a:	f108 0801 	add.w	r8, r8, #1
 800e62e:	68e3      	ldr	r3, [r4, #12]
 800e630:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e632:	1a5b      	subs	r3, r3, r1
 800e634:	4543      	cmp	r3, r8
 800e636:	dcf0      	bgt.n	800e61a <_printf_float+0x442>
 800e638:	e6fa      	b.n	800e430 <_printf_float+0x258>
 800e63a:	f04f 0800 	mov.w	r8, #0
 800e63e:	f104 0919 	add.w	r9, r4, #25
 800e642:	e7f4      	b.n	800e62e <_printf_float+0x456>

0800e644 <_printf_common>:
 800e644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e648:	4616      	mov	r6, r2
 800e64a:	4699      	mov	r9, r3
 800e64c:	688a      	ldr	r2, [r1, #8]
 800e64e:	690b      	ldr	r3, [r1, #16]
 800e650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e654:	4293      	cmp	r3, r2
 800e656:	bfb8      	it	lt
 800e658:	4613      	movlt	r3, r2
 800e65a:	6033      	str	r3, [r6, #0]
 800e65c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e660:	4607      	mov	r7, r0
 800e662:	460c      	mov	r4, r1
 800e664:	b10a      	cbz	r2, 800e66a <_printf_common+0x26>
 800e666:	3301      	adds	r3, #1
 800e668:	6033      	str	r3, [r6, #0]
 800e66a:	6823      	ldr	r3, [r4, #0]
 800e66c:	0699      	lsls	r1, r3, #26
 800e66e:	bf42      	ittt	mi
 800e670:	6833      	ldrmi	r3, [r6, #0]
 800e672:	3302      	addmi	r3, #2
 800e674:	6033      	strmi	r3, [r6, #0]
 800e676:	6825      	ldr	r5, [r4, #0]
 800e678:	f015 0506 	ands.w	r5, r5, #6
 800e67c:	d106      	bne.n	800e68c <_printf_common+0x48>
 800e67e:	f104 0a19 	add.w	sl, r4, #25
 800e682:	68e3      	ldr	r3, [r4, #12]
 800e684:	6832      	ldr	r2, [r6, #0]
 800e686:	1a9b      	subs	r3, r3, r2
 800e688:	42ab      	cmp	r3, r5
 800e68a:	dc26      	bgt.n	800e6da <_printf_common+0x96>
 800e68c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e690:	1e13      	subs	r3, r2, #0
 800e692:	6822      	ldr	r2, [r4, #0]
 800e694:	bf18      	it	ne
 800e696:	2301      	movne	r3, #1
 800e698:	0692      	lsls	r2, r2, #26
 800e69a:	d42b      	bmi.n	800e6f4 <_printf_common+0xb0>
 800e69c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e6a0:	4649      	mov	r1, r9
 800e6a2:	4638      	mov	r0, r7
 800e6a4:	47c0      	blx	r8
 800e6a6:	3001      	adds	r0, #1
 800e6a8:	d01e      	beq.n	800e6e8 <_printf_common+0xa4>
 800e6aa:	6823      	ldr	r3, [r4, #0]
 800e6ac:	68e5      	ldr	r5, [r4, #12]
 800e6ae:	6832      	ldr	r2, [r6, #0]
 800e6b0:	f003 0306 	and.w	r3, r3, #6
 800e6b4:	2b04      	cmp	r3, #4
 800e6b6:	bf08      	it	eq
 800e6b8:	1aad      	subeq	r5, r5, r2
 800e6ba:	68a3      	ldr	r3, [r4, #8]
 800e6bc:	6922      	ldr	r2, [r4, #16]
 800e6be:	bf0c      	ite	eq
 800e6c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6c4:	2500      	movne	r5, #0
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	bfc4      	itt	gt
 800e6ca:	1a9b      	subgt	r3, r3, r2
 800e6cc:	18ed      	addgt	r5, r5, r3
 800e6ce:	2600      	movs	r6, #0
 800e6d0:	341a      	adds	r4, #26
 800e6d2:	42b5      	cmp	r5, r6
 800e6d4:	d11a      	bne.n	800e70c <_printf_common+0xc8>
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	e008      	b.n	800e6ec <_printf_common+0xa8>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	4652      	mov	r2, sl
 800e6de:	4649      	mov	r1, r9
 800e6e0:	4638      	mov	r0, r7
 800e6e2:	47c0      	blx	r8
 800e6e4:	3001      	adds	r0, #1
 800e6e6:	d103      	bne.n	800e6f0 <_printf_common+0xac>
 800e6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6f0:	3501      	adds	r5, #1
 800e6f2:	e7c6      	b.n	800e682 <_printf_common+0x3e>
 800e6f4:	18e1      	adds	r1, r4, r3
 800e6f6:	1c5a      	adds	r2, r3, #1
 800e6f8:	2030      	movs	r0, #48	; 0x30
 800e6fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e6fe:	4422      	add	r2, r4
 800e700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e708:	3302      	adds	r3, #2
 800e70a:	e7c7      	b.n	800e69c <_printf_common+0x58>
 800e70c:	2301      	movs	r3, #1
 800e70e:	4622      	mov	r2, r4
 800e710:	4649      	mov	r1, r9
 800e712:	4638      	mov	r0, r7
 800e714:	47c0      	blx	r8
 800e716:	3001      	adds	r0, #1
 800e718:	d0e6      	beq.n	800e6e8 <_printf_common+0xa4>
 800e71a:	3601      	adds	r6, #1
 800e71c:	e7d9      	b.n	800e6d2 <_printf_common+0x8e>
	...

0800e720 <_printf_i>:
 800e720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e724:	460c      	mov	r4, r1
 800e726:	4691      	mov	r9, r2
 800e728:	7e27      	ldrb	r7, [r4, #24]
 800e72a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e72c:	2f78      	cmp	r7, #120	; 0x78
 800e72e:	4680      	mov	r8, r0
 800e730:	469a      	mov	sl, r3
 800e732:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e736:	d807      	bhi.n	800e748 <_printf_i+0x28>
 800e738:	2f62      	cmp	r7, #98	; 0x62
 800e73a:	d80a      	bhi.n	800e752 <_printf_i+0x32>
 800e73c:	2f00      	cmp	r7, #0
 800e73e:	f000 80d8 	beq.w	800e8f2 <_printf_i+0x1d2>
 800e742:	2f58      	cmp	r7, #88	; 0x58
 800e744:	f000 80a3 	beq.w	800e88e <_printf_i+0x16e>
 800e748:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e74c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e750:	e03a      	b.n	800e7c8 <_printf_i+0xa8>
 800e752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e756:	2b15      	cmp	r3, #21
 800e758:	d8f6      	bhi.n	800e748 <_printf_i+0x28>
 800e75a:	a001      	add	r0, pc, #4	; (adr r0, 800e760 <_printf_i+0x40>)
 800e75c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e760:	0800e7b9 	.word	0x0800e7b9
 800e764:	0800e7cd 	.word	0x0800e7cd
 800e768:	0800e749 	.word	0x0800e749
 800e76c:	0800e749 	.word	0x0800e749
 800e770:	0800e749 	.word	0x0800e749
 800e774:	0800e749 	.word	0x0800e749
 800e778:	0800e7cd 	.word	0x0800e7cd
 800e77c:	0800e749 	.word	0x0800e749
 800e780:	0800e749 	.word	0x0800e749
 800e784:	0800e749 	.word	0x0800e749
 800e788:	0800e749 	.word	0x0800e749
 800e78c:	0800e8d9 	.word	0x0800e8d9
 800e790:	0800e7fd 	.word	0x0800e7fd
 800e794:	0800e8bb 	.word	0x0800e8bb
 800e798:	0800e749 	.word	0x0800e749
 800e79c:	0800e749 	.word	0x0800e749
 800e7a0:	0800e8fb 	.word	0x0800e8fb
 800e7a4:	0800e749 	.word	0x0800e749
 800e7a8:	0800e7fd 	.word	0x0800e7fd
 800e7ac:	0800e749 	.word	0x0800e749
 800e7b0:	0800e749 	.word	0x0800e749
 800e7b4:	0800e8c3 	.word	0x0800e8c3
 800e7b8:	680b      	ldr	r3, [r1, #0]
 800e7ba:	1d1a      	adds	r2, r3, #4
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	600a      	str	r2, [r1, #0]
 800e7c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e7c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	e0a3      	b.n	800e914 <_printf_i+0x1f4>
 800e7cc:	6825      	ldr	r5, [r4, #0]
 800e7ce:	6808      	ldr	r0, [r1, #0]
 800e7d0:	062e      	lsls	r6, r5, #24
 800e7d2:	f100 0304 	add.w	r3, r0, #4
 800e7d6:	d50a      	bpl.n	800e7ee <_printf_i+0xce>
 800e7d8:	6805      	ldr	r5, [r0, #0]
 800e7da:	600b      	str	r3, [r1, #0]
 800e7dc:	2d00      	cmp	r5, #0
 800e7de:	da03      	bge.n	800e7e8 <_printf_i+0xc8>
 800e7e0:	232d      	movs	r3, #45	; 0x2d
 800e7e2:	426d      	negs	r5, r5
 800e7e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7e8:	485e      	ldr	r0, [pc, #376]	; (800e964 <_printf_i+0x244>)
 800e7ea:	230a      	movs	r3, #10
 800e7ec:	e019      	b.n	800e822 <_printf_i+0x102>
 800e7ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e7f2:	6805      	ldr	r5, [r0, #0]
 800e7f4:	600b      	str	r3, [r1, #0]
 800e7f6:	bf18      	it	ne
 800e7f8:	b22d      	sxthne	r5, r5
 800e7fa:	e7ef      	b.n	800e7dc <_printf_i+0xbc>
 800e7fc:	680b      	ldr	r3, [r1, #0]
 800e7fe:	6825      	ldr	r5, [r4, #0]
 800e800:	1d18      	adds	r0, r3, #4
 800e802:	6008      	str	r0, [r1, #0]
 800e804:	0628      	lsls	r0, r5, #24
 800e806:	d501      	bpl.n	800e80c <_printf_i+0xec>
 800e808:	681d      	ldr	r5, [r3, #0]
 800e80a:	e002      	b.n	800e812 <_printf_i+0xf2>
 800e80c:	0669      	lsls	r1, r5, #25
 800e80e:	d5fb      	bpl.n	800e808 <_printf_i+0xe8>
 800e810:	881d      	ldrh	r5, [r3, #0]
 800e812:	4854      	ldr	r0, [pc, #336]	; (800e964 <_printf_i+0x244>)
 800e814:	2f6f      	cmp	r7, #111	; 0x6f
 800e816:	bf0c      	ite	eq
 800e818:	2308      	moveq	r3, #8
 800e81a:	230a      	movne	r3, #10
 800e81c:	2100      	movs	r1, #0
 800e81e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e822:	6866      	ldr	r6, [r4, #4]
 800e824:	60a6      	str	r6, [r4, #8]
 800e826:	2e00      	cmp	r6, #0
 800e828:	bfa2      	ittt	ge
 800e82a:	6821      	ldrge	r1, [r4, #0]
 800e82c:	f021 0104 	bicge.w	r1, r1, #4
 800e830:	6021      	strge	r1, [r4, #0]
 800e832:	b90d      	cbnz	r5, 800e838 <_printf_i+0x118>
 800e834:	2e00      	cmp	r6, #0
 800e836:	d04d      	beq.n	800e8d4 <_printf_i+0x1b4>
 800e838:	4616      	mov	r6, r2
 800e83a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e83e:	fb03 5711 	mls	r7, r3, r1, r5
 800e842:	5dc7      	ldrb	r7, [r0, r7]
 800e844:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e848:	462f      	mov	r7, r5
 800e84a:	42bb      	cmp	r3, r7
 800e84c:	460d      	mov	r5, r1
 800e84e:	d9f4      	bls.n	800e83a <_printf_i+0x11a>
 800e850:	2b08      	cmp	r3, #8
 800e852:	d10b      	bne.n	800e86c <_printf_i+0x14c>
 800e854:	6823      	ldr	r3, [r4, #0]
 800e856:	07df      	lsls	r7, r3, #31
 800e858:	d508      	bpl.n	800e86c <_printf_i+0x14c>
 800e85a:	6923      	ldr	r3, [r4, #16]
 800e85c:	6861      	ldr	r1, [r4, #4]
 800e85e:	4299      	cmp	r1, r3
 800e860:	bfde      	ittt	le
 800e862:	2330      	movle	r3, #48	; 0x30
 800e864:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e868:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e86c:	1b92      	subs	r2, r2, r6
 800e86e:	6122      	str	r2, [r4, #16]
 800e870:	f8cd a000 	str.w	sl, [sp]
 800e874:	464b      	mov	r3, r9
 800e876:	aa03      	add	r2, sp, #12
 800e878:	4621      	mov	r1, r4
 800e87a:	4640      	mov	r0, r8
 800e87c:	f7ff fee2 	bl	800e644 <_printf_common>
 800e880:	3001      	adds	r0, #1
 800e882:	d14c      	bne.n	800e91e <_printf_i+0x1fe>
 800e884:	f04f 30ff 	mov.w	r0, #4294967295
 800e888:	b004      	add	sp, #16
 800e88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e88e:	4835      	ldr	r0, [pc, #212]	; (800e964 <_printf_i+0x244>)
 800e890:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e894:	6823      	ldr	r3, [r4, #0]
 800e896:	680e      	ldr	r6, [r1, #0]
 800e898:	061f      	lsls	r7, r3, #24
 800e89a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e89e:	600e      	str	r6, [r1, #0]
 800e8a0:	d514      	bpl.n	800e8cc <_printf_i+0x1ac>
 800e8a2:	07d9      	lsls	r1, r3, #31
 800e8a4:	bf44      	itt	mi
 800e8a6:	f043 0320 	orrmi.w	r3, r3, #32
 800e8aa:	6023      	strmi	r3, [r4, #0]
 800e8ac:	b91d      	cbnz	r5, 800e8b6 <_printf_i+0x196>
 800e8ae:	6823      	ldr	r3, [r4, #0]
 800e8b0:	f023 0320 	bic.w	r3, r3, #32
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	2310      	movs	r3, #16
 800e8b8:	e7b0      	b.n	800e81c <_printf_i+0xfc>
 800e8ba:	6823      	ldr	r3, [r4, #0]
 800e8bc:	f043 0320 	orr.w	r3, r3, #32
 800e8c0:	6023      	str	r3, [r4, #0]
 800e8c2:	2378      	movs	r3, #120	; 0x78
 800e8c4:	4828      	ldr	r0, [pc, #160]	; (800e968 <_printf_i+0x248>)
 800e8c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e8ca:	e7e3      	b.n	800e894 <_printf_i+0x174>
 800e8cc:	065e      	lsls	r6, r3, #25
 800e8ce:	bf48      	it	mi
 800e8d0:	b2ad      	uxthmi	r5, r5
 800e8d2:	e7e6      	b.n	800e8a2 <_printf_i+0x182>
 800e8d4:	4616      	mov	r6, r2
 800e8d6:	e7bb      	b.n	800e850 <_printf_i+0x130>
 800e8d8:	680b      	ldr	r3, [r1, #0]
 800e8da:	6826      	ldr	r6, [r4, #0]
 800e8dc:	6960      	ldr	r0, [r4, #20]
 800e8de:	1d1d      	adds	r5, r3, #4
 800e8e0:	600d      	str	r5, [r1, #0]
 800e8e2:	0635      	lsls	r5, r6, #24
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	d501      	bpl.n	800e8ec <_printf_i+0x1cc>
 800e8e8:	6018      	str	r0, [r3, #0]
 800e8ea:	e002      	b.n	800e8f2 <_printf_i+0x1d2>
 800e8ec:	0671      	lsls	r1, r6, #25
 800e8ee:	d5fb      	bpl.n	800e8e8 <_printf_i+0x1c8>
 800e8f0:	8018      	strh	r0, [r3, #0]
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	6123      	str	r3, [r4, #16]
 800e8f6:	4616      	mov	r6, r2
 800e8f8:	e7ba      	b.n	800e870 <_printf_i+0x150>
 800e8fa:	680b      	ldr	r3, [r1, #0]
 800e8fc:	1d1a      	adds	r2, r3, #4
 800e8fe:	600a      	str	r2, [r1, #0]
 800e900:	681e      	ldr	r6, [r3, #0]
 800e902:	6862      	ldr	r2, [r4, #4]
 800e904:	2100      	movs	r1, #0
 800e906:	4630      	mov	r0, r6
 800e908:	f7f1 fc72 	bl	80001f0 <memchr>
 800e90c:	b108      	cbz	r0, 800e912 <_printf_i+0x1f2>
 800e90e:	1b80      	subs	r0, r0, r6
 800e910:	6060      	str	r0, [r4, #4]
 800e912:	6863      	ldr	r3, [r4, #4]
 800e914:	6123      	str	r3, [r4, #16]
 800e916:	2300      	movs	r3, #0
 800e918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e91c:	e7a8      	b.n	800e870 <_printf_i+0x150>
 800e91e:	6923      	ldr	r3, [r4, #16]
 800e920:	4632      	mov	r2, r6
 800e922:	4649      	mov	r1, r9
 800e924:	4640      	mov	r0, r8
 800e926:	47d0      	blx	sl
 800e928:	3001      	adds	r0, #1
 800e92a:	d0ab      	beq.n	800e884 <_printf_i+0x164>
 800e92c:	6823      	ldr	r3, [r4, #0]
 800e92e:	079b      	lsls	r3, r3, #30
 800e930:	d413      	bmi.n	800e95a <_printf_i+0x23a>
 800e932:	68e0      	ldr	r0, [r4, #12]
 800e934:	9b03      	ldr	r3, [sp, #12]
 800e936:	4298      	cmp	r0, r3
 800e938:	bfb8      	it	lt
 800e93a:	4618      	movlt	r0, r3
 800e93c:	e7a4      	b.n	800e888 <_printf_i+0x168>
 800e93e:	2301      	movs	r3, #1
 800e940:	4632      	mov	r2, r6
 800e942:	4649      	mov	r1, r9
 800e944:	4640      	mov	r0, r8
 800e946:	47d0      	blx	sl
 800e948:	3001      	adds	r0, #1
 800e94a:	d09b      	beq.n	800e884 <_printf_i+0x164>
 800e94c:	3501      	adds	r5, #1
 800e94e:	68e3      	ldr	r3, [r4, #12]
 800e950:	9903      	ldr	r1, [sp, #12]
 800e952:	1a5b      	subs	r3, r3, r1
 800e954:	42ab      	cmp	r3, r5
 800e956:	dcf2      	bgt.n	800e93e <_printf_i+0x21e>
 800e958:	e7eb      	b.n	800e932 <_printf_i+0x212>
 800e95a:	2500      	movs	r5, #0
 800e95c:	f104 0619 	add.w	r6, r4, #25
 800e960:	e7f5      	b.n	800e94e <_printf_i+0x22e>
 800e962:	bf00      	nop
 800e964:	080135c4 	.word	0x080135c4
 800e968:	080135d5 	.word	0x080135d5

0800e96c <_scanf_float>:
 800e96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e970:	b087      	sub	sp, #28
 800e972:	4617      	mov	r7, r2
 800e974:	9303      	str	r3, [sp, #12]
 800e976:	688b      	ldr	r3, [r1, #8]
 800e978:	1e5a      	subs	r2, r3, #1
 800e97a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e97e:	bf83      	ittte	hi
 800e980:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e984:	195b      	addhi	r3, r3, r5
 800e986:	9302      	strhi	r3, [sp, #8]
 800e988:	2300      	movls	r3, #0
 800e98a:	bf86      	itte	hi
 800e98c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e990:	608b      	strhi	r3, [r1, #8]
 800e992:	9302      	strls	r3, [sp, #8]
 800e994:	680b      	ldr	r3, [r1, #0]
 800e996:	468b      	mov	fp, r1
 800e998:	2500      	movs	r5, #0
 800e99a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e99e:	f84b 3b1c 	str.w	r3, [fp], #28
 800e9a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e9a6:	4680      	mov	r8, r0
 800e9a8:	460c      	mov	r4, r1
 800e9aa:	465e      	mov	r6, fp
 800e9ac:	46aa      	mov	sl, r5
 800e9ae:	46a9      	mov	r9, r5
 800e9b0:	9501      	str	r5, [sp, #4]
 800e9b2:	68a2      	ldr	r2, [r4, #8]
 800e9b4:	b152      	cbz	r2, 800e9cc <_scanf_float+0x60>
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	2b4e      	cmp	r3, #78	; 0x4e
 800e9bc:	d864      	bhi.n	800ea88 <_scanf_float+0x11c>
 800e9be:	2b40      	cmp	r3, #64	; 0x40
 800e9c0:	d83c      	bhi.n	800ea3c <_scanf_float+0xd0>
 800e9c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e9c6:	b2c8      	uxtb	r0, r1
 800e9c8:	280e      	cmp	r0, #14
 800e9ca:	d93a      	bls.n	800ea42 <_scanf_float+0xd6>
 800e9cc:	f1b9 0f00 	cmp.w	r9, #0
 800e9d0:	d003      	beq.n	800e9da <_scanf_float+0x6e>
 800e9d2:	6823      	ldr	r3, [r4, #0]
 800e9d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9d8:	6023      	str	r3, [r4, #0]
 800e9da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9de:	f1ba 0f01 	cmp.w	sl, #1
 800e9e2:	f200 8113 	bhi.w	800ec0c <_scanf_float+0x2a0>
 800e9e6:	455e      	cmp	r6, fp
 800e9e8:	f200 8105 	bhi.w	800ebf6 <_scanf_float+0x28a>
 800e9ec:	2501      	movs	r5, #1
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	b007      	add	sp, #28
 800e9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e9fa:	2a0d      	cmp	r2, #13
 800e9fc:	d8e6      	bhi.n	800e9cc <_scanf_float+0x60>
 800e9fe:	a101      	add	r1, pc, #4	; (adr r1, 800ea04 <_scanf_float+0x98>)
 800ea00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ea04:	0800eb43 	.word	0x0800eb43
 800ea08:	0800e9cd 	.word	0x0800e9cd
 800ea0c:	0800e9cd 	.word	0x0800e9cd
 800ea10:	0800e9cd 	.word	0x0800e9cd
 800ea14:	0800eba3 	.word	0x0800eba3
 800ea18:	0800eb7b 	.word	0x0800eb7b
 800ea1c:	0800e9cd 	.word	0x0800e9cd
 800ea20:	0800e9cd 	.word	0x0800e9cd
 800ea24:	0800eb51 	.word	0x0800eb51
 800ea28:	0800e9cd 	.word	0x0800e9cd
 800ea2c:	0800e9cd 	.word	0x0800e9cd
 800ea30:	0800e9cd 	.word	0x0800e9cd
 800ea34:	0800e9cd 	.word	0x0800e9cd
 800ea38:	0800eb09 	.word	0x0800eb09
 800ea3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ea40:	e7db      	b.n	800e9fa <_scanf_float+0x8e>
 800ea42:	290e      	cmp	r1, #14
 800ea44:	d8c2      	bhi.n	800e9cc <_scanf_float+0x60>
 800ea46:	a001      	add	r0, pc, #4	; (adr r0, 800ea4c <_scanf_float+0xe0>)
 800ea48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ea4c:	0800eafb 	.word	0x0800eafb
 800ea50:	0800e9cd 	.word	0x0800e9cd
 800ea54:	0800eafb 	.word	0x0800eafb
 800ea58:	0800eb8f 	.word	0x0800eb8f
 800ea5c:	0800e9cd 	.word	0x0800e9cd
 800ea60:	0800eaa9 	.word	0x0800eaa9
 800ea64:	0800eae5 	.word	0x0800eae5
 800ea68:	0800eae5 	.word	0x0800eae5
 800ea6c:	0800eae5 	.word	0x0800eae5
 800ea70:	0800eae5 	.word	0x0800eae5
 800ea74:	0800eae5 	.word	0x0800eae5
 800ea78:	0800eae5 	.word	0x0800eae5
 800ea7c:	0800eae5 	.word	0x0800eae5
 800ea80:	0800eae5 	.word	0x0800eae5
 800ea84:	0800eae5 	.word	0x0800eae5
 800ea88:	2b6e      	cmp	r3, #110	; 0x6e
 800ea8a:	d809      	bhi.n	800eaa0 <_scanf_float+0x134>
 800ea8c:	2b60      	cmp	r3, #96	; 0x60
 800ea8e:	d8b2      	bhi.n	800e9f6 <_scanf_float+0x8a>
 800ea90:	2b54      	cmp	r3, #84	; 0x54
 800ea92:	d077      	beq.n	800eb84 <_scanf_float+0x218>
 800ea94:	2b59      	cmp	r3, #89	; 0x59
 800ea96:	d199      	bne.n	800e9cc <_scanf_float+0x60>
 800ea98:	2d07      	cmp	r5, #7
 800ea9a:	d197      	bne.n	800e9cc <_scanf_float+0x60>
 800ea9c:	2508      	movs	r5, #8
 800ea9e:	e029      	b.n	800eaf4 <_scanf_float+0x188>
 800eaa0:	2b74      	cmp	r3, #116	; 0x74
 800eaa2:	d06f      	beq.n	800eb84 <_scanf_float+0x218>
 800eaa4:	2b79      	cmp	r3, #121	; 0x79
 800eaa6:	e7f6      	b.n	800ea96 <_scanf_float+0x12a>
 800eaa8:	6821      	ldr	r1, [r4, #0]
 800eaaa:	05c8      	lsls	r0, r1, #23
 800eaac:	d51a      	bpl.n	800eae4 <_scanf_float+0x178>
 800eaae:	9b02      	ldr	r3, [sp, #8]
 800eab0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800eab4:	6021      	str	r1, [r4, #0]
 800eab6:	f109 0901 	add.w	r9, r9, #1
 800eaba:	b11b      	cbz	r3, 800eac4 <_scanf_float+0x158>
 800eabc:	3b01      	subs	r3, #1
 800eabe:	3201      	adds	r2, #1
 800eac0:	9302      	str	r3, [sp, #8]
 800eac2:	60a2      	str	r2, [r4, #8]
 800eac4:	68a3      	ldr	r3, [r4, #8]
 800eac6:	3b01      	subs	r3, #1
 800eac8:	60a3      	str	r3, [r4, #8]
 800eaca:	6923      	ldr	r3, [r4, #16]
 800eacc:	3301      	adds	r3, #1
 800eace:	6123      	str	r3, [r4, #16]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	3b01      	subs	r3, #1
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	607b      	str	r3, [r7, #4]
 800ead8:	f340 8084 	ble.w	800ebe4 <_scanf_float+0x278>
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	3301      	adds	r3, #1
 800eae0:	603b      	str	r3, [r7, #0]
 800eae2:	e766      	b.n	800e9b2 <_scanf_float+0x46>
 800eae4:	eb1a 0f05 	cmn.w	sl, r5
 800eae8:	f47f af70 	bne.w	800e9cc <_scanf_float+0x60>
 800eaec:	6822      	ldr	r2, [r4, #0]
 800eaee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800eaf2:	6022      	str	r2, [r4, #0]
 800eaf4:	f806 3b01 	strb.w	r3, [r6], #1
 800eaf8:	e7e4      	b.n	800eac4 <_scanf_float+0x158>
 800eafa:	6822      	ldr	r2, [r4, #0]
 800eafc:	0610      	lsls	r0, r2, #24
 800eafe:	f57f af65 	bpl.w	800e9cc <_scanf_float+0x60>
 800eb02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eb06:	e7f4      	b.n	800eaf2 <_scanf_float+0x186>
 800eb08:	f1ba 0f00 	cmp.w	sl, #0
 800eb0c:	d10e      	bne.n	800eb2c <_scanf_float+0x1c0>
 800eb0e:	f1b9 0f00 	cmp.w	r9, #0
 800eb12:	d10e      	bne.n	800eb32 <_scanf_float+0x1c6>
 800eb14:	6822      	ldr	r2, [r4, #0]
 800eb16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800eb1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800eb1e:	d108      	bne.n	800eb32 <_scanf_float+0x1c6>
 800eb20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eb24:	6022      	str	r2, [r4, #0]
 800eb26:	f04f 0a01 	mov.w	sl, #1
 800eb2a:	e7e3      	b.n	800eaf4 <_scanf_float+0x188>
 800eb2c:	f1ba 0f02 	cmp.w	sl, #2
 800eb30:	d055      	beq.n	800ebde <_scanf_float+0x272>
 800eb32:	2d01      	cmp	r5, #1
 800eb34:	d002      	beq.n	800eb3c <_scanf_float+0x1d0>
 800eb36:	2d04      	cmp	r5, #4
 800eb38:	f47f af48 	bne.w	800e9cc <_scanf_float+0x60>
 800eb3c:	3501      	adds	r5, #1
 800eb3e:	b2ed      	uxtb	r5, r5
 800eb40:	e7d8      	b.n	800eaf4 <_scanf_float+0x188>
 800eb42:	f1ba 0f01 	cmp.w	sl, #1
 800eb46:	f47f af41 	bne.w	800e9cc <_scanf_float+0x60>
 800eb4a:	f04f 0a02 	mov.w	sl, #2
 800eb4e:	e7d1      	b.n	800eaf4 <_scanf_float+0x188>
 800eb50:	b97d      	cbnz	r5, 800eb72 <_scanf_float+0x206>
 800eb52:	f1b9 0f00 	cmp.w	r9, #0
 800eb56:	f47f af3c 	bne.w	800e9d2 <_scanf_float+0x66>
 800eb5a:	6822      	ldr	r2, [r4, #0]
 800eb5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800eb60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800eb64:	f47f af39 	bne.w	800e9da <_scanf_float+0x6e>
 800eb68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eb6c:	6022      	str	r2, [r4, #0]
 800eb6e:	2501      	movs	r5, #1
 800eb70:	e7c0      	b.n	800eaf4 <_scanf_float+0x188>
 800eb72:	2d03      	cmp	r5, #3
 800eb74:	d0e2      	beq.n	800eb3c <_scanf_float+0x1d0>
 800eb76:	2d05      	cmp	r5, #5
 800eb78:	e7de      	b.n	800eb38 <_scanf_float+0x1cc>
 800eb7a:	2d02      	cmp	r5, #2
 800eb7c:	f47f af26 	bne.w	800e9cc <_scanf_float+0x60>
 800eb80:	2503      	movs	r5, #3
 800eb82:	e7b7      	b.n	800eaf4 <_scanf_float+0x188>
 800eb84:	2d06      	cmp	r5, #6
 800eb86:	f47f af21 	bne.w	800e9cc <_scanf_float+0x60>
 800eb8a:	2507      	movs	r5, #7
 800eb8c:	e7b2      	b.n	800eaf4 <_scanf_float+0x188>
 800eb8e:	6822      	ldr	r2, [r4, #0]
 800eb90:	0591      	lsls	r1, r2, #22
 800eb92:	f57f af1b 	bpl.w	800e9cc <_scanf_float+0x60>
 800eb96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800eb9a:	6022      	str	r2, [r4, #0]
 800eb9c:	f8cd 9004 	str.w	r9, [sp, #4]
 800eba0:	e7a8      	b.n	800eaf4 <_scanf_float+0x188>
 800eba2:	6822      	ldr	r2, [r4, #0]
 800eba4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800eba8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ebac:	d006      	beq.n	800ebbc <_scanf_float+0x250>
 800ebae:	0550      	lsls	r0, r2, #21
 800ebb0:	f57f af0c 	bpl.w	800e9cc <_scanf_float+0x60>
 800ebb4:	f1b9 0f00 	cmp.w	r9, #0
 800ebb8:	f43f af0f 	beq.w	800e9da <_scanf_float+0x6e>
 800ebbc:	0591      	lsls	r1, r2, #22
 800ebbe:	bf58      	it	pl
 800ebc0:	9901      	ldrpl	r1, [sp, #4]
 800ebc2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ebc6:	bf58      	it	pl
 800ebc8:	eba9 0101 	subpl.w	r1, r9, r1
 800ebcc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ebd0:	bf58      	it	pl
 800ebd2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ebd6:	6022      	str	r2, [r4, #0]
 800ebd8:	f04f 0900 	mov.w	r9, #0
 800ebdc:	e78a      	b.n	800eaf4 <_scanf_float+0x188>
 800ebde:	f04f 0a03 	mov.w	sl, #3
 800ebe2:	e787      	b.n	800eaf4 <_scanf_float+0x188>
 800ebe4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ebe8:	4639      	mov	r1, r7
 800ebea:	4640      	mov	r0, r8
 800ebec:	4798      	blx	r3
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	f43f aedf 	beq.w	800e9b2 <_scanf_float+0x46>
 800ebf4:	e6ea      	b.n	800e9cc <_scanf_float+0x60>
 800ebf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ebfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ebfe:	463a      	mov	r2, r7
 800ec00:	4640      	mov	r0, r8
 800ec02:	4798      	blx	r3
 800ec04:	6923      	ldr	r3, [r4, #16]
 800ec06:	3b01      	subs	r3, #1
 800ec08:	6123      	str	r3, [r4, #16]
 800ec0a:	e6ec      	b.n	800e9e6 <_scanf_float+0x7a>
 800ec0c:	1e6b      	subs	r3, r5, #1
 800ec0e:	2b06      	cmp	r3, #6
 800ec10:	d825      	bhi.n	800ec5e <_scanf_float+0x2f2>
 800ec12:	2d02      	cmp	r5, #2
 800ec14:	d836      	bhi.n	800ec84 <_scanf_float+0x318>
 800ec16:	455e      	cmp	r6, fp
 800ec18:	f67f aee8 	bls.w	800e9ec <_scanf_float+0x80>
 800ec1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec24:	463a      	mov	r2, r7
 800ec26:	4640      	mov	r0, r8
 800ec28:	4798      	blx	r3
 800ec2a:	6923      	ldr	r3, [r4, #16]
 800ec2c:	3b01      	subs	r3, #1
 800ec2e:	6123      	str	r3, [r4, #16]
 800ec30:	e7f1      	b.n	800ec16 <_scanf_float+0x2aa>
 800ec32:	9802      	ldr	r0, [sp, #8]
 800ec34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ec3c:	9002      	str	r0, [sp, #8]
 800ec3e:	463a      	mov	r2, r7
 800ec40:	4640      	mov	r0, r8
 800ec42:	4798      	blx	r3
 800ec44:	6923      	ldr	r3, [r4, #16]
 800ec46:	3b01      	subs	r3, #1
 800ec48:	6123      	str	r3, [r4, #16]
 800ec4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec4e:	fa5f fa8a 	uxtb.w	sl, sl
 800ec52:	f1ba 0f02 	cmp.w	sl, #2
 800ec56:	d1ec      	bne.n	800ec32 <_scanf_float+0x2c6>
 800ec58:	3d03      	subs	r5, #3
 800ec5a:	b2ed      	uxtb	r5, r5
 800ec5c:	1b76      	subs	r6, r6, r5
 800ec5e:	6823      	ldr	r3, [r4, #0]
 800ec60:	05da      	lsls	r2, r3, #23
 800ec62:	d52f      	bpl.n	800ecc4 <_scanf_float+0x358>
 800ec64:	055b      	lsls	r3, r3, #21
 800ec66:	d510      	bpl.n	800ec8a <_scanf_float+0x31e>
 800ec68:	455e      	cmp	r6, fp
 800ec6a:	f67f aebf 	bls.w	800e9ec <_scanf_float+0x80>
 800ec6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec76:	463a      	mov	r2, r7
 800ec78:	4640      	mov	r0, r8
 800ec7a:	4798      	blx	r3
 800ec7c:	6923      	ldr	r3, [r4, #16]
 800ec7e:	3b01      	subs	r3, #1
 800ec80:	6123      	str	r3, [r4, #16]
 800ec82:	e7f1      	b.n	800ec68 <_scanf_float+0x2fc>
 800ec84:	46aa      	mov	sl, r5
 800ec86:	9602      	str	r6, [sp, #8]
 800ec88:	e7df      	b.n	800ec4a <_scanf_float+0x2de>
 800ec8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ec8e:	6923      	ldr	r3, [r4, #16]
 800ec90:	2965      	cmp	r1, #101	; 0x65
 800ec92:	f103 33ff 	add.w	r3, r3, #4294967295
 800ec96:	f106 35ff 	add.w	r5, r6, #4294967295
 800ec9a:	6123      	str	r3, [r4, #16]
 800ec9c:	d00c      	beq.n	800ecb8 <_scanf_float+0x34c>
 800ec9e:	2945      	cmp	r1, #69	; 0x45
 800eca0:	d00a      	beq.n	800ecb8 <_scanf_float+0x34c>
 800eca2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eca6:	463a      	mov	r2, r7
 800eca8:	4640      	mov	r0, r8
 800ecaa:	4798      	blx	r3
 800ecac:	6923      	ldr	r3, [r4, #16]
 800ecae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ecb2:	3b01      	subs	r3, #1
 800ecb4:	1eb5      	subs	r5, r6, #2
 800ecb6:	6123      	str	r3, [r4, #16]
 800ecb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ecbc:	463a      	mov	r2, r7
 800ecbe:	4640      	mov	r0, r8
 800ecc0:	4798      	blx	r3
 800ecc2:	462e      	mov	r6, r5
 800ecc4:	6825      	ldr	r5, [r4, #0]
 800ecc6:	f015 0510 	ands.w	r5, r5, #16
 800ecca:	d158      	bne.n	800ed7e <_scanf_float+0x412>
 800eccc:	7035      	strb	r5, [r6, #0]
 800ecce:	6823      	ldr	r3, [r4, #0]
 800ecd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ecd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecd8:	d11c      	bne.n	800ed14 <_scanf_float+0x3a8>
 800ecda:	9b01      	ldr	r3, [sp, #4]
 800ecdc:	454b      	cmp	r3, r9
 800ecde:	eba3 0209 	sub.w	r2, r3, r9
 800ece2:	d124      	bne.n	800ed2e <_scanf_float+0x3c2>
 800ece4:	2200      	movs	r2, #0
 800ece6:	4659      	mov	r1, fp
 800ece8:	4640      	mov	r0, r8
 800ecea:	f000 ff4f 	bl	800fb8c <_strtod_r>
 800ecee:	9b03      	ldr	r3, [sp, #12]
 800ecf0:	6821      	ldr	r1, [r4, #0]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f011 0f02 	tst.w	r1, #2
 800ecf8:	ec57 6b10 	vmov	r6, r7, d0
 800ecfc:	f103 0204 	add.w	r2, r3, #4
 800ed00:	d020      	beq.n	800ed44 <_scanf_float+0x3d8>
 800ed02:	9903      	ldr	r1, [sp, #12]
 800ed04:	600a      	str	r2, [r1, #0]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	e9c3 6700 	strd	r6, r7, [r3]
 800ed0c:	68e3      	ldr	r3, [r4, #12]
 800ed0e:	3301      	adds	r3, #1
 800ed10:	60e3      	str	r3, [r4, #12]
 800ed12:	e66c      	b.n	800e9ee <_scanf_float+0x82>
 800ed14:	9b04      	ldr	r3, [sp, #16]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d0e4      	beq.n	800ece4 <_scanf_float+0x378>
 800ed1a:	9905      	ldr	r1, [sp, #20]
 800ed1c:	230a      	movs	r3, #10
 800ed1e:	462a      	mov	r2, r5
 800ed20:	3101      	adds	r1, #1
 800ed22:	4640      	mov	r0, r8
 800ed24:	f000 ffbc 	bl	800fca0 <_strtol_r>
 800ed28:	9b04      	ldr	r3, [sp, #16]
 800ed2a:	9e05      	ldr	r6, [sp, #20]
 800ed2c:	1ac2      	subs	r2, r0, r3
 800ed2e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ed32:	429e      	cmp	r6, r3
 800ed34:	bf28      	it	cs
 800ed36:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ed3a:	4912      	ldr	r1, [pc, #72]	; (800ed84 <_scanf_float+0x418>)
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	f000 f859 	bl	800edf4 <siprintf>
 800ed42:	e7cf      	b.n	800ece4 <_scanf_float+0x378>
 800ed44:	f011 0f04 	tst.w	r1, #4
 800ed48:	9903      	ldr	r1, [sp, #12]
 800ed4a:	600a      	str	r2, [r1, #0]
 800ed4c:	d1db      	bne.n	800ed06 <_scanf_float+0x39a>
 800ed4e:	f8d3 8000 	ldr.w	r8, [r3]
 800ed52:	ee10 2a10 	vmov	r2, s0
 800ed56:	ee10 0a10 	vmov	r0, s0
 800ed5a:	463b      	mov	r3, r7
 800ed5c:	4639      	mov	r1, r7
 800ed5e:	f7f1 feed 	bl	8000b3c <__aeabi_dcmpun>
 800ed62:	b128      	cbz	r0, 800ed70 <_scanf_float+0x404>
 800ed64:	4808      	ldr	r0, [pc, #32]	; (800ed88 <_scanf_float+0x41c>)
 800ed66:	f7ff f891 	bl	800de8c <nanf>
 800ed6a:	ed88 0a00 	vstr	s0, [r8]
 800ed6e:	e7cd      	b.n	800ed0c <_scanf_float+0x3a0>
 800ed70:	4630      	mov	r0, r6
 800ed72:	4639      	mov	r1, r7
 800ed74:	f7f1 ff40 	bl	8000bf8 <__aeabi_d2f>
 800ed78:	f8c8 0000 	str.w	r0, [r8]
 800ed7c:	e7c6      	b.n	800ed0c <_scanf_float+0x3a0>
 800ed7e:	2500      	movs	r5, #0
 800ed80:	e635      	b.n	800e9ee <_scanf_float+0x82>
 800ed82:	bf00      	nop
 800ed84:	080135e6 	.word	0x080135e6
 800ed88:	08013a1b 	.word	0x08013a1b

0800ed8c <sniprintf>:
 800ed8c:	b40c      	push	{r2, r3}
 800ed8e:	b530      	push	{r4, r5, lr}
 800ed90:	4b17      	ldr	r3, [pc, #92]	; (800edf0 <sniprintf+0x64>)
 800ed92:	1e0c      	subs	r4, r1, #0
 800ed94:	681d      	ldr	r5, [r3, #0]
 800ed96:	b09d      	sub	sp, #116	; 0x74
 800ed98:	da08      	bge.n	800edac <sniprintf+0x20>
 800ed9a:	238b      	movs	r3, #139	; 0x8b
 800ed9c:	602b      	str	r3, [r5, #0]
 800ed9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eda2:	b01d      	add	sp, #116	; 0x74
 800eda4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eda8:	b002      	add	sp, #8
 800edaa:	4770      	bx	lr
 800edac:	f44f 7302 	mov.w	r3, #520	; 0x208
 800edb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800edb4:	bf14      	ite	ne
 800edb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800edba:	4623      	moveq	r3, r4
 800edbc:	9304      	str	r3, [sp, #16]
 800edbe:	9307      	str	r3, [sp, #28]
 800edc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800edc4:	9002      	str	r0, [sp, #8]
 800edc6:	9006      	str	r0, [sp, #24]
 800edc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800edcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800edce:	ab21      	add	r3, sp, #132	; 0x84
 800edd0:	a902      	add	r1, sp, #8
 800edd2:	4628      	mov	r0, r5
 800edd4:	9301      	str	r3, [sp, #4]
 800edd6:	f002 ff7d 	bl	8011cd4 <_svfiprintf_r>
 800edda:	1c43      	adds	r3, r0, #1
 800eddc:	bfbc      	itt	lt
 800edde:	238b      	movlt	r3, #139	; 0x8b
 800ede0:	602b      	strlt	r3, [r5, #0]
 800ede2:	2c00      	cmp	r4, #0
 800ede4:	d0dd      	beq.n	800eda2 <sniprintf+0x16>
 800ede6:	9b02      	ldr	r3, [sp, #8]
 800ede8:	2200      	movs	r2, #0
 800edea:	701a      	strb	r2, [r3, #0]
 800edec:	e7d9      	b.n	800eda2 <sniprintf+0x16>
 800edee:	bf00      	nop
 800edf0:	20000060 	.word	0x20000060

0800edf4 <siprintf>:
 800edf4:	b40e      	push	{r1, r2, r3}
 800edf6:	b500      	push	{lr}
 800edf8:	b09c      	sub	sp, #112	; 0x70
 800edfa:	ab1d      	add	r3, sp, #116	; 0x74
 800edfc:	9002      	str	r0, [sp, #8]
 800edfe:	9006      	str	r0, [sp, #24]
 800ee00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee04:	4809      	ldr	r0, [pc, #36]	; (800ee2c <siprintf+0x38>)
 800ee06:	9107      	str	r1, [sp, #28]
 800ee08:	9104      	str	r1, [sp, #16]
 800ee0a:	4909      	ldr	r1, [pc, #36]	; (800ee30 <siprintf+0x3c>)
 800ee0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee10:	9105      	str	r1, [sp, #20]
 800ee12:	6800      	ldr	r0, [r0, #0]
 800ee14:	9301      	str	r3, [sp, #4]
 800ee16:	a902      	add	r1, sp, #8
 800ee18:	f002 ff5c 	bl	8011cd4 <_svfiprintf_r>
 800ee1c:	9b02      	ldr	r3, [sp, #8]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	701a      	strb	r2, [r3, #0]
 800ee22:	b01c      	add	sp, #112	; 0x70
 800ee24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee28:	b003      	add	sp, #12
 800ee2a:	4770      	bx	lr
 800ee2c:	20000060 	.word	0x20000060
 800ee30:	ffff0208 	.word	0xffff0208

0800ee34 <siscanf>:
 800ee34:	b40e      	push	{r1, r2, r3}
 800ee36:	b510      	push	{r4, lr}
 800ee38:	b09f      	sub	sp, #124	; 0x7c
 800ee3a:	ac21      	add	r4, sp, #132	; 0x84
 800ee3c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ee40:	f854 2b04 	ldr.w	r2, [r4], #4
 800ee44:	9201      	str	r2, [sp, #4]
 800ee46:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ee4a:	9004      	str	r0, [sp, #16]
 800ee4c:	9008      	str	r0, [sp, #32]
 800ee4e:	f7f1 f9c7 	bl	80001e0 <strlen>
 800ee52:	4b0c      	ldr	r3, [pc, #48]	; (800ee84 <siscanf+0x50>)
 800ee54:	9005      	str	r0, [sp, #20]
 800ee56:	9009      	str	r0, [sp, #36]	; 0x24
 800ee58:	930d      	str	r3, [sp, #52]	; 0x34
 800ee5a:	480b      	ldr	r0, [pc, #44]	; (800ee88 <siscanf+0x54>)
 800ee5c:	9a01      	ldr	r2, [sp, #4]
 800ee5e:	6800      	ldr	r0, [r0, #0]
 800ee60:	9403      	str	r4, [sp, #12]
 800ee62:	2300      	movs	r3, #0
 800ee64:	9311      	str	r3, [sp, #68]	; 0x44
 800ee66:	9316      	str	r3, [sp, #88]	; 0x58
 800ee68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee6c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ee70:	a904      	add	r1, sp, #16
 800ee72:	4623      	mov	r3, r4
 800ee74:	f003 f888 	bl	8011f88 <__ssvfiscanf_r>
 800ee78:	b01f      	add	sp, #124	; 0x7c
 800ee7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee7e:	b003      	add	sp, #12
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	0800eeaf 	.word	0x0800eeaf
 800ee88:	20000060 	.word	0x20000060

0800ee8c <__sread>:
 800ee8c:	b510      	push	{r4, lr}
 800ee8e:	460c      	mov	r4, r1
 800ee90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee94:	f003 fb3c 	bl	8012510 <_read_r>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	bfab      	itete	ge
 800ee9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee9e:	89a3      	ldrhlt	r3, [r4, #12]
 800eea0:	181b      	addge	r3, r3, r0
 800eea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eea6:	bfac      	ite	ge
 800eea8:	6563      	strge	r3, [r4, #84]	; 0x54
 800eeaa:	81a3      	strhlt	r3, [r4, #12]
 800eeac:	bd10      	pop	{r4, pc}

0800eeae <__seofread>:
 800eeae:	2000      	movs	r0, #0
 800eeb0:	4770      	bx	lr

0800eeb2 <__swrite>:
 800eeb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb6:	461f      	mov	r7, r3
 800eeb8:	898b      	ldrh	r3, [r1, #12]
 800eeba:	05db      	lsls	r3, r3, #23
 800eebc:	4605      	mov	r5, r0
 800eebe:	460c      	mov	r4, r1
 800eec0:	4616      	mov	r6, r2
 800eec2:	d505      	bpl.n	800eed0 <__swrite+0x1e>
 800eec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eec8:	2302      	movs	r3, #2
 800eeca:	2200      	movs	r2, #0
 800eecc:	f002 f8f8 	bl	80110c0 <_lseek_r>
 800eed0:	89a3      	ldrh	r3, [r4, #12]
 800eed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eeda:	81a3      	strh	r3, [r4, #12]
 800eedc:	4632      	mov	r2, r6
 800eede:	463b      	mov	r3, r7
 800eee0:	4628      	mov	r0, r5
 800eee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eee6:	f000 bedd 	b.w	800fca4 <_write_r>

0800eeea <__sseek>:
 800eeea:	b510      	push	{r4, lr}
 800eeec:	460c      	mov	r4, r1
 800eeee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eef2:	f002 f8e5 	bl	80110c0 <_lseek_r>
 800eef6:	1c43      	adds	r3, r0, #1
 800eef8:	89a3      	ldrh	r3, [r4, #12]
 800eefa:	bf15      	itete	ne
 800eefc:	6560      	strne	r0, [r4, #84]	; 0x54
 800eefe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef06:	81a3      	strheq	r3, [r4, #12]
 800ef08:	bf18      	it	ne
 800ef0a:	81a3      	strhne	r3, [r4, #12]
 800ef0c:	bd10      	pop	{r4, pc}

0800ef0e <__sclose>:
 800ef0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef12:	f000 bed9 	b.w	800fcc8 <_close_r>

0800ef16 <strncmp>:
 800ef16:	b510      	push	{r4, lr}
 800ef18:	b16a      	cbz	r2, 800ef36 <strncmp+0x20>
 800ef1a:	3901      	subs	r1, #1
 800ef1c:	1884      	adds	r4, r0, r2
 800ef1e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ef22:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d103      	bne.n	800ef32 <strncmp+0x1c>
 800ef2a:	42a0      	cmp	r0, r4
 800ef2c:	d001      	beq.n	800ef32 <strncmp+0x1c>
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d1f5      	bne.n	800ef1e <strncmp+0x8>
 800ef32:	1a98      	subs	r0, r3, r2
 800ef34:	bd10      	pop	{r4, pc}
 800ef36:	4610      	mov	r0, r2
 800ef38:	e7fc      	b.n	800ef34 <strncmp+0x1e>

0800ef3a <sulp>:
 800ef3a:	b570      	push	{r4, r5, r6, lr}
 800ef3c:	4604      	mov	r4, r0
 800ef3e:	460d      	mov	r5, r1
 800ef40:	ec45 4b10 	vmov	d0, r4, r5
 800ef44:	4616      	mov	r6, r2
 800ef46:	f002 fc61 	bl	801180c <__ulp>
 800ef4a:	ec51 0b10 	vmov	r0, r1, d0
 800ef4e:	b17e      	cbz	r6, 800ef70 <sulp+0x36>
 800ef50:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ef54:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	dd09      	ble.n	800ef70 <sulp+0x36>
 800ef5c:	051b      	lsls	r3, r3, #20
 800ef5e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ef62:	2400      	movs	r4, #0
 800ef64:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ef68:	4622      	mov	r2, r4
 800ef6a:	462b      	mov	r3, r5
 800ef6c:	f7f1 fb4c 	bl	8000608 <__aeabi_dmul>
 800ef70:	bd70      	pop	{r4, r5, r6, pc}
 800ef72:	0000      	movs	r0, r0
 800ef74:	0000      	movs	r0, r0
	...

0800ef78 <_strtod_l>:
 800ef78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef7c:	b0a3      	sub	sp, #140	; 0x8c
 800ef7e:	461f      	mov	r7, r3
 800ef80:	2300      	movs	r3, #0
 800ef82:	931e      	str	r3, [sp, #120]	; 0x78
 800ef84:	4ba4      	ldr	r3, [pc, #656]	; (800f218 <_strtod_l+0x2a0>)
 800ef86:	9219      	str	r2, [sp, #100]	; 0x64
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	9307      	str	r3, [sp, #28]
 800ef8c:	4604      	mov	r4, r0
 800ef8e:	4618      	mov	r0, r3
 800ef90:	4688      	mov	r8, r1
 800ef92:	f7f1 f925 	bl	80001e0 <strlen>
 800ef96:	f04f 0a00 	mov.w	sl, #0
 800ef9a:	4605      	mov	r5, r0
 800ef9c:	f04f 0b00 	mov.w	fp, #0
 800efa0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800efa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800efa6:	781a      	ldrb	r2, [r3, #0]
 800efa8:	2a2b      	cmp	r2, #43	; 0x2b
 800efaa:	d04c      	beq.n	800f046 <_strtod_l+0xce>
 800efac:	d839      	bhi.n	800f022 <_strtod_l+0xaa>
 800efae:	2a0d      	cmp	r2, #13
 800efb0:	d832      	bhi.n	800f018 <_strtod_l+0xa0>
 800efb2:	2a08      	cmp	r2, #8
 800efb4:	d832      	bhi.n	800f01c <_strtod_l+0xa4>
 800efb6:	2a00      	cmp	r2, #0
 800efb8:	d03c      	beq.n	800f034 <_strtod_l+0xbc>
 800efba:	2300      	movs	r3, #0
 800efbc:	930e      	str	r3, [sp, #56]	; 0x38
 800efbe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800efc0:	7833      	ldrb	r3, [r6, #0]
 800efc2:	2b30      	cmp	r3, #48	; 0x30
 800efc4:	f040 80b4 	bne.w	800f130 <_strtod_l+0x1b8>
 800efc8:	7873      	ldrb	r3, [r6, #1]
 800efca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800efce:	2b58      	cmp	r3, #88	; 0x58
 800efd0:	d16c      	bne.n	800f0ac <_strtod_l+0x134>
 800efd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800efd4:	9301      	str	r3, [sp, #4]
 800efd6:	ab1e      	add	r3, sp, #120	; 0x78
 800efd8:	9702      	str	r7, [sp, #8]
 800efda:	9300      	str	r3, [sp, #0]
 800efdc:	4a8f      	ldr	r2, [pc, #572]	; (800f21c <_strtod_l+0x2a4>)
 800efde:	ab1f      	add	r3, sp, #124	; 0x7c
 800efe0:	a91d      	add	r1, sp, #116	; 0x74
 800efe2:	4620      	mov	r0, r4
 800efe4:	f001 fd60 	bl	8010aa8 <__gethex>
 800efe8:	f010 0707 	ands.w	r7, r0, #7
 800efec:	4605      	mov	r5, r0
 800efee:	d005      	beq.n	800effc <_strtod_l+0x84>
 800eff0:	2f06      	cmp	r7, #6
 800eff2:	d12a      	bne.n	800f04a <_strtod_l+0xd2>
 800eff4:	3601      	adds	r6, #1
 800eff6:	2300      	movs	r3, #0
 800eff8:	961d      	str	r6, [sp, #116]	; 0x74
 800effa:	930e      	str	r3, [sp, #56]	; 0x38
 800effc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800effe:	2b00      	cmp	r3, #0
 800f000:	f040 8596 	bne.w	800fb30 <_strtod_l+0xbb8>
 800f004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f006:	b1db      	cbz	r3, 800f040 <_strtod_l+0xc8>
 800f008:	4652      	mov	r2, sl
 800f00a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f00e:	ec43 2b10 	vmov	d0, r2, r3
 800f012:	b023      	add	sp, #140	; 0x8c
 800f014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f018:	2a20      	cmp	r2, #32
 800f01a:	d1ce      	bne.n	800efba <_strtod_l+0x42>
 800f01c:	3301      	adds	r3, #1
 800f01e:	931d      	str	r3, [sp, #116]	; 0x74
 800f020:	e7c0      	b.n	800efa4 <_strtod_l+0x2c>
 800f022:	2a2d      	cmp	r2, #45	; 0x2d
 800f024:	d1c9      	bne.n	800efba <_strtod_l+0x42>
 800f026:	2201      	movs	r2, #1
 800f028:	920e      	str	r2, [sp, #56]	; 0x38
 800f02a:	1c5a      	adds	r2, r3, #1
 800f02c:	921d      	str	r2, [sp, #116]	; 0x74
 800f02e:	785b      	ldrb	r3, [r3, #1]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d1c4      	bne.n	800efbe <_strtod_l+0x46>
 800f034:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f036:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	f040 8576 	bne.w	800fb2c <_strtod_l+0xbb4>
 800f040:	4652      	mov	r2, sl
 800f042:	465b      	mov	r3, fp
 800f044:	e7e3      	b.n	800f00e <_strtod_l+0x96>
 800f046:	2200      	movs	r2, #0
 800f048:	e7ee      	b.n	800f028 <_strtod_l+0xb0>
 800f04a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f04c:	b13a      	cbz	r2, 800f05e <_strtod_l+0xe6>
 800f04e:	2135      	movs	r1, #53	; 0x35
 800f050:	a820      	add	r0, sp, #128	; 0x80
 800f052:	f002 fce6 	bl	8011a22 <__copybits>
 800f056:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f058:	4620      	mov	r0, r4
 800f05a:	f002 f8ab 	bl	80111b4 <_Bfree>
 800f05e:	3f01      	subs	r7, #1
 800f060:	2f05      	cmp	r7, #5
 800f062:	d807      	bhi.n	800f074 <_strtod_l+0xfc>
 800f064:	e8df f007 	tbb	[pc, r7]
 800f068:	1d180b0e 	.word	0x1d180b0e
 800f06c:	030e      	.short	0x030e
 800f06e:	f04f 0b00 	mov.w	fp, #0
 800f072:	46da      	mov	sl, fp
 800f074:	0728      	lsls	r0, r5, #28
 800f076:	d5c1      	bpl.n	800effc <_strtod_l+0x84>
 800f078:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f07c:	e7be      	b.n	800effc <_strtod_l+0x84>
 800f07e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800f082:	e7f7      	b.n	800f074 <_strtod_l+0xfc>
 800f084:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800f088:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f08a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f08e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f092:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f096:	e7ed      	b.n	800f074 <_strtod_l+0xfc>
 800f098:	f8df b184 	ldr.w	fp, [pc, #388]	; 800f220 <_strtod_l+0x2a8>
 800f09c:	f04f 0a00 	mov.w	sl, #0
 800f0a0:	e7e8      	b.n	800f074 <_strtod_l+0xfc>
 800f0a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f0a6:	f04f 3aff 	mov.w	sl, #4294967295
 800f0aa:	e7e3      	b.n	800f074 <_strtod_l+0xfc>
 800f0ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f0ae:	1c5a      	adds	r2, r3, #1
 800f0b0:	921d      	str	r2, [sp, #116]	; 0x74
 800f0b2:	785b      	ldrb	r3, [r3, #1]
 800f0b4:	2b30      	cmp	r3, #48	; 0x30
 800f0b6:	d0f9      	beq.n	800f0ac <_strtod_l+0x134>
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d09f      	beq.n	800effc <_strtod_l+0x84>
 800f0bc:	2301      	movs	r3, #1
 800f0be:	f04f 0900 	mov.w	r9, #0
 800f0c2:	9304      	str	r3, [sp, #16]
 800f0c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f0c6:	930a      	str	r3, [sp, #40]	; 0x28
 800f0c8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f0cc:	464f      	mov	r7, r9
 800f0ce:	220a      	movs	r2, #10
 800f0d0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f0d2:	7806      	ldrb	r6, [r0, #0]
 800f0d4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f0d8:	b2d9      	uxtb	r1, r3
 800f0da:	2909      	cmp	r1, #9
 800f0dc:	d92a      	bls.n	800f134 <_strtod_l+0x1bc>
 800f0de:	9907      	ldr	r1, [sp, #28]
 800f0e0:	462a      	mov	r2, r5
 800f0e2:	f7ff ff18 	bl	800ef16 <strncmp>
 800f0e6:	b398      	cbz	r0, 800f150 <_strtod_l+0x1d8>
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	4633      	mov	r3, r6
 800f0ec:	463d      	mov	r5, r7
 800f0ee:	9007      	str	r0, [sp, #28]
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	2b65      	cmp	r3, #101	; 0x65
 800f0f4:	d001      	beq.n	800f0fa <_strtod_l+0x182>
 800f0f6:	2b45      	cmp	r3, #69	; 0x45
 800f0f8:	d118      	bne.n	800f12c <_strtod_l+0x1b4>
 800f0fa:	b91d      	cbnz	r5, 800f104 <_strtod_l+0x18c>
 800f0fc:	9b04      	ldr	r3, [sp, #16]
 800f0fe:	4303      	orrs	r3, r0
 800f100:	d098      	beq.n	800f034 <_strtod_l+0xbc>
 800f102:	2500      	movs	r5, #0
 800f104:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800f108:	f108 0301 	add.w	r3, r8, #1
 800f10c:	931d      	str	r3, [sp, #116]	; 0x74
 800f10e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f112:	2b2b      	cmp	r3, #43	; 0x2b
 800f114:	d075      	beq.n	800f202 <_strtod_l+0x28a>
 800f116:	2b2d      	cmp	r3, #45	; 0x2d
 800f118:	d07b      	beq.n	800f212 <_strtod_l+0x29a>
 800f11a:	f04f 0c00 	mov.w	ip, #0
 800f11e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f122:	2909      	cmp	r1, #9
 800f124:	f240 8082 	bls.w	800f22c <_strtod_l+0x2b4>
 800f128:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f12c:	2600      	movs	r6, #0
 800f12e:	e09d      	b.n	800f26c <_strtod_l+0x2f4>
 800f130:	2300      	movs	r3, #0
 800f132:	e7c4      	b.n	800f0be <_strtod_l+0x146>
 800f134:	2f08      	cmp	r7, #8
 800f136:	bfd8      	it	le
 800f138:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f13a:	f100 0001 	add.w	r0, r0, #1
 800f13e:	bfda      	itte	le
 800f140:	fb02 3301 	mlale	r3, r2, r1, r3
 800f144:	9309      	strle	r3, [sp, #36]	; 0x24
 800f146:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f14a:	3701      	adds	r7, #1
 800f14c:	901d      	str	r0, [sp, #116]	; 0x74
 800f14e:	e7bf      	b.n	800f0d0 <_strtod_l+0x158>
 800f150:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f152:	195a      	adds	r2, r3, r5
 800f154:	921d      	str	r2, [sp, #116]	; 0x74
 800f156:	5d5b      	ldrb	r3, [r3, r5]
 800f158:	2f00      	cmp	r7, #0
 800f15a:	d037      	beq.n	800f1cc <_strtod_l+0x254>
 800f15c:	9007      	str	r0, [sp, #28]
 800f15e:	463d      	mov	r5, r7
 800f160:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f164:	2a09      	cmp	r2, #9
 800f166:	d912      	bls.n	800f18e <_strtod_l+0x216>
 800f168:	2201      	movs	r2, #1
 800f16a:	e7c2      	b.n	800f0f2 <_strtod_l+0x17a>
 800f16c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f16e:	1c5a      	adds	r2, r3, #1
 800f170:	921d      	str	r2, [sp, #116]	; 0x74
 800f172:	785b      	ldrb	r3, [r3, #1]
 800f174:	3001      	adds	r0, #1
 800f176:	2b30      	cmp	r3, #48	; 0x30
 800f178:	d0f8      	beq.n	800f16c <_strtod_l+0x1f4>
 800f17a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f17e:	2a08      	cmp	r2, #8
 800f180:	f200 84db 	bhi.w	800fb3a <_strtod_l+0xbc2>
 800f184:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f186:	9007      	str	r0, [sp, #28]
 800f188:	2000      	movs	r0, #0
 800f18a:	920a      	str	r2, [sp, #40]	; 0x28
 800f18c:	4605      	mov	r5, r0
 800f18e:	3b30      	subs	r3, #48	; 0x30
 800f190:	f100 0201 	add.w	r2, r0, #1
 800f194:	d014      	beq.n	800f1c0 <_strtod_l+0x248>
 800f196:	9907      	ldr	r1, [sp, #28]
 800f198:	4411      	add	r1, r2
 800f19a:	9107      	str	r1, [sp, #28]
 800f19c:	462a      	mov	r2, r5
 800f19e:	eb00 0e05 	add.w	lr, r0, r5
 800f1a2:	210a      	movs	r1, #10
 800f1a4:	4572      	cmp	r2, lr
 800f1a6:	d113      	bne.n	800f1d0 <_strtod_l+0x258>
 800f1a8:	182a      	adds	r2, r5, r0
 800f1aa:	2a08      	cmp	r2, #8
 800f1ac:	f105 0501 	add.w	r5, r5, #1
 800f1b0:	4405      	add	r5, r0
 800f1b2:	dc1c      	bgt.n	800f1ee <_strtod_l+0x276>
 800f1b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1b6:	220a      	movs	r2, #10
 800f1b8:	fb02 3301 	mla	r3, r2, r1, r3
 800f1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f1be:	2200      	movs	r2, #0
 800f1c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f1c2:	1c59      	adds	r1, r3, #1
 800f1c4:	911d      	str	r1, [sp, #116]	; 0x74
 800f1c6:	785b      	ldrb	r3, [r3, #1]
 800f1c8:	4610      	mov	r0, r2
 800f1ca:	e7c9      	b.n	800f160 <_strtod_l+0x1e8>
 800f1cc:	4638      	mov	r0, r7
 800f1ce:	e7d2      	b.n	800f176 <_strtod_l+0x1fe>
 800f1d0:	2a08      	cmp	r2, #8
 800f1d2:	dc04      	bgt.n	800f1de <_strtod_l+0x266>
 800f1d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f1d6:	434e      	muls	r6, r1
 800f1d8:	9609      	str	r6, [sp, #36]	; 0x24
 800f1da:	3201      	adds	r2, #1
 800f1dc:	e7e2      	b.n	800f1a4 <_strtod_l+0x22c>
 800f1de:	f102 0c01 	add.w	ip, r2, #1
 800f1e2:	f1bc 0f10 	cmp.w	ip, #16
 800f1e6:	bfd8      	it	le
 800f1e8:	fb01 f909 	mulle.w	r9, r1, r9
 800f1ec:	e7f5      	b.n	800f1da <_strtod_l+0x262>
 800f1ee:	2d10      	cmp	r5, #16
 800f1f0:	bfdc      	itt	le
 800f1f2:	220a      	movle	r2, #10
 800f1f4:	fb02 3909 	mlale	r9, r2, r9, r3
 800f1f8:	e7e1      	b.n	800f1be <_strtod_l+0x246>
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	9307      	str	r3, [sp, #28]
 800f1fe:	2201      	movs	r2, #1
 800f200:	e77c      	b.n	800f0fc <_strtod_l+0x184>
 800f202:	f04f 0c00 	mov.w	ip, #0
 800f206:	f108 0302 	add.w	r3, r8, #2
 800f20a:	931d      	str	r3, [sp, #116]	; 0x74
 800f20c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f210:	e785      	b.n	800f11e <_strtod_l+0x1a6>
 800f212:	f04f 0c01 	mov.w	ip, #1
 800f216:	e7f6      	b.n	800f206 <_strtod_l+0x28e>
 800f218:	08013840 	.word	0x08013840
 800f21c:	080135ec 	.word	0x080135ec
 800f220:	7ff00000 	.word	0x7ff00000
 800f224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f226:	1c59      	adds	r1, r3, #1
 800f228:	911d      	str	r1, [sp, #116]	; 0x74
 800f22a:	785b      	ldrb	r3, [r3, #1]
 800f22c:	2b30      	cmp	r3, #48	; 0x30
 800f22e:	d0f9      	beq.n	800f224 <_strtod_l+0x2ac>
 800f230:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800f234:	2908      	cmp	r1, #8
 800f236:	f63f af79 	bhi.w	800f12c <_strtod_l+0x1b4>
 800f23a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800f23e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f240:	9308      	str	r3, [sp, #32]
 800f242:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f244:	1c59      	adds	r1, r3, #1
 800f246:	911d      	str	r1, [sp, #116]	; 0x74
 800f248:	785b      	ldrb	r3, [r3, #1]
 800f24a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800f24e:	2e09      	cmp	r6, #9
 800f250:	d937      	bls.n	800f2c2 <_strtod_l+0x34a>
 800f252:	9e08      	ldr	r6, [sp, #32]
 800f254:	1b89      	subs	r1, r1, r6
 800f256:	2908      	cmp	r1, #8
 800f258:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f25c:	dc02      	bgt.n	800f264 <_strtod_l+0x2ec>
 800f25e:	4576      	cmp	r6, lr
 800f260:	bfa8      	it	ge
 800f262:	4676      	movge	r6, lr
 800f264:	f1bc 0f00 	cmp.w	ip, #0
 800f268:	d000      	beq.n	800f26c <_strtod_l+0x2f4>
 800f26a:	4276      	negs	r6, r6
 800f26c:	2d00      	cmp	r5, #0
 800f26e:	d14f      	bne.n	800f310 <_strtod_l+0x398>
 800f270:	9904      	ldr	r1, [sp, #16]
 800f272:	4301      	orrs	r1, r0
 800f274:	f47f aec2 	bne.w	800effc <_strtod_l+0x84>
 800f278:	2a00      	cmp	r2, #0
 800f27a:	f47f aedb 	bne.w	800f034 <_strtod_l+0xbc>
 800f27e:	2b69      	cmp	r3, #105	; 0x69
 800f280:	d027      	beq.n	800f2d2 <_strtod_l+0x35a>
 800f282:	dc24      	bgt.n	800f2ce <_strtod_l+0x356>
 800f284:	2b49      	cmp	r3, #73	; 0x49
 800f286:	d024      	beq.n	800f2d2 <_strtod_l+0x35a>
 800f288:	2b4e      	cmp	r3, #78	; 0x4e
 800f28a:	f47f aed3 	bne.w	800f034 <_strtod_l+0xbc>
 800f28e:	499e      	ldr	r1, [pc, #632]	; (800f508 <_strtod_l+0x590>)
 800f290:	a81d      	add	r0, sp, #116	; 0x74
 800f292:	f001 fe61 	bl	8010f58 <__match>
 800f296:	2800      	cmp	r0, #0
 800f298:	f43f aecc 	beq.w	800f034 <_strtod_l+0xbc>
 800f29c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	2b28      	cmp	r3, #40	; 0x28
 800f2a2:	d12d      	bne.n	800f300 <_strtod_l+0x388>
 800f2a4:	4999      	ldr	r1, [pc, #612]	; (800f50c <_strtod_l+0x594>)
 800f2a6:	aa20      	add	r2, sp, #128	; 0x80
 800f2a8:	a81d      	add	r0, sp, #116	; 0x74
 800f2aa:	f001 fe69 	bl	8010f80 <__hexnan>
 800f2ae:	2805      	cmp	r0, #5
 800f2b0:	d126      	bne.n	800f300 <_strtod_l+0x388>
 800f2b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2b4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800f2b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f2bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f2c0:	e69c      	b.n	800effc <_strtod_l+0x84>
 800f2c2:	210a      	movs	r1, #10
 800f2c4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f2c8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f2cc:	e7b9      	b.n	800f242 <_strtod_l+0x2ca>
 800f2ce:	2b6e      	cmp	r3, #110	; 0x6e
 800f2d0:	e7db      	b.n	800f28a <_strtod_l+0x312>
 800f2d2:	498f      	ldr	r1, [pc, #572]	; (800f510 <_strtod_l+0x598>)
 800f2d4:	a81d      	add	r0, sp, #116	; 0x74
 800f2d6:	f001 fe3f 	bl	8010f58 <__match>
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	f43f aeaa 	beq.w	800f034 <_strtod_l+0xbc>
 800f2e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f2e2:	498c      	ldr	r1, [pc, #560]	; (800f514 <_strtod_l+0x59c>)
 800f2e4:	3b01      	subs	r3, #1
 800f2e6:	a81d      	add	r0, sp, #116	; 0x74
 800f2e8:	931d      	str	r3, [sp, #116]	; 0x74
 800f2ea:	f001 fe35 	bl	8010f58 <__match>
 800f2ee:	b910      	cbnz	r0, 800f2f6 <_strtod_l+0x37e>
 800f2f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	931d      	str	r3, [sp, #116]	; 0x74
 800f2f6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800f524 <_strtod_l+0x5ac>
 800f2fa:	f04f 0a00 	mov.w	sl, #0
 800f2fe:	e67d      	b.n	800effc <_strtod_l+0x84>
 800f300:	4885      	ldr	r0, [pc, #532]	; (800f518 <_strtod_l+0x5a0>)
 800f302:	f7fe fd21 	bl	800dd48 <nan>
 800f306:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f30a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f30e:	e675      	b.n	800effc <_strtod_l+0x84>
 800f310:	9b07      	ldr	r3, [sp, #28]
 800f312:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f314:	1af3      	subs	r3, r6, r3
 800f316:	2f00      	cmp	r7, #0
 800f318:	bf08      	it	eq
 800f31a:	462f      	moveq	r7, r5
 800f31c:	2d10      	cmp	r5, #16
 800f31e:	9308      	str	r3, [sp, #32]
 800f320:	46a8      	mov	r8, r5
 800f322:	bfa8      	it	ge
 800f324:	f04f 0810 	movge.w	r8, #16
 800f328:	f7f1 f8f4 	bl	8000514 <__aeabi_ui2d>
 800f32c:	2d09      	cmp	r5, #9
 800f32e:	4682      	mov	sl, r0
 800f330:	468b      	mov	fp, r1
 800f332:	dd13      	ble.n	800f35c <_strtod_l+0x3e4>
 800f334:	4b79      	ldr	r3, [pc, #484]	; (800f51c <_strtod_l+0x5a4>)
 800f336:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f33a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f33e:	f7f1 f963 	bl	8000608 <__aeabi_dmul>
 800f342:	4682      	mov	sl, r0
 800f344:	4648      	mov	r0, r9
 800f346:	468b      	mov	fp, r1
 800f348:	f7f1 f8e4 	bl	8000514 <__aeabi_ui2d>
 800f34c:	4602      	mov	r2, r0
 800f34e:	460b      	mov	r3, r1
 800f350:	4650      	mov	r0, sl
 800f352:	4659      	mov	r1, fp
 800f354:	f7f0 ffa2 	bl	800029c <__adddf3>
 800f358:	4682      	mov	sl, r0
 800f35a:	468b      	mov	fp, r1
 800f35c:	2d0f      	cmp	r5, #15
 800f35e:	dc38      	bgt.n	800f3d2 <_strtod_l+0x45a>
 800f360:	9b08      	ldr	r3, [sp, #32]
 800f362:	2b00      	cmp	r3, #0
 800f364:	f43f ae4a 	beq.w	800effc <_strtod_l+0x84>
 800f368:	dd24      	ble.n	800f3b4 <_strtod_l+0x43c>
 800f36a:	2b16      	cmp	r3, #22
 800f36c:	dc0b      	bgt.n	800f386 <_strtod_l+0x40e>
 800f36e:	4d6b      	ldr	r5, [pc, #428]	; (800f51c <_strtod_l+0x5a4>)
 800f370:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800f374:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f378:	4652      	mov	r2, sl
 800f37a:	465b      	mov	r3, fp
 800f37c:	f7f1 f944 	bl	8000608 <__aeabi_dmul>
 800f380:	4682      	mov	sl, r0
 800f382:	468b      	mov	fp, r1
 800f384:	e63a      	b.n	800effc <_strtod_l+0x84>
 800f386:	9a08      	ldr	r2, [sp, #32]
 800f388:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f38c:	4293      	cmp	r3, r2
 800f38e:	db20      	blt.n	800f3d2 <_strtod_l+0x45a>
 800f390:	4c62      	ldr	r4, [pc, #392]	; (800f51c <_strtod_l+0x5a4>)
 800f392:	f1c5 050f 	rsb	r5, r5, #15
 800f396:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f39a:	4652      	mov	r2, sl
 800f39c:	465b      	mov	r3, fp
 800f39e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3a2:	f7f1 f931 	bl	8000608 <__aeabi_dmul>
 800f3a6:	9b08      	ldr	r3, [sp, #32]
 800f3a8:	1b5d      	subs	r5, r3, r5
 800f3aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f3ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f3b2:	e7e3      	b.n	800f37c <_strtod_l+0x404>
 800f3b4:	9b08      	ldr	r3, [sp, #32]
 800f3b6:	3316      	adds	r3, #22
 800f3b8:	db0b      	blt.n	800f3d2 <_strtod_l+0x45a>
 800f3ba:	9b07      	ldr	r3, [sp, #28]
 800f3bc:	4a57      	ldr	r2, [pc, #348]	; (800f51c <_strtod_l+0x5a4>)
 800f3be:	1b9e      	subs	r6, r3, r6
 800f3c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f3c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f3c8:	4650      	mov	r0, sl
 800f3ca:	4659      	mov	r1, fp
 800f3cc:	f7f1 fa46 	bl	800085c <__aeabi_ddiv>
 800f3d0:	e7d6      	b.n	800f380 <_strtod_l+0x408>
 800f3d2:	9b08      	ldr	r3, [sp, #32]
 800f3d4:	eba5 0808 	sub.w	r8, r5, r8
 800f3d8:	4498      	add	r8, r3
 800f3da:	f1b8 0f00 	cmp.w	r8, #0
 800f3de:	dd71      	ble.n	800f4c4 <_strtod_l+0x54c>
 800f3e0:	f018 030f 	ands.w	r3, r8, #15
 800f3e4:	d00a      	beq.n	800f3fc <_strtod_l+0x484>
 800f3e6:	494d      	ldr	r1, [pc, #308]	; (800f51c <_strtod_l+0x5a4>)
 800f3e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f3ec:	4652      	mov	r2, sl
 800f3ee:	465b      	mov	r3, fp
 800f3f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3f4:	f7f1 f908 	bl	8000608 <__aeabi_dmul>
 800f3f8:	4682      	mov	sl, r0
 800f3fa:	468b      	mov	fp, r1
 800f3fc:	f038 080f 	bics.w	r8, r8, #15
 800f400:	d04d      	beq.n	800f49e <_strtod_l+0x526>
 800f402:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f406:	dd22      	ble.n	800f44e <_strtod_l+0x4d6>
 800f408:	2500      	movs	r5, #0
 800f40a:	462e      	mov	r6, r5
 800f40c:	9509      	str	r5, [sp, #36]	; 0x24
 800f40e:	9507      	str	r5, [sp, #28]
 800f410:	2322      	movs	r3, #34	; 0x22
 800f412:	f8df b110 	ldr.w	fp, [pc, #272]	; 800f524 <_strtod_l+0x5ac>
 800f416:	6023      	str	r3, [r4, #0]
 800f418:	f04f 0a00 	mov.w	sl, #0
 800f41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f41e:	2b00      	cmp	r3, #0
 800f420:	f43f adec 	beq.w	800effc <_strtod_l+0x84>
 800f424:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f426:	4620      	mov	r0, r4
 800f428:	f001 fec4 	bl	80111b4 <_Bfree>
 800f42c:	9907      	ldr	r1, [sp, #28]
 800f42e:	4620      	mov	r0, r4
 800f430:	f001 fec0 	bl	80111b4 <_Bfree>
 800f434:	4631      	mov	r1, r6
 800f436:	4620      	mov	r0, r4
 800f438:	f001 febc 	bl	80111b4 <_Bfree>
 800f43c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f43e:	4620      	mov	r0, r4
 800f440:	f001 feb8 	bl	80111b4 <_Bfree>
 800f444:	4629      	mov	r1, r5
 800f446:	4620      	mov	r0, r4
 800f448:	f001 feb4 	bl	80111b4 <_Bfree>
 800f44c:	e5d6      	b.n	800effc <_strtod_l+0x84>
 800f44e:	2300      	movs	r3, #0
 800f450:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f454:	4650      	mov	r0, sl
 800f456:	4659      	mov	r1, fp
 800f458:	4699      	mov	r9, r3
 800f45a:	f1b8 0f01 	cmp.w	r8, #1
 800f45e:	dc21      	bgt.n	800f4a4 <_strtod_l+0x52c>
 800f460:	b10b      	cbz	r3, 800f466 <_strtod_l+0x4ee>
 800f462:	4682      	mov	sl, r0
 800f464:	468b      	mov	fp, r1
 800f466:	4b2e      	ldr	r3, [pc, #184]	; (800f520 <_strtod_l+0x5a8>)
 800f468:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f46c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f470:	4652      	mov	r2, sl
 800f472:	465b      	mov	r3, fp
 800f474:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f478:	f7f1 f8c6 	bl	8000608 <__aeabi_dmul>
 800f47c:	4b29      	ldr	r3, [pc, #164]	; (800f524 <_strtod_l+0x5ac>)
 800f47e:	460a      	mov	r2, r1
 800f480:	400b      	ands	r3, r1
 800f482:	4929      	ldr	r1, [pc, #164]	; (800f528 <_strtod_l+0x5b0>)
 800f484:	428b      	cmp	r3, r1
 800f486:	4682      	mov	sl, r0
 800f488:	d8be      	bhi.n	800f408 <_strtod_l+0x490>
 800f48a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f48e:	428b      	cmp	r3, r1
 800f490:	bf86      	itte	hi
 800f492:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f52c <_strtod_l+0x5b4>
 800f496:	f04f 3aff 	movhi.w	sl, #4294967295
 800f49a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f49e:	2300      	movs	r3, #0
 800f4a0:	9304      	str	r3, [sp, #16]
 800f4a2:	e081      	b.n	800f5a8 <_strtod_l+0x630>
 800f4a4:	f018 0f01 	tst.w	r8, #1
 800f4a8:	d007      	beq.n	800f4ba <_strtod_l+0x542>
 800f4aa:	4b1d      	ldr	r3, [pc, #116]	; (800f520 <_strtod_l+0x5a8>)
 800f4ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b4:	f7f1 f8a8 	bl	8000608 <__aeabi_dmul>
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	f109 0901 	add.w	r9, r9, #1
 800f4be:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f4c2:	e7ca      	b.n	800f45a <_strtod_l+0x4e2>
 800f4c4:	d0eb      	beq.n	800f49e <_strtod_l+0x526>
 800f4c6:	f1c8 0800 	rsb	r8, r8, #0
 800f4ca:	f018 020f 	ands.w	r2, r8, #15
 800f4ce:	d00a      	beq.n	800f4e6 <_strtod_l+0x56e>
 800f4d0:	4b12      	ldr	r3, [pc, #72]	; (800f51c <_strtod_l+0x5a4>)
 800f4d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4d6:	4650      	mov	r0, sl
 800f4d8:	4659      	mov	r1, fp
 800f4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4de:	f7f1 f9bd 	bl	800085c <__aeabi_ddiv>
 800f4e2:	4682      	mov	sl, r0
 800f4e4:	468b      	mov	fp, r1
 800f4e6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f4ea:	d0d8      	beq.n	800f49e <_strtod_l+0x526>
 800f4ec:	f1b8 0f1f 	cmp.w	r8, #31
 800f4f0:	dd1e      	ble.n	800f530 <_strtod_l+0x5b8>
 800f4f2:	2500      	movs	r5, #0
 800f4f4:	462e      	mov	r6, r5
 800f4f6:	9509      	str	r5, [sp, #36]	; 0x24
 800f4f8:	9507      	str	r5, [sp, #28]
 800f4fa:	2322      	movs	r3, #34	; 0x22
 800f4fc:	f04f 0a00 	mov.w	sl, #0
 800f500:	f04f 0b00 	mov.w	fp, #0
 800f504:	6023      	str	r3, [r4, #0]
 800f506:	e789      	b.n	800f41c <_strtod_l+0x4a4>
 800f508:	080135c1 	.word	0x080135c1
 800f50c:	08013600 	.word	0x08013600
 800f510:	080135b9 	.word	0x080135b9
 800f514:	08013744 	.word	0x08013744
 800f518:	08013a1b 	.word	0x08013a1b
 800f51c:	080138e0 	.word	0x080138e0
 800f520:	080138b8 	.word	0x080138b8
 800f524:	7ff00000 	.word	0x7ff00000
 800f528:	7ca00000 	.word	0x7ca00000
 800f52c:	7fefffff 	.word	0x7fefffff
 800f530:	f018 0310 	ands.w	r3, r8, #16
 800f534:	bf18      	it	ne
 800f536:	236a      	movne	r3, #106	; 0x6a
 800f538:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800f8f0 <_strtod_l+0x978>
 800f53c:	9304      	str	r3, [sp, #16]
 800f53e:	4650      	mov	r0, sl
 800f540:	4659      	mov	r1, fp
 800f542:	2300      	movs	r3, #0
 800f544:	f018 0f01 	tst.w	r8, #1
 800f548:	d004      	beq.n	800f554 <_strtod_l+0x5dc>
 800f54a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f54e:	f7f1 f85b 	bl	8000608 <__aeabi_dmul>
 800f552:	2301      	movs	r3, #1
 800f554:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f558:	f109 0908 	add.w	r9, r9, #8
 800f55c:	d1f2      	bne.n	800f544 <_strtod_l+0x5cc>
 800f55e:	b10b      	cbz	r3, 800f564 <_strtod_l+0x5ec>
 800f560:	4682      	mov	sl, r0
 800f562:	468b      	mov	fp, r1
 800f564:	9b04      	ldr	r3, [sp, #16]
 800f566:	b1bb      	cbz	r3, 800f598 <_strtod_l+0x620>
 800f568:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f56c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f570:	2b00      	cmp	r3, #0
 800f572:	4659      	mov	r1, fp
 800f574:	dd10      	ble.n	800f598 <_strtod_l+0x620>
 800f576:	2b1f      	cmp	r3, #31
 800f578:	f340 8128 	ble.w	800f7cc <_strtod_l+0x854>
 800f57c:	2b34      	cmp	r3, #52	; 0x34
 800f57e:	bfde      	ittt	le
 800f580:	3b20      	suble	r3, #32
 800f582:	f04f 32ff 	movle.w	r2, #4294967295
 800f586:	fa02 f303 	lslle.w	r3, r2, r3
 800f58a:	f04f 0a00 	mov.w	sl, #0
 800f58e:	bfcc      	ite	gt
 800f590:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f594:	ea03 0b01 	andle.w	fp, r3, r1
 800f598:	2200      	movs	r2, #0
 800f59a:	2300      	movs	r3, #0
 800f59c:	4650      	mov	r0, sl
 800f59e:	4659      	mov	r1, fp
 800f5a0:	f7f1 fa9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	d1a4      	bne.n	800f4f2 <_strtod_l+0x57a>
 800f5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f5ae:	462b      	mov	r3, r5
 800f5b0:	463a      	mov	r2, r7
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	f001 fe6a 	bl	801128c <__s2b>
 800f5b8:	9009      	str	r0, [sp, #36]	; 0x24
 800f5ba:	2800      	cmp	r0, #0
 800f5bc:	f43f af24 	beq.w	800f408 <_strtod_l+0x490>
 800f5c0:	9b07      	ldr	r3, [sp, #28]
 800f5c2:	1b9e      	subs	r6, r3, r6
 800f5c4:	9b08      	ldr	r3, [sp, #32]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	bfb4      	ite	lt
 800f5ca:	4633      	movlt	r3, r6
 800f5cc:	2300      	movge	r3, #0
 800f5ce:	9310      	str	r3, [sp, #64]	; 0x40
 800f5d0:	9b08      	ldr	r3, [sp, #32]
 800f5d2:	2500      	movs	r5, #0
 800f5d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f5d8:	9318      	str	r3, [sp, #96]	; 0x60
 800f5da:	462e      	mov	r6, r5
 800f5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5de:	4620      	mov	r0, r4
 800f5e0:	6859      	ldr	r1, [r3, #4]
 800f5e2:	f001 fda7 	bl	8011134 <_Balloc>
 800f5e6:	9007      	str	r0, [sp, #28]
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	f43f af11 	beq.w	800f410 <_strtod_l+0x498>
 800f5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5f0:	691a      	ldr	r2, [r3, #16]
 800f5f2:	3202      	adds	r2, #2
 800f5f4:	f103 010c 	add.w	r1, r3, #12
 800f5f8:	0092      	lsls	r2, r2, #2
 800f5fa:	300c      	adds	r0, #12
 800f5fc:	f001 fd8c 	bl	8011118 <memcpy>
 800f600:	ec4b ab10 	vmov	d0, sl, fp
 800f604:	aa20      	add	r2, sp, #128	; 0x80
 800f606:	a91f      	add	r1, sp, #124	; 0x7c
 800f608:	4620      	mov	r0, r4
 800f60a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f60e:	f002 f979 	bl	8011904 <__d2b>
 800f612:	901e      	str	r0, [sp, #120]	; 0x78
 800f614:	2800      	cmp	r0, #0
 800f616:	f43f aefb 	beq.w	800f410 <_strtod_l+0x498>
 800f61a:	2101      	movs	r1, #1
 800f61c:	4620      	mov	r0, r4
 800f61e:	f001 fecf 	bl	80113c0 <__i2b>
 800f622:	4606      	mov	r6, r0
 800f624:	2800      	cmp	r0, #0
 800f626:	f43f aef3 	beq.w	800f410 <_strtod_l+0x498>
 800f62a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f62c:	9904      	ldr	r1, [sp, #16]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	bfab      	itete	ge
 800f632:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800f634:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800f636:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800f638:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800f63c:	bfac      	ite	ge
 800f63e:	eb03 0902 	addge.w	r9, r3, r2
 800f642:	1ad7      	sublt	r7, r2, r3
 800f644:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f646:	eba3 0801 	sub.w	r8, r3, r1
 800f64a:	4490      	add	r8, r2
 800f64c:	4ba3      	ldr	r3, [pc, #652]	; (800f8dc <_strtod_l+0x964>)
 800f64e:	f108 38ff 	add.w	r8, r8, #4294967295
 800f652:	4598      	cmp	r8, r3
 800f654:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f658:	f280 80cc 	bge.w	800f7f4 <_strtod_l+0x87c>
 800f65c:	eba3 0308 	sub.w	r3, r3, r8
 800f660:	2b1f      	cmp	r3, #31
 800f662:	eba2 0203 	sub.w	r2, r2, r3
 800f666:	f04f 0101 	mov.w	r1, #1
 800f66a:	f300 80b6 	bgt.w	800f7da <_strtod_l+0x862>
 800f66e:	fa01 f303 	lsl.w	r3, r1, r3
 800f672:	9311      	str	r3, [sp, #68]	; 0x44
 800f674:	2300      	movs	r3, #0
 800f676:	930c      	str	r3, [sp, #48]	; 0x30
 800f678:	eb09 0802 	add.w	r8, r9, r2
 800f67c:	9b04      	ldr	r3, [sp, #16]
 800f67e:	45c1      	cmp	r9, r8
 800f680:	4417      	add	r7, r2
 800f682:	441f      	add	r7, r3
 800f684:	464b      	mov	r3, r9
 800f686:	bfa8      	it	ge
 800f688:	4643      	movge	r3, r8
 800f68a:	42bb      	cmp	r3, r7
 800f68c:	bfa8      	it	ge
 800f68e:	463b      	movge	r3, r7
 800f690:	2b00      	cmp	r3, #0
 800f692:	bfc2      	ittt	gt
 800f694:	eba8 0803 	subgt.w	r8, r8, r3
 800f698:	1aff      	subgt	r7, r7, r3
 800f69a:	eba9 0903 	subgt.w	r9, r9, r3
 800f69e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	dd17      	ble.n	800f6d4 <_strtod_l+0x75c>
 800f6a4:	4631      	mov	r1, r6
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	f001 ff45 	bl	8011538 <__pow5mult>
 800f6ae:	4606      	mov	r6, r0
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	f43f aead 	beq.w	800f410 <_strtod_l+0x498>
 800f6b6:	4601      	mov	r1, r0
 800f6b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	f001 fe96 	bl	80113ec <__multiply>
 800f6c0:	900f      	str	r0, [sp, #60]	; 0x3c
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	f43f aea4 	beq.w	800f410 <_strtod_l+0x498>
 800f6c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	f001 fd72 	bl	80111b4 <_Bfree>
 800f6d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6d2:	931e      	str	r3, [sp, #120]	; 0x78
 800f6d4:	f1b8 0f00 	cmp.w	r8, #0
 800f6d8:	f300 8091 	bgt.w	800f7fe <_strtod_l+0x886>
 800f6dc:	9b08      	ldr	r3, [sp, #32]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	dd08      	ble.n	800f6f4 <_strtod_l+0x77c>
 800f6e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f6e4:	9907      	ldr	r1, [sp, #28]
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	f001 ff26 	bl	8011538 <__pow5mult>
 800f6ec:	9007      	str	r0, [sp, #28]
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	f43f ae8e 	beq.w	800f410 <_strtod_l+0x498>
 800f6f4:	2f00      	cmp	r7, #0
 800f6f6:	dd08      	ble.n	800f70a <_strtod_l+0x792>
 800f6f8:	9907      	ldr	r1, [sp, #28]
 800f6fa:	463a      	mov	r2, r7
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f001 ff75 	bl	80115ec <__lshift>
 800f702:	9007      	str	r0, [sp, #28]
 800f704:	2800      	cmp	r0, #0
 800f706:	f43f ae83 	beq.w	800f410 <_strtod_l+0x498>
 800f70a:	f1b9 0f00 	cmp.w	r9, #0
 800f70e:	dd08      	ble.n	800f722 <_strtod_l+0x7aa>
 800f710:	4631      	mov	r1, r6
 800f712:	464a      	mov	r2, r9
 800f714:	4620      	mov	r0, r4
 800f716:	f001 ff69 	bl	80115ec <__lshift>
 800f71a:	4606      	mov	r6, r0
 800f71c:	2800      	cmp	r0, #0
 800f71e:	f43f ae77 	beq.w	800f410 <_strtod_l+0x498>
 800f722:	9a07      	ldr	r2, [sp, #28]
 800f724:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f726:	4620      	mov	r0, r4
 800f728:	f001 ffe8 	bl	80116fc <__mdiff>
 800f72c:	4605      	mov	r5, r0
 800f72e:	2800      	cmp	r0, #0
 800f730:	f43f ae6e 	beq.w	800f410 <_strtod_l+0x498>
 800f734:	68c3      	ldr	r3, [r0, #12]
 800f736:	930f      	str	r3, [sp, #60]	; 0x3c
 800f738:	2300      	movs	r3, #0
 800f73a:	60c3      	str	r3, [r0, #12]
 800f73c:	4631      	mov	r1, r6
 800f73e:	f001 ffc1 	bl	80116c4 <__mcmp>
 800f742:	2800      	cmp	r0, #0
 800f744:	da65      	bge.n	800f812 <_strtod_l+0x89a>
 800f746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f748:	ea53 030a 	orrs.w	r3, r3, sl
 800f74c:	f040 8087 	bne.w	800f85e <_strtod_l+0x8e6>
 800f750:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f754:	2b00      	cmp	r3, #0
 800f756:	f040 8082 	bne.w	800f85e <_strtod_l+0x8e6>
 800f75a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f75e:	0d1b      	lsrs	r3, r3, #20
 800f760:	051b      	lsls	r3, r3, #20
 800f762:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f766:	d97a      	bls.n	800f85e <_strtod_l+0x8e6>
 800f768:	696b      	ldr	r3, [r5, #20]
 800f76a:	b913      	cbnz	r3, 800f772 <_strtod_l+0x7fa>
 800f76c:	692b      	ldr	r3, [r5, #16]
 800f76e:	2b01      	cmp	r3, #1
 800f770:	dd75      	ble.n	800f85e <_strtod_l+0x8e6>
 800f772:	4629      	mov	r1, r5
 800f774:	2201      	movs	r2, #1
 800f776:	4620      	mov	r0, r4
 800f778:	f001 ff38 	bl	80115ec <__lshift>
 800f77c:	4631      	mov	r1, r6
 800f77e:	4605      	mov	r5, r0
 800f780:	f001 ffa0 	bl	80116c4 <__mcmp>
 800f784:	2800      	cmp	r0, #0
 800f786:	dd6a      	ble.n	800f85e <_strtod_l+0x8e6>
 800f788:	9904      	ldr	r1, [sp, #16]
 800f78a:	4a55      	ldr	r2, [pc, #340]	; (800f8e0 <_strtod_l+0x968>)
 800f78c:	465b      	mov	r3, fp
 800f78e:	2900      	cmp	r1, #0
 800f790:	f000 8085 	beq.w	800f89e <_strtod_l+0x926>
 800f794:	ea02 010b 	and.w	r1, r2, fp
 800f798:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f79c:	dc7f      	bgt.n	800f89e <_strtod_l+0x926>
 800f79e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f7a2:	f77f aeaa 	ble.w	800f4fa <_strtod_l+0x582>
 800f7a6:	4a4f      	ldr	r2, [pc, #316]	; (800f8e4 <_strtod_l+0x96c>)
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800f7ae:	4650      	mov	r0, sl
 800f7b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800f7b4:	4659      	mov	r1, fp
 800f7b6:	f7f0 ff27 	bl	8000608 <__aeabi_dmul>
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	4303      	orrs	r3, r0
 800f7be:	bf08      	it	eq
 800f7c0:	2322      	moveq	r3, #34	; 0x22
 800f7c2:	4682      	mov	sl, r0
 800f7c4:	468b      	mov	fp, r1
 800f7c6:	bf08      	it	eq
 800f7c8:	6023      	streq	r3, [r4, #0]
 800f7ca:	e62b      	b.n	800f424 <_strtod_l+0x4ac>
 800f7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f7d0:	fa02 f303 	lsl.w	r3, r2, r3
 800f7d4:	ea03 0a0a 	and.w	sl, r3, sl
 800f7d8:	e6de      	b.n	800f598 <_strtod_l+0x620>
 800f7da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f7de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f7e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f7e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f7ea:	fa01 f308 	lsl.w	r3, r1, r8
 800f7ee:	930c      	str	r3, [sp, #48]	; 0x30
 800f7f0:	9111      	str	r1, [sp, #68]	; 0x44
 800f7f2:	e741      	b.n	800f678 <_strtod_l+0x700>
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	930c      	str	r3, [sp, #48]	; 0x30
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	9311      	str	r3, [sp, #68]	; 0x44
 800f7fc:	e73c      	b.n	800f678 <_strtod_l+0x700>
 800f7fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f800:	4642      	mov	r2, r8
 800f802:	4620      	mov	r0, r4
 800f804:	f001 fef2 	bl	80115ec <__lshift>
 800f808:	901e      	str	r0, [sp, #120]	; 0x78
 800f80a:	2800      	cmp	r0, #0
 800f80c:	f47f af66 	bne.w	800f6dc <_strtod_l+0x764>
 800f810:	e5fe      	b.n	800f410 <_strtod_l+0x498>
 800f812:	465f      	mov	r7, fp
 800f814:	d16e      	bne.n	800f8f4 <_strtod_l+0x97c>
 800f816:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f818:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f81c:	b342      	cbz	r2, 800f870 <_strtod_l+0x8f8>
 800f81e:	4a32      	ldr	r2, [pc, #200]	; (800f8e8 <_strtod_l+0x970>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d128      	bne.n	800f876 <_strtod_l+0x8fe>
 800f824:	9b04      	ldr	r3, [sp, #16]
 800f826:	4650      	mov	r0, sl
 800f828:	b1eb      	cbz	r3, 800f866 <_strtod_l+0x8ee>
 800f82a:	4a2d      	ldr	r2, [pc, #180]	; (800f8e0 <_strtod_l+0x968>)
 800f82c:	403a      	ands	r2, r7
 800f82e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f832:	f04f 31ff 	mov.w	r1, #4294967295
 800f836:	d819      	bhi.n	800f86c <_strtod_l+0x8f4>
 800f838:	0d12      	lsrs	r2, r2, #20
 800f83a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f83e:	fa01 f303 	lsl.w	r3, r1, r3
 800f842:	4298      	cmp	r0, r3
 800f844:	d117      	bne.n	800f876 <_strtod_l+0x8fe>
 800f846:	4b29      	ldr	r3, [pc, #164]	; (800f8ec <_strtod_l+0x974>)
 800f848:	429f      	cmp	r7, r3
 800f84a:	d102      	bne.n	800f852 <_strtod_l+0x8da>
 800f84c:	3001      	adds	r0, #1
 800f84e:	f43f addf 	beq.w	800f410 <_strtod_l+0x498>
 800f852:	4b23      	ldr	r3, [pc, #140]	; (800f8e0 <_strtod_l+0x968>)
 800f854:	403b      	ands	r3, r7
 800f856:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f85a:	f04f 0a00 	mov.w	sl, #0
 800f85e:	9b04      	ldr	r3, [sp, #16]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d1a0      	bne.n	800f7a6 <_strtod_l+0x82e>
 800f864:	e5de      	b.n	800f424 <_strtod_l+0x4ac>
 800f866:	f04f 33ff 	mov.w	r3, #4294967295
 800f86a:	e7ea      	b.n	800f842 <_strtod_l+0x8ca>
 800f86c:	460b      	mov	r3, r1
 800f86e:	e7e8      	b.n	800f842 <_strtod_l+0x8ca>
 800f870:	ea53 030a 	orrs.w	r3, r3, sl
 800f874:	d088      	beq.n	800f788 <_strtod_l+0x810>
 800f876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f878:	b1db      	cbz	r3, 800f8b2 <_strtod_l+0x93a>
 800f87a:	423b      	tst	r3, r7
 800f87c:	d0ef      	beq.n	800f85e <_strtod_l+0x8e6>
 800f87e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f880:	9a04      	ldr	r2, [sp, #16]
 800f882:	4650      	mov	r0, sl
 800f884:	4659      	mov	r1, fp
 800f886:	b1c3      	cbz	r3, 800f8ba <_strtod_l+0x942>
 800f888:	f7ff fb57 	bl	800ef3a <sulp>
 800f88c:	4602      	mov	r2, r0
 800f88e:	460b      	mov	r3, r1
 800f890:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f894:	f7f0 fd02 	bl	800029c <__adddf3>
 800f898:	4682      	mov	sl, r0
 800f89a:	468b      	mov	fp, r1
 800f89c:	e7df      	b.n	800f85e <_strtod_l+0x8e6>
 800f89e:	4013      	ands	r3, r2
 800f8a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f8a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f8a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f8ac:	f04f 3aff 	mov.w	sl, #4294967295
 800f8b0:	e7d5      	b.n	800f85e <_strtod_l+0x8e6>
 800f8b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f8b4:	ea13 0f0a 	tst.w	r3, sl
 800f8b8:	e7e0      	b.n	800f87c <_strtod_l+0x904>
 800f8ba:	f7ff fb3e 	bl	800ef3a <sulp>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f8c6:	f7f0 fce7 	bl	8000298 <__aeabi_dsub>
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	4682      	mov	sl, r0
 800f8d0:	468b      	mov	fp, r1
 800f8d2:	f7f1 f901 	bl	8000ad8 <__aeabi_dcmpeq>
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d0c1      	beq.n	800f85e <_strtod_l+0x8e6>
 800f8da:	e60e      	b.n	800f4fa <_strtod_l+0x582>
 800f8dc:	fffffc02 	.word	0xfffffc02
 800f8e0:	7ff00000 	.word	0x7ff00000
 800f8e4:	39500000 	.word	0x39500000
 800f8e8:	000fffff 	.word	0x000fffff
 800f8ec:	7fefffff 	.word	0x7fefffff
 800f8f0:	08013618 	.word	0x08013618
 800f8f4:	4631      	mov	r1, r6
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	f002 f860 	bl	80119bc <__ratio>
 800f8fc:	ec59 8b10 	vmov	r8, r9, d0
 800f900:	ee10 0a10 	vmov	r0, s0
 800f904:	2200      	movs	r2, #0
 800f906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f90a:	4649      	mov	r1, r9
 800f90c:	f7f1 f8f8 	bl	8000b00 <__aeabi_dcmple>
 800f910:	2800      	cmp	r0, #0
 800f912:	d07c      	beq.n	800fa0e <_strtod_l+0xa96>
 800f914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f916:	2b00      	cmp	r3, #0
 800f918:	d04c      	beq.n	800f9b4 <_strtod_l+0xa3c>
 800f91a:	4b95      	ldr	r3, [pc, #596]	; (800fb70 <_strtod_l+0xbf8>)
 800f91c:	2200      	movs	r2, #0
 800f91e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f922:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fb70 <_strtod_l+0xbf8>
 800f926:	f04f 0800 	mov.w	r8, #0
 800f92a:	4b92      	ldr	r3, [pc, #584]	; (800fb74 <_strtod_l+0xbfc>)
 800f92c:	403b      	ands	r3, r7
 800f92e:	9311      	str	r3, [sp, #68]	; 0x44
 800f930:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f932:	4b91      	ldr	r3, [pc, #580]	; (800fb78 <_strtod_l+0xc00>)
 800f934:	429a      	cmp	r2, r3
 800f936:	f040 80b2 	bne.w	800fa9e <_strtod_l+0xb26>
 800f93a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f93e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f942:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f946:	ec4b ab10 	vmov	d0, sl, fp
 800f94a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800f94e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f952:	f001 ff5b 	bl	801180c <__ulp>
 800f956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f95a:	ec53 2b10 	vmov	r2, r3, d0
 800f95e:	f7f0 fe53 	bl	8000608 <__aeabi_dmul>
 800f962:	4652      	mov	r2, sl
 800f964:	465b      	mov	r3, fp
 800f966:	f7f0 fc99 	bl	800029c <__adddf3>
 800f96a:	460b      	mov	r3, r1
 800f96c:	4981      	ldr	r1, [pc, #516]	; (800fb74 <_strtod_l+0xbfc>)
 800f96e:	4a83      	ldr	r2, [pc, #524]	; (800fb7c <_strtod_l+0xc04>)
 800f970:	4019      	ands	r1, r3
 800f972:	4291      	cmp	r1, r2
 800f974:	4682      	mov	sl, r0
 800f976:	d95e      	bls.n	800fa36 <_strtod_l+0xabe>
 800f978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f97a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f97e:	4293      	cmp	r3, r2
 800f980:	d103      	bne.n	800f98a <_strtod_l+0xa12>
 800f982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f984:	3301      	adds	r3, #1
 800f986:	f43f ad43 	beq.w	800f410 <_strtod_l+0x498>
 800f98a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800fb88 <_strtod_l+0xc10>
 800f98e:	f04f 3aff 	mov.w	sl, #4294967295
 800f992:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f994:	4620      	mov	r0, r4
 800f996:	f001 fc0d 	bl	80111b4 <_Bfree>
 800f99a:	9907      	ldr	r1, [sp, #28]
 800f99c:	4620      	mov	r0, r4
 800f99e:	f001 fc09 	bl	80111b4 <_Bfree>
 800f9a2:	4631      	mov	r1, r6
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	f001 fc05 	bl	80111b4 <_Bfree>
 800f9aa:	4629      	mov	r1, r5
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	f001 fc01 	bl	80111b4 <_Bfree>
 800f9b2:	e613      	b.n	800f5dc <_strtod_l+0x664>
 800f9b4:	f1ba 0f00 	cmp.w	sl, #0
 800f9b8:	d11b      	bne.n	800f9f2 <_strtod_l+0xa7a>
 800f9ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f9be:	b9f3      	cbnz	r3, 800f9fe <_strtod_l+0xa86>
 800f9c0:	4b6b      	ldr	r3, [pc, #428]	; (800fb70 <_strtod_l+0xbf8>)
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	4640      	mov	r0, r8
 800f9c6:	4649      	mov	r1, r9
 800f9c8:	f7f1 f890 	bl	8000aec <__aeabi_dcmplt>
 800f9cc:	b9d0      	cbnz	r0, 800fa04 <_strtod_l+0xa8c>
 800f9ce:	4640      	mov	r0, r8
 800f9d0:	4649      	mov	r1, r9
 800f9d2:	4b6b      	ldr	r3, [pc, #428]	; (800fb80 <_strtod_l+0xc08>)
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	f7f0 fe17 	bl	8000608 <__aeabi_dmul>
 800f9da:	4680      	mov	r8, r0
 800f9dc:	4689      	mov	r9, r1
 800f9de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f9e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800f9e6:	931b      	str	r3, [sp, #108]	; 0x6c
 800f9e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800f9ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f9f0:	e79b      	b.n	800f92a <_strtod_l+0x9b2>
 800f9f2:	f1ba 0f01 	cmp.w	sl, #1
 800f9f6:	d102      	bne.n	800f9fe <_strtod_l+0xa86>
 800f9f8:	2f00      	cmp	r7, #0
 800f9fa:	f43f ad7e 	beq.w	800f4fa <_strtod_l+0x582>
 800f9fe:	4b61      	ldr	r3, [pc, #388]	; (800fb84 <_strtod_l+0xc0c>)
 800fa00:	2200      	movs	r2, #0
 800fa02:	e78c      	b.n	800f91e <_strtod_l+0x9a6>
 800fa04:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800fb80 <_strtod_l+0xc08>
 800fa08:	f04f 0800 	mov.w	r8, #0
 800fa0c:	e7e7      	b.n	800f9de <_strtod_l+0xa66>
 800fa0e:	4b5c      	ldr	r3, [pc, #368]	; (800fb80 <_strtod_l+0xc08>)
 800fa10:	4640      	mov	r0, r8
 800fa12:	4649      	mov	r1, r9
 800fa14:	2200      	movs	r2, #0
 800fa16:	f7f0 fdf7 	bl	8000608 <__aeabi_dmul>
 800fa1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa1c:	4680      	mov	r8, r0
 800fa1e:	4689      	mov	r9, r1
 800fa20:	b933      	cbnz	r3, 800fa30 <_strtod_l+0xab8>
 800fa22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa26:	9012      	str	r0, [sp, #72]	; 0x48
 800fa28:	9313      	str	r3, [sp, #76]	; 0x4c
 800fa2a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800fa2e:	e7dd      	b.n	800f9ec <_strtod_l+0xa74>
 800fa30:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800fa34:	e7f9      	b.n	800fa2a <_strtod_l+0xab2>
 800fa36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fa3a:	9b04      	ldr	r3, [sp, #16]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d1a8      	bne.n	800f992 <_strtod_l+0xa1a>
 800fa40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fa44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fa46:	0d1b      	lsrs	r3, r3, #20
 800fa48:	051b      	lsls	r3, r3, #20
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d1a1      	bne.n	800f992 <_strtod_l+0xa1a>
 800fa4e:	4640      	mov	r0, r8
 800fa50:	4649      	mov	r1, r9
 800fa52:	f7f1 f989 	bl	8000d68 <__aeabi_d2lz>
 800fa56:	f7f0 fda9 	bl	80005ac <__aeabi_l2d>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	4640      	mov	r0, r8
 800fa60:	4649      	mov	r1, r9
 800fa62:	f7f0 fc19 	bl	8000298 <__aeabi_dsub>
 800fa66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa6c:	ea43 030a 	orr.w	r3, r3, sl
 800fa70:	4313      	orrs	r3, r2
 800fa72:	4680      	mov	r8, r0
 800fa74:	4689      	mov	r9, r1
 800fa76:	d053      	beq.n	800fb20 <_strtod_l+0xba8>
 800fa78:	a335      	add	r3, pc, #212	; (adr r3, 800fb50 <_strtod_l+0xbd8>)
 800fa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa7e:	f7f1 f835 	bl	8000aec <__aeabi_dcmplt>
 800fa82:	2800      	cmp	r0, #0
 800fa84:	f47f acce 	bne.w	800f424 <_strtod_l+0x4ac>
 800fa88:	a333      	add	r3, pc, #204	; (adr r3, 800fb58 <_strtod_l+0xbe0>)
 800fa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8e:	4640      	mov	r0, r8
 800fa90:	4649      	mov	r1, r9
 800fa92:	f7f1 f849 	bl	8000b28 <__aeabi_dcmpgt>
 800fa96:	2800      	cmp	r0, #0
 800fa98:	f43f af7b 	beq.w	800f992 <_strtod_l+0xa1a>
 800fa9c:	e4c2      	b.n	800f424 <_strtod_l+0x4ac>
 800fa9e:	9b04      	ldr	r3, [sp, #16]
 800faa0:	b333      	cbz	r3, 800faf0 <_strtod_l+0xb78>
 800faa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800faa4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800faa8:	d822      	bhi.n	800faf0 <_strtod_l+0xb78>
 800faaa:	a32d      	add	r3, pc, #180	; (adr r3, 800fb60 <_strtod_l+0xbe8>)
 800faac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab0:	4640      	mov	r0, r8
 800fab2:	4649      	mov	r1, r9
 800fab4:	f7f1 f824 	bl	8000b00 <__aeabi_dcmple>
 800fab8:	b1a0      	cbz	r0, 800fae4 <_strtod_l+0xb6c>
 800faba:	4649      	mov	r1, r9
 800fabc:	4640      	mov	r0, r8
 800fabe:	f7f1 f87b 	bl	8000bb8 <__aeabi_d2uiz>
 800fac2:	2801      	cmp	r0, #1
 800fac4:	bf38      	it	cc
 800fac6:	2001      	movcc	r0, #1
 800fac8:	f7f0 fd24 	bl	8000514 <__aeabi_ui2d>
 800facc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800face:	4680      	mov	r8, r0
 800fad0:	4689      	mov	r9, r1
 800fad2:	bb13      	cbnz	r3, 800fb1a <_strtod_l+0xba2>
 800fad4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fad8:	9014      	str	r0, [sp, #80]	; 0x50
 800fada:	9315      	str	r3, [sp, #84]	; 0x54
 800fadc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fae0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fae6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fae8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800faec:	1a9b      	subs	r3, r3, r2
 800faee:	930d      	str	r3, [sp, #52]	; 0x34
 800faf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800faf4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800faf8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fafc:	f001 fe86 	bl	801180c <__ulp>
 800fb00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fb04:	ec53 2b10 	vmov	r2, r3, d0
 800fb08:	f7f0 fd7e 	bl	8000608 <__aeabi_dmul>
 800fb0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fb10:	f7f0 fbc4 	bl	800029c <__adddf3>
 800fb14:	4682      	mov	sl, r0
 800fb16:	468b      	mov	fp, r1
 800fb18:	e78f      	b.n	800fa3a <_strtod_l+0xac2>
 800fb1a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800fb1e:	e7dd      	b.n	800fadc <_strtod_l+0xb64>
 800fb20:	a311      	add	r3, pc, #68	; (adr r3, 800fb68 <_strtod_l+0xbf0>)
 800fb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb26:	f7f0 ffe1 	bl	8000aec <__aeabi_dcmplt>
 800fb2a:	e7b4      	b.n	800fa96 <_strtod_l+0xb1e>
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	930e      	str	r3, [sp, #56]	; 0x38
 800fb30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fb32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb34:	6013      	str	r3, [r2, #0]
 800fb36:	f7ff ba65 	b.w	800f004 <_strtod_l+0x8c>
 800fb3a:	2b65      	cmp	r3, #101	; 0x65
 800fb3c:	f43f ab5d 	beq.w	800f1fa <_strtod_l+0x282>
 800fb40:	2b45      	cmp	r3, #69	; 0x45
 800fb42:	f43f ab5a 	beq.w	800f1fa <_strtod_l+0x282>
 800fb46:	2201      	movs	r2, #1
 800fb48:	f7ff bb92 	b.w	800f270 <_strtod_l+0x2f8>
 800fb4c:	f3af 8000 	nop.w
 800fb50:	94a03595 	.word	0x94a03595
 800fb54:	3fdfffff 	.word	0x3fdfffff
 800fb58:	35afe535 	.word	0x35afe535
 800fb5c:	3fe00000 	.word	0x3fe00000
 800fb60:	ffc00000 	.word	0xffc00000
 800fb64:	41dfffff 	.word	0x41dfffff
 800fb68:	94a03595 	.word	0x94a03595
 800fb6c:	3fcfffff 	.word	0x3fcfffff
 800fb70:	3ff00000 	.word	0x3ff00000
 800fb74:	7ff00000 	.word	0x7ff00000
 800fb78:	7fe00000 	.word	0x7fe00000
 800fb7c:	7c9fffff 	.word	0x7c9fffff
 800fb80:	3fe00000 	.word	0x3fe00000
 800fb84:	bff00000 	.word	0xbff00000
 800fb88:	7fefffff 	.word	0x7fefffff

0800fb8c <_strtod_r>:
 800fb8c:	4b01      	ldr	r3, [pc, #4]	; (800fb94 <_strtod_r+0x8>)
 800fb8e:	f7ff b9f3 	b.w	800ef78 <_strtod_l>
 800fb92:	bf00      	nop
 800fb94:	200000c8 	.word	0x200000c8

0800fb98 <_strtol_l.isra.0>:
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb9e:	d001      	beq.n	800fba4 <_strtol_l.isra.0+0xc>
 800fba0:	2b24      	cmp	r3, #36	; 0x24
 800fba2:	d906      	bls.n	800fbb2 <_strtol_l.isra.0+0x1a>
 800fba4:	f7fe fa46 	bl	800e034 <__errno>
 800fba8:	2316      	movs	r3, #22
 800fbaa:	6003      	str	r3, [r0, #0]
 800fbac:	2000      	movs	r0, #0
 800fbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbb2:	4f3a      	ldr	r7, [pc, #232]	; (800fc9c <_strtol_l.isra.0+0x104>)
 800fbb4:	468e      	mov	lr, r1
 800fbb6:	4676      	mov	r6, lr
 800fbb8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800fbbc:	5de5      	ldrb	r5, [r4, r7]
 800fbbe:	f015 0508 	ands.w	r5, r5, #8
 800fbc2:	d1f8      	bne.n	800fbb6 <_strtol_l.isra.0+0x1e>
 800fbc4:	2c2d      	cmp	r4, #45	; 0x2d
 800fbc6:	d134      	bne.n	800fc32 <_strtol_l.isra.0+0x9a>
 800fbc8:	f89e 4000 	ldrb.w	r4, [lr]
 800fbcc:	f04f 0801 	mov.w	r8, #1
 800fbd0:	f106 0e02 	add.w	lr, r6, #2
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d05c      	beq.n	800fc92 <_strtol_l.isra.0+0xfa>
 800fbd8:	2b10      	cmp	r3, #16
 800fbda:	d10c      	bne.n	800fbf6 <_strtol_l.isra.0+0x5e>
 800fbdc:	2c30      	cmp	r4, #48	; 0x30
 800fbde:	d10a      	bne.n	800fbf6 <_strtol_l.isra.0+0x5e>
 800fbe0:	f89e 4000 	ldrb.w	r4, [lr]
 800fbe4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fbe8:	2c58      	cmp	r4, #88	; 0x58
 800fbea:	d14d      	bne.n	800fc88 <_strtol_l.isra.0+0xf0>
 800fbec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800fbf0:	2310      	movs	r3, #16
 800fbf2:	f10e 0e02 	add.w	lr, lr, #2
 800fbf6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800fbfa:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fbfe:	2600      	movs	r6, #0
 800fc00:	fbbc f9f3 	udiv	r9, ip, r3
 800fc04:	4635      	mov	r5, r6
 800fc06:	fb03 ca19 	mls	sl, r3, r9, ip
 800fc0a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800fc0e:	2f09      	cmp	r7, #9
 800fc10:	d818      	bhi.n	800fc44 <_strtol_l.isra.0+0xac>
 800fc12:	463c      	mov	r4, r7
 800fc14:	42a3      	cmp	r3, r4
 800fc16:	dd24      	ble.n	800fc62 <_strtol_l.isra.0+0xca>
 800fc18:	2e00      	cmp	r6, #0
 800fc1a:	db1f      	blt.n	800fc5c <_strtol_l.isra.0+0xc4>
 800fc1c:	45a9      	cmp	r9, r5
 800fc1e:	d31d      	bcc.n	800fc5c <_strtol_l.isra.0+0xc4>
 800fc20:	d101      	bne.n	800fc26 <_strtol_l.isra.0+0x8e>
 800fc22:	45a2      	cmp	sl, r4
 800fc24:	db1a      	blt.n	800fc5c <_strtol_l.isra.0+0xc4>
 800fc26:	fb05 4503 	mla	r5, r5, r3, r4
 800fc2a:	2601      	movs	r6, #1
 800fc2c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800fc30:	e7eb      	b.n	800fc0a <_strtol_l.isra.0+0x72>
 800fc32:	2c2b      	cmp	r4, #43	; 0x2b
 800fc34:	bf08      	it	eq
 800fc36:	f89e 4000 	ldrbeq.w	r4, [lr]
 800fc3a:	46a8      	mov	r8, r5
 800fc3c:	bf08      	it	eq
 800fc3e:	f106 0e02 	addeq.w	lr, r6, #2
 800fc42:	e7c7      	b.n	800fbd4 <_strtol_l.isra.0+0x3c>
 800fc44:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800fc48:	2f19      	cmp	r7, #25
 800fc4a:	d801      	bhi.n	800fc50 <_strtol_l.isra.0+0xb8>
 800fc4c:	3c37      	subs	r4, #55	; 0x37
 800fc4e:	e7e1      	b.n	800fc14 <_strtol_l.isra.0+0x7c>
 800fc50:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800fc54:	2f19      	cmp	r7, #25
 800fc56:	d804      	bhi.n	800fc62 <_strtol_l.isra.0+0xca>
 800fc58:	3c57      	subs	r4, #87	; 0x57
 800fc5a:	e7db      	b.n	800fc14 <_strtol_l.isra.0+0x7c>
 800fc5c:	f04f 36ff 	mov.w	r6, #4294967295
 800fc60:	e7e4      	b.n	800fc2c <_strtol_l.isra.0+0x94>
 800fc62:	2e00      	cmp	r6, #0
 800fc64:	da05      	bge.n	800fc72 <_strtol_l.isra.0+0xda>
 800fc66:	2322      	movs	r3, #34	; 0x22
 800fc68:	6003      	str	r3, [r0, #0]
 800fc6a:	4665      	mov	r5, ip
 800fc6c:	b942      	cbnz	r2, 800fc80 <_strtol_l.isra.0+0xe8>
 800fc6e:	4628      	mov	r0, r5
 800fc70:	e79d      	b.n	800fbae <_strtol_l.isra.0+0x16>
 800fc72:	f1b8 0f00 	cmp.w	r8, #0
 800fc76:	d000      	beq.n	800fc7a <_strtol_l.isra.0+0xe2>
 800fc78:	426d      	negs	r5, r5
 800fc7a:	2a00      	cmp	r2, #0
 800fc7c:	d0f7      	beq.n	800fc6e <_strtol_l.isra.0+0xd6>
 800fc7e:	b10e      	cbz	r6, 800fc84 <_strtol_l.isra.0+0xec>
 800fc80:	f10e 31ff 	add.w	r1, lr, #4294967295
 800fc84:	6011      	str	r1, [r2, #0]
 800fc86:	e7f2      	b.n	800fc6e <_strtol_l.isra.0+0xd6>
 800fc88:	2430      	movs	r4, #48	; 0x30
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d1b3      	bne.n	800fbf6 <_strtol_l.isra.0+0x5e>
 800fc8e:	2308      	movs	r3, #8
 800fc90:	e7b1      	b.n	800fbf6 <_strtol_l.isra.0+0x5e>
 800fc92:	2c30      	cmp	r4, #48	; 0x30
 800fc94:	d0a4      	beq.n	800fbe0 <_strtol_l.isra.0+0x48>
 800fc96:	230a      	movs	r3, #10
 800fc98:	e7ad      	b.n	800fbf6 <_strtol_l.isra.0+0x5e>
 800fc9a:	bf00      	nop
 800fc9c:	08013641 	.word	0x08013641

0800fca0 <_strtol_r>:
 800fca0:	f7ff bf7a 	b.w	800fb98 <_strtol_l.isra.0>

0800fca4 <_write_r>:
 800fca4:	b538      	push	{r3, r4, r5, lr}
 800fca6:	4d07      	ldr	r5, [pc, #28]	; (800fcc4 <_write_r+0x20>)
 800fca8:	4604      	mov	r4, r0
 800fcaa:	4608      	mov	r0, r1
 800fcac:	4611      	mov	r1, r2
 800fcae:	2200      	movs	r2, #0
 800fcb0:	602a      	str	r2, [r5, #0]
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	f7f5 fcc3 	bl	800563e <_write>
 800fcb8:	1c43      	adds	r3, r0, #1
 800fcba:	d102      	bne.n	800fcc2 <_write_r+0x1e>
 800fcbc:	682b      	ldr	r3, [r5, #0]
 800fcbe:	b103      	cbz	r3, 800fcc2 <_write_r+0x1e>
 800fcc0:	6023      	str	r3, [r4, #0]
 800fcc2:	bd38      	pop	{r3, r4, r5, pc}
 800fcc4:	20000a4c 	.word	0x20000a4c

0800fcc8 <_close_r>:
 800fcc8:	b538      	push	{r3, r4, r5, lr}
 800fcca:	4d06      	ldr	r5, [pc, #24]	; (800fce4 <_close_r+0x1c>)
 800fccc:	2300      	movs	r3, #0
 800fcce:	4604      	mov	r4, r0
 800fcd0:	4608      	mov	r0, r1
 800fcd2:	602b      	str	r3, [r5, #0]
 800fcd4:	f7f5 fccf 	bl	8005676 <_close>
 800fcd8:	1c43      	adds	r3, r0, #1
 800fcda:	d102      	bne.n	800fce2 <_close_r+0x1a>
 800fcdc:	682b      	ldr	r3, [r5, #0]
 800fcde:	b103      	cbz	r3, 800fce2 <_close_r+0x1a>
 800fce0:	6023      	str	r3, [r4, #0]
 800fce2:	bd38      	pop	{r3, r4, r5, pc}
 800fce4:	20000a4c 	.word	0x20000a4c

0800fce8 <quorem>:
 800fce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcec:	6903      	ldr	r3, [r0, #16]
 800fcee:	690c      	ldr	r4, [r1, #16]
 800fcf0:	42a3      	cmp	r3, r4
 800fcf2:	4607      	mov	r7, r0
 800fcf4:	f2c0 8081 	blt.w	800fdfa <quorem+0x112>
 800fcf8:	3c01      	subs	r4, #1
 800fcfa:	f101 0814 	add.w	r8, r1, #20
 800fcfe:	f100 0514 	add.w	r5, r0, #20
 800fd02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd06:	9301      	str	r3, [sp, #4]
 800fd08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd10:	3301      	adds	r3, #1
 800fd12:	429a      	cmp	r2, r3
 800fd14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fd18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd1c:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd20:	d331      	bcc.n	800fd86 <quorem+0x9e>
 800fd22:	f04f 0e00 	mov.w	lr, #0
 800fd26:	4640      	mov	r0, r8
 800fd28:	46ac      	mov	ip, r5
 800fd2a:	46f2      	mov	sl, lr
 800fd2c:	f850 2b04 	ldr.w	r2, [r0], #4
 800fd30:	b293      	uxth	r3, r2
 800fd32:	fb06 e303 	mla	r3, r6, r3, lr
 800fd36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fd3a:	b29b      	uxth	r3, r3
 800fd3c:	ebaa 0303 	sub.w	r3, sl, r3
 800fd40:	0c12      	lsrs	r2, r2, #16
 800fd42:	f8dc a000 	ldr.w	sl, [ip]
 800fd46:	fb06 e202 	mla	r2, r6, r2, lr
 800fd4a:	fa13 f38a 	uxtah	r3, r3, sl
 800fd4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fd52:	fa1f fa82 	uxth.w	sl, r2
 800fd56:	f8dc 2000 	ldr.w	r2, [ip]
 800fd5a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fd5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd68:	4581      	cmp	r9, r0
 800fd6a:	f84c 3b04 	str.w	r3, [ip], #4
 800fd6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fd72:	d2db      	bcs.n	800fd2c <quorem+0x44>
 800fd74:	f855 300b 	ldr.w	r3, [r5, fp]
 800fd78:	b92b      	cbnz	r3, 800fd86 <quorem+0x9e>
 800fd7a:	9b01      	ldr	r3, [sp, #4]
 800fd7c:	3b04      	subs	r3, #4
 800fd7e:	429d      	cmp	r5, r3
 800fd80:	461a      	mov	r2, r3
 800fd82:	d32e      	bcc.n	800fde2 <quorem+0xfa>
 800fd84:	613c      	str	r4, [r7, #16]
 800fd86:	4638      	mov	r0, r7
 800fd88:	f001 fc9c 	bl	80116c4 <__mcmp>
 800fd8c:	2800      	cmp	r0, #0
 800fd8e:	db24      	blt.n	800fdda <quorem+0xf2>
 800fd90:	3601      	adds	r6, #1
 800fd92:	4628      	mov	r0, r5
 800fd94:	f04f 0c00 	mov.w	ip, #0
 800fd98:	f858 2b04 	ldr.w	r2, [r8], #4
 800fd9c:	f8d0 e000 	ldr.w	lr, [r0]
 800fda0:	b293      	uxth	r3, r2
 800fda2:	ebac 0303 	sub.w	r3, ip, r3
 800fda6:	0c12      	lsrs	r2, r2, #16
 800fda8:	fa13 f38e 	uxtah	r3, r3, lr
 800fdac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fdb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdba:	45c1      	cmp	r9, r8
 800fdbc:	f840 3b04 	str.w	r3, [r0], #4
 800fdc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fdc4:	d2e8      	bcs.n	800fd98 <quorem+0xb0>
 800fdc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdce:	b922      	cbnz	r2, 800fdda <quorem+0xf2>
 800fdd0:	3b04      	subs	r3, #4
 800fdd2:	429d      	cmp	r5, r3
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	d30a      	bcc.n	800fdee <quorem+0x106>
 800fdd8:	613c      	str	r4, [r7, #16]
 800fdda:	4630      	mov	r0, r6
 800fddc:	b003      	add	sp, #12
 800fdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde2:	6812      	ldr	r2, [r2, #0]
 800fde4:	3b04      	subs	r3, #4
 800fde6:	2a00      	cmp	r2, #0
 800fde8:	d1cc      	bne.n	800fd84 <quorem+0x9c>
 800fdea:	3c01      	subs	r4, #1
 800fdec:	e7c7      	b.n	800fd7e <quorem+0x96>
 800fdee:	6812      	ldr	r2, [r2, #0]
 800fdf0:	3b04      	subs	r3, #4
 800fdf2:	2a00      	cmp	r2, #0
 800fdf4:	d1f0      	bne.n	800fdd8 <quorem+0xf0>
 800fdf6:	3c01      	subs	r4, #1
 800fdf8:	e7eb      	b.n	800fdd2 <quorem+0xea>
 800fdfa:	2000      	movs	r0, #0
 800fdfc:	e7ee      	b.n	800fddc <quorem+0xf4>
	...

0800fe00 <_dtoa_r>:
 800fe00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe04:	ed2d 8b02 	vpush	{d8}
 800fe08:	ec57 6b10 	vmov	r6, r7, d0
 800fe0c:	b095      	sub	sp, #84	; 0x54
 800fe0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fe10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fe14:	9105      	str	r1, [sp, #20]
 800fe16:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800fe1a:	4604      	mov	r4, r0
 800fe1c:	9209      	str	r2, [sp, #36]	; 0x24
 800fe1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe20:	b975      	cbnz	r5, 800fe40 <_dtoa_r+0x40>
 800fe22:	2010      	movs	r0, #16
 800fe24:	f001 f95e 	bl	80110e4 <malloc>
 800fe28:	4602      	mov	r2, r0
 800fe2a:	6260      	str	r0, [r4, #36]	; 0x24
 800fe2c:	b920      	cbnz	r0, 800fe38 <_dtoa_r+0x38>
 800fe2e:	4bb2      	ldr	r3, [pc, #712]	; (80100f8 <_dtoa_r+0x2f8>)
 800fe30:	21ea      	movs	r1, #234	; 0xea
 800fe32:	48b2      	ldr	r0, [pc, #712]	; (80100fc <_dtoa_r+0x2fc>)
 800fe34:	f002 fc8e 	bl	8012754 <__assert_func>
 800fe38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fe3c:	6005      	str	r5, [r0, #0]
 800fe3e:	60c5      	str	r5, [r0, #12]
 800fe40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe42:	6819      	ldr	r1, [r3, #0]
 800fe44:	b151      	cbz	r1, 800fe5c <_dtoa_r+0x5c>
 800fe46:	685a      	ldr	r2, [r3, #4]
 800fe48:	604a      	str	r2, [r1, #4]
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	4093      	lsls	r3, r2
 800fe4e:	608b      	str	r3, [r1, #8]
 800fe50:	4620      	mov	r0, r4
 800fe52:	f001 f9af 	bl	80111b4 <_Bfree>
 800fe56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe58:	2200      	movs	r2, #0
 800fe5a:	601a      	str	r2, [r3, #0]
 800fe5c:	1e3b      	subs	r3, r7, #0
 800fe5e:	bfb9      	ittee	lt
 800fe60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fe64:	9303      	strlt	r3, [sp, #12]
 800fe66:	2300      	movge	r3, #0
 800fe68:	f8c8 3000 	strge.w	r3, [r8]
 800fe6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fe70:	4ba3      	ldr	r3, [pc, #652]	; (8010100 <_dtoa_r+0x300>)
 800fe72:	bfbc      	itt	lt
 800fe74:	2201      	movlt	r2, #1
 800fe76:	f8c8 2000 	strlt.w	r2, [r8]
 800fe7a:	ea33 0309 	bics.w	r3, r3, r9
 800fe7e:	d11b      	bne.n	800feb8 <_dtoa_r+0xb8>
 800fe80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe82:	f242 730f 	movw	r3, #9999	; 0x270f
 800fe86:	6013      	str	r3, [r2, #0]
 800fe88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fe8c:	4333      	orrs	r3, r6
 800fe8e:	f000 857a 	beq.w	8010986 <_dtoa_r+0xb86>
 800fe92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe94:	b963      	cbnz	r3, 800feb0 <_dtoa_r+0xb0>
 800fe96:	4b9b      	ldr	r3, [pc, #620]	; (8010104 <_dtoa_r+0x304>)
 800fe98:	e024      	b.n	800fee4 <_dtoa_r+0xe4>
 800fe9a:	4b9b      	ldr	r3, [pc, #620]	; (8010108 <_dtoa_r+0x308>)
 800fe9c:	9300      	str	r3, [sp, #0]
 800fe9e:	3308      	adds	r3, #8
 800fea0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fea2:	6013      	str	r3, [r2, #0]
 800fea4:	9800      	ldr	r0, [sp, #0]
 800fea6:	b015      	add	sp, #84	; 0x54
 800fea8:	ecbd 8b02 	vpop	{d8}
 800feac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb0:	4b94      	ldr	r3, [pc, #592]	; (8010104 <_dtoa_r+0x304>)
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	3303      	adds	r3, #3
 800feb6:	e7f3      	b.n	800fea0 <_dtoa_r+0xa0>
 800feb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800febc:	2200      	movs	r2, #0
 800febe:	ec51 0b17 	vmov	r0, r1, d7
 800fec2:	2300      	movs	r3, #0
 800fec4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fec8:	f7f0 fe06 	bl	8000ad8 <__aeabi_dcmpeq>
 800fecc:	4680      	mov	r8, r0
 800fece:	b158      	cbz	r0, 800fee8 <_dtoa_r+0xe8>
 800fed0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fed2:	2301      	movs	r3, #1
 800fed4:	6013      	str	r3, [r2, #0]
 800fed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fed8:	2b00      	cmp	r3, #0
 800feda:	f000 8551 	beq.w	8010980 <_dtoa_r+0xb80>
 800fede:	488b      	ldr	r0, [pc, #556]	; (801010c <_dtoa_r+0x30c>)
 800fee0:	6018      	str	r0, [r3, #0]
 800fee2:	1e43      	subs	r3, r0, #1
 800fee4:	9300      	str	r3, [sp, #0]
 800fee6:	e7dd      	b.n	800fea4 <_dtoa_r+0xa4>
 800fee8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800feec:	aa12      	add	r2, sp, #72	; 0x48
 800feee:	a913      	add	r1, sp, #76	; 0x4c
 800fef0:	4620      	mov	r0, r4
 800fef2:	f001 fd07 	bl	8011904 <__d2b>
 800fef6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fefa:	4683      	mov	fp, r0
 800fefc:	2d00      	cmp	r5, #0
 800fefe:	d07c      	beq.n	800fffa <_dtoa_r+0x1fa>
 800ff00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ff06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ff0e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ff12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ff16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ff1a:	4b7d      	ldr	r3, [pc, #500]	; (8010110 <_dtoa_r+0x310>)
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	4630      	mov	r0, r6
 800ff20:	4639      	mov	r1, r7
 800ff22:	f7f0 f9b9 	bl	8000298 <__aeabi_dsub>
 800ff26:	a36e      	add	r3, pc, #440	; (adr r3, 80100e0 <_dtoa_r+0x2e0>)
 800ff28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff2c:	f7f0 fb6c 	bl	8000608 <__aeabi_dmul>
 800ff30:	a36d      	add	r3, pc, #436	; (adr r3, 80100e8 <_dtoa_r+0x2e8>)
 800ff32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff36:	f7f0 f9b1 	bl	800029c <__adddf3>
 800ff3a:	4606      	mov	r6, r0
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	460f      	mov	r7, r1
 800ff40:	f7f0 faf8 	bl	8000534 <__aeabi_i2d>
 800ff44:	a36a      	add	r3, pc, #424	; (adr r3, 80100f0 <_dtoa_r+0x2f0>)
 800ff46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4a:	f7f0 fb5d 	bl	8000608 <__aeabi_dmul>
 800ff4e:	4602      	mov	r2, r0
 800ff50:	460b      	mov	r3, r1
 800ff52:	4630      	mov	r0, r6
 800ff54:	4639      	mov	r1, r7
 800ff56:	f7f0 f9a1 	bl	800029c <__adddf3>
 800ff5a:	4606      	mov	r6, r0
 800ff5c:	460f      	mov	r7, r1
 800ff5e:	f7f0 fe03 	bl	8000b68 <__aeabi_d2iz>
 800ff62:	2200      	movs	r2, #0
 800ff64:	4682      	mov	sl, r0
 800ff66:	2300      	movs	r3, #0
 800ff68:	4630      	mov	r0, r6
 800ff6a:	4639      	mov	r1, r7
 800ff6c:	f7f0 fdbe 	bl	8000aec <__aeabi_dcmplt>
 800ff70:	b148      	cbz	r0, 800ff86 <_dtoa_r+0x186>
 800ff72:	4650      	mov	r0, sl
 800ff74:	f7f0 fade 	bl	8000534 <__aeabi_i2d>
 800ff78:	4632      	mov	r2, r6
 800ff7a:	463b      	mov	r3, r7
 800ff7c:	f7f0 fdac 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff80:	b908      	cbnz	r0, 800ff86 <_dtoa_r+0x186>
 800ff82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff86:	f1ba 0f16 	cmp.w	sl, #22
 800ff8a:	d854      	bhi.n	8010036 <_dtoa_r+0x236>
 800ff8c:	4b61      	ldr	r3, [pc, #388]	; (8010114 <_dtoa_r+0x314>)
 800ff8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ff92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ff9a:	f7f0 fda7 	bl	8000aec <__aeabi_dcmplt>
 800ff9e:	2800      	cmp	r0, #0
 800ffa0:	d04b      	beq.n	801003a <_dtoa_r+0x23a>
 800ffa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	930e      	str	r3, [sp, #56]	; 0x38
 800ffaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ffac:	1b5d      	subs	r5, r3, r5
 800ffae:	1e6b      	subs	r3, r5, #1
 800ffb0:	9304      	str	r3, [sp, #16]
 800ffb2:	bf43      	ittte	mi
 800ffb4:	2300      	movmi	r3, #0
 800ffb6:	f1c5 0801 	rsbmi	r8, r5, #1
 800ffba:	9304      	strmi	r3, [sp, #16]
 800ffbc:	f04f 0800 	movpl.w	r8, #0
 800ffc0:	f1ba 0f00 	cmp.w	sl, #0
 800ffc4:	db3b      	blt.n	801003e <_dtoa_r+0x23e>
 800ffc6:	9b04      	ldr	r3, [sp, #16]
 800ffc8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ffcc:	4453      	add	r3, sl
 800ffce:	9304      	str	r3, [sp, #16]
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	9306      	str	r3, [sp, #24]
 800ffd4:	9b05      	ldr	r3, [sp, #20]
 800ffd6:	2b09      	cmp	r3, #9
 800ffd8:	d869      	bhi.n	80100ae <_dtoa_r+0x2ae>
 800ffda:	2b05      	cmp	r3, #5
 800ffdc:	bfc4      	itt	gt
 800ffde:	3b04      	subgt	r3, #4
 800ffe0:	9305      	strgt	r3, [sp, #20]
 800ffe2:	9b05      	ldr	r3, [sp, #20]
 800ffe4:	f1a3 0302 	sub.w	r3, r3, #2
 800ffe8:	bfcc      	ite	gt
 800ffea:	2500      	movgt	r5, #0
 800ffec:	2501      	movle	r5, #1
 800ffee:	2b03      	cmp	r3, #3
 800fff0:	d869      	bhi.n	80100c6 <_dtoa_r+0x2c6>
 800fff2:	e8df f003 	tbb	[pc, r3]
 800fff6:	4e2c      	.short	0x4e2c
 800fff8:	5a4c      	.short	0x5a4c
 800fffa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800fffe:	441d      	add	r5, r3
 8010000:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010004:	2b20      	cmp	r3, #32
 8010006:	bfc1      	itttt	gt
 8010008:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801000c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010010:	fa09 f303 	lslgt.w	r3, r9, r3
 8010014:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010018:	bfda      	itte	le
 801001a:	f1c3 0320 	rsble	r3, r3, #32
 801001e:	fa06 f003 	lslle.w	r0, r6, r3
 8010022:	4318      	orrgt	r0, r3
 8010024:	f7f0 fa76 	bl	8000514 <__aeabi_ui2d>
 8010028:	2301      	movs	r3, #1
 801002a:	4606      	mov	r6, r0
 801002c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010030:	3d01      	subs	r5, #1
 8010032:	9310      	str	r3, [sp, #64]	; 0x40
 8010034:	e771      	b.n	800ff1a <_dtoa_r+0x11a>
 8010036:	2301      	movs	r3, #1
 8010038:	e7b6      	b.n	800ffa8 <_dtoa_r+0x1a8>
 801003a:	900e      	str	r0, [sp, #56]	; 0x38
 801003c:	e7b5      	b.n	800ffaa <_dtoa_r+0x1aa>
 801003e:	f1ca 0300 	rsb	r3, sl, #0
 8010042:	9306      	str	r3, [sp, #24]
 8010044:	2300      	movs	r3, #0
 8010046:	eba8 080a 	sub.w	r8, r8, sl
 801004a:	930d      	str	r3, [sp, #52]	; 0x34
 801004c:	e7c2      	b.n	800ffd4 <_dtoa_r+0x1d4>
 801004e:	2300      	movs	r3, #0
 8010050:	9308      	str	r3, [sp, #32]
 8010052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010054:	2b00      	cmp	r3, #0
 8010056:	dc39      	bgt.n	80100cc <_dtoa_r+0x2cc>
 8010058:	f04f 0901 	mov.w	r9, #1
 801005c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010060:	464b      	mov	r3, r9
 8010062:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010066:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010068:	2200      	movs	r2, #0
 801006a:	6042      	str	r2, [r0, #4]
 801006c:	2204      	movs	r2, #4
 801006e:	f102 0614 	add.w	r6, r2, #20
 8010072:	429e      	cmp	r6, r3
 8010074:	6841      	ldr	r1, [r0, #4]
 8010076:	d92f      	bls.n	80100d8 <_dtoa_r+0x2d8>
 8010078:	4620      	mov	r0, r4
 801007a:	f001 f85b 	bl	8011134 <_Balloc>
 801007e:	9000      	str	r0, [sp, #0]
 8010080:	2800      	cmp	r0, #0
 8010082:	d14b      	bne.n	801011c <_dtoa_r+0x31c>
 8010084:	4b24      	ldr	r3, [pc, #144]	; (8010118 <_dtoa_r+0x318>)
 8010086:	4602      	mov	r2, r0
 8010088:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801008c:	e6d1      	b.n	800fe32 <_dtoa_r+0x32>
 801008e:	2301      	movs	r3, #1
 8010090:	e7de      	b.n	8010050 <_dtoa_r+0x250>
 8010092:	2300      	movs	r3, #0
 8010094:	9308      	str	r3, [sp, #32]
 8010096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010098:	eb0a 0903 	add.w	r9, sl, r3
 801009c:	f109 0301 	add.w	r3, r9, #1
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	9301      	str	r3, [sp, #4]
 80100a4:	bfb8      	it	lt
 80100a6:	2301      	movlt	r3, #1
 80100a8:	e7dd      	b.n	8010066 <_dtoa_r+0x266>
 80100aa:	2301      	movs	r3, #1
 80100ac:	e7f2      	b.n	8010094 <_dtoa_r+0x294>
 80100ae:	2501      	movs	r5, #1
 80100b0:	2300      	movs	r3, #0
 80100b2:	9305      	str	r3, [sp, #20]
 80100b4:	9508      	str	r5, [sp, #32]
 80100b6:	f04f 39ff 	mov.w	r9, #4294967295
 80100ba:	2200      	movs	r2, #0
 80100bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80100c0:	2312      	movs	r3, #18
 80100c2:	9209      	str	r2, [sp, #36]	; 0x24
 80100c4:	e7cf      	b.n	8010066 <_dtoa_r+0x266>
 80100c6:	2301      	movs	r3, #1
 80100c8:	9308      	str	r3, [sp, #32]
 80100ca:	e7f4      	b.n	80100b6 <_dtoa_r+0x2b6>
 80100cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80100d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80100d4:	464b      	mov	r3, r9
 80100d6:	e7c6      	b.n	8010066 <_dtoa_r+0x266>
 80100d8:	3101      	adds	r1, #1
 80100da:	6041      	str	r1, [r0, #4]
 80100dc:	0052      	lsls	r2, r2, #1
 80100de:	e7c6      	b.n	801006e <_dtoa_r+0x26e>
 80100e0:	636f4361 	.word	0x636f4361
 80100e4:	3fd287a7 	.word	0x3fd287a7
 80100e8:	8b60c8b3 	.word	0x8b60c8b3
 80100ec:	3fc68a28 	.word	0x3fc68a28
 80100f0:	509f79fb 	.word	0x509f79fb
 80100f4:	3fd34413 	.word	0x3fd34413
 80100f8:	0801374e 	.word	0x0801374e
 80100fc:	08013765 	.word	0x08013765
 8010100:	7ff00000 	.word	0x7ff00000
 8010104:	0801374a 	.word	0x0801374a
 8010108:	08013741 	.word	0x08013741
 801010c:	080139ca 	.word	0x080139ca
 8010110:	3ff80000 	.word	0x3ff80000
 8010114:	080138e0 	.word	0x080138e0
 8010118:	080137c4 	.word	0x080137c4
 801011c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801011e:	9a00      	ldr	r2, [sp, #0]
 8010120:	601a      	str	r2, [r3, #0]
 8010122:	9b01      	ldr	r3, [sp, #4]
 8010124:	2b0e      	cmp	r3, #14
 8010126:	f200 80ad 	bhi.w	8010284 <_dtoa_r+0x484>
 801012a:	2d00      	cmp	r5, #0
 801012c:	f000 80aa 	beq.w	8010284 <_dtoa_r+0x484>
 8010130:	f1ba 0f00 	cmp.w	sl, #0
 8010134:	dd36      	ble.n	80101a4 <_dtoa_r+0x3a4>
 8010136:	4ac3      	ldr	r2, [pc, #780]	; (8010444 <_dtoa_r+0x644>)
 8010138:	f00a 030f 	and.w	r3, sl, #15
 801013c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010140:	ed93 7b00 	vldr	d7, [r3]
 8010144:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010148:	ea4f 172a 	mov.w	r7, sl, asr #4
 801014c:	eeb0 8a47 	vmov.f32	s16, s14
 8010150:	eef0 8a67 	vmov.f32	s17, s15
 8010154:	d016      	beq.n	8010184 <_dtoa_r+0x384>
 8010156:	4bbc      	ldr	r3, [pc, #752]	; (8010448 <_dtoa_r+0x648>)
 8010158:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801015c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010160:	f7f0 fb7c 	bl	800085c <__aeabi_ddiv>
 8010164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010168:	f007 070f 	and.w	r7, r7, #15
 801016c:	2503      	movs	r5, #3
 801016e:	4eb6      	ldr	r6, [pc, #728]	; (8010448 <_dtoa_r+0x648>)
 8010170:	b957      	cbnz	r7, 8010188 <_dtoa_r+0x388>
 8010172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010176:	ec53 2b18 	vmov	r2, r3, d8
 801017a:	f7f0 fb6f 	bl	800085c <__aeabi_ddiv>
 801017e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010182:	e029      	b.n	80101d8 <_dtoa_r+0x3d8>
 8010184:	2502      	movs	r5, #2
 8010186:	e7f2      	b.n	801016e <_dtoa_r+0x36e>
 8010188:	07f9      	lsls	r1, r7, #31
 801018a:	d508      	bpl.n	801019e <_dtoa_r+0x39e>
 801018c:	ec51 0b18 	vmov	r0, r1, d8
 8010190:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010194:	f7f0 fa38 	bl	8000608 <__aeabi_dmul>
 8010198:	ec41 0b18 	vmov	d8, r0, r1
 801019c:	3501      	adds	r5, #1
 801019e:	107f      	asrs	r7, r7, #1
 80101a0:	3608      	adds	r6, #8
 80101a2:	e7e5      	b.n	8010170 <_dtoa_r+0x370>
 80101a4:	f000 80a6 	beq.w	80102f4 <_dtoa_r+0x4f4>
 80101a8:	f1ca 0600 	rsb	r6, sl, #0
 80101ac:	4ba5      	ldr	r3, [pc, #660]	; (8010444 <_dtoa_r+0x644>)
 80101ae:	4fa6      	ldr	r7, [pc, #664]	; (8010448 <_dtoa_r+0x648>)
 80101b0:	f006 020f 	and.w	r2, r6, #15
 80101b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80101c0:	f7f0 fa22 	bl	8000608 <__aeabi_dmul>
 80101c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101c8:	1136      	asrs	r6, r6, #4
 80101ca:	2300      	movs	r3, #0
 80101cc:	2502      	movs	r5, #2
 80101ce:	2e00      	cmp	r6, #0
 80101d0:	f040 8085 	bne.w	80102de <_dtoa_r+0x4de>
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d1d2      	bne.n	801017e <_dtoa_r+0x37e>
 80101d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f000 808c 	beq.w	80102f8 <_dtoa_r+0x4f8>
 80101e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80101e4:	4b99      	ldr	r3, [pc, #612]	; (801044c <_dtoa_r+0x64c>)
 80101e6:	2200      	movs	r2, #0
 80101e8:	4630      	mov	r0, r6
 80101ea:	4639      	mov	r1, r7
 80101ec:	f7f0 fc7e 	bl	8000aec <__aeabi_dcmplt>
 80101f0:	2800      	cmp	r0, #0
 80101f2:	f000 8081 	beq.w	80102f8 <_dtoa_r+0x4f8>
 80101f6:	9b01      	ldr	r3, [sp, #4]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d07d      	beq.n	80102f8 <_dtoa_r+0x4f8>
 80101fc:	f1b9 0f00 	cmp.w	r9, #0
 8010200:	dd3c      	ble.n	801027c <_dtoa_r+0x47c>
 8010202:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010206:	9307      	str	r3, [sp, #28]
 8010208:	2200      	movs	r2, #0
 801020a:	4b91      	ldr	r3, [pc, #580]	; (8010450 <_dtoa_r+0x650>)
 801020c:	4630      	mov	r0, r6
 801020e:	4639      	mov	r1, r7
 8010210:	f7f0 f9fa 	bl	8000608 <__aeabi_dmul>
 8010214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010218:	3501      	adds	r5, #1
 801021a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801021e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010222:	4628      	mov	r0, r5
 8010224:	f7f0 f986 	bl	8000534 <__aeabi_i2d>
 8010228:	4632      	mov	r2, r6
 801022a:	463b      	mov	r3, r7
 801022c:	f7f0 f9ec 	bl	8000608 <__aeabi_dmul>
 8010230:	4b88      	ldr	r3, [pc, #544]	; (8010454 <_dtoa_r+0x654>)
 8010232:	2200      	movs	r2, #0
 8010234:	f7f0 f832 	bl	800029c <__adddf3>
 8010238:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801023c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010240:	9303      	str	r3, [sp, #12]
 8010242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010244:	2b00      	cmp	r3, #0
 8010246:	d15c      	bne.n	8010302 <_dtoa_r+0x502>
 8010248:	4b83      	ldr	r3, [pc, #524]	; (8010458 <_dtoa_r+0x658>)
 801024a:	2200      	movs	r2, #0
 801024c:	4630      	mov	r0, r6
 801024e:	4639      	mov	r1, r7
 8010250:	f7f0 f822 	bl	8000298 <__aeabi_dsub>
 8010254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010258:	4606      	mov	r6, r0
 801025a:	460f      	mov	r7, r1
 801025c:	f7f0 fc64 	bl	8000b28 <__aeabi_dcmpgt>
 8010260:	2800      	cmp	r0, #0
 8010262:	f040 8296 	bne.w	8010792 <_dtoa_r+0x992>
 8010266:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801026a:	4630      	mov	r0, r6
 801026c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010270:	4639      	mov	r1, r7
 8010272:	f7f0 fc3b 	bl	8000aec <__aeabi_dcmplt>
 8010276:	2800      	cmp	r0, #0
 8010278:	f040 8288 	bne.w	801078c <_dtoa_r+0x98c>
 801027c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010280:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010284:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010286:	2b00      	cmp	r3, #0
 8010288:	f2c0 8158 	blt.w	801053c <_dtoa_r+0x73c>
 801028c:	f1ba 0f0e 	cmp.w	sl, #14
 8010290:	f300 8154 	bgt.w	801053c <_dtoa_r+0x73c>
 8010294:	4b6b      	ldr	r3, [pc, #428]	; (8010444 <_dtoa_r+0x644>)
 8010296:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801029a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801029e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f280 80e3 	bge.w	801046c <_dtoa_r+0x66c>
 80102a6:	9b01      	ldr	r3, [sp, #4]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f300 80df 	bgt.w	801046c <_dtoa_r+0x66c>
 80102ae:	f040 826d 	bne.w	801078c <_dtoa_r+0x98c>
 80102b2:	4b69      	ldr	r3, [pc, #420]	; (8010458 <_dtoa_r+0x658>)
 80102b4:	2200      	movs	r2, #0
 80102b6:	4640      	mov	r0, r8
 80102b8:	4649      	mov	r1, r9
 80102ba:	f7f0 f9a5 	bl	8000608 <__aeabi_dmul>
 80102be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102c2:	f7f0 fc27 	bl	8000b14 <__aeabi_dcmpge>
 80102c6:	9e01      	ldr	r6, [sp, #4]
 80102c8:	4637      	mov	r7, r6
 80102ca:	2800      	cmp	r0, #0
 80102cc:	f040 8243 	bne.w	8010756 <_dtoa_r+0x956>
 80102d0:	9d00      	ldr	r5, [sp, #0]
 80102d2:	2331      	movs	r3, #49	; 0x31
 80102d4:	f805 3b01 	strb.w	r3, [r5], #1
 80102d8:	f10a 0a01 	add.w	sl, sl, #1
 80102dc:	e23f      	b.n	801075e <_dtoa_r+0x95e>
 80102de:	07f2      	lsls	r2, r6, #31
 80102e0:	d505      	bpl.n	80102ee <_dtoa_r+0x4ee>
 80102e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102e6:	f7f0 f98f 	bl	8000608 <__aeabi_dmul>
 80102ea:	3501      	adds	r5, #1
 80102ec:	2301      	movs	r3, #1
 80102ee:	1076      	asrs	r6, r6, #1
 80102f0:	3708      	adds	r7, #8
 80102f2:	e76c      	b.n	80101ce <_dtoa_r+0x3ce>
 80102f4:	2502      	movs	r5, #2
 80102f6:	e76f      	b.n	80101d8 <_dtoa_r+0x3d8>
 80102f8:	9b01      	ldr	r3, [sp, #4]
 80102fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80102fe:	930c      	str	r3, [sp, #48]	; 0x30
 8010300:	e78d      	b.n	801021e <_dtoa_r+0x41e>
 8010302:	9900      	ldr	r1, [sp, #0]
 8010304:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010308:	4b4e      	ldr	r3, [pc, #312]	; (8010444 <_dtoa_r+0x644>)
 801030a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801030e:	4401      	add	r1, r0
 8010310:	9102      	str	r1, [sp, #8]
 8010312:	9908      	ldr	r1, [sp, #32]
 8010314:	eeb0 8a47 	vmov.f32	s16, s14
 8010318:	eef0 8a67 	vmov.f32	s17, s15
 801031c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010320:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010324:	2900      	cmp	r1, #0
 8010326:	d045      	beq.n	80103b4 <_dtoa_r+0x5b4>
 8010328:	494c      	ldr	r1, [pc, #304]	; (801045c <_dtoa_r+0x65c>)
 801032a:	2000      	movs	r0, #0
 801032c:	f7f0 fa96 	bl	800085c <__aeabi_ddiv>
 8010330:	ec53 2b18 	vmov	r2, r3, d8
 8010334:	f7ef ffb0 	bl	8000298 <__aeabi_dsub>
 8010338:	9d00      	ldr	r5, [sp, #0]
 801033a:	ec41 0b18 	vmov	d8, r0, r1
 801033e:	4639      	mov	r1, r7
 8010340:	4630      	mov	r0, r6
 8010342:	f7f0 fc11 	bl	8000b68 <__aeabi_d2iz>
 8010346:	900c      	str	r0, [sp, #48]	; 0x30
 8010348:	f7f0 f8f4 	bl	8000534 <__aeabi_i2d>
 801034c:	4602      	mov	r2, r0
 801034e:	460b      	mov	r3, r1
 8010350:	4630      	mov	r0, r6
 8010352:	4639      	mov	r1, r7
 8010354:	f7ef ffa0 	bl	8000298 <__aeabi_dsub>
 8010358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801035a:	3330      	adds	r3, #48	; 0x30
 801035c:	f805 3b01 	strb.w	r3, [r5], #1
 8010360:	ec53 2b18 	vmov	r2, r3, d8
 8010364:	4606      	mov	r6, r0
 8010366:	460f      	mov	r7, r1
 8010368:	f7f0 fbc0 	bl	8000aec <__aeabi_dcmplt>
 801036c:	2800      	cmp	r0, #0
 801036e:	d165      	bne.n	801043c <_dtoa_r+0x63c>
 8010370:	4632      	mov	r2, r6
 8010372:	463b      	mov	r3, r7
 8010374:	4935      	ldr	r1, [pc, #212]	; (801044c <_dtoa_r+0x64c>)
 8010376:	2000      	movs	r0, #0
 8010378:	f7ef ff8e 	bl	8000298 <__aeabi_dsub>
 801037c:	ec53 2b18 	vmov	r2, r3, d8
 8010380:	f7f0 fbb4 	bl	8000aec <__aeabi_dcmplt>
 8010384:	2800      	cmp	r0, #0
 8010386:	f040 80b9 	bne.w	80104fc <_dtoa_r+0x6fc>
 801038a:	9b02      	ldr	r3, [sp, #8]
 801038c:	429d      	cmp	r5, r3
 801038e:	f43f af75 	beq.w	801027c <_dtoa_r+0x47c>
 8010392:	4b2f      	ldr	r3, [pc, #188]	; (8010450 <_dtoa_r+0x650>)
 8010394:	ec51 0b18 	vmov	r0, r1, d8
 8010398:	2200      	movs	r2, #0
 801039a:	f7f0 f935 	bl	8000608 <__aeabi_dmul>
 801039e:	4b2c      	ldr	r3, [pc, #176]	; (8010450 <_dtoa_r+0x650>)
 80103a0:	ec41 0b18 	vmov	d8, r0, r1
 80103a4:	2200      	movs	r2, #0
 80103a6:	4630      	mov	r0, r6
 80103a8:	4639      	mov	r1, r7
 80103aa:	f7f0 f92d 	bl	8000608 <__aeabi_dmul>
 80103ae:	4606      	mov	r6, r0
 80103b0:	460f      	mov	r7, r1
 80103b2:	e7c4      	b.n	801033e <_dtoa_r+0x53e>
 80103b4:	ec51 0b17 	vmov	r0, r1, d7
 80103b8:	f7f0 f926 	bl	8000608 <__aeabi_dmul>
 80103bc:	9b02      	ldr	r3, [sp, #8]
 80103be:	9d00      	ldr	r5, [sp, #0]
 80103c0:	930c      	str	r3, [sp, #48]	; 0x30
 80103c2:	ec41 0b18 	vmov	d8, r0, r1
 80103c6:	4639      	mov	r1, r7
 80103c8:	4630      	mov	r0, r6
 80103ca:	f7f0 fbcd 	bl	8000b68 <__aeabi_d2iz>
 80103ce:	9011      	str	r0, [sp, #68]	; 0x44
 80103d0:	f7f0 f8b0 	bl	8000534 <__aeabi_i2d>
 80103d4:	4602      	mov	r2, r0
 80103d6:	460b      	mov	r3, r1
 80103d8:	4630      	mov	r0, r6
 80103da:	4639      	mov	r1, r7
 80103dc:	f7ef ff5c 	bl	8000298 <__aeabi_dsub>
 80103e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80103e2:	3330      	adds	r3, #48	; 0x30
 80103e4:	f805 3b01 	strb.w	r3, [r5], #1
 80103e8:	9b02      	ldr	r3, [sp, #8]
 80103ea:	429d      	cmp	r5, r3
 80103ec:	4606      	mov	r6, r0
 80103ee:	460f      	mov	r7, r1
 80103f0:	f04f 0200 	mov.w	r2, #0
 80103f4:	d134      	bne.n	8010460 <_dtoa_r+0x660>
 80103f6:	4b19      	ldr	r3, [pc, #100]	; (801045c <_dtoa_r+0x65c>)
 80103f8:	ec51 0b18 	vmov	r0, r1, d8
 80103fc:	f7ef ff4e 	bl	800029c <__adddf3>
 8010400:	4602      	mov	r2, r0
 8010402:	460b      	mov	r3, r1
 8010404:	4630      	mov	r0, r6
 8010406:	4639      	mov	r1, r7
 8010408:	f7f0 fb8e 	bl	8000b28 <__aeabi_dcmpgt>
 801040c:	2800      	cmp	r0, #0
 801040e:	d175      	bne.n	80104fc <_dtoa_r+0x6fc>
 8010410:	ec53 2b18 	vmov	r2, r3, d8
 8010414:	4911      	ldr	r1, [pc, #68]	; (801045c <_dtoa_r+0x65c>)
 8010416:	2000      	movs	r0, #0
 8010418:	f7ef ff3e 	bl	8000298 <__aeabi_dsub>
 801041c:	4602      	mov	r2, r0
 801041e:	460b      	mov	r3, r1
 8010420:	4630      	mov	r0, r6
 8010422:	4639      	mov	r1, r7
 8010424:	f7f0 fb62 	bl	8000aec <__aeabi_dcmplt>
 8010428:	2800      	cmp	r0, #0
 801042a:	f43f af27 	beq.w	801027c <_dtoa_r+0x47c>
 801042e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010430:	1e6b      	subs	r3, r5, #1
 8010432:	930c      	str	r3, [sp, #48]	; 0x30
 8010434:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010438:	2b30      	cmp	r3, #48	; 0x30
 801043a:	d0f8      	beq.n	801042e <_dtoa_r+0x62e>
 801043c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010440:	e04a      	b.n	80104d8 <_dtoa_r+0x6d8>
 8010442:	bf00      	nop
 8010444:	080138e0 	.word	0x080138e0
 8010448:	080138b8 	.word	0x080138b8
 801044c:	3ff00000 	.word	0x3ff00000
 8010450:	40240000 	.word	0x40240000
 8010454:	401c0000 	.word	0x401c0000
 8010458:	40140000 	.word	0x40140000
 801045c:	3fe00000 	.word	0x3fe00000
 8010460:	4baf      	ldr	r3, [pc, #700]	; (8010720 <_dtoa_r+0x920>)
 8010462:	f7f0 f8d1 	bl	8000608 <__aeabi_dmul>
 8010466:	4606      	mov	r6, r0
 8010468:	460f      	mov	r7, r1
 801046a:	e7ac      	b.n	80103c6 <_dtoa_r+0x5c6>
 801046c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010470:	9d00      	ldr	r5, [sp, #0]
 8010472:	4642      	mov	r2, r8
 8010474:	464b      	mov	r3, r9
 8010476:	4630      	mov	r0, r6
 8010478:	4639      	mov	r1, r7
 801047a:	f7f0 f9ef 	bl	800085c <__aeabi_ddiv>
 801047e:	f7f0 fb73 	bl	8000b68 <__aeabi_d2iz>
 8010482:	9002      	str	r0, [sp, #8]
 8010484:	f7f0 f856 	bl	8000534 <__aeabi_i2d>
 8010488:	4642      	mov	r2, r8
 801048a:	464b      	mov	r3, r9
 801048c:	f7f0 f8bc 	bl	8000608 <__aeabi_dmul>
 8010490:	4602      	mov	r2, r0
 8010492:	460b      	mov	r3, r1
 8010494:	4630      	mov	r0, r6
 8010496:	4639      	mov	r1, r7
 8010498:	f7ef fefe 	bl	8000298 <__aeabi_dsub>
 801049c:	9e02      	ldr	r6, [sp, #8]
 801049e:	9f01      	ldr	r7, [sp, #4]
 80104a0:	3630      	adds	r6, #48	; 0x30
 80104a2:	f805 6b01 	strb.w	r6, [r5], #1
 80104a6:	9e00      	ldr	r6, [sp, #0]
 80104a8:	1bae      	subs	r6, r5, r6
 80104aa:	42b7      	cmp	r7, r6
 80104ac:	4602      	mov	r2, r0
 80104ae:	460b      	mov	r3, r1
 80104b0:	d137      	bne.n	8010522 <_dtoa_r+0x722>
 80104b2:	f7ef fef3 	bl	800029c <__adddf3>
 80104b6:	4642      	mov	r2, r8
 80104b8:	464b      	mov	r3, r9
 80104ba:	4606      	mov	r6, r0
 80104bc:	460f      	mov	r7, r1
 80104be:	f7f0 fb33 	bl	8000b28 <__aeabi_dcmpgt>
 80104c2:	b9c8      	cbnz	r0, 80104f8 <_dtoa_r+0x6f8>
 80104c4:	4642      	mov	r2, r8
 80104c6:	464b      	mov	r3, r9
 80104c8:	4630      	mov	r0, r6
 80104ca:	4639      	mov	r1, r7
 80104cc:	f7f0 fb04 	bl	8000ad8 <__aeabi_dcmpeq>
 80104d0:	b110      	cbz	r0, 80104d8 <_dtoa_r+0x6d8>
 80104d2:	9b02      	ldr	r3, [sp, #8]
 80104d4:	07d9      	lsls	r1, r3, #31
 80104d6:	d40f      	bmi.n	80104f8 <_dtoa_r+0x6f8>
 80104d8:	4620      	mov	r0, r4
 80104da:	4659      	mov	r1, fp
 80104dc:	f000 fe6a 	bl	80111b4 <_Bfree>
 80104e0:	2300      	movs	r3, #0
 80104e2:	702b      	strb	r3, [r5, #0]
 80104e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104e6:	f10a 0001 	add.w	r0, sl, #1
 80104ea:	6018      	str	r0, [r3, #0]
 80104ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	f43f acd8 	beq.w	800fea4 <_dtoa_r+0xa4>
 80104f4:	601d      	str	r5, [r3, #0]
 80104f6:	e4d5      	b.n	800fea4 <_dtoa_r+0xa4>
 80104f8:	f8cd a01c 	str.w	sl, [sp, #28]
 80104fc:	462b      	mov	r3, r5
 80104fe:	461d      	mov	r5, r3
 8010500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010504:	2a39      	cmp	r2, #57	; 0x39
 8010506:	d108      	bne.n	801051a <_dtoa_r+0x71a>
 8010508:	9a00      	ldr	r2, [sp, #0]
 801050a:	429a      	cmp	r2, r3
 801050c:	d1f7      	bne.n	80104fe <_dtoa_r+0x6fe>
 801050e:	9a07      	ldr	r2, [sp, #28]
 8010510:	9900      	ldr	r1, [sp, #0]
 8010512:	3201      	adds	r2, #1
 8010514:	9207      	str	r2, [sp, #28]
 8010516:	2230      	movs	r2, #48	; 0x30
 8010518:	700a      	strb	r2, [r1, #0]
 801051a:	781a      	ldrb	r2, [r3, #0]
 801051c:	3201      	adds	r2, #1
 801051e:	701a      	strb	r2, [r3, #0]
 8010520:	e78c      	b.n	801043c <_dtoa_r+0x63c>
 8010522:	4b7f      	ldr	r3, [pc, #508]	; (8010720 <_dtoa_r+0x920>)
 8010524:	2200      	movs	r2, #0
 8010526:	f7f0 f86f 	bl	8000608 <__aeabi_dmul>
 801052a:	2200      	movs	r2, #0
 801052c:	2300      	movs	r3, #0
 801052e:	4606      	mov	r6, r0
 8010530:	460f      	mov	r7, r1
 8010532:	f7f0 fad1 	bl	8000ad8 <__aeabi_dcmpeq>
 8010536:	2800      	cmp	r0, #0
 8010538:	d09b      	beq.n	8010472 <_dtoa_r+0x672>
 801053a:	e7cd      	b.n	80104d8 <_dtoa_r+0x6d8>
 801053c:	9a08      	ldr	r2, [sp, #32]
 801053e:	2a00      	cmp	r2, #0
 8010540:	f000 80c4 	beq.w	80106cc <_dtoa_r+0x8cc>
 8010544:	9a05      	ldr	r2, [sp, #20]
 8010546:	2a01      	cmp	r2, #1
 8010548:	f300 80a8 	bgt.w	801069c <_dtoa_r+0x89c>
 801054c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801054e:	2a00      	cmp	r2, #0
 8010550:	f000 80a0 	beq.w	8010694 <_dtoa_r+0x894>
 8010554:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010558:	9e06      	ldr	r6, [sp, #24]
 801055a:	4645      	mov	r5, r8
 801055c:	9a04      	ldr	r2, [sp, #16]
 801055e:	2101      	movs	r1, #1
 8010560:	441a      	add	r2, r3
 8010562:	4620      	mov	r0, r4
 8010564:	4498      	add	r8, r3
 8010566:	9204      	str	r2, [sp, #16]
 8010568:	f000 ff2a 	bl	80113c0 <__i2b>
 801056c:	4607      	mov	r7, r0
 801056e:	2d00      	cmp	r5, #0
 8010570:	dd0b      	ble.n	801058a <_dtoa_r+0x78a>
 8010572:	9b04      	ldr	r3, [sp, #16]
 8010574:	2b00      	cmp	r3, #0
 8010576:	dd08      	ble.n	801058a <_dtoa_r+0x78a>
 8010578:	42ab      	cmp	r3, r5
 801057a:	9a04      	ldr	r2, [sp, #16]
 801057c:	bfa8      	it	ge
 801057e:	462b      	movge	r3, r5
 8010580:	eba8 0803 	sub.w	r8, r8, r3
 8010584:	1aed      	subs	r5, r5, r3
 8010586:	1ad3      	subs	r3, r2, r3
 8010588:	9304      	str	r3, [sp, #16]
 801058a:	9b06      	ldr	r3, [sp, #24]
 801058c:	b1fb      	cbz	r3, 80105ce <_dtoa_r+0x7ce>
 801058e:	9b08      	ldr	r3, [sp, #32]
 8010590:	2b00      	cmp	r3, #0
 8010592:	f000 809f 	beq.w	80106d4 <_dtoa_r+0x8d4>
 8010596:	2e00      	cmp	r6, #0
 8010598:	dd11      	ble.n	80105be <_dtoa_r+0x7be>
 801059a:	4639      	mov	r1, r7
 801059c:	4632      	mov	r2, r6
 801059e:	4620      	mov	r0, r4
 80105a0:	f000 ffca 	bl	8011538 <__pow5mult>
 80105a4:	465a      	mov	r2, fp
 80105a6:	4601      	mov	r1, r0
 80105a8:	4607      	mov	r7, r0
 80105aa:	4620      	mov	r0, r4
 80105ac:	f000 ff1e 	bl	80113ec <__multiply>
 80105b0:	4659      	mov	r1, fp
 80105b2:	9007      	str	r0, [sp, #28]
 80105b4:	4620      	mov	r0, r4
 80105b6:	f000 fdfd 	bl	80111b4 <_Bfree>
 80105ba:	9b07      	ldr	r3, [sp, #28]
 80105bc:	469b      	mov	fp, r3
 80105be:	9b06      	ldr	r3, [sp, #24]
 80105c0:	1b9a      	subs	r2, r3, r6
 80105c2:	d004      	beq.n	80105ce <_dtoa_r+0x7ce>
 80105c4:	4659      	mov	r1, fp
 80105c6:	4620      	mov	r0, r4
 80105c8:	f000 ffb6 	bl	8011538 <__pow5mult>
 80105cc:	4683      	mov	fp, r0
 80105ce:	2101      	movs	r1, #1
 80105d0:	4620      	mov	r0, r4
 80105d2:	f000 fef5 	bl	80113c0 <__i2b>
 80105d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80105d8:	2b00      	cmp	r3, #0
 80105da:	4606      	mov	r6, r0
 80105dc:	dd7c      	ble.n	80106d8 <_dtoa_r+0x8d8>
 80105de:	461a      	mov	r2, r3
 80105e0:	4601      	mov	r1, r0
 80105e2:	4620      	mov	r0, r4
 80105e4:	f000 ffa8 	bl	8011538 <__pow5mult>
 80105e8:	9b05      	ldr	r3, [sp, #20]
 80105ea:	2b01      	cmp	r3, #1
 80105ec:	4606      	mov	r6, r0
 80105ee:	dd76      	ble.n	80106de <_dtoa_r+0x8de>
 80105f0:	2300      	movs	r3, #0
 80105f2:	9306      	str	r3, [sp, #24]
 80105f4:	6933      	ldr	r3, [r6, #16]
 80105f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80105fa:	6918      	ldr	r0, [r3, #16]
 80105fc:	f000 fe90 	bl	8011320 <__hi0bits>
 8010600:	f1c0 0020 	rsb	r0, r0, #32
 8010604:	9b04      	ldr	r3, [sp, #16]
 8010606:	4418      	add	r0, r3
 8010608:	f010 001f 	ands.w	r0, r0, #31
 801060c:	f000 8086 	beq.w	801071c <_dtoa_r+0x91c>
 8010610:	f1c0 0320 	rsb	r3, r0, #32
 8010614:	2b04      	cmp	r3, #4
 8010616:	dd7f      	ble.n	8010718 <_dtoa_r+0x918>
 8010618:	f1c0 001c 	rsb	r0, r0, #28
 801061c:	9b04      	ldr	r3, [sp, #16]
 801061e:	4403      	add	r3, r0
 8010620:	4480      	add	r8, r0
 8010622:	4405      	add	r5, r0
 8010624:	9304      	str	r3, [sp, #16]
 8010626:	f1b8 0f00 	cmp.w	r8, #0
 801062a:	dd05      	ble.n	8010638 <_dtoa_r+0x838>
 801062c:	4659      	mov	r1, fp
 801062e:	4642      	mov	r2, r8
 8010630:	4620      	mov	r0, r4
 8010632:	f000 ffdb 	bl	80115ec <__lshift>
 8010636:	4683      	mov	fp, r0
 8010638:	9b04      	ldr	r3, [sp, #16]
 801063a:	2b00      	cmp	r3, #0
 801063c:	dd05      	ble.n	801064a <_dtoa_r+0x84a>
 801063e:	4631      	mov	r1, r6
 8010640:	461a      	mov	r2, r3
 8010642:	4620      	mov	r0, r4
 8010644:	f000 ffd2 	bl	80115ec <__lshift>
 8010648:	4606      	mov	r6, r0
 801064a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801064c:	2b00      	cmp	r3, #0
 801064e:	d069      	beq.n	8010724 <_dtoa_r+0x924>
 8010650:	4631      	mov	r1, r6
 8010652:	4658      	mov	r0, fp
 8010654:	f001 f836 	bl	80116c4 <__mcmp>
 8010658:	2800      	cmp	r0, #0
 801065a:	da63      	bge.n	8010724 <_dtoa_r+0x924>
 801065c:	2300      	movs	r3, #0
 801065e:	4659      	mov	r1, fp
 8010660:	220a      	movs	r2, #10
 8010662:	4620      	mov	r0, r4
 8010664:	f000 fdc8 	bl	80111f8 <__multadd>
 8010668:	9b08      	ldr	r3, [sp, #32]
 801066a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801066e:	4683      	mov	fp, r0
 8010670:	2b00      	cmp	r3, #0
 8010672:	f000 818f 	beq.w	8010994 <_dtoa_r+0xb94>
 8010676:	4639      	mov	r1, r7
 8010678:	2300      	movs	r3, #0
 801067a:	220a      	movs	r2, #10
 801067c:	4620      	mov	r0, r4
 801067e:	f000 fdbb 	bl	80111f8 <__multadd>
 8010682:	f1b9 0f00 	cmp.w	r9, #0
 8010686:	4607      	mov	r7, r0
 8010688:	f300 808e 	bgt.w	80107a8 <_dtoa_r+0x9a8>
 801068c:	9b05      	ldr	r3, [sp, #20]
 801068e:	2b02      	cmp	r3, #2
 8010690:	dc50      	bgt.n	8010734 <_dtoa_r+0x934>
 8010692:	e089      	b.n	80107a8 <_dtoa_r+0x9a8>
 8010694:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010696:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801069a:	e75d      	b.n	8010558 <_dtoa_r+0x758>
 801069c:	9b01      	ldr	r3, [sp, #4]
 801069e:	1e5e      	subs	r6, r3, #1
 80106a0:	9b06      	ldr	r3, [sp, #24]
 80106a2:	42b3      	cmp	r3, r6
 80106a4:	bfbf      	itttt	lt
 80106a6:	9b06      	ldrlt	r3, [sp, #24]
 80106a8:	9606      	strlt	r6, [sp, #24]
 80106aa:	1af2      	sublt	r2, r6, r3
 80106ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80106ae:	bfb6      	itet	lt
 80106b0:	189b      	addlt	r3, r3, r2
 80106b2:	1b9e      	subge	r6, r3, r6
 80106b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80106b6:	9b01      	ldr	r3, [sp, #4]
 80106b8:	bfb8      	it	lt
 80106ba:	2600      	movlt	r6, #0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	bfb5      	itete	lt
 80106c0:	eba8 0503 	sublt.w	r5, r8, r3
 80106c4:	9b01      	ldrge	r3, [sp, #4]
 80106c6:	2300      	movlt	r3, #0
 80106c8:	4645      	movge	r5, r8
 80106ca:	e747      	b.n	801055c <_dtoa_r+0x75c>
 80106cc:	9e06      	ldr	r6, [sp, #24]
 80106ce:	9f08      	ldr	r7, [sp, #32]
 80106d0:	4645      	mov	r5, r8
 80106d2:	e74c      	b.n	801056e <_dtoa_r+0x76e>
 80106d4:	9a06      	ldr	r2, [sp, #24]
 80106d6:	e775      	b.n	80105c4 <_dtoa_r+0x7c4>
 80106d8:	9b05      	ldr	r3, [sp, #20]
 80106da:	2b01      	cmp	r3, #1
 80106dc:	dc18      	bgt.n	8010710 <_dtoa_r+0x910>
 80106de:	9b02      	ldr	r3, [sp, #8]
 80106e0:	b9b3      	cbnz	r3, 8010710 <_dtoa_r+0x910>
 80106e2:	9b03      	ldr	r3, [sp, #12]
 80106e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106e8:	b9a3      	cbnz	r3, 8010714 <_dtoa_r+0x914>
 80106ea:	9b03      	ldr	r3, [sp, #12]
 80106ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80106f0:	0d1b      	lsrs	r3, r3, #20
 80106f2:	051b      	lsls	r3, r3, #20
 80106f4:	b12b      	cbz	r3, 8010702 <_dtoa_r+0x902>
 80106f6:	9b04      	ldr	r3, [sp, #16]
 80106f8:	3301      	adds	r3, #1
 80106fa:	9304      	str	r3, [sp, #16]
 80106fc:	f108 0801 	add.w	r8, r8, #1
 8010700:	2301      	movs	r3, #1
 8010702:	9306      	str	r3, [sp, #24]
 8010704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010706:	2b00      	cmp	r3, #0
 8010708:	f47f af74 	bne.w	80105f4 <_dtoa_r+0x7f4>
 801070c:	2001      	movs	r0, #1
 801070e:	e779      	b.n	8010604 <_dtoa_r+0x804>
 8010710:	2300      	movs	r3, #0
 8010712:	e7f6      	b.n	8010702 <_dtoa_r+0x902>
 8010714:	9b02      	ldr	r3, [sp, #8]
 8010716:	e7f4      	b.n	8010702 <_dtoa_r+0x902>
 8010718:	d085      	beq.n	8010626 <_dtoa_r+0x826>
 801071a:	4618      	mov	r0, r3
 801071c:	301c      	adds	r0, #28
 801071e:	e77d      	b.n	801061c <_dtoa_r+0x81c>
 8010720:	40240000 	.word	0x40240000
 8010724:	9b01      	ldr	r3, [sp, #4]
 8010726:	2b00      	cmp	r3, #0
 8010728:	dc38      	bgt.n	801079c <_dtoa_r+0x99c>
 801072a:	9b05      	ldr	r3, [sp, #20]
 801072c:	2b02      	cmp	r3, #2
 801072e:	dd35      	ble.n	801079c <_dtoa_r+0x99c>
 8010730:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010734:	f1b9 0f00 	cmp.w	r9, #0
 8010738:	d10d      	bne.n	8010756 <_dtoa_r+0x956>
 801073a:	4631      	mov	r1, r6
 801073c:	464b      	mov	r3, r9
 801073e:	2205      	movs	r2, #5
 8010740:	4620      	mov	r0, r4
 8010742:	f000 fd59 	bl	80111f8 <__multadd>
 8010746:	4601      	mov	r1, r0
 8010748:	4606      	mov	r6, r0
 801074a:	4658      	mov	r0, fp
 801074c:	f000 ffba 	bl	80116c4 <__mcmp>
 8010750:	2800      	cmp	r0, #0
 8010752:	f73f adbd 	bgt.w	80102d0 <_dtoa_r+0x4d0>
 8010756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010758:	9d00      	ldr	r5, [sp, #0]
 801075a:	ea6f 0a03 	mvn.w	sl, r3
 801075e:	f04f 0800 	mov.w	r8, #0
 8010762:	4631      	mov	r1, r6
 8010764:	4620      	mov	r0, r4
 8010766:	f000 fd25 	bl	80111b4 <_Bfree>
 801076a:	2f00      	cmp	r7, #0
 801076c:	f43f aeb4 	beq.w	80104d8 <_dtoa_r+0x6d8>
 8010770:	f1b8 0f00 	cmp.w	r8, #0
 8010774:	d005      	beq.n	8010782 <_dtoa_r+0x982>
 8010776:	45b8      	cmp	r8, r7
 8010778:	d003      	beq.n	8010782 <_dtoa_r+0x982>
 801077a:	4641      	mov	r1, r8
 801077c:	4620      	mov	r0, r4
 801077e:	f000 fd19 	bl	80111b4 <_Bfree>
 8010782:	4639      	mov	r1, r7
 8010784:	4620      	mov	r0, r4
 8010786:	f000 fd15 	bl	80111b4 <_Bfree>
 801078a:	e6a5      	b.n	80104d8 <_dtoa_r+0x6d8>
 801078c:	2600      	movs	r6, #0
 801078e:	4637      	mov	r7, r6
 8010790:	e7e1      	b.n	8010756 <_dtoa_r+0x956>
 8010792:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010794:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010798:	4637      	mov	r7, r6
 801079a:	e599      	b.n	80102d0 <_dtoa_r+0x4d0>
 801079c:	9b08      	ldr	r3, [sp, #32]
 801079e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	f000 80fd 	beq.w	80109a2 <_dtoa_r+0xba2>
 80107a8:	2d00      	cmp	r5, #0
 80107aa:	dd05      	ble.n	80107b8 <_dtoa_r+0x9b8>
 80107ac:	4639      	mov	r1, r7
 80107ae:	462a      	mov	r2, r5
 80107b0:	4620      	mov	r0, r4
 80107b2:	f000 ff1b 	bl	80115ec <__lshift>
 80107b6:	4607      	mov	r7, r0
 80107b8:	9b06      	ldr	r3, [sp, #24]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d05c      	beq.n	8010878 <_dtoa_r+0xa78>
 80107be:	6879      	ldr	r1, [r7, #4]
 80107c0:	4620      	mov	r0, r4
 80107c2:	f000 fcb7 	bl	8011134 <_Balloc>
 80107c6:	4605      	mov	r5, r0
 80107c8:	b928      	cbnz	r0, 80107d6 <_dtoa_r+0x9d6>
 80107ca:	4b80      	ldr	r3, [pc, #512]	; (80109cc <_dtoa_r+0xbcc>)
 80107cc:	4602      	mov	r2, r0
 80107ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80107d2:	f7ff bb2e 	b.w	800fe32 <_dtoa_r+0x32>
 80107d6:	693a      	ldr	r2, [r7, #16]
 80107d8:	3202      	adds	r2, #2
 80107da:	0092      	lsls	r2, r2, #2
 80107dc:	f107 010c 	add.w	r1, r7, #12
 80107e0:	300c      	adds	r0, #12
 80107e2:	f000 fc99 	bl	8011118 <memcpy>
 80107e6:	2201      	movs	r2, #1
 80107e8:	4629      	mov	r1, r5
 80107ea:	4620      	mov	r0, r4
 80107ec:	f000 fefe 	bl	80115ec <__lshift>
 80107f0:	9b00      	ldr	r3, [sp, #0]
 80107f2:	3301      	adds	r3, #1
 80107f4:	9301      	str	r3, [sp, #4]
 80107f6:	9b00      	ldr	r3, [sp, #0]
 80107f8:	444b      	add	r3, r9
 80107fa:	9307      	str	r3, [sp, #28]
 80107fc:	9b02      	ldr	r3, [sp, #8]
 80107fe:	f003 0301 	and.w	r3, r3, #1
 8010802:	46b8      	mov	r8, r7
 8010804:	9306      	str	r3, [sp, #24]
 8010806:	4607      	mov	r7, r0
 8010808:	9b01      	ldr	r3, [sp, #4]
 801080a:	4631      	mov	r1, r6
 801080c:	3b01      	subs	r3, #1
 801080e:	4658      	mov	r0, fp
 8010810:	9302      	str	r3, [sp, #8]
 8010812:	f7ff fa69 	bl	800fce8 <quorem>
 8010816:	4603      	mov	r3, r0
 8010818:	3330      	adds	r3, #48	; 0x30
 801081a:	9004      	str	r0, [sp, #16]
 801081c:	4641      	mov	r1, r8
 801081e:	4658      	mov	r0, fp
 8010820:	9308      	str	r3, [sp, #32]
 8010822:	f000 ff4f 	bl	80116c4 <__mcmp>
 8010826:	463a      	mov	r2, r7
 8010828:	4681      	mov	r9, r0
 801082a:	4631      	mov	r1, r6
 801082c:	4620      	mov	r0, r4
 801082e:	f000 ff65 	bl	80116fc <__mdiff>
 8010832:	68c2      	ldr	r2, [r0, #12]
 8010834:	9b08      	ldr	r3, [sp, #32]
 8010836:	4605      	mov	r5, r0
 8010838:	bb02      	cbnz	r2, 801087c <_dtoa_r+0xa7c>
 801083a:	4601      	mov	r1, r0
 801083c:	4658      	mov	r0, fp
 801083e:	f000 ff41 	bl	80116c4 <__mcmp>
 8010842:	9b08      	ldr	r3, [sp, #32]
 8010844:	4602      	mov	r2, r0
 8010846:	4629      	mov	r1, r5
 8010848:	4620      	mov	r0, r4
 801084a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801084e:	f000 fcb1 	bl	80111b4 <_Bfree>
 8010852:	9b05      	ldr	r3, [sp, #20]
 8010854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010856:	9d01      	ldr	r5, [sp, #4]
 8010858:	ea43 0102 	orr.w	r1, r3, r2
 801085c:	9b06      	ldr	r3, [sp, #24]
 801085e:	430b      	orrs	r3, r1
 8010860:	9b08      	ldr	r3, [sp, #32]
 8010862:	d10d      	bne.n	8010880 <_dtoa_r+0xa80>
 8010864:	2b39      	cmp	r3, #57	; 0x39
 8010866:	d029      	beq.n	80108bc <_dtoa_r+0xabc>
 8010868:	f1b9 0f00 	cmp.w	r9, #0
 801086c:	dd01      	ble.n	8010872 <_dtoa_r+0xa72>
 801086e:	9b04      	ldr	r3, [sp, #16]
 8010870:	3331      	adds	r3, #49	; 0x31
 8010872:	9a02      	ldr	r2, [sp, #8]
 8010874:	7013      	strb	r3, [r2, #0]
 8010876:	e774      	b.n	8010762 <_dtoa_r+0x962>
 8010878:	4638      	mov	r0, r7
 801087a:	e7b9      	b.n	80107f0 <_dtoa_r+0x9f0>
 801087c:	2201      	movs	r2, #1
 801087e:	e7e2      	b.n	8010846 <_dtoa_r+0xa46>
 8010880:	f1b9 0f00 	cmp.w	r9, #0
 8010884:	db06      	blt.n	8010894 <_dtoa_r+0xa94>
 8010886:	9905      	ldr	r1, [sp, #20]
 8010888:	ea41 0909 	orr.w	r9, r1, r9
 801088c:	9906      	ldr	r1, [sp, #24]
 801088e:	ea59 0101 	orrs.w	r1, r9, r1
 8010892:	d120      	bne.n	80108d6 <_dtoa_r+0xad6>
 8010894:	2a00      	cmp	r2, #0
 8010896:	ddec      	ble.n	8010872 <_dtoa_r+0xa72>
 8010898:	4659      	mov	r1, fp
 801089a:	2201      	movs	r2, #1
 801089c:	4620      	mov	r0, r4
 801089e:	9301      	str	r3, [sp, #4]
 80108a0:	f000 fea4 	bl	80115ec <__lshift>
 80108a4:	4631      	mov	r1, r6
 80108a6:	4683      	mov	fp, r0
 80108a8:	f000 ff0c 	bl	80116c4 <__mcmp>
 80108ac:	2800      	cmp	r0, #0
 80108ae:	9b01      	ldr	r3, [sp, #4]
 80108b0:	dc02      	bgt.n	80108b8 <_dtoa_r+0xab8>
 80108b2:	d1de      	bne.n	8010872 <_dtoa_r+0xa72>
 80108b4:	07da      	lsls	r2, r3, #31
 80108b6:	d5dc      	bpl.n	8010872 <_dtoa_r+0xa72>
 80108b8:	2b39      	cmp	r3, #57	; 0x39
 80108ba:	d1d8      	bne.n	801086e <_dtoa_r+0xa6e>
 80108bc:	9a02      	ldr	r2, [sp, #8]
 80108be:	2339      	movs	r3, #57	; 0x39
 80108c0:	7013      	strb	r3, [r2, #0]
 80108c2:	462b      	mov	r3, r5
 80108c4:	461d      	mov	r5, r3
 80108c6:	3b01      	subs	r3, #1
 80108c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80108cc:	2a39      	cmp	r2, #57	; 0x39
 80108ce:	d050      	beq.n	8010972 <_dtoa_r+0xb72>
 80108d0:	3201      	adds	r2, #1
 80108d2:	701a      	strb	r2, [r3, #0]
 80108d4:	e745      	b.n	8010762 <_dtoa_r+0x962>
 80108d6:	2a00      	cmp	r2, #0
 80108d8:	dd03      	ble.n	80108e2 <_dtoa_r+0xae2>
 80108da:	2b39      	cmp	r3, #57	; 0x39
 80108dc:	d0ee      	beq.n	80108bc <_dtoa_r+0xabc>
 80108de:	3301      	adds	r3, #1
 80108e0:	e7c7      	b.n	8010872 <_dtoa_r+0xa72>
 80108e2:	9a01      	ldr	r2, [sp, #4]
 80108e4:	9907      	ldr	r1, [sp, #28]
 80108e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80108ea:	428a      	cmp	r2, r1
 80108ec:	d02a      	beq.n	8010944 <_dtoa_r+0xb44>
 80108ee:	4659      	mov	r1, fp
 80108f0:	2300      	movs	r3, #0
 80108f2:	220a      	movs	r2, #10
 80108f4:	4620      	mov	r0, r4
 80108f6:	f000 fc7f 	bl	80111f8 <__multadd>
 80108fa:	45b8      	cmp	r8, r7
 80108fc:	4683      	mov	fp, r0
 80108fe:	f04f 0300 	mov.w	r3, #0
 8010902:	f04f 020a 	mov.w	r2, #10
 8010906:	4641      	mov	r1, r8
 8010908:	4620      	mov	r0, r4
 801090a:	d107      	bne.n	801091c <_dtoa_r+0xb1c>
 801090c:	f000 fc74 	bl	80111f8 <__multadd>
 8010910:	4680      	mov	r8, r0
 8010912:	4607      	mov	r7, r0
 8010914:	9b01      	ldr	r3, [sp, #4]
 8010916:	3301      	adds	r3, #1
 8010918:	9301      	str	r3, [sp, #4]
 801091a:	e775      	b.n	8010808 <_dtoa_r+0xa08>
 801091c:	f000 fc6c 	bl	80111f8 <__multadd>
 8010920:	4639      	mov	r1, r7
 8010922:	4680      	mov	r8, r0
 8010924:	2300      	movs	r3, #0
 8010926:	220a      	movs	r2, #10
 8010928:	4620      	mov	r0, r4
 801092a:	f000 fc65 	bl	80111f8 <__multadd>
 801092e:	4607      	mov	r7, r0
 8010930:	e7f0      	b.n	8010914 <_dtoa_r+0xb14>
 8010932:	f1b9 0f00 	cmp.w	r9, #0
 8010936:	9a00      	ldr	r2, [sp, #0]
 8010938:	bfcc      	ite	gt
 801093a:	464d      	movgt	r5, r9
 801093c:	2501      	movle	r5, #1
 801093e:	4415      	add	r5, r2
 8010940:	f04f 0800 	mov.w	r8, #0
 8010944:	4659      	mov	r1, fp
 8010946:	2201      	movs	r2, #1
 8010948:	4620      	mov	r0, r4
 801094a:	9301      	str	r3, [sp, #4]
 801094c:	f000 fe4e 	bl	80115ec <__lshift>
 8010950:	4631      	mov	r1, r6
 8010952:	4683      	mov	fp, r0
 8010954:	f000 feb6 	bl	80116c4 <__mcmp>
 8010958:	2800      	cmp	r0, #0
 801095a:	dcb2      	bgt.n	80108c2 <_dtoa_r+0xac2>
 801095c:	d102      	bne.n	8010964 <_dtoa_r+0xb64>
 801095e:	9b01      	ldr	r3, [sp, #4]
 8010960:	07db      	lsls	r3, r3, #31
 8010962:	d4ae      	bmi.n	80108c2 <_dtoa_r+0xac2>
 8010964:	462b      	mov	r3, r5
 8010966:	461d      	mov	r5, r3
 8010968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801096c:	2a30      	cmp	r2, #48	; 0x30
 801096e:	d0fa      	beq.n	8010966 <_dtoa_r+0xb66>
 8010970:	e6f7      	b.n	8010762 <_dtoa_r+0x962>
 8010972:	9a00      	ldr	r2, [sp, #0]
 8010974:	429a      	cmp	r2, r3
 8010976:	d1a5      	bne.n	80108c4 <_dtoa_r+0xac4>
 8010978:	f10a 0a01 	add.w	sl, sl, #1
 801097c:	2331      	movs	r3, #49	; 0x31
 801097e:	e779      	b.n	8010874 <_dtoa_r+0xa74>
 8010980:	4b13      	ldr	r3, [pc, #76]	; (80109d0 <_dtoa_r+0xbd0>)
 8010982:	f7ff baaf 	b.w	800fee4 <_dtoa_r+0xe4>
 8010986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010988:	2b00      	cmp	r3, #0
 801098a:	f47f aa86 	bne.w	800fe9a <_dtoa_r+0x9a>
 801098e:	4b11      	ldr	r3, [pc, #68]	; (80109d4 <_dtoa_r+0xbd4>)
 8010990:	f7ff baa8 	b.w	800fee4 <_dtoa_r+0xe4>
 8010994:	f1b9 0f00 	cmp.w	r9, #0
 8010998:	dc03      	bgt.n	80109a2 <_dtoa_r+0xba2>
 801099a:	9b05      	ldr	r3, [sp, #20]
 801099c:	2b02      	cmp	r3, #2
 801099e:	f73f aec9 	bgt.w	8010734 <_dtoa_r+0x934>
 80109a2:	9d00      	ldr	r5, [sp, #0]
 80109a4:	4631      	mov	r1, r6
 80109a6:	4658      	mov	r0, fp
 80109a8:	f7ff f99e 	bl	800fce8 <quorem>
 80109ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80109b0:	f805 3b01 	strb.w	r3, [r5], #1
 80109b4:	9a00      	ldr	r2, [sp, #0]
 80109b6:	1aaa      	subs	r2, r5, r2
 80109b8:	4591      	cmp	r9, r2
 80109ba:	ddba      	ble.n	8010932 <_dtoa_r+0xb32>
 80109bc:	4659      	mov	r1, fp
 80109be:	2300      	movs	r3, #0
 80109c0:	220a      	movs	r2, #10
 80109c2:	4620      	mov	r0, r4
 80109c4:	f000 fc18 	bl	80111f8 <__multadd>
 80109c8:	4683      	mov	fp, r0
 80109ca:	e7eb      	b.n	80109a4 <_dtoa_r+0xba4>
 80109cc:	080137c4 	.word	0x080137c4
 80109d0:	080139c9 	.word	0x080139c9
 80109d4:	08013741 	.word	0x08013741

080109d8 <rshift>:
 80109d8:	6903      	ldr	r3, [r0, #16]
 80109da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80109de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80109e6:	f100 0414 	add.w	r4, r0, #20
 80109ea:	dd45      	ble.n	8010a78 <rshift+0xa0>
 80109ec:	f011 011f 	ands.w	r1, r1, #31
 80109f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80109f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80109f8:	d10c      	bne.n	8010a14 <rshift+0x3c>
 80109fa:	f100 0710 	add.w	r7, r0, #16
 80109fe:	4629      	mov	r1, r5
 8010a00:	42b1      	cmp	r1, r6
 8010a02:	d334      	bcc.n	8010a6e <rshift+0x96>
 8010a04:	1a9b      	subs	r3, r3, r2
 8010a06:	009b      	lsls	r3, r3, #2
 8010a08:	1eea      	subs	r2, r5, #3
 8010a0a:	4296      	cmp	r6, r2
 8010a0c:	bf38      	it	cc
 8010a0e:	2300      	movcc	r3, #0
 8010a10:	4423      	add	r3, r4
 8010a12:	e015      	b.n	8010a40 <rshift+0x68>
 8010a14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010a18:	f1c1 0820 	rsb	r8, r1, #32
 8010a1c:	40cf      	lsrs	r7, r1
 8010a1e:	f105 0e04 	add.w	lr, r5, #4
 8010a22:	46a1      	mov	r9, r4
 8010a24:	4576      	cmp	r6, lr
 8010a26:	46f4      	mov	ip, lr
 8010a28:	d815      	bhi.n	8010a56 <rshift+0x7e>
 8010a2a:	1a9b      	subs	r3, r3, r2
 8010a2c:	009a      	lsls	r2, r3, #2
 8010a2e:	3a04      	subs	r2, #4
 8010a30:	3501      	adds	r5, #1
 8010a32:	42ae      	cmp	r6, r5
 8010a34:	bf38      	it	cc
 8010a36:	2200      	movcc	r2, #0
 8010a38:	18a3      	adds	r3, r4, r2
 8010a3a:	50a7      	str	r7, [r4, r2]
 8010a3c:	b107      	cbz	r7, 8010a40 <rshift+0x68>
 8010a3e:	3304      	adds	r3, #4
 8010a40:	1b1a      	subs	r2, r3, r4
 8010a42:	42a3      	cmp	r3, r4
 8010a44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010a48:	bf08      	it	eq
 8010a4a:	2300      	moveq	r3, #0
 8010a4c:	6102      	str	r2, [r0, #16]
 8010a4e:	bf08      	it	eq
 8010a50:	6143      	streq	r3, [r0, #20]
 8010a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a56:	f8dc c000 	ldr.w	ip, [ip]
 8010a5a:	fa0c fc08 	lsl.w	ip, ip, r8
 8010a5e:	ea4c 0707 	orr.w	r7, ip, r7
 8010a62:	f849 7b04 	str.w	r7, [r9], #4
 8010a66:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a6a:	40cf      	lsrs	r7, r1
 8010a6c:	e7da      	b.n	8010a24 <rshift+0x4c>
 8010a6e:	f851 cb04 	ldr.w	ip, [r1], #4
 8010a72:	f847 cf04 	str.w	ip, [r7, #4]!
 8010a76:	e7c3      	b.n	8010a00 <rshift+0x28>
 8010a78:	4623      	mov	r3, r4
 8010a7a:	e7e1      	b.n	8010a40 <rshift+0x68>

08010a7c <__hexdig_fun>:
 8010a7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010a80:	2b09      	cmp	r3, #9
 8010a82:	d802      	bhi.n	8010a8a <__hexdig_fun+0xe>
 8010a84:	3820      	subs	r0, #32
 8010a86:	b2c0      	uxtb	r0, r0
 8010a88:	4770      	bx	lr
 8010a8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010a8e:	2b05      	cmp	r3, #5
 8010a90:	d801      	bhi.n	8010a96 <__hexdig_fun+0x1a>
 8010a92:	3847      	subs	r0, #71	; 0x47
 8010a94:	e7f7      	b.n	8010a86 <__hexdig_fun+0xa>
 8010a96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010a9a:	2b05      	cmp	r3, #5
 8010a9c:	d801      	bhi.n	8010aa2 <__hexdig_fun+0x26>
 8010a9e:	3827      	subs	r0, #39	; 0x27
 8010aa0:	e7f1      	b.n	8010a86 <__hexdig_fun+0xa>
 8010aa2:	2000      	movs	r0, #0
 8010aa4:	4770      	bx	lr
	...

08010aa8 <__gethex>:
 8010aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aac:	ed2d 8b02 	vpush	{d8}
 8010ab0:	b089      	sub	sp, #36	; 0x24
 8010ab2:	ee08 0a10 	vmov	s16, r0
 8010ab6:	9304      	str	r3, [sp, #16]
 8010ab8:	4bbc      	ldr	r3, [pc, #752]	; (8010dac <__gethex+0x304>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	9301      	str	r3, [sp, #4]
 8010abe:	4618      	mov	r0, r3
 8010ac0:	468b      	mov	fp, r1
 8010ac2:	4690      	mov	r8, r2
 8010ac4:	f7ef fb8c 	bl	80001e0 <strlen>
 8010ac8:	9b01      	ldr	r3, [sp, #4]
 8010aca:	f8db 2000 	ldr.w	r2, [fp]
 8010ace:	4403      	add	r3, r0
 8010ad0:	4682      	mov	sl, r0
 8010ad2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010ad6:	9305      	str	r3, [sp, #20]
 8010ad8:	1c93      	adds	r3, r2, #2
 8010ada:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010ade:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010ae2:	32fe      	adds	r2, #254	; 0xfe
 8010ae4:	18d1      	adds	r1, r2, r3
 8010ae6:	461f      	mov	r7, r3
 8010ae8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010aec:	9100      	str	r1, [sp, #0]
 8010aee:	2830      	cmp	r0, #48	; 0x30
 8010af0:	d0f8      	beq.n	8010ae4 <__gethex+0x3c>
 8010af2:	f7ff ffc3 	bl	8010a7c <__hexdig_fun>
 8010af6:	4604      	mov	r4, r0
 8010af8:	2800      	cmp	r0, #0
 8010afa:	d13a      	bne.n	8010b72 <__gethex+0xca>
 8010afc:	9901      	ldr	r1, [sp, #4]
 8010afe:	4652      	mov	r2, sl
 8010b00:	4638      	mov	r0, r7
 8010b02:	f7fe fa08 	bl	800ef16 <strncmp>
 8010b06:	4605      	mov	r5, r0
 8010b08:	2800      	cmp	r0, #0
 8010b0a:	d168      	bne.n	8010bde <__gethex+0x136>
 8010b0c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010b10:	eb07 060a 	add.w	r6, r7, sl
 8010b14:	f7ff ffb2 	bl	8010a7c <__hexdig_fun>
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	d062      	beq.n	8010be2 <__gethex+0x13a>
 8010b1c:	4633      	mov	r3, r6
 8010b1e:	7818      	ldrb	r0, [r3, #0]
 8010b20:	2830      	cmp	r0, #48	; 0x30
 8010b22:	461f      	mov	r7, r3
 8010b24:	f103 0301 	add.w	r3, r3, #1
 8010b28:	d0f9      	beq.n	8010b1e <__gethex+0x76>
 8010b2a:	f7ff ffa7 	bl	8010a7c <__hexdig_fun>
 8010b2e:	2301      	movs	r3, #1
 8010b30:	fab0 f480 	clz	r4, r0
 8010b34:	0964      	lsrs	r4, r4, #5
 8010b36:	4635      	mov	r5, r6
 8010b38:	9300      	str	r3, [sp, #0]
 8010b3a:	463a      	mov	r2, r7
 8010b3c:	4616      	mov	r6, r2
 8010b3e:	3201      	adds	r2, #1
 8010b40:	7830      	ldrb	r0, [r6, #0]
 8010b42:	f7ff ff9b 	bl	8010a7c <__hexdig_fun>
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d1f8      	bne.n	8010b3c <__gethex+0x94>
 8010b4a:	9901      	ldr	r1, [sp, #4]
 8010b4c:	4652      	mov	r2, sl
 8010b4e:	4630      	mov	r0, r6
 8010b50:	f7fe f9e1 	bl	800ef16 <strncmp>
 8010b54:	b980      	cbnz	r0, 8010b78 <__gethex+0xd0>
 8010b56:	b94d      	cbnz	r5, 8010b6c <__gethex+0xc4>
 8010b58:	eb06 050a 	add.w	r5, r6, sl
 8010b5c:	462a      	mov	r2, r5
 8010b5e:	4616      	mov	r6, r2
 8010b60:	3201      	adds	r2, #1
 8010b62:	7830      	ldrb	r0, [r6, #0]
 8010b64:	f7ff ff8a 	bl	8010a7c <__hexdig_fun>
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	d1f8      	bne.n	8010b5e <__gethex+0xb6>
 8010b6c:	1bad      	subs	r5, r5, r6
 8010b6e:	00ad      	lsls	r5, r5, #2
 8010b70:	e004      	b.n	8010b7c <__gethex+0xd4>
 8010b72:	2400      	movs	r4, #0
 8010b74:	4625      	mov	r5, r4
 8010b76:	e7e0      	b.n	8010b3a <__gethex+0x92>
 8010b78:	2d00      	cmp	r5, #0
 8010b7a:	d1f7      	bne.n	8010b6c <__gethex+0xc4>
 8010b7c:	7833      	ldrb	r3, [r6, #0]
 8010b7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010b82:	2b50      	cmp	r3, #80	; 0x50
 8010b84:	d13b      	bne.n	8010bfe <__gethex+0x156>
 8010b86:	7873      	ldrb	r3, [r6, #1]
 8010b88:	2b2b      	cmp	r3, #43	; 0x2b
 8010b8a:	d02c      	beq.n	8010be6 <__gethex+0x13e>
 8010b8c:	2b2d      	cmp	r3, #45	; 0x2d
 8010b8e:	d02e      	beq.n	8010bee <__gethex+0x146>
 8010b90:	1c71      	adds	r1, r6, #1
 8010b92:	f04f 0900 	mov.w	r9, #0
 8010b96:	7808      	ldrb	r0, [r1, #0]
 8010b98:	f7ff ff70 	bl	8010a7c <__hexdig_fun>
 8010b9c:	1e43      	subs	r3, r0, #1
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	2b18      	cmp	r3, #24
 8010ba2:	d82c      	bhi.n	8010bfe <__gethex+0x156>
 8010ba4:	f1a0 0210 	sub.w	r2, r0, #16
 8010ba8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010bac:	f7ff ff66 	bl	8010a7c <__hexdig_fun>
 8010bb0:	1e43      	subs	r3, r0, #1
 8010bb2:	b2db      	uxtb	r3, r3
 8010bb4:	2b18      	cmp	r3, #24
 8010bb6:	d91d      	bls.n	8010bf4 <__gethex+0x14c>
 8010bb8:	f1b9 0f00 	cmp.w	r9, #0
 8010bbc:	d000      	beq.n	8010bc0 <__gethex+0x118>
 8010bbe:	4252      	negs	r2, r2
 8010bc0:	4415      	add	r5, r2
 8010bc2:	f8cb 1000 	str.w	r1, [fp]
 8010bc6:	b1e4      	cbz	r4, 8010c02 <__gethex+0x15a>
 8010bc8:	9b00      	ldr	r3, [sp, #0]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	bf14      	ite	ne
 8010bce:	2700      	movne	r7, #0
 8010bd0:	2706      	moveq	r7, #6
 8010bd2:	4638      	mov	r0, r7
 8010bd4:	b009      	add	sp, #36	; 0x24
 8010bd6:	ecbd 8b02 	vpop	{d8}
 8010bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bde:	463e      	mov	r6, r7
 8010be0:	4625      	mov	r5, r4
 8010be2:	2401      	movs	r4, #1
 8010be4:	e7ca      	b.n	8010b7c <__gethex+0xd4>
 8010be6:	f04f 0900 	mov.w	r9, #0
 8010bea:	1cb1      	adds	r1, r6, #2
 8010bec:	e7d3      	b.n	8010b96 <__gethex+0xee>
 8010bee:	f04f 0901 	mov.w	r9, #1
 8010bf2:	e7fa      	b.n	8010bea <__gethex+0x142>
 8010bf4:	230a      	movs	r3, #10
 8010bf6:	fb03 0202 	mla	r2, r3, r2, r0
 8010bfa:	3a10      	subs	r2, #16
 8010bfc:	e7d4      	b.n	8010ba8 <__gethex+0x100>
 8010bfe:	4631      	mov	r1, r6
 8010c00:	e7df      	b.n	8010bc2 <__gethex+0x11a>
 8010c02:	1bf3      	subs	r3, r6, r7
 8010c04:	3b01      	subs	r3, #1
 8010c06:	4621      	mov	r1, r4
 8010c08:	2b07      	cmp	r3, #7
 8010c0a:	dc0b      	bgt.n	8010c24 <__gethex+0x17c>
 8010c0c:	ee18 0a10 	vmov	r0, s16
 8010c10:	f000 fa90 	bl	8011134 <_Balloc>
 8010c14:	4604      	mov	r4, r0
 8010c16:	b940      	cbnz	r0, 8010c2a <__gethex+0x182>
 8010c18:	4b65      	ldr	r3, [pc, #404]	; (8010db0 <__gethex+0x308>)
 8010c1a:	4602      	mov	r2, r0
 8010c1c:	21de      	movs	r1, #222	; 0xde
 8010c1e:	4865      	ldr	r0, [pc, #404]	; (8010db4 <__gethex+0x30c>)
 8010c20:	f001 fd98 	bl	8012754 <__assert_func>
 8010c24:	3101      	adds	r1, #1
 8010c26:	105b      	asrs	r3, r3, #1
 8010c28:	e7ee      	b.n	8010c08 <__gethex+0x160>
 8010c2a:	f100 0914 	add.w	r9, r0, #20
 8010c2e:	f04f 0b00 	mov.w	fp, #0
 8010c32:	f1ca 0301 	rsb	r3, sl, #1
 8010c36:	f8cd 9008 	str.w	r9, [sp, #8]
 8010c3a:	f8cd b000 	str.w	fp, [sp]
 8010c3e:	9306      	str	r3, [sp, #24]
 8010c40:	42b7      	cmp	r7, r6
 8010c42:	d340      	bcc.n	8010cc6 <__gethex+0x21e>
 8010c44:	9802      	ldr	r0, [sp, #8]
 8010c46:	9b00      	ldr	r3, [sp, #0]
 8010c48:	f840 3b04 	str.w	r3, [r0], #4
 8010c4c:	eba0 0009 	sub.w	r0, r0, r9
 8010c50:	1080      	asrs	r0, r0, #2
 8010c52:	0146      	lsls	r6, r0, #5
 8010c54:	6120      	str	r0, [r4, #16]
 8010c56:	4618      	mov	r0, r3
 8010c58:	f000 fb62 	bl	8011320 <__hi0bits>
 8010c5c:	1a30      	subs	r0, r6, r0
 8010c5e:	f8d8 6000 	ldr.w	r6, [r8]
 8010c62:	42b0      	cmp	r0, r6
 8010c64:	dd63      	ble.n	8010d2e <__gethex+0x286>
 8010c66:	1b87      	subs	r7, r0, r6
 8010c68:	4639      	mov	r1, r7
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	f000 fefc 	bl	8011a68 <__any_on>
 8010c70:	4682      	mov	sl, r0
 8010c72:	b1a8      	cbz	r0, 8010ca0 <__gethex+0x1f8>
 8010c74:	1e7b      	subs	r3, r7, #1
 8010c76:	1159      	asrs	r1, r3, #5
 8010c78:	f003 021f 	and.w	r2, r3, #31
 8010c7c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010c80:	f04f 0a01 	mov.w	sl, #1
 8010c84:	fa0a f202 	lsl.w	r2, sl, r2
 8010c88:	420a      	tst	r2, r1
 8010c8a:	d009      	beq.n	8010ca0 <__gethex+0x1f8>
 8010c8c:	4553      	cmp	r3, sl
 8010c8e:	dd05      	ble.n	8010c9c <__gethex+0x1f4>
 8010c90:	1eb9      	subs	r1, r7, #2
 8010c92:	4620      	mov	r0, r4
 8010c94:	f000 fee8 	bl	8011a68 <__any_on>
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	d145      	bne.n	8010d28 <__gethex+0x280>
 8010c9c:	f04f 0a02 	mov.w	sl, #2
 8010ca0:	4639      	mov	r1, r7
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	f7ff fe98 	bl	80109d8 <rshift>
 8010ca8:	443d      	add	r5, r7
 8010caa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010cae:	42ab      	cmp	r3, r5
 8010cb0:	da4c      	bge.n	8010d4c <__gethex+0x2a4>
 8010cb2:	ee18 0a10 	vmov	r0, s16
 8010cb6:	4621      	mov	r1, r4
 8010cb8:	f000 fa7c 	bl	80111b4 <_Bfree>
 8010cbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	6013      	str	r3, [r2, #0]
 8010cc2:	27a3      	movs	r7, #163	; 0xa3
 8010cc4:	e785      	b.n	8010bd2 <__gethex+0x12a>
 8010cc6:	1e73      	subs	r3, r6, #1
 8010cc8:	9a05      	ldr	r2, [sp, #20]
 8010cca:	9303      	str	r3, [sp, #12]
 8010ccc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010cd0:	4293      	cmp	r3, r2
 8010cd2:	d019      	beq.n	8010d08 <__gethex+0x260>
 8010cd4:	f1bb 0f20 	cmp.w	fp, #32
 8010cd8:	d107      	bne.n	8010cea <__gethex+0x242>
 8010cda:	9b02      	ldr	r3, [sp, #8]
 8010cdc:	9a00      	ldr	r2, [sp, #0]
 8010cde:	f843 2b04 	str.w	r2, [r3], #4
 8010ce2:	9302      	str	r3, [sp, #8]
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	469b      	mov	fp, r3
 8010cea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010cee:	f7ff fec5 	bl	8010a7c <__hexdig_fun>
 8010cf2:	9b00      	ldr	r3, [sp, #0]
 8010cf4:	f000 000f 	and.w	r0, r0, #15
 8010cf8:	fa00 f00b 	lsl.w	r0, r0, fp
 8010cfc:	4303      	orrs	r3, r0
 8010cfe:	9300      	str	r3, [sp, #0]
 8010d00:	f10b 0b04 	add.w	fp, fp, #4
 8010d04:	9b03      	ldr	r3, [sp, #12]
 8010d06:	e00d      	b.n	8010d24 <__gethex+0x27c>
 8010d08:	9b03      	ldr	r3, [sp, #12]
 8010d0a:	9a06      	ldr	r2, [sp, #24]
 8010d0c:	4413      	add	r3, r2
 8010d0e:	42bb      	cmp	r3, r7
 8010d10:	d3e0      	bcc.n	8010cd4 <__gethex+0x22c>
 8010d12:	4618      	mov	r0, r3
 8010d14:	9901      	ldr	r1, [sp, #4]
 8010d16:	9307      	str	r3, [sp, #28]
 8010d18:	4652      	mov	r2, sl
 8010d1a:	f7fe f8fc 	bl	800ef16 <strncmp>
 8010d1e:	9b07      	ldr	r3, [sp, #28]
 8010d20:	2800      	cmp	r0, #0
 8010d22:	d1d7      	bne.n	8010cd4 <__gethex+0x22c>
 8010d24:	461e      	mov	r6, r3
 8010d26:	e78b      	b.n	8010c40 <__gethex+0x198>
 8010d28:	f04f 0a03 	mov.w	sl, #3
 8010d2c:	e7b8      	b.n	8010ca0 <__gethex+0x1f8>
 8010d2e:	da0a      	bge.n	8010d46 <__gethex+0x29e>
 8010d30:	1a37      	subs	r7, r6, r0
 8010d32:	4621      	mov	r1, r4
 8010d34:	ee18 0a10 	vmov	r0, s16
 8010d38:	463a      	mov	r2, r7
 8010d3a:	f000 fc57 	bl	80115ec <__lshift>
 8010d3e:	1bed      	subs	r5, r5, r7
 8010d40:	4604      	mov	r4, r0
 8010d42:	f100 0914 	add.w	r9, r0, #20
 8010d46:	f04f 0a00 	mov.w	sl, #0
 8010d4a:	e7ae      	b.n	8010caa <__gethex+0x202>
 8010d4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010d50:	42a8      	cmp	r0, r5
 8010d52:	dd72      	ble.n	8010e3a <__gethex+0x392>
 8010d54:	1b45      	subs	r5, r0, r5
 8010d56:	42ae      	cmp	r6, r5
 8010d58:	dc36      	bgt.n	8010dc8 <__gethex+0x320>
 8010d5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d5e:	2b02      	cmp	r3, #2
 8010d60:	d02a      	beq.n	8010db8 <__gethex+0x310>
 8010d62:	2b03      	cmp	r3, #3
 8010d64:	d02c      	beq.n	8010dc0 <__gethex+0x318>
 8010d66:	2b01      	cmp	r3, #1
 8010d68:	d115      	bne.n	8010d96 <__gethex+0x2ee>
 8010d6a:	42ae      	cmp	r6, r5
 8010d6c:	d113      	bne.n	8010d96 <__gethex+0x2ee>
 8010d6e:	2e01      	cmp	r6, #1
 8010d70:	d10b      	bne.n	8010d8a <__gethex+0x2e2>
 8010d72:	9a04      	ldr	r2, [sp, #16]
 8010d74:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010d78:	6013      	str	r3, [r2, #0]
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	6123      	str	r3, [r4, #16]
 8010d7e:	f8c9 3000 	str.w	r3, [r9]
 8010d82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010d84:	2762      	movs	r7, #98	; 0x62
 8010d86:	601c      	str	r4, [r3, #0]
 8010d88:	e723      	b.n	8010bd2 <__gethex+0x12a>
 8010d8a:	1e71      	subs	r1, r6, #1
 8010d8c:	4620      	mov	r0, r4
 8010d8e:	f000 fe6b 	bl	8011a68 <__any_on>
 8010d92:	2800      	cmp	r0, #0
 8010d94:	d1ed      	bne.n	8010d72 <__gethex+0x2ca>
 8010d96:	ee18 0a10 	vmov	r0, s16
 8010d9a:	4621      	mov	r1, r4
 8010d9c:	f000 fa0a 	bl	80111b4 <_Bfree>
 8010da0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010da2:	2300      	movs	r3, #0
 8010da4:	6013      	str	r3, [r2, #0]
 8010da6:	2750      	movs	r7, #80	; 0x50
 8010da8:	e713      	b.n	8010bd2 <__gethex+0x12a>
 8010daa:	bf00      	nop
 8010dac:	08013840 	.word	0x08013840
 8010db0:	080137c4 	.word	0x080137c4
 8010db4:	080137d5 	.word	0x080137d5
 8010db8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d1eb      	bne.n	8010d96 <__gethex+0x2ee>
 8010dbe:	e7d8      	b.n	8010d72 <__gethex+0x2ca>
 8010dc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d1d5      	bne.n	8010d72 <__gethex+0x2ca>
 8010dc6:	e7e6      	b.n	8010d96 <__gethex+0x2ee>
 8010dc8:	1e6f      	subs	r7, r5, #1
 8010dca:	f1ba 0f00 	cmp.w	sl, #0
 8010dce:	d131      	bne.n	8010e34 <__gethex+0x38c>
 8010dd0:	b127      	cbz	r7, 8010ddc <__gethex+0x334>
 8010dd2:	4639      	mov	r1, r7
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	f000 fe47 	bl	8011a68 <__any_on>
 8010dda:	4682      	mov	sl, r0
 8010ddc:	117b      	asrs	r3, r7, #5
 8010dde:	2101      	movs	r1, #1
 8010de0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010de4:	f007 071f 	and.w	r7, r7, #31
 8010de8:	fa01 f707 	lsl.w	r7, r1, r7
 8010dec:	421f      	tst	r7, r3
 8010dee:	4629      	mov	r1, r5
 8010df0:	4620      	mov	r0, r4
 8010df2:	bf18      	it	ne
 8010df4:	f04a 0a02 	orrne.w	sl, sl, #2
 8010df8:	1b76      	subs	r6, r6, r5
 8010dfa:	f7ff fded 	bl	80109d8 <rshift>
 8010dfe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010e02:	2702      	movs	r7, #2
 8010e04:	f1ba 0f00 	cmp.w	sl, #0
 8010e08:	d048      	beq.n	8010e9c <__gethex+0x3f4>
 8010e0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e0e:	2b02      	cmp	r3, #2
 8010e10:	d015      	beq.n	8010e3e <__gethex+0x396>
 8010e12:	2b03      	cmp	r3, #3
 8010e14:	d017      	beq.n	8010e46 <__gethex+0x39e>
 8010e16:	2b01      	cmp	r3, #1
 8010e18:	d109      	bne.n	8010e2e <__gethex+0x386>
 8010e1a:	f01a 0f02 	tst.w	sl, #2
 8010e1e:	d006      	beq.n	8010e2e <__gethex+0x386>
 8010e20:	f8d9 0000 	ldr.w	r0, [r9]
 8010e24:	ea4a 0a00 	orr.w	sl, sl, r0
 8010e28:	f01a 0f01 	tst.w	sl, #1
 8010e2c:	d10e      	bne.n	8010e4c <__gethex+0x3a4>
 8010e2e:	f047 0710 	orr.w	r7, r7, #16
 8010e32:	e033      	b.n	8010e9c <__gethex+0x3f4>
 8010e34:	f04f 0a01 	mov.w	sl, #1
 8010e38:	e7d0      	b.n	8010ddc <__gethex+0x334>
 8010e3a:	2701      	movs	r7, #1
 8010e3c:	e7e2      	b.n	8010e04 <__gethex+0x35c>
 8010e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e40:	f1c3 0301 	rsb	r3, r3, #1
 8010e44:	9315      	str	r3, [sp, #84]	; 0x54
 8010e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d0f0      	beq.n	8010e2e <__gethex+0x386>
 8010e4c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010e50:	f104 0314 	add.w	r3, r4, #20
 8010e54:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010e58:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010e5c:	f04f 0c00 	mov.w	ip, #0
 8010e60:	4618      	mov	r0, r3
 8010e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e66:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010e6a:	d01c      	beq.n	8010ea6 <__gethex+0x3fe>
 8010e6c:	3201      	adds	r2, #1
 8010e6e:	6002      	str	r2, [r0, #0]
 8010e70:	2f02      	cmp	r7, #2
 8010e72:	f104 0314 	add.w	r3, r4, #20
 8010e76:	d13f      	bne.n	8010ef8 <__gethex+0x450>
 8010e78:	f8d8 2000 	ldr.w	r2, [r8]
 8010e7c:	3a01      	subs	r2, #1
 8010e7e:	42b2      	cmp	r2, r6
 8010e80:	d10a      	bne.n	8010e98 <__gethex+0x3f0>
 8010e82:	1171      	asrs	r1, r6, #5
 8010e84:	2201      	movs	r2, #1
 8010e86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e8a:	f006 061f 	and.w	r6, r6, #31
 8010e8e:	fa02 f606 	lsl.w	r6, r2, r6
 8010e92:	421e      	tst	r6, r3
 8010e94:	bf18      	it	ne
 8010e96:	4617      	movne	r7, r2
 8010e98:	f047 0720 	orr.w	r7, r7, #32
 8010e9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010e9e:	601c      	str	r4, [r3, #0]
 8010ea0:	9b04      	ldr	r3, [sp, #16]
 8010ea2:	601d      	str	r5, [r3, #0]
 8010ea4:	e695      	b.n	8010bd2 <__gethex+0x12a>
 8010ea6:	4299      	cmp	r1, r3
 8010ea8:	f843 cc04 	str.w	ip, [r3, #-4]
 8010eac:	d8d8      	bhi.n	8010e60 <__gethex+0x3b8>
 8010eae:	68a3      	ldr	r3, [r4, #8]
 8010eb0:	459b      	cmp	fp, r3
 8010eb2:	db19      	blt.n	8010ee8 <__gethex+0x440>
 8010eb4:	6861      	ldr	r1, [r4, #4]
 8010eb6:	ee18 0a10 	vmov	r0, s16
 8010eba:	3101      	adds	r1, #1
 8010ebc:	f000 f93a 	bl	8011134 <_Balloc>
 8010ec0:	4681      	mov	r9, r0
 8010ec2:	b918      	cbnz	r0, 8010ecc <__gethex+0x424>
 8010ec4:	4b1a      	ldr	r3, [pc, #104]	; (8010f30 <__gethex+0x488>)
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	2184      	movs	r1, #132	; 0x84
 8010eca:	e6a8      	b.n	8010c1e <__gethex+0x176>
 8010ecc:	6922      	ldr	r2, [r4, #16]
 8010ece:	3202      	adds	r2, #2
 8010ed0:	f104 010c 	add.w	r1, r4, #12
 8010ed4:	0092      	lsls	r2, r2, #2
 8010ed6:	300c      	adds	r0, #12
 8010ed8:	f000 f91e 	bl	8011118 <memcpy>
 8010edc:	4621      	mov	r1, r4
 8010ede:	ee18 0a10 	vmov	r0, s16
 8010ee2:	f000 f967 	bl	80111b4 <_Bfree>
 8010ee6:	464c      	mov	r4, r9
 8010ee8:	6923      	ldr	r3, [r4, #16]
 8010eea:	1c5a      	adds	r2, r3, #1
 8010eec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010ef0:	6122      	str	r2, [r4, #16]
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	615a      	str	r2, [r3, #20]
 8010ef6:	e7bb      	b.n	8010e70 <__gethex+0x3c8>
 8010ef8:	6922      	ldr	r2, [r4, #16]
 8010efa:	455a      	cmp	r2, fp
 8010efc:	dd0b      	ble.n	8010f16 <__gethex+0x46e>
 8010efe:	2101      	movs	r1, #1
 8010f00:	4620      	mov	r0, r4
 8010f02:	f7ff fd69 	bl	80109d8 <rshift>
 8010f06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f0a:	3501      	adds	r5, #1
 8010f0c:	42ab      	cmp	r3, r5
 8010f0e:	f6ff aed0 	blt.w	8010cb2 <__gethex+0x20a>
 8010f12:	2701      	movs	r7, #1
 8010f14:	e7c0      	b.n	8010e98 <__gethex+0x3f0>
 8010f16:	f016 061f 	ands.w	r6, r6, #31
 8010f1a:	d0fa      	beq.n	8010f12 <__gethex+0x46a>
 8010f1c:	449a      	add	sl, r3
 8010f1e:	f1c6 0620 	rsb	r6, r6, #32
 8010f22:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010f26:	f000 f9fb 	bl	8011320 <__hi0bits>
 8010f2a:	42b0      	cmp	r0, r6
 8010f2c:	dbe7      	blt.n	8010efe <__gethex+0x456>
 8010f2e:	e7f0      	b.n	8010f12 <__gethex+0x46a>
 8010f30:	080137c4 	.word	0x080137c4

08010f34 <L_shift>:
 8010f34:	f1c2 0208 	rsb	r2, r2, #8
 8010f38:	0092      	lsls	r2, r2, #2
 8010f3a:	b570      	push	{r4, r5, r6, lr}
 8010f3c:	f1c2 0620 	rsb	r6, r2, #32
 8010f40:	6843      	ldr	r3, [r0, #4]
 8010f42:	6804      	ldr	r4, [r0, #0]
 8010f44:	fa03 f506 	lsl.w	r5, r3, r6
 8010f48:	432c      	orrs	r4, r5
 8010f4a:	40d3      	lsrs	r3, r2
 8010f4c:	6004      	str	r4, [r0, #0]
 8010f4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010f52:	4288      	cmp	r0, r1
 8010f54:	d3f4      	bcc.n	8010f40 <L_shift+0xc>
 8010f56:	bd70      	pop	{r4, r5, r6, pc}

08010f58 <__match>:
 8010f58:	b530      	push	{r4, r5, lr}
 8010f5a:	6803      	ldr	r3, [r0, #0]
 8010f5c:	3301      	adds	r3, #1
 8010f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f62:	b914      	cbnz	r4, 8010f6a <__match+0x12>
 8010f64:	6003      	str	r3, [r0, #0]
 8010f66:	2001      	movs	r0, #1
 8010f68:	bd30      	pop	{r4, r5, pc}
 8010f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010f72:	2d19      	cmp	r5, #25
 8010f74:	bf98      	it	ls
 8010f76:	3220      	addls	r2, #32
 8010f78:	42a2      	cmp	r2, r4
 8010f7a:	d0f0      	beq.n	8010f5e <__match+0x6>
 8010f7c:	2000      	movs	r0, #0
 8010f7e:	e7f3      	b.n	8010f68 <__match+0x10>

08010f80 <__hexnan>:
 8010f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f84:	680b      	ldr	r3, [r1, #0]
 8010f86:	6801      	ldr	r1, [r0, #0]
 8010f88:	115e      	asrs	r6, r3, #5
 8010f8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f8e:	f013 031f 	ands.w	r3, r3, #31
 8010f92:	b087      	sub	sp, #28
 8010f94:	bf18      	it	ne
 8010f96:	3604      	addne	r6, #4
 8010f98:	2500      	movs	r5, #0
 8010f9a:	1f37      	subs	r7, r6, #4
 8010f9c:	4682      	mov	sl, r0
 8010f9e:	4690      	mov	r8, r2
 8010fa0:	9301      	str	r3, [sp, #4]
 8010fa2:	f846 5c04 	str.w	r5, [r6, #-4]
 8010fa6:	46b9      	mov	r9, r7
 8010fa8:	463c      	mov	r4, r7
 8010faa:	9502      	str	r5, [sp, #8]
 8010fac:	46ab      	mov	fp, r5
 8010fae:	784a      	ldrb	r2, [r1, #1]
 8010fb0:	1c4b      	adds	r3, r1, #1
 8010fb2:	9303      	str	r3, [sp, #12]
 8010fb4:	b342      	cbz	r2, 8011008 <__hexnan+0x88>
 8010fb6:	4610      	mov	r0, r2
 8010fb8:	9105      	str	r1, [sp, #20]
 8010fba:	9204      	str	r2, [sp, #16]
 8010fbc:	f7ff fd5e 	bl	8010a7c <__hexdig_fun>
 8010fc0:	2800      	cmp	r0, #0
 8010fc2:	d14f      	bne.n	8011064 <__hexnan+0xe4>
 8010fc4:	9a04      	ldr	r2, [sp, #16]
 8010fc6:	9905      	ldr	r1, [sp, #20]
 8010fc8:	2a20      	cmp	r2, #32
 8010fca:	d818      	bhi.n	8010ffe <__hexnan+0x7e>
 8010fcc:	9b02      	ldr	r3, [sp, #8]
 8010fce:	459b      	cmp	fp, r3
 8010fd0:	dd13      	ble.n	8010ffa <__hexnan+0x7a>
 8010fd2:	454c      	cmp	r4, r9
 8010fd4:	d206      	bcs.n	8010fe4 <__hexnan+0x64>
 8010fd6:	2d07      	cmp	r5, #7
 8010fd8:	dc04      	bgt.n	8010fe4 <__hexnan+0x64>
 8010fda:	462a      	mov	r2, r5
 8010fdc:	4649      	mov	r1, r9
 8010fde:	4620      	mov	r0, r4
 8010fe0:	f7ff ffa8 	bl	8010f34 <L_shift>
 8010fe4:	4544      	cmp	r4, r8
 8010fe6:	d950      	bls.n	801108a <__hexnan+0x10a>
 8010fe8:	2300      	movs	r3, #0
 8010fea:	f1a4 0904 	sub.w	r9, r4, #4
 8010fee:	f844 3c04 	str.w	r3, [r4, #-4]
 8010ff2:	f8cd b008 	str.w	fp, [sp, #8]
 8010ff6:	464c      	mov	r4, r9
 8010ff8:	461d      	mov	r5, r3
 8010ffa:	9903      	ldr	r1, [sp, #12]
 8010ffc:	e7d7      	b.n	8010fae <__hexnan+0x2e>
 8010ffe:	2a29      	cmp	r2, #41	; 0x29
 8011000:	d156      	bne.n	80110b0 <__hexnan+0x130>
 8011002:	3102      	adds	r1, #2
 8011004:	f8ca 1000 	str.w	r1, [sl]
 8011008:	f1bb 0f00 	cmp.w	fp, #0
 801100c:	d050      	beq.n	80110b0 <__hexnan+0x130>
 801100e:	454c      	cmp	r4, r9
 8011010:	d206      	bcs.n	8011020 <__hexnan+0xa0>
 8011012:	2d07      	cmp	r5, #7
 8011014:	dc04      	bgt.n	8011020 <__hexnan+0xa0>
 8011016:	462a      	mov	r2, r5
 8011018:	4649      	mov	r1, r9
 801101a:	4620      	mov	r0, r4
 801101c:	f7ff ff8a 	bl	8010f34 <L_shift>
 8011020:	4544      	cmp	r4, r8
 8011022:	d934      	bls.n	801108e <__hexnan+0x10e>
 8011024:	f1a8 0204 	sub.w	r2, r8, #4
 8011028:	4623      	mov	r3, r4
 801102a:	f853 1b04 	ldr.w	r1, [r3], #4
 801102e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011032:	429f      	cmp	r7, r3
 8011034:	d2f9      	bcs.n	801102a <__hexnan+0xaa>
 8011036:	1b3b      	subs	r3, r7, r4
 8011038:	f023 0303 	bic.w	r3, r3, #3
 801103c:	3304      	adds	r3, #4
 801103e:	3401      	adds	r4, #1
 8011040:	3e03      	subs	r6, #3
 8011042:	42b4      	cmp	r4, r6
 8011044:	bf88      	it	hi
 8011046:	2304      	movhi	r3, #4
 8011048:	4443      	add	r3, r8
 801104a:	2200      	movs	r2, #0
 801104c:	f843 2b04 	str.w	r2, [r3], #4
 8011050:	429f      	cmp	r7, r3
 8011052:	d2fb      	bcs.n	801104c <__hexnan+0xcc>
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	b91b      	cbnz	r3, 8011060 <__hexnan+0xe0>
 8011058:	4547      	cmp	r7, r8
 801105a:	d127      	bne.n	80110ac <__hexnan+0x12c>
 801105c:	2301      	movs	r3, #1
 801105e:	603b      	str	r3, [r7, #0]
 8011060:	2005      	movs	r0, #5
 8011062:	e026      	b.n	80110b2 <__hexnan+0x132>
 8011064:	3501      	adds	r5, #1
 8011066:	2d08      	cmp	r5, #8
 8011068:	f10b 0b01 	add.w	fp, fp, #1
 801106c:	dd06      	ble.n	801107c <__hexnan+0xfc>
 801106e:	4544      	cmp	r4, r8
 8011070:	d9c3      	bls.n	8010ffa <__hexnan+0x7a>
 8011072:	2300      	movs	r3, #0
 8011074:	f844 3c04 	str.w	r3, [r4, #-4]
 8011078:	2501      	movs	r5, #1
 801107a:	3c04      	subs	r4, #4
 801107c:	6822      	ldr	r2, [r4, #0]
 801107e:	f000 000f 	and.w	r0, r0, #15
 8011082:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011086:	6022      	str	r2, [r4, #0]
 8011088:	e7b7      	b.n	8010ffa <__hexnan+0x7a>
 801108a:	2508      	movs	r5, #8
 801108c:	e7b5      	b.n	8010ffa <__hexnan+0x7a>
 801108e:	9b01      	ldr	r3, [sp, #4]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d0df      	beq.n	8011054 <__hexnan+0xd4>
 8011094:	f04f 32ff 	mov.w	r2, #4294967295
 8011098:	f1c3 0320 	rsb	r3, r3, #32
 801109c:	fa22 f303 	lsr.w	r3, r2, r3
 80110a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80110a4:	401a      	ands	r2, r3
 80110a6:	f846 2c04 	str.w	r2, [r6, #-4]
 80110aa:	e7d3      	b.n	8011054 <__hexnan+0xd4>
 80110ac:	3f04      	subs	r7, #4
 80110ae:	e7d1      	b.n	8011054 <__hexnan+0xd4>
 80110b0:	2004      	movs	r0, #4
 80110b2:	b007      	add	sp, #28
 80110b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110b8 <_localeconv_r>:
 80110b8:	4800      	ldr	r0, [pc, #0]	; (80110bc <_localeconv_r+0x4>)
 80110ba:	4770      	bx	lr
 80110bc:	200001b8 	.word	0x200001b8

080110c0 <_lseek_r>:
 80110c0:	b538      	push	{r3, r4, r5, lr}
 80110c2:	4d07      	ldr	r5, [pc, #28]	; (80110e0 <_lseek_r+0x20>)
 80110c4:	4604      	mov	r4, r0
 80110c6:	4608      	mov	r0, r1
 80110c8:	4611      	mov	r1, r2
 80110ca:	2200      	movs	r2, #0
 80110cc:	602a      	str	r2, [r5, #0]
 80110ce:	461a      	mov	r2, r3
 80110d0:	f7f4 faf8 	bl	80056c4 <_lseek>
 80110d4:	1c43      	adds	r3, r0, #1
 80110d6:	d102      	bne.n	80110de <_lseek_r+0x1e>
 80110d8:	682b      	ldr	r3, [r5, #0]
 80110da:	b103      	cbz	r3, 80110de <_lseek_r+0x1e>
 80110dc:	6023      	str	r3, [r4, #0]
 80110de:	bd38      	pop	{r3, r4, r5, pc}
 80110e0:	20000a4c 	.word	0x20000a4c

080110e4 <malloc>:
 80110e4:	4b02      	ldr	r3, [pc, #8]	; (80110f0 <malloc+0xc>)
 80110e6:	4601      	mov	r1, r0
 80110e8:	6818      	ldr	r0, [r3, #0]
 80110ea:	f000 bd3d 	b.w	8011b68 <_malloc_r>
 80110ee:	bf00      	nop
 80110f0:	20000060 	.word	0x20000060

080110f4 <__ascii_mbtowc>:
 80110f4:	b082      	sub	sp, #8
 80110f6:	b901      	cbnz	r1, 80110fa <__ascii_mbtowc+0x6>
 80110f8:	a901      	add	r1, sp, #4
 80110fa:	b142      	cbz	r2, 801110e <__ascii_mbtowc+0x1a>
 80110fc:	b14b      	cbz	r3, 8011112 <__ascii_mbtowc+0x1e>
 80110fe:	7813      	ldrb	r3, [r2, #0]
 8011100:	600b      	str	r3, [r1, #0]
 8011102:	7812      	ldrb	r2, [r2, #0]
 8011104:	1e10      	subs	r0, r2, #0
 8011106:	bf18      	it	ne
 8011108:	2001      	movne	r0, #1
 801110a:	b002      	add	sp, #8
 801110c:	4770      	bx	lr
 801110e:	4610      	mov	r0, r2
 8011110:	e7fb      	b.n	801110a <__ascii_mbtowc+0x16>
 8011112:	f06f 0001 	mvn.w	r0, #1
 8011116:	e7f8      	b.n	801110a <__ascii_mbtowc+0x16>

08011118 <memcpy>:
 8011118:	440a      	add	r2, r1
 801111a:	4291      	cmp	r1, r2
 801111c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011120:	d100      	bne.n	8011124 <memcpy+0xc>
 8011122:	4770      	bx	lr
 8011124:	b510      	push	{r4, lr}
 8011126:	f811 4b01 	ldrb.w	r4, [r1], #1
 801112a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801112e:	4291      	cmp	r1, r2
 8011130:	d1f9      	bne.n	8011126 <memcpy+0xe>
 8011132:	bd10      	pop	{r4, pc}

08011134 <_Balloc>:
 8011134:	b570      	push	{r4, r5, r6, lr}
 8011136:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011138:	4604      	mov	r4, r0
 801113a:	460d      	mov	r5, r1
 801113c:	b976      	cbnz	r6, 801115c <_Balloc+0x28>
 801113e:	2010      	movs	r0, #16
 8011140:	f7ff ffd0 	bl	80110e4 <malloc>
 8011144:	4602      	mov	r2, r0
 8011146:	6260      	str	r0, [r4, #36]	; 0x24
 8011148:	b920      	cbnz	r0, 8011154 <_Balloc+0x20>
 801114a:	4b18      	ldr	r3, [pc, #96]	; (80111ac <_Balloc+0x78>)
 801114c:	4818      	ldr	r0, [pc, #96]	; (80111b0 <_Balloc+0x7c>)
 801114e:	2166      	movs	r1, #102	; 0x66
 8011150:	f001 fb00 	bl	8012754 <__assert_func>
 8011154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011158:	6006      	str	r6, [r0, #0]
 801115a:	60c6      	str	r6, [r0, #12]
 801115c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801115e:	68f3      	ldr	r3, [r6, #12]
 8011160:	b183      	cbz	r3, 8011184 <_Balloc+0x50>
 8011162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011164:	68db      	ldr	r3, [r3, #12]
 8011166:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801116a:	b9b8      	cbnz	r0, 801119c <_Balloc+0x68>
 801116c:	2101      	movs	r1, #1
 801116e:	fa01 f605 	lsl.w	r6, r1, r5
 8011172:	1d72      	adds	r2, r6, #5
 8011174:	0092      	lsls	r2, r2, #2
 8011176:	4620      	mov	r0, r4
 8011178:	f000 fc97 	bl	8011aaa <_calloc_r>
 801117c:	b160      	cbz	r0, 8011198 <_Balloc+0x64>
 801117e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011182:	e00e      	b.n	80111a2 <_Balloc+0x6e>
 8011184:	2221      	movs	r2, #33	; 0x21
 8011186:	2104      	movs	r1, #4
 8011188:	4620      	mov	r0, r4
 801118a:	f000 fc8e 	bl	8011aaa <_calloc_r>
 801118e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011190:	60f0      	str	r0, [r6, #12]
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d1e4      	bne.n	8011162 <_Balloc+0x2e>
 8011198:	2000      	movs	r0, #0
 801119a:	bd70      	pop	{r4, r5, r6, pc}
 801119c:	6802      	ldr	r2, [r0, #0]
 801119e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80111a2:	2300      	movs	r3, #0
 80111a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80111a8:	e7f7      	b.n	801119a <_Balloc+0x66>
 80111aa:	bf00      	nop
 80111ac:	0801374e 	.word	0x0801374e
 80111b0:	08013854 	.word	0x08013854

080111b4 <_Bfree>:
 80111b4:	b570      	push	{r4, r5, r6, lr}
 80111b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80111b8:	4605      	mov	r5, r0
 80111ba:	460c      	mov	r4, r1
 80111bc:	b976      	cbnz	r6, 80111dc <_Bfree+0x28>
 80111be:	2010      	movs	r0, #16
 80111c0:	f7ff ff90 	bl	80110e4 <malloc>
 80111c4:	4602      	mov	r2, r0
 80111c6:	6268      	str	r0, [r5, #36]	; 0x24
 80111c8:	b920      	cbnz	r0, 80111d4 <_Bfree+0x20>
 80111ca:	4b09      	ldr	r3, [pc, #36]	; (80111f0 <_Bfree+0x3c>)
 80111cc:	4809      	ldr	r0, [pc, #36]	; (80111f4 <_Bfree+0x40>)
 80111ce:	218a      	movs	r1, #138	; 0x8a
 80111d0:	f001 fac0 	bl	8012754 <__assert_func>
 80111d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111d8:	6006      	str	r6, [r0, #0]
 80111da:	60c6      	str	r6, [r0, #12]
 80111dc:	b13c      	cbz	r4, 80111ee <_Bfree+0x3a>
 80111de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80111e0:	6862      	ldr	r2, [r4, #4]
 80111e2:	68db      	ldr	r3, [r3, #12]
 80111e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80111e8:	6021      	str	r1, [r4, #0]
 80111ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80111ee:	bd70      	pop	{r4, r5, r6, pc}
 80111f0:	0801374e 	.word	0x0801374e
 80111f4:	08013854 	.word	0x08013854

080111f8 <__multadd>:
 80111f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111fc:	690e      	ldr	r6, [r1, #16]
 80111fe:	4607      	mov	r7, r0
 8011200:	4698      	mov	r8, r3
 8011202:	460c      	mov	r4, r1
 8011204:	f101 0014 	add.w	r0, r1, #20
 8011208:	2300      	movs	r3, #0
 801120a:	6805      	ldr	r5, [r0, #0]
 801120c:	b2a9      	uxth	r1, r5
 801120e:	fb02 8101 	mla	r1, r2, r1, r8
 8011212:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011216:	0c2d      	lsrs	r5, r5, #16
 8011218:	fb02 c505 	mla	r5, r2, r5, ip
 801121c:	b289      	uxth	r1, r1
 801121e:	3301      	adds	r3, #1
 8011220:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011224:	429e      	cmp	r6, r3
 8011226:	f840 1b04 	str.w	r1, [r0], #4
 801122a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801122e:	dcec      	bgt.n	801120a <__multadd+0x12>
 8011230:	f1b8 0f00 	cmp.w	r8, #0
 8011234:	d022      	beq.n	801127c <__multadd+0x84>
 8011236:	68a3      	ldr	r3, [r4, #8]
 8011238:	42b3      	cmp	r3, r6
 801123a:	dc19      	bgt.n	8011270 <__multadd+0x78>
 801123c:	6861      	ldr	r1, [r4, #4]
 801123e:	4638      	mov	r0, r7
 8011240:	3101      	adds	r1, #1
 8011242:	f7ff ff77 	bl	8011134 <_Balloc>
 8011246:	4605      	mov	r5, r0
 8011248:	b928      	cbnz	r0, 8011256 <__multadd+0x5e>
 801124a:	4602      	mov	r2, r0
 801124c:	4b0d      	ldr	r3, [pc, #52]	; (8011284 <__multadd+0x8c>)
 801124e:	480e      	ldr	r0, [pc, #56]	; (8011288 <__multadd+0x90>)
 8011250:	21b5      	movs	r1, #181	; 0xb5
 8011252:	f001 fa7f 	bl	8012754 <__assert_func>
 8011256:	6922      	ldr	r2, [r4, #16]
 8011258:	3202      	adds	r2, #2
 801125a:	f104 010c 	add.w	r1, r4, #12
 801125e:	0092      	lsls	r2, r2, #2
 8011260:	300c      	adds	r0, #12
 8011262:	f7ff ff59 	bl	8011118 <memcpy>
 8011266:	4621      	mov	r1, r4
 8011268:	4638      	mov	r0, r7
 801126a:	f7ff ffa3 	bl	80111b4 <_Bfree>
 801126e:	462c      	mov	r4, r5
 8011270:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011274:	3601      	adds	r6, #1
 8011276:	f8c3 8014 	str.w	r8, [r3, #20]
 801127a:	6126      	str	r6, [r4, #16]
 801127c:	4620      	mov	r0, r4
 801127e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011282:	bf00      	nop
 8011284:	080137c4 	.word	0x080137c4
 8011288:	08013854 	.word	0x08013854

0801128c <__s2b>:
 801128c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011290:	460c      	mov	r4, r1
 8011292:	4615      	mov	r5, r2
 8011294:	461f      	mov	r7, r3
 8011296:	2209      	movs	r2, #9
 8011298:	3308      	adds	r3, #8
 801129a:	4606      	mov	r6, r0
 801129c:	fb93 f3f2 	sdiv	r3, r3, r2
 80112a0:	2100      	movs	r1, #0
 80112a2:	2201      	movs	r2, #1
 80112a4:	429a      	cmp	r2, r3
 80112a6:	db09      	blt.n	80112bc <__s2b+0x30>
 80112a8:	4630      	mov	r0, r6
 80112aa:	f7ff ff43 	bl	8011134 <_Balloc>
 80112ae:	b940      	cbnz	r0, 80112c2 <__s2b+0x36>
 80112b0:	4602      	mov	r2, r0
 80112b2:	4b19      	ldr	r3, [pc, #100]	; (8011318 <__s2b+0x8c>)
 80112b4:	4819      	ldr	r0, [pc, #100]	; (801131c <__s2b+0x90>)
 80112b6:	21ce      	movs	r1, #206	; 0xce
 80112b8:	f001 fa4c 	bl	8012754 <__assert_func>
 80112bc:	0052      	lsls	r2, r2, #1
 80112be:	3101      	adds	r1, #1
 80112c0:	e7f0      	b.n	80112a4 <__s2b+0x18>
 80112c2:	9b08      	ldr	r3, [sp, #32]
 80112c4:	6143      	str	r3, [r0, #20]
 80112c6:	2d09      	cmp	r5, #9
 80112c8:	f04f 0301 	mov.w	r3, #1
 80112cc:	6103      	str	r3, [r0, #16]
 80112ce:	dd16      	ble.n	80112fe <__s2b+0x72>
 80112d0:	f104 0909 	add.w	r9, r4, #9
 80112d4:	46c8      	mov	r8, r9
 80112d6:	442c      	add	r4, r5
 80112d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80112dc:	4601      	mov	r1, r0
 80112de:	3b30      	subs	r3, #48	; 0x30
 80112e0:	220a      	movs	r2, #10
 80112e2:	4630      	mov	r0, r6
 80112e4:	f7ff ff88 	bl	80111f8 <__multadd>
 80112e8:	45a0      	cmp	r8, r4
 80112ea:	d1f5      	bne.n	80112d8 <__s2b+0x4c>
 80112ec:	f1a5 0408 	sub.w	r4, r5, #8
 80112f0:	444c      	add	r4, r9
 80112f2:	1b2d      	subs	r5, r5, r4
 80112f4:	1963      	adds	r3, r4, r5
 80112f6:	42bb      	cmp	r3, r7
 80112f8:	db04      	blt.n	8011304 <__s2b+0x78>
 80112fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112fe:	340a      	adds	r4, #10
 8011300:	2509      	movs	r5, #9
 8011302:	e7f6      	b.n	80112f2 <__s2b+0x66>
 8011304:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011308:	4601      	mov	r1, r0
 801130a:	3b30      	subs	r3, #48	; 0x30
 801130c:	220a      	movs	r2, #10
 801130e:	4630      	mov	r0, r6
 8011310:	f7ff ff72 	bl	80111f8 <__multadd>
 8011314:	e7ee      	b.n	80112f4 <__s2b+0x68>
 8011316:	bf00      	nop
 8011318:	080137c4 	.word	0x080137c4
 801131c:	08013854 	.word	0x08013854

08011320 <__hi0bits>:
 8011320:	0c03      	lsrs	r3, r0, #16
 8011322:	041b      	lsls	r3, r3, #16
 8011324:	b9d3      	cbnz	r3, 801135c <__hi0bits+0x3c>
 8011326:	0400      	lsls	r0, r0, #16
 8011328:	2310      	movs	r3, #16
 801132a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801132e:	bf04      	itt	eq
 8011330:	0200      	lsleq	r0, r0, #8
 8011332:	3308      	addeq	r3, #8
 8011334:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011338:	bf04      	itt	eq
 801133a:	0100      	lsleq	r0, r0, #4
 801133c:	3304      	addeq	r3, #4
 801133e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011342:	bf04      	itt	eq
 8011344:	0080      	lsleq	r0, r0, #2
 8011346:	3302      	addeq	r3, #2
 8011348:	2800      	cmp	r0, #0
 801134a:	db05      	blt.n	8011358 <__hi0bits+0x38>
 801134c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011350:	f103 0301 	add.w	r3, r3, #1
 8011354:	bf08      	it	eq
 8011356:	2320      	moveq	r3, #32
 8011358:	4618      	mov	r0, r3
 801135a:	4770      	bx	lr
 801135c:	2300      	movs	r3, #0
 801135e:	e7e4      	b.n	801132a <__hi0bits+0xa>

08011360 <__lo0bits>:
 8011360:	6803      	ldr	r3, [r0, #0]
 8011362:	f013 0207 	ands.w	r2, r3, #7
 8011366:	4601      	mov	r1, r0
 8011368:	d00b      	beq.n	8011382 <__lo0bits+0x22>
 801136a:	07da      	lsls	r2, r3, #31
 801136c:	d424      	bmi.n	80113b8 <__lo0bits+0x58>
 801136e:	0798      	lsls	r0, r3, #30
 8011370:	bf49      	itett	mi
 8011372:	085b      	lsrmi	r3, r3, #1
 8011374:	089b      	lsrpl	r3, r3, #2
 8011376:	2001      	movmi	r0, #1
 8011378:	600b      	strmi	r3, [r1, #0]
 801137a:	bf5c      	itt	pl
 801137c:	600b      	strpl	r3, [r1, #0]
 801137e:	2002      	movpl	r0, #2
 8011380:	4770      	bx	lr
 8011382:	b298      	uxth	r0, r3
 8011384:	b9b0      	cbnz	r0, 80113b4 <__lo0bits+0x54>
 8011386:	0c1b      	lsrs	r3, r3, #16
 8011388:	2010      	movs	r0, #16
 801138a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801138e:	bf04      	itt	eq
 8011390:	0a1b      	lsreq	r3, r3, #8
 8011392:	3008      	addeq	r0, #8
 8011394:	071a      	lsls	r2, r3, #28
 8011396:	bf04      	itt	eq
 8011398:	091b      	lsreq	r3, r3, #4
 801139a:	3004      	addeq	r0, #4
 801139c:	079a      	lsls	r2, r3, #30
 801139e:	bf04      	itt	eq
 80113a0:	089b      	lsreq	r3, r3, #2
 80113a2:	3002      	addeq	r0, #2
 80113a4:	07da      	lsls	r2, r3, #31
 80113a6:	d403      	bmi.n	80113b0 <__lo0bits+0x50>
 80113a8:	085b      	lsrs	r3, r3, #1
 80113aa:	f100 0001 	add.w	r0, r0, #1
 80113ae:	d005      	beq.n	80113bc <__lo0bits+0x5c>
 80113b0:	600b      	str	r3, [r1, #0]
 80113b2:	4770      	bx	lr
 80113b4:	4610      	mov	r0, r2
 80113b6:	e7e8      	b.n	801138a <__lo0bits+0x2a>
 80113b8:	2000      	movs	r0, #0
 80113ba:	4770      	bx	lr
 80113bc:	2020      	movs	r0, #32
 80113be:	4770      	bx	lr

080113c0 <__i2b>:
 80113c0:	b510      	push	{r4, lr}
 80113c2:	460c      	mov	r4, r1
 80113c4:	2101      	movs	r1, #1
 80113c6:	f7ff feb5 	bl	8011134 <_Balloc>
 80113ca:	4602      	mov	r2, r0
 80113cc:	b928      	cbnz	r0, 80113da <__i2b+0x1a>
 80113ce:	4b05      	ldr	r3, [pc, #20]	; (80113e4 <__i2b+0x24>)
 80113d0:	4805      	ldr	r0, [pc, #20]	; (80113e8 <__i2b+0x28>)
 80113d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80113d6:	f001 f9bd 	bl	8012754 <__assert_func>
 80113da:	2301      	movs	r3, #1
 80113dc:	6144      	str	r4, [r0, #20]
 80113de:	6103      	str	r3, [r0, #16]
 80113e0:	bd10      	pop	{r4, pc}
 80113e2:	bf00      	nop
 80113e4:	080137c4 	.word	0x080137c4
 80113e8:	08013854 	.word	0x08013854

080113ec <__multiply>:
 80113ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113f0:	4614      	mov	r4, r2
 80113f2:	690a      	ldr	r2, [r1, #16]
 80113f4:	6923      	ldr	r3, [r4, #16]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	bfb8      	it	lt
 80113fa:	460b      	movlt	r3, r1
 80113fc:	460d      	mov	r5, r1
 80113fe:	bfbc      	itt	lt
 8011400:	4625      	movlt	r5, r4
 8011402:	461c      	movlt	r4, r3
 8011404:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011408:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801140c:	68ab      	ldr	r3, [r5, #8]
 801140e:	6869      	ldr	r1, [r5, #4]
 8011410:	eb0a 0709 	add.w	r7, sl, r9
 8011414:	42bb      	cmp	r3, r7
 8011416:	b085      	sub	sp, #20
 8011418:	bfb8      	it	lt
 801141a:	3101      	addlt	r1, #1
 801141c:	f7ff fe8a 	bl	8011134 <_Balloc>
 8011420:	b930      	cbnz	r0, 8011430 <__multiply+0x44>
 8011422:	4602      	mov	r2, r0
 8011424:	4b42      	ldr	r3, [pc, #264]	; (8011530 <__multiply+0x144>)
 8011426:	4843      	ldr	r0, [pc, #268]	; (8011534 <__multiply+0x148>)
 8011428:	f240 115d 	movw	r1, #349	; 0x15d
 801142c:	f001 f992 	bl	8012754 <__assert_func>
 8011430:	f100 0614 	add.w	r6, r0, #20
 8011434:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011438:	4633      	mov	r3, r6
 801143a:	2200      	movs	r2, #0
 801143c:	4543      	cmp	r3, r8
 801143e:	d31e      	bcc.n	801147e <__multiply+0x92>
 8011440:	f105 0c14 	add.w	ip, r5, #20
 8011444:	f104 0314 	add.w	r3, r4, #20
 8011448:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801144c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011450:	9202      	str	r2, [sp, #8]
 8011452:	ebac 0205 	sub.w	r2, ip, r5
 8011456:	3a15      	subs	r2, #21
 8011458:	f022 0203 	bic.w	r2, r2, #3
 801145c:	3204      	adds	r2, #4
 801145e:	f105 0115 	add.w	r1, r5, #21
 8011462:	458c      	cmp	ip, r1
 8011464:	bf38      	it	cc
 8011466:	2204      	movcc	r2, #4
 8011468:	9201      	str	r2, [sp, #4]
 801146a:	9a02      	ldr	r2, [sp, #8]
 801146c:	9303      	str	r3, [sp, #12]
 801146e:	429a      	cmp	r2, r3
 8011470:	d808      	bhi.n	8011484 <__multiply+0x98>
 8011472:	2f00      	cmp	r7, #0
 8011474:	dc55      	bgt.n	8011522 <__multiply+0x136>
 8011476:	6107      	str	r7, [r0, #16]
 8011478:	b005      	add	sp, #20
 801147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801147e:	f843 2b04 	str.w	r2, [r3], #4
 8011482:	e7db      	b.n	801143c <__multiply+0x50>
 8011484:	f8b3 a000 	ldrh.w	sl, [r3]
 8011488:	f1ba 0f00 	cmp.w	sl, #0
 801148c:	d020      	beq.n	80114d0 <__multiply+0xe4>
 801148e:	f105 0e14 	add.w	lr, r5, #20
 8011492:	46b1      	mov	r9, r6
 8011494:	2200      	movs	r2, #0
 8011496:	f85e 4b04 	ldr.w	r4, [lr], #4
 801149a:	f8d9 b000 	ldr.w	fp, [r9]
 801149e:	b2a1      	uxth	r1, r4
 80114a0:	fa1f fb8b 	uxth.w	fp, fp
 80114a4:	fb0a b101 	mla	r1, sl, r1, fp
 80114a8:	4411      	add	r1, r2
 80114aa:	f8d9 2000 	ldr.w	r2, [r9]
 80114ae:	0c24      	lsrs	r4, r4, #16
 80114b0:	0c12      	lsrs	r2, r2, #16
 80114b2:	fb0a 2404 	mla	r4, sl, r4, r2
 80114b6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80114ba:	b289      	uxth	r1, r1
 80114bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80114c0:	45f4      	cmp	ip, lr
 80114c2:	f849 1b04 	str.w	r1, [r9], #4
 80114c6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80114ca:	d8e4      	bhi.n	8011496 <__multiply+0xaa>
 80114cc:	9901      	ldr	r1, [sp, #4]
 80114ce:	5072      	str	r2, [r6, r1]
 80114d0:	9a03      	ldr	r2, [sp, #12]
 80114d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80114d6:	3304      	adds	r3, #4
 80114d8:	f1b9 0f00 	cmp.w	r9, #0
 80114dc:	d01f      	beq.n	801151e <__multiply+0x132>
 80114de:	6834      	ldr	r4, [r6, #0]
 80114e0:	f105 0114 	add.w	r1, r5, #20
 80114e4:	46b6      	mov	lr, r6
 80114e6:	f04f 0a00 	mov.w	sl, #0
 80114ea:	880a      	ldrh	r2, [r1, #0]
 80114ec:	f8be b002 	ldrh.w	fp, [lr, #2]
 80114f0:	fb09 b202 	mla	r2, r9, r2, fp
 80114f4:	4492      	add	sl, r2
 80114f6:	b2a4      	uxth	r4, r4
 80114f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80114fc:	f84e 4b04 	str.w	r4, [lr], #4
 8011500:	f851 4b04 	ldr.w	r4, [r1], #4
 8011504:	f8be 2000 	ldrh.w	r2, [lr]
 8011508:	0c24      	lsrs	r4, r4, #16
 801150a:	fb09 2404 	mla	r4, r9, r4, r2
 801150e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011512:	458c      	cmp	ip, r1
 8011514:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011518:	d8e7      	bhi.n	80114ea <__multiply+0xfe>
 801151a:	9a01      	ldr	r2, [sp, #4]
 801151c:	50b4      	str	r4, [r6, r2]
 801151e:	3604      	adds	r6, #4
 8011520:	e7a3      	b.n	801146a <__multiply+0x7e>
 8011522:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011526:	2b00      	cmp	r3, #0
 8011528:	d1a5      	bne.n	8011476 <__multiply+0x8a>
 801152a:	3f01      	subs	r7, #1
 801152c:	e7a1      	b.n	8011472 <__multiply+0x86>
 801152e:	bf00      	nop
 8011530:	080137c4 	.word	0x080137c4
 8011534:	08013854 	.word	0x08013854

08011538 <__pow5mult>:
 8011538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801153c:	4615      	mov	r5, r2
 801153e:	f012 0203 	ands.w	r2, r2, #3
 8011542:	4606      	mov	r6, r0
 8011544:	460f      	mov	r7, r1
 8011546:	d007      	beq.n	8011558 <__pow5mult+0x20>
 8011548:	4c25      	ldr	r4, [pc, #148]	; (80115e0 <__pow5mult+0xa8>)
 801154a:	3a01      	subs	r2, #1
 801154c:	2300      	movs	r3, #0
 801154e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011552:	f7ff fe51 	bl	80111f8 <__multadd>
 8011556:	4607      	mov	r7, r0
 8011558:	10ad      	asrs	r5, r5, #2
 801155a:	d03d      	beq.n	80115d8 <__pow5mult+0xa0>
 801155c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801155e:	b97c      	cbnz	r4, 8011580 <__pow5mult+0x48>
 8011560:	2010      	movs	r0, #16
 8011562:	f7ff fdbf 	bl	80110e4 <malloc>
 8011566:	4602      	mov	r2, r0
 8011568:	6270      	str	r0, [r6, #36]	; 0x24
 801156a:	b928      	cbnz	r0, 8011578 <__pow5mult+0x40>
 801156c:	4b1d      	ldr	r3, [pc, #116]	; (80115e4 <__pow5mult+0xac>)
 801156e:	481e      	ldr	r0, [pc, #120]	; (80115e8 <__pow5mult+0xb0>)
 8011570:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011574:	f001 f8ee 	bl	8012754 <__assert_func>
 8011578:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801157c:	6004      	str	r4, [r0, #0]
 801157e:	60c4      	str	r4, [r0, #12]
 8011580:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011584:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011588:	b94c      	cbnz	r4, 801159e <__pow5mult+0x66>
 801158a:	f240 2171 	movw	r1, #625	; 0x271
 801158e:	4630      	mov	r0, r6
 8011590:	f7ff ff16 	bl	80113c0 <__i2b>
 8011594:	2300      	movs	r3, #0
 8011596:	f8c8 0008 	str.w	r0, [r8, #8]
 801159a:	4604      	mov	r4, r0
 801159c:	6003      	str	r3, [r0, #0]
 801159e:	f04f 0900 	mov.w	r9, #0
 80115a2:	07eb      	lsls	r3, r5, #31
 80115a4:	d50a      	bpl.n	80115bc <__pow5mult+0x84>
 80115a6:	4639      	mov	r1, r7
 80115a8:	4622      	mov	r2, r4
 80115aa:	4630      	mov	r0, r6
 80115ac:	f7ff ff1e 	bl	80113ec <__multiply>
 80115b0:	4639      	mov	r1, r7
 80115b2:	4680      	mov	r8, r0
 80115b4:	4630      	mov	r0, r6
 80115b6:	f7ff fdfd 	bl	80111b4 <_Bfree>
 80115ba:	4647      	mov	r7, r8
 80115bc:	106d      	asrs	r5, r5, #1
 80115be:	d00b      	beq.n	80115d8 <__pow5mult+0xa0>
 80115c0:	6820      	ldr	r0, [r4, #0]
 80115c2:	b938      	cbnz	r0, 80115d4 <__pow5mult+0x9c>
 80115c4:	4622      	mov	r2, r4
 80115c6:	4621      	mov	r1, r4
 80115c8:	4630      	mov	r0, r6
 80115ca:	f7ff ff0f 	bl	80113ec <__multiply>
 80115ce:	6020      	str	r0, [r4, #0]
 80115d0:	f8c0 9000 	str.w	r9, [r0]
 80115d4:	4604      	mov	r4, r0
 80115d6:	e7e4      	b.n	80115a2 <__pow5mult+0x6a>
 80115d8:	4638      	mov	r0, r7
 80115da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115de:	bf00      	nop
 80115e0:	080139a8 	.word	0x080139a8
 80115e4:	0801374e 	.word	0x0801374e
 80115e8:	08013854 	.word	0x08013854

080115ec <__lshift>:
 80115ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115f0:	460c      	mov	r4, r1
 80115f2:	6849      	ldr	r1, [r1, #4]
 80115f4:	6923      	ldr	r3, [r4, #16]
 80115f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80115fa:	68a3      	ldr	r3, [r4, #8]
 80115fc:	4607      	mov	r7, r0
 80115fe:	4691      	mov	r9, r2
 8011600:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011604:	f108 0601 	add.w	r6, r8, #1
 8011608:	42b3      	cmp	r3, r6
 801160a:	db0b      	blt.n	8011624 <__lshift+0x38>
 801160c:	4638      	mov	r0, r7
 801160e:	f7ff fd91 	bl	8011134 <_Balloc>
 8011612:	4605      	mov	r5, r0
 8011614:	b948      	cbnz	r0, 801162a <__lshift+0x3e>
 8011616:	4602      	mov	r2, r0
 8011618:	4b28      	ldr	r3, [pc, #160]	; (80116bc <__lshift+0xd0>)
 801161a:	4829      	ldr	r0, [pc, #164]	; (80116c0 <__lshift+0xd4>)
 801161c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011620:	f001 f898 	bl	8012754 <__assert_func>
 8011624:	3101      	adds	r1, #1
 8011626:	005b      	lsls	r3, r3, #1
 8011628:	e7ee      	b.n	8011608 <__lshift+0x1c>
 801162a:	2300      	movs	r3, #0
 801162c:	f100 0114 	add.w	r1, r0, #20
 8011630:	f100 0210 	add.w	r2, r0, #16
 8011634:	4618      	mov	r0, r3
 8011636:	4553      	cmp	r3, sl
 8011638:	db33      	blt.n	80116a2 <__lshift+0xb6>
 801163a:	6920      	ldr	r0, [r4, #16]
 801163c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011640:	f104 0314 	add.w	r3, r4, #20
 8011644:	f019 091f 	ands.w	r9, r9, #31
 8011648:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801164c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011650:	d02b      	beq.n	80116aa <__lshift+0xbe>
 8011652:	f1c9 0e20 	rsb	lr, r9, #32
 8011656:	468a      	mov	sl, r1
 8011658:	2200      	movs	r2, #0
 801165a:	6818      	ldr	r0, [r3, #0]
 801165c:	fa00 f009 	lsl.w	r0, r0, r9
 8011660:	4302      	orrs	r2, r0
 8011662:	f84a 2b04 	str.w	r2, [sl], #4
 8011666:	f853 2b04 	ldr.w	r2, [r3], #4
 801166a:	459c      	cmp	ip, r3
 801166c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011670:	d8f3      	bhi.n	801165a <__lshift+0x6e>
 8011672:	ebac 0304 	sub.w	r3, ip, r4
 8011676:	3b15      	subs	r3, #21
 8011678:	f023 0303 	bic.w	r3, r3, #3
 801167c:	3304      	adds	r3, #4
 801167e:	f104 0015 	add.w	r0, r4, #21
 8011682:	4584      	cmp	ip, r0
 8011684:	bf38      	it	cc
 8011686:	2304      	movcc	r3, #4
 8011688:	50ca      	str	r2, [r1, r3]
 801168a:	b10a      	cbz	r2, 8011690 <__lshift+0xa4>
 801168c:	f108 0602 	add.w	r6, r8, #2
 8011690:	3e01      	subs	r6, #1
 8011692:	4638      	mov	r0, r7
 8011694:	612e      	str	r6, [r5, #16]
 8011696:	4621      	mov	r1, r4
 8011698:	f7ff fd8c 	bl	80111b4 <_Bfree>
 801169c:	4628      	mov	r0, r5
 801169e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80116a6:	3301      	adds	r3, #1
 80116a8:	e7c5      	b.n	8011636 <__lshift+0x4a>
 80116aa:	3904      	subs	r1, #4
 80116ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80116b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80116b4:	459c      	cmp	ip, r3
 80116b6:	d8f9      	bhi.n	80116ac <__lshift+0xc0>
 80116b8:	e7ea      	b.n	8011690 <__lshift+0xa4>
 80116ba:	bf00      	nop
 80116bc:	080137c4 	.word	0x080137c4
 80116c0:	08013854 	.word	0x08013854

080116c4 <__mcmp>:
 80116c4:	b530      	push	{r4, r5, lr}
 80116c6:	6902      	ldr	r2, [r0, #16]
 80116c8:	690c      	ldr	r4, [r1, #16]
 80116ca:	1b12      	subs	r2, r2, r4
 80116cc:	d10e      	bne.n	80116ec <__mcmp+0x28>
 80116ce:	f100 0314 	add.w	r3, r0, #20
 80116d2:	3114      	adds	r1, #20
 80116d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80116d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80116dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80116e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80116e4:	42a5      	cmp	r5, r4
 80116e6:	d003      	beq.n	80116f0 <__mcmp+0x2c>
 80116e8:	d305      	bcc.n	80116f6 <__mcmp+0x32>
 80116ea:	2201      	movs	r2, #1
 80116ec:	4610      	mov	r0, r2
 80116ee:	bd30      	pop	{r4, r5, pc}
 80116f0:	4283      	cmp	r3, r0
 80116f2:	d3f3      	bcc.n	80116dc <__mcmp+0x18>
 80116f4:	e7fa      	b.n	80116ec <__mcmp+0x28>
 80116f6:	f04f 32ff 	mov.w	r2, #4294967295
 80116fa:	e7f7      	b.n	80116ec <__mcmp+0x28>

080116fc <__mdiff>:
 80116fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011700:	460c      	mov	r4, r1
 8011702:	4606      	mov	r6, r0
 8011704:	4611      	mov	r1, r2
 8011706:	4620      	mov	r0, r4
 8011708:	4617      	mov	r7, r2
 801170a:	f7ff ffdb 	bl	80116c4 <__mcmp>
 801170e:	1e05      	subs	r5, r0, #0
 8011710:	d110      	bne.n	8011734 <__mdiff+0x38>
 8011712:	4629      	mov	r1, r5
 8011714:	4630      	mov	r0, r6
 8011716:	f7ff fd0d 	bl	8011134 <_Balloc>
 801171a:	b930      	cbnz	r0, 801172a <__mdiff+0x2e>
 801171c:	4b39      	ldr	r3, [pc, #228]	; (8011804 <__mdiff+0x108>)
 801171e:	4602      	mov	r2, r0
 8011720:	f240 2132 	movw	r1, #562	; 0x232
 8011724:	4838      	ldr	r0, [pc, #224]	; (8011808 <__mdiff+0x10c>)
 8011726:	f001 f815 	bl	8012754 <__assert_func>
 801172a:	2301      	movs	r3, #1
 801172c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011730:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011734:	bfa4      	itt	ge
 8011736:	463b      	movge	r3, r7
 8011738:	4627      	movge	r7, r4
 801173a:	4630      	mov	r0, r6
 801173c:	6879      	ldr	r1, [r7, #4]
 801173e:	bfa6      	itte	ge
 8011740:	461c      	movge	r4, r3
 8011742:	2500      	movge	r5, #0
 8011744:	2501      	movlt	r5, #1
 8011746:	f7ff fcf5 	bl	8011134 <_Balloc>
 801174a:	b920      	cbnz	r0, 8011756 <__mdiff+0x5a>
 801174c:	4b2d      	ldr	r3, [pc, #180]	; (8011804 <__mdiff+0x108>)
 801174e:	4602      	mov	r2, r0
 8011750:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011754:	e7e6      	b.n	8011724 <__mdiff+0x28>
 8011756:	693e      	ldr	r6, [r7, #16]
 8011758:	60c5      	str	r5, [r0, #12]
 801175a:	6925      	ldr	r5, [r4, #16]
 801175c:	f107 0114 	add.w	r1, r7, #20
 8011760:	f104 0914 	add.w	r9, r4, #20
 8011764:	f100 0e14 	add.w	lr, r0, #20
 8011768:	f107 0210 	add.w	r2, r7, #16
 801176c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011770:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011774:	46f2      	mov	sl, lr
 8011776:	2700      	movs	r7, #0
 8011778:	f859 3b04 	ldr.w	r3, [r9], #4
 801177c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011780:	fa1f f883 	uxth.w	r8, r3
 8011784:	fa17 f78b 	uxtah	r7, r7, fp
 8011788:	0c1b      	lsrs	r3, r3, #16
 801178a:	eba7 0808 	sub.w	r8, r7, r8
 801178e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011792:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011796:	fa1f f888 	uxth.w	r8, r8
 801179a:	141f      	asrs	r7, r3, #16
 801179c:	454d      	cmp	r5, r9
 801179e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80117a2:	f84a 3b04 	str.w	r3, [sl], #4
 80117a6:	d8e7      	bhi.n	8011778 <__mdiff+0x7c>
 80117a8:	1b2b      	subs	r3, r5, r4
 80117aa:	3b15      	subs	r3, #21
 80117ac:	f023 0303 	bic.w	r3, r3, #3
 80117b0:	3304      	adds	r3, #4
 80117b2:	3415      	adds	r4, #21
 80117b4:	42a5      	cmp	r5, r4
 80117b6:	bf38      	it	cc
 80117b8:	2304      	movcc	r3, #4
 80117ba:	4419      	add	r1, r3
 80117bc:	4473      	add	r3, lr
 80117be:	469e      	mov	lr, r3
 80117c0:	460d      	mov	r5, r1
 80117c2:	4565      	cmp	r5, ip
 80117c4:	d30e      	bcc.n	80117e4 <__mdiff+0xe8>
 80117c6:	f10c 0203 	add.w	r2, ip, #3
 80117ca:	1a52      	subs	r2, r2, r1
 80117cc:	f022 0203 	bic.w	r2, r2, #3
 80117d0:	3903      	subs	r1, #3
 80117d2:	458c      	cmp	ip, r1
 80117d4:	bf38      	it	cc
 80117d6:	2200      	movcc	r2, #0
 80117d8:	441a      	add	r2, r3
 80117da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80117de:	b17b      	cbz	r3, 8011800 <__mdiff+0x104>
 80117e0:	6106      	str	r6, [r0, #16]
 80117e2:	e7a5      	b.n	8011730 <__mdiff+0x34>
 80117e4:	f855 8b04 	ldr.w	r8, [r5], #4
 80117e8:	fa17 f488 	uxtah	r4, r7, r8
 80117ec:	1422      	asrs	r2, r4, #16
 80117ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80117f2:	b2a4      	uxth	r4, r4
 80117f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80117f8:	f84e 4b04 	str.w	r4, [lr], #4
 80117fc:	1417      	asrs	r7, r2, #16
 80117fe:	e7e0      	b.n	80117c2 <__mdiff+0xc6>
 8011800:	3e01      	subs	r6, #1
 8011802:	e7ea      	b.n	80117da <__mdiff+0xde>
 8011804:	080137c4 	.word	0x080137c4
 8011808:	08013854 	.word	0x08013854

0801180c <__ulp>:
 801180c:	b082      	sub	sp, #8
 801180e:	ed8d 0b00 	vstr	d0, [sp]
 8011812:	9b01      	ldr	r3, [sp, #4]
 8011814:	4912      	ldr	r1, [pc, #72]	; (8011860 <__ulp+0x54>)
 8011816:	4019      	ands	r1, r3
 8011818:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801181c:	2900      	cmp	r1, #0
 801181e:	dd05      	ble.n	801182c <__ulp+0x20>
 8011820:	2200      	movs	r2, #0
 8011822:	460b      	mov	r3, r1
 8011824:	ec43 2b10 	vmov	d0, r2, r3
 8011828:	b002      	add	sp, #8
 801182a:	4770      	bx	lr
 801182c:	4249      	negs	r1, r1
 801182e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011832:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011836:	f04f 0200 	mov.w	r2, #0
 801183a:	f04f 0300 	mov.w	r3, #0
 801183e:	da04      	bge.n	801184a <__ulp+0x3e>
 8011840:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011844:	fa41 f300 	asr.w	r3, r1, r0
 8011848:	e7ec      	b.n	8011824 <__ulp+0x18>
 801184a:	f1a0 0114 	sub.w	r1, r0, #20
 801184e:	291e      	cmp	r1, #30
 8011850:	bfda      	itte	le
 8011852:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011856:	fa20 f101 	lsrle.w	r1, r0, r1
 801185a:	2101      	movgt	r1, #1
 801185c:	460a      	mov	r2, r1
 801185e:	e7e1      	b.n	8011824 <__ulp+0x18>
 8011860:	7ff00000 	.word	0x7ff00000

08011864 <__b2d>:
 8011864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011866:	6905      	ldr	r5, [r0, #16]
 8011868:	f100 0714 	add.w	r7, r0, #20
 801186c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011870:	1f2e      	subs	r6, r5, #4
 8011872:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011876:	4620      	mov	r0, r4
 8011878:	f7ff fd52 	bl	8011320 <__hi0bits>
 801187c:	f1c0 0320 	rsb	r3, r0, #32
 8011880:	280a      	cmp	r0, #10
 8011882:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011900 <__b2d+0x9c>
 8011886:	600b      	str	r3, [r1, #0]
 8011888:	dc14      	bgt.n	80118b4 <__b2d+0x50>
 801188a:	f1c0 0e0b 	rsb	lr, r0, #11
 801188e:	fa24 f10e 	lsr.w	r1, r4, lr
 8011892:	42b7      	cmp	r7, r6
 8011894:	ea41 030c 	orr.w	r3, r1, ip
 8011898:	bf34      	ite	cc
 801189a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801189e:	2100      	movcs	r1, #0
 80118a0:	3015      	adds	r0, #21
 80118a2:	fa04 f000 	lsl.w	r0, r4, r0
 80118a6:	fa21 f10e 	lsr.w	r1, r1, lr
 80118aa:	ea40 0201 	orr.w	r2, r0, r1
 80118ae:	ec43 2b10 	vmov	d0, r2, r3
 80118b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118b4:	42b7      	cmp	r7, r6
 80118b6:	bf3a      	itte	cc
 80118b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80118bc:	f1a5 0608 	subcc.w	r6, r5, #8
 80118c0:	2100      	movcs	r1, #0
 80118c2:	380b      	subs	r0, #11
 80118c4:	d017      	beq.n	80118f6 <__b2d+0x92>
 80118c6:	f1c0 0c20 	rsb	ip, r0, #32
 80118ca:	fa04 f500 	lsl.w	r5, r4, r0
 80118ce:	42be      	cmp	r6, r7
 80118d0:	fa21 f40c 	lsr.w	r4, r1, ip
 80118d4:	ea45 0504 	orr.w	r5, r5, r4
 80118d8:	bf8c      	ite	hi
 80118da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80118de:	2400      	movls	r4, #0
 80118e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80118e4:	fa01 f000 	lsl.w	r0, r1, r0
 80118e8:	fa24 f40c 	lsr.w	r4, r4, ip
 80118ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80118f0:	ea40 0204 	orr.w	r2, r0, r4
 80118f4:	e7db      	b.n	80118ae <__b2d+0x4a>
 80118f6:	ea44 030c 	orr.w	r3, r4, ip
 80118fa:	460a      	mov	r2, r1
 80118fc:	e7d7      	b.n	80118ae <__b2d+0x4a>
 80118fe:	bf00      	nop
 8011900:	3ff00000 	.word	0x3ff00000

08011904 <__d2b>:
 8011904:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011908:	4689      	mov	r9, r1
 801190a:	2101      	movs	r1, #1
 801190c:	ec57 6b10 	vmov	r6, r7, d0
 8011910:	4690      	mov	r8, r2
 8011912:	f7ff fc0f 	bl	8011134 <_Balloc>
 8011916:	4604      	mov	r4, r0
 8011918:	b930      	cbnz	r0, 8011928 <__d2b+0x24>
 801191a:	4602      	mov	r2, r0
 801191c:	4b25      	ldr	r3, [pc, #148]	; (80119b4 <__d2b+0xb0>)
 801191e:	4826      	ldr	r0, [pc, #152]	; (80119b8 <__d2b+0xb4>)
 8011920:	f240 310a 	movw	r1, #778	; 0x30a
 8011924:	f000 ff16 	bl	8012754 <__assert_func>
 8011928:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801192c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011930:	bb35      	cbnz	r5, 8011980 <__d2b+0x7c>
 8011932:	2e00      	cmp	r6, #0
 8011934:	9301      	str	r3, [sp, #4]
 8011936:	d028      	beq.n	801198a <__d2b+0x86>
 8011938:	4668      	mov	r0, sp
 801193a:	9600      	str	r6, [sp, #0]
 801193c:	f7ff fd10 	bl	8011360 <__lo0bits>
 8011940:	9900      	ldr	r1, [sp, #0]
 8011942:	b300      	cbz	r0, 8011986 <__d2b+0x82>
 8011944:	9a01      	ldr	r2, [sp, #4]
 8011946:	f1c0 0320 	rsb	r3, r0, #32
 801194a:	fa02 f303 	lsl.w	r3, r2, r3
 801194e:	430b      	orrs	r3, r1
 8011950:	40c2      	lsrs	r2, r0
 8011952:	6163      	str	r3, [r4, #20]
 8011954:	9201      	str	r2, [sp, #4]
 8011956:	9b01      	ldr	r3, [sp, #4]
 8011958:	61a3      	str	r3, [r4, #24]
 801195a:	2b00      	cmp	r3, #0
 801195c:	bf14      	ite	ne
 801195e:	2202      	movne	r2, #2
 8011960:	2201      	moveq	r2, #1
 8011962:	6122      	str	r2, [r4, #16]
 8011964:	b1d5      	cbz	r5, 801199c <__d2b+0x98>
 8011966:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801196a:	4405      	add	r5, r0
 801196c:	f8c9 5000 	str.w	r5, [r9]
 8011970:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011974:	f8c8 0000 	str.w	r0, [r8]
 8011978:	4620      	mov	r0, r4
 801197a:	b003      	add	sp, #12
 801197c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011984:	e7d5      	b.n	8011932 <__d2b+0x2e>
 8011986:	6161      	str	r1, [r4, #20]
 8011988:	e7e5      	b.n	8011956 <__d2b+0x52>
 801198a:	a801      	add	r0, sp, #4
 801198c:	f7ff fce8 	bl	8011360 <__lo0bits>
 8011990:	9b01      	ldr	r3, [sp, #4]
 8011992:	6163      	str	r3, [r4, #20]
 8011994:	2201      	movs	r2, #1
 8011996:	6122      	str	r2, [r4, #16]
 8011998:	3020      	adds	r0, #32
 801199a:	e7e3      	b.n	8011964 <__d2b+0x60>
 801199c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80119a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80119a4:	f8c9 0000 	str.w	r0, [r9]
 80119a8:	6918      	ldr	r0, [r3, #16]
 80119aa:	f7ff fcb9 	bl	8011320 <__hi0bits>
 80119ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80119b2:	e7df      	b.n	8011974 <__d2b+0x70>
 80119b4:	080137c4 	.word	0x080137c4
 80119b8:	08013854 	.word	0x08013854

080119bc <__ratio>:
 80119bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c0:	4688      	mov	r8, r1
 80119c2:	4669      	mov	r1, sp
 80119c4:	4681      	mov	r9, r0
 80119c6:	f7ff ff4d 	bl	8011864 <__b2d>
 80119ca:	a901      	add	r1, sp, #4
 80119cc:	4640      	mov	r0, r8
 80119ce:	ec55 4b10 	vmov	r4, r5, d0
 80119d2:	f7ff ff47 	bl	8011864 <__b2d>
 80119d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80119da:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80119de:	eba3 0c02 	sub.w	ip, r3, r2
 80119e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80119e6:	1a9b      	subs	r3, r3, r2
 80119e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80119ec:	ec51 0b10 	vmov	r0, r1, d0
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	bfd6      	itet	le
 80119f4:	460a      	movle	r2, r1
 80119f6:	462a      	movgt	r2, r5
 80119f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80119fc:	468b      	mov	fp, r1
 80119fe:	462f      	mov	r7, r5
 8011a00:	bfd4      	ite	le
 8011a02:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011a06:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	ee10 2a10 	vmov	r2, s0
 8011a10:	465b      	mov	r3, fp
 8011a12:	4639      	mov	r1, r7
 8011a14:	f7ee ff22 	bl	800085c <__aeabi_ddiv>
 8011a18:	ec41 0b10 	vmov	d0, r0, r1
 8011a1c:	b003      	add	sp, #12
 8011a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a22 <__copybits>:
 8011a22:	3901      	subs	r1, #1
 8011a24:	b570      	push	{r4, r5, r6, lr}
 8011a26:	1149      	asrs	r1, r1, #5
 8011a28:	6914      	ldr	r4, [r2, #16]
 8011a2a:	3101      	adds	r1, #1
 8011a2c:	f102 0314 	add.w	r3, r2, #20
 8011a30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011a38:	1f05      	subs	r5, r0, #4
 8011a3a:	42a3      	cmp	r3, r4
 8011a3c:	d30c      	bcc.n	8011a58 <__copybits+0x36>
 8011a3e:	1aa3      	subs	r3, r4, r2
 8011a40:	3b11      	subs	r3, #17
 8011a42:	f023 0303 	bic.w	r3, r3, #3
 8011a46:	3211      	adds	r2, #17
 8011a48:	42a2      	cmp	r2, r4
 8011a4a:	bf88      	it	hi
 8011a4c:	2300      	movhi	r3, #0
 8011a4e:	4418      	add	r0, r3
 8011a50:	2300      	movs	r3, #0
 8011a52:	4288      	cmp	r0, r1
 8011a54:	d305      	bcc.n	8011a62 <__copybits+0x40>
 8011a56:	bd70      	pop	{r4, r5, r6, pc}
 8011a58:	f853 6b04 	ldr.w	r6, [r3], #4
 8011a5c:	f845 6f04 	str.w	r6, [r5, #4]!
 8011a60:	e7eb      	b.n	8011a3a <__copybits+0x18>
 8011a62:	f840 3b04 	str.w	r3, [r0], #4
 8011a66:	e7f4      	b.n	8011a52 <__copybits+0x30>

08011a68 <__any_on>:
 8011a68:	f100 0214 	add.w	r2, r0, #20
 8011a6c:	6900      	ldr	r0, [r0, #16]
 8011a6e:	114b      	asrs	r3, r1, #5
 8011a70:	4298      	cmp	r0, r3
 8011a72:	b510      	push	{r4, lr}
 8011a74:	db11      	blt.n	8011a9a <__any_on+0x32>
 8011a76:	dd0a      	ble.n	8011a8e <__any_on+0x26>
 8011a78:	f011 011f 	ands.w	r1, r1, #31
 8011a7c:	d007      	beq.n	8011a8e <__any_on+0x26>
 8011a7e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011a82:	fa24 f001 	lsr.w	r0, r4, r1
 8011a86:	fa00 f101 	lsl.w	r1, r0, r1
 8011a8a:	428c      	cmp	r4, r1
 8011a8c:	d10b      	bne.n	8011aa6 <__any_on+0x3e>
 8011a8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a92:	4293      	cmp	r3, r2
 8011a94:	d803      	bhi.n	8011a9e <__any_on+0x36>
 8011a96:	2000      	movs	r0, #0
 8011a98:	bd10      	pop	{r4, pc}
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	e7f7      	b.n	8011a8e <__any_on+0x26>
 8011a9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011aa2:	2900      	cmp	r1, #0
 8011aa4:	d0f5      	beq.n	8011a92 <__any_on+0x2a>
 8011aa6:	2001      	movs	r0, #1
 8011aa8:	e7f6      	b.n	8011a98 <__any_on+0x30>

08011aaa <_calloc_r>:
 8011aaa:	b513      	push	{r0, r1, r4, lr}
 8011aac:	434a      	muls	r2, r1
 8011aae:	4611      	mov	r1, r2
 8011ab0:	9201      	str	r2, [sp, #4]
 8011ab2:	f000 f859 	bl	8011b68 <_malloc_r>
 8011ab6:	4604      	mov	r4, r0
 8011ab8:	b118      	cbz	r0, 8011ac2 <_calloc_r+0x18>
 8011aba:	9a01      	ldr	r2, [sp, #4]
 8011abc:	2100      	movs	r1, #0
 8011abe:	f7fc fae3 	bl	800e088 <memset>
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	b002      	add	sp, #8
 8011ac6:	bd10      	pop	{r4, pc}

08011ac8 <_free_r>:
 8011ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011aca:	2900      	cmp	r1, #0
 8011acc:	d048      	beq.n	8011b60 <_free_r+0x98>
 8011ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ad2:	9001      	str	r0, [sp, #4]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	f1a1 0404 	sub.w	r4, r1, #4
 8011ada:	bfb8      	it	lt
 8011adc:	18e4      	addlt	r4, r4, r3
 8011ade:	f001 f83d 	bl	8012b5c <__malloc_lock>
 8011ae2:	4a20      	ldr	r2, [pc, #128]	; (8011b64 <_free_r+0x9c>)
 8011ae4:	9801      	ldr	r0, [sp, #4]
 8011ae6:	6813      	ldr	r3, [r2, #0]
 8011ae8:	4615      	mov	r5, r2
 8011aea:	b933      	cbnz	r3, 8011afa <_free_r+0x32>
 8011aec:	6063      	str	r3, [r4, #4]
 8011aee:	6014      	str	r4, [r2, #0]
 8011af0:	b003      	add	sp, #12
 8011af2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011af6:	f001 b837 	b.w	8012b68 <__malloc_unlock>
 8011afa:	42a3      	cmp	r3, r4
 8011afc:	d90b      	bls.n	8011b16 <_free_r+0x4e>
 8011afe:	6821      	ldr	r1, [r4, #0]
 8011b00:	1862      	adds	r2, r4, r1
 8011b02:	4293      	cmp	r3, r2
 8011b04:	bf04      	itt	eq
 8011b06:	681a      	ldreq	r2, [r3, #0]
 8011b08:	685b      	ldreq	r3, [r3, #4]
 8011b0a:	6063      	str	r3, [r4, #4]
 8011b0c:	bf04      	itt	eq
 8011b0e:	1852      	addeq	r2, r2, r1
 8011b10:	6022      	streq	r2, [r4, #0]
 8011b12:	602c      	str	r4, [r5, #0]
 8011b14:	e7ec      	b.n	8011af0 <_free_r+0x28>
 8011b16:	461a      	mov	r2, r3
 8011b18:	685b      	ldr	r3, [r3, #4]
 8011b1a:	b10b      	cbz	r3, 8011b20 <_free_r+0x58>
 8011b1c:	42a3      	cmp	r3, r4
 8011b1e:	d9fa      	bls.n	8011b16 <_free_r+0x4e>
 8011b20:	6811      	ldr	r1, [r2, #0]
 8011b22:	1855      	adds	r5, r2, r1
 8011b24:	42a5      	cmp	r5, r4
 8011b26:	d10b      	bne.n	8011b40 <_free_r+0x78>
 8011b28:	6824      	ldr	r4, [r4, #0]
 8011b2a:	4421      	add	r1, r4
 8011b2c:	1854      	adds	r4, r2, r1
 8011b2e:	42a3      	cmp	r3, r4
 8011b30:	6011      	str	r1, [r2, #0]
 8011b32:	d1dd      	bne.n	8011af0 <_free_r+0x28>
 8011b34:	681c      	ldr	r4, [r3, #0]
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	6053      	str	r3, [r2, #4]
 8011b3a:	4421      	add	r1, r4
 8011b3c:	6011      	str	r1, [r2, #0]
 8011b3e:	e7d7      	b.n	8011af0 <_free_r+0x28>
 8011b40:	d902      	bls.n	8011b48 <_free_r+0x80>
 8011b42:	230c      	movs	r3, #12
 8011b44:	6003      	str	r3, [r0, #0]
 8011b46:	e7d3      	b.n	8011af0 <_free_r+0x28>
 8011b48:	6825      	ldr	r5, [r4, #0]
 8011b4a:	1961      	adds	r1, r4, r5
 8011b4c:	428b      	cmp	r3, r1
 8011b4e:	bf04      	itt	eq
 8011b50:	6819      	ldreq	r1, [r3, #0]
 8011b52:	685b      	ldreq	r3, [r3, #4]
 8011b54:	6063      	str	r3, [r4, #4]
 8011b56:	bf04      	itt	eq
 8011b58:	1949      	addeq	r1, r1, r5
 8011b5a:	6021      	streq	r1, [r4, #0]
 8011b5c:	6054      	str	r4, [r2, #4]
 8011b5e:	e7c7      	b.n	8011af0 <_free_r+0x28>
 8011b60:	b003      	add	sp, #12
 8011b62:	bd30      	pop	{r4, r5, pc}
 8011b64:	200002d4 	.word	0x200002d4

08011b68 <_malloc_r>:
 8011b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b6a:	1ccd      	adds	r5, r1, #3
 8011b6c:	f025 0503 	bic.w	r5, r5, #3
 8011b70:	3508      	adds	r5, #8
 8011b72:	2d0c      	cmp	r5, #12
 8011b74:	bf38      	it	cc
 8011b76:	250c      	movcc	r5, #12
 8011b78:	2d00      	cmp	r5, #0
 8011b7a:	4606      	mov	r6, r0
 8011b7c:	db01      	blt.n	8011b82 <_malloc_r+0x1a>
 8011b7e:	42a9      	cmp	r1, r5
 8011b80:	d903      	bls.n	8011b8a <_malloc_r+0x22>
 8011b82:	230c      	movs	r3, #12
 8011b84:	6033      	str	r3, [r6, #0]
 8011b86:	2000      	movs	r0, #0
 8011b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b8a:	f000 ffe7 	bl	8012b5c <__malloc_lock>
 8011b8e:	4921      	ldr	r1, [pc, #132]	; (8011c14 <_malloc_r+0xac>)
 8011b90:	680a      	ldr	r2, [r1, #0]
 8011b92:	4614      	mov	r4, r2
 8011b94:	b99c      	cbnz	r4, 8011bbe <_malloc_r+0x56>
 8011b96:	4f20      	ldr	r7, [pc, #128]	; (8011c18 <_malloc_r+0xb0>)
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	b923      	cbnz	r3, 8011ba6 <_malloc_r+0x3e>
 8011b9c:	4621      	mov	r1, r4
 8011b9e:	4630      	mov	r0, r6
 8011ba0:	f000 fcc8 	bl	8012534 <_sbrk_r>
 8011ba4:	6038      	str	r0, [r7, #0]
 8011ba6:	4629      	mov	r1, r5
 8011ba8:	4630      	mov	r0, r6
 8011baa:	f000 fcc3 	bl	8012534 <_sbrk_r>
 8011bae:	1c43      	adds	r3, r0, #1
 8011bb0:	d123      	bne.n	8011bfa <_malloc_r+0x92>
 8011bb2:	230c      	movs	r3, #12
 8011bb4:	6033      	str	r3, [r6, #0]
 8011bb6:	4630      	mov	r0, r6
 8011bb8:	f000 ffd6 	bl	8012b68 <__malloc_unlock>
 8011bbc:	e7e3      	b.n	8011b86 <_malloc_r+0x1e>
 8011bbe:	6823      	ldr	r3, [r4, #0]
 8011bc0:	1b5b      	subs	r3, r3, r5
 8011bc2:	d417      	bmi.n	8011bf4 <_malloc_r+0x8c>
 8011bc4:	2b0b      	cmp	r3, #11
 8011bc6:	d903      	bls.n	8011bd0 <_malloc_r+0x68>
 8011bc8:	6023      	str	r3, [r4, #0]
 8011bca:	441c      	add	r4, r3
 8011bcc:	6025      	str	r5, [r4, #0]
 8011bce:	e004      	b.n	8011bda <_malloc_r+0x72>
 8011bd0:	6863      	ldr	r3, [r4, #4]
 8011bd2:	42a2      	cmp	r2, r4
 8011bd4:	bf0c      	ite	eq
 8011bd6:	600b      	streq	r3, [r1, #0]
 8011bd8:	6053      	strne	r3, [r2, #4]
 8011bda:	4630      	mov	r0, r6
 8011bdc:	f000 ffc4 	bl	8012b68 <__malloc_unlock>
 8011be0:	f104 000b 	add.w	r0, r4, #11
 8011be4:	1d23      	adds	r3, r4, #4
 8011be6:	f020 0007 	bic.w	r0, r0, #7
 8011bea:	1ac2      	subs	r2, r0, r3
 8011bec:	d0cc      	beq.n	8011b88 <_malloc_r+0x20>
 8011bee:	1a1b      	subs	r3, r3, r0
 8011bf0:	50a3      	str	r3, [r4, r2]
 8011bf2:	e7c9      	b.n	8011b88 <_malloc_r+0x20>
 8011bf4:	4622      	mov	r2, r4
 8011bf6:	6864      	ldr	r4, [r4, #4]
 8011bf8:	e7cc      	b.n	8011b94 <_malloc_r+0x2c>
 8011bfa:	1cc4      	adds	r4, r0, #3
 8011bfc:	f024 0403 	bic.w	r4, r4, #3
 8011c00:	42a0      	cmp	r0, r4
 8011c02:	d0e3      	beq.n	8011bcc <_malloc_r+0x64>
 8011c04:	1a21      	subs	r1, r4, r0
 8011c06:	4630      	mov	r0, r6
 8011c08:	f000 fc94 	bl	8012534 <_sbrk_r>
 8011c0c:	3001      	adds	r0, #1
 8011c0e:	d1dd      	bne.n	8011bcc <_malloc_r+0x64>
 8011c10:	e7cf      	b.n	8011bb2 <_malloc_r+0x4a>
 8011c12:	bf00      	nop
 8011c14:	200002d4 	.word	0x200002d4
 8011c18:	200002d8 	.word	0x200002d8

08011c1c <__ssputs_r>:
 8011c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c20:	688e      	ldr	r6, [r1, #8]
 8011c22:	429e      	cmp	r6, r3
 8011c24:	4682      	mov	sl, r0
 8011c26:	460c      	mov	r4, r1
 8011c28:	4690      	mov	r8, r2
 8011c2a:	461f      	mov	r7, r3
 8011c2c:	d838      	bhi.n	8011ca0 <__ssputs_r+0x84>
 8011c2e:	898a      	ldrh	r2, [r1, #12]
 8011c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011c34:	d032      	beq.n	8011c9c <__ssputs_r+0x80>
 8011c36:	6825      	ldr	r5, [r4, #0]
 8011c38:	6909      	ldr	r1, [r1, #16]
 8011c3a:	eba5 0901 	sub.w	r9, r5, r1
 8011c3e:	6965      	ldr	r5, [r4, #20]
 8011c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c48:	3301      	adds	r3, #1
 8011c4a:	444b      	add	r3, r9
 8011c4c:	106d      	asrs	r5, r5, #1
 8011c4e:	429d      	cmp	r5, r3
 8011c50:	bf38      	it	cc
 8011c52:	461d      	movcc	r5, r3
 8011c54:	0553      	lsls	r3, r2, #21
 8011c56:	d531      	bpl.n	8011cbc <__ssputs_r+0xa0>
 8011c58:	4629      	mov	r1, r5
 8011c5a:	f7ff ff85 	bl	8011b68 <_malloc_r>
 8011c5e:	4606      	mov	r6, r0
 8011c60:	b950      	cbnz	r0, 8011c78 <__ssputs_r+0x5c>
 8011c62:	230c      	movs	r3, #12
 8011c64:	f8ca 3000 	str.w	r3, [sl]
 8011c68:	89a3      	ldrh	r3, [r4, #12]
 8011c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c6e:	81a3      	strh	r3, [r4, #12]
 8011c70:	f04f 30ff 	mov.w	r0, #4294967295
 8011c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c78:	6921      	ldr	r1, [r4, #16]
 8011c7a:	464a      	mov	r2, r9
 8011c7c:	f7ff fa4c 	bl	8011118 <memcpy>
 8011c80:	89a3      	ldrh	r3, [r4, #12]
 8011c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c8a:	81a3      	strh	r3, [r4, #12]
 8011c8c:	6126      	str	r6, [r4, #16]
 8011c8e:	6165      	str	r5, [r4, #20]
 8011c90:	444e      	add	r6, r9
 8011c92:	eba5 0509 	sub.w	r5, r5, r9
 8011c96:	6026      	str	r6, [r4, #0]
 8011c98:	60a5      	str	r5, [r4, #8]
 8011c9a:	463e      	mov	r6, r7
 8011c9c:	42be      	cmp	r6, r7
 8011c9e:	d900      	bls.n	8011ca2 <__ssputs_r+0x86>
 8011ca0:	463e      	mov	r6, r7
 8011ca2:	4632      	mov	r2, r6
 8011ca4:	6820      	ldr	r0, [r4, #0]
 8011ca6:	4641      	mov	r1, r8
 8011ca8:	f000 ff3e 	bl	8012b28 <memmove>
 8011cac:	68a3      	ldr	r3, [r4, #8]
 8011cae:	6822      	ldr	r2, [r4, #0]
 8011cb0:	1b9b      	subs	r3, r3, r6
 8011cb2:	4432      	add	r2, r6
 8011cb4:	60a3      	str	r3, [r4, #8]
 8011cb6:	6022      	str	r2, [r4, #0]
 8011cb8:	2000      	movs	r0, #0
 8011cba:	e7db      	b.n	8011c74 <__ssputs_r+0x58>
 8011cbc:	462a      	mov	r2, r5
 8011cbe:	f000 ff59 	bl	8012b74 <_realloc_r>
 8011cc2:	4606      	mov	r6, r0
 8011cc4:	2800      	cmp	r0, #0
 8011cc6:	d1e1      	bne.n	8011c8c <__ssputs_r+0x70>
 8011cc8:	6921      	ldr	r1, [r4, #16]
 8011cca:	4650      	mov	r0, sl
 8011ccc:	f7ff fefc 	bl	8011ac8 <_free_r>
 8011cd0:	e7c7      	b.n	8011c62 <__ssputs_r+0x46>
	...

08011cd4 <_svfiprintf_r>:
 8011cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd8:	4698      	mov	r8, r3
 8011cda:	898b      	ldrh	r3, [r1, #12]
 8011cdc:	061b      	lsls	r3, r3, #24
 8011cde:	b09d      	sub	sp, #116	; 0x74
 8011ce0:	4607      	mov	r7, r0
 8011ce2:	460d      	mov	r5, r1
 8011ce4:	4614      	mov	r4, r2
 8011ce6:	d50e      	bpl.n	8011d06 <_svfiprintf_r+0x32>
 8011ce8:	690b      	ldr	r3, [r1, #16]
 8011cea:	b963      	cbnz	r3, 8011d06 <_svfiprintf_r+0x32>
 8011cec:	2140      	movs	r1, #64	; 0x40
 8011cee:	f7ff ff3b 	bl	8011b68 <_malloc_r>
 8011cf2:	6028      	str	r0, [r5, #0]
 8011cf4:	6128      	str	r0, [r5, #16]
 8011cf6:	b920      	cbnz	r0, 8011d02 <_svfiprintf_r+0x2e>
 8011cf8:	230c      	movs	r3, #12
 8011cfa:	603b      	str	r3, [r7, #0]
 8011cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8011d00:	e0d1      	b.n	8011ea6 <_svfiprintf_r+0x1d2>
 8011d02:	2340      	movs	r3, #64	; 0x40
 8011d04:	616b      	str	r3, [r5, #20]
 8011d06:	2300      	movs	r3, #0
 8011d08:	9309      	str	r3, [sp, #36]	; 0x24
 8011d0a:	2320      	movs	r3, #32
 8011d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d14:	2330      	movs	r3, #48	; 0x30
 8011d16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011ec0 <_svfiprintf_r+0x1ec>
 8011d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d1e:	f04f 0901 	mov.w	r9, #1
 8011d22:	4623      	mov	r3, r4
 8011d24:	469a      	mov	sl, r3
 8011d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d2a:	b10a      	cbz	r2, 8011d30 <_svfiprintf_r+0x5c>
 8011d2c:	2a25      	cmp	r2, #37	; 0x25
 8011d2e:	d1f9      	bne.n	8011d24 <_svfiprintf_r+0x50>
 8011d30:	ebba 0b04 	subs.w	fp, sl, r4
 8011d34:	d00b      	beq.n	8011d4e <_svfiprintf_r+0x7a>
 8011d36:	465b      	mov	r3, fp
 8011d38:	4622      	mov	r2, r4
 8011d3a:	4629      	mov	r1, r5
 8011d3c:	4638      	mov	r0, r7
 8011d3e:	f7ff ff6d 	bl	8011c1c <__ssputs_r>
 8011d42:	3001      	adds	r0, #1
 8011d44:	f000 80aa 	beq.w	8011e9c <_svfiprintf_r+0x1c8>
 8011d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d4a:	445a      	add	r2, fp
 8011d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8011d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	f000 80a2 	beq.w	8011e9c <_svfiprintf_r+0x1c8>
 8011d58:	2300      	movs	r3, #0
 8011d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8011d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d62:	f10a 0a01 	add.w	sl, sl, #1
 8011d66:	9304      	str	r3, [sp, #16]
 8011d68:	9307      	str	r3, [sp, #28]
 8011d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8011d70:	4654      	mov	r4, sl
 8011d72:	2205      	movs	r2, #5
 8011d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d78:	4851      	ldr	r0, [pc, #324]	; (8011ec0 <_svfiprintf_r+0x1ec>)
 8011d7a:	f7ee fa39 	bl	80001f0 <memchr>
 8011d7e:	9a04      	ldr	r2, [sp, #16]
 8011d80:	b9d8      	cbnz	r0, 8011dba <_svfiprintf_r+0xe6>
 8011d82:	06d0      	lsls	r0, r2, #27
 8011d84:	bf44      	itt	mi
 8011d86:	2320      	movmi	r3, #32
 8011d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d8c:	0711      	lsls	r1, r2, #28
 8011d8e:	bf44      	itt	mi
 8011d90:	232b      	movmi	r3, #43	; 0x2b
 8011d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d96:	f89a 3000 	ldrb.w	r3, [sl]
 8011d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8011d9c:	d015      	beq.n	8011dca <_svfiprintf_r+0xf6>
 8011d9e:	9a07      	ldr	r2, [sp, #28]
 8011da0:	4654      	mov	r4, sl
 8011da2:	2000      	movs	r0, #0
 8011da4:	f04f 0c0a 	mov.w	ip, #10
 8011da8:	4621      	mov	r1, r4
 8011daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dae:	3b30      	subs	r3, #48	; 0x30
 8011db0:	2b09      	cmp	r3, #9
 8011db2:	d94e      	bls.n	8011e52 <_svfiprintf_r+0x17e>
 8011db4:	b1b0      	cbz	r0, 8011de4 <_svfiprintf_r+0x110>
 8011db6:	9207      	str	r2, [sp, #28]
 8011db8:	e014      	b.n	8011de4 <_svfiprintf_r+0x110>
 8011dba:	eba0 0308 	sub.w	r3, r0, r8
 8011dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8011dc2:	4313      	orrs	r3, r2
 8011dc4:	9304      	str	r3, [sp, #16]
 8011dc6:	46a2      	mov	sl, r4
 8011dc8:	e7d2      	b.n	8011d70 <_svfiprintf_r+0x9c>
 8011dca:	9b03      	ldr	r3, [sp, #12]
 8011dcc:	1d19      	adds	r1, r3, #4
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	9103      	str	r1, [sp, #12]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	bfbb      	ittet	lt
 8011dd6:	425b      	neglt	r3, r3
 8011dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8011ddc:	9307      	strge	r3, [sp, #28]
 8011dde:	9307      	strlt	r3, [sp, #28]
 8011de0:	bfb8      	it	lt
 8011de2:	9204      	strlt	r2, [sp, #16]
 8011de4:	7823      	ldrb	r3, [r4, #0]
 8011de6:	2b2e      	cmp	r3, #46	; 0x2e
 8011de8:	d10c      	bne.n	8011e04 <_svfiprintf_r+0x130>
 8011dea:	7863      	ldrb	r3, [r4, #1]
 8011dec:	2b2a      	cmp	r3, #42	; 0x2a
 8011dee:	d135      	bne.n	8011e5c <_svfiprintf_r+0x188>
 8011df0:	9b03      	ldr	r3, [sp, #12]
 8011df2:	1d1a      	adds	r2, r3, #4
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	9203      	str	r2, [sp, #12]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	bfb8      	it	lt
 8011dfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e00:	3402      	adds	r4, #2
 8011e02:	9305      	str	r3, [sp, #20]
 8011e04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011ed0 <_svfiprintf_r+0x1fc>
 8011e08:	7821      	ldrb	r1, [r4, #0]
 8011e0a:	2203      	movs	r2, #3
 8011e0c:	4650      	mov	r0, sl
 8011e0e:	f7ee f9ef 	bl	80001f0 <memchr>
 8011e12:	b140      	cbz	r0, 8011e26 <_svfiprintf_r+0x152>
 8011e14:	2340      	movs	r3, #64	; 0x40
 8011e16:	eba0 000a 	sub.w	r0, r0, sl
 8011e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8011e1e:	9b04      	ldr	r3, [sp, #16]
 8011e20:	4303      	orrs	r3, r0
 8011e22:	3401      	adds	r4, #1
 8011e24:	9304      	str	r3, [sp, #16]
 8011e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e2a:	4826      	ldr	r0, [pc, #152]	; (8011ec4 <_svfiprintf_r+0x1f0>)
 8011e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e30:	2206      	movs	r2, #6
 8011e32:	f7ee f9dd 	bl	80001f0 <memchr>
 8011e36:	2800      	cmp	r0, #0
 8011e38:	d038      	beq.n	8011eac <_svfiprintf_r+0x1d8>
 8011e3a:	4b23      	ldr	r3, [pc, #140]	; (8011ec8 <_svfiprintf_r+0x1f4>)
 8011e3c:	bb1b      	cbnz	r3, 8011e86 <_svfiprintf_r+0x1b2>
 8011e3e:	9b03      	ldr	r3, [sp, #12]
 8011e40:	3307      	adds	r3, #7
 8011e42:	f023 0307 	bic.w	r3, r3, #7
 8011e46:	3308      	adds	r3, #8
 8011e48:	9303      	str	r3, [sp, #12]
 8011e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e4c:	4433      	add	r3, r6
 8011e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8011e50:	e767      	b.n	8011d22 <_svfiprintf_r+0x4e>
 8011e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e56:	460c      	mov	r4, r1
 8011e58:	2001      	movs	r0, #1
 8011e5a:	e7a5      	b.n	8011da8 <_svfiprintf_r+0xd4>
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	3401      	adds	r4, #1
 8011e60:	9305      	str	r3, [sp, #20]
 8011e62:	4619      	mov	r1, r3
 8011e64:	f04f 0c0a 	mov.w	ip, #10
 8011e68:	4620      	mov	r0, r4
 8011e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e6e:	3a30      	subs	r2, #48	; 0x30
 8011e70:	2a09      	cmp	r2, #9
 8011e72:	d903      	bls.n	8011e7c <_svfiprintf_r+0x1a8>
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d0c5      	beq.n	8011e04 <_svfiprintf_r+0x130>
 8011e78:	9105      	str	r1, [sp, #20]
 8011e7a:	e7c3      	b.n	8011e04 <_svfiprintf_r+0x130>
 8011e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e80:	4604      	mov	r4, r0
 8011e82:	2301      	movs	r3, #1
 8011e84:	e7f0      	b.n	8011e68 <_svfiprintf_r+0x194>
 8011e86:	ab03      	add	r3, sp, #12
 8011e88:	9300      	str	r3, [sp, #0]
 8011e8a:	462a      	mov	r2, r5
 8011e8c:	4b0f      	ldr	r3, [pc, #60]	; (8011ecc <_svfiprintf_r+0x1f8>)
 8011e8e:	a904      	add	r1, sp, #16
 8011e90:	4638      	mov	r0, r7
 8011e92:	f7fc f9a1 	bl	800e1d8 <_printf_float>
 8011e96:	1c42      	adds	r2, r0, #1
 8011e98:	4606      	mov	r6, r0
 8011e9a:	d1d6      	bne.n	8011e4a <_svfiprintf_r+0x176>
 8011e9c:	89ab      	ldrh	r3, [r5, #12]
 8011e9e:	065b      	lsls	r3, r3, #25
 8011ea0:	f53f af2c 	bmi.w	8011cfc <_svfiprintf_r+0x28>
 8011ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ea6:	b01d      	add	sp, #116	; 0x74
 8011ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eac:	ab03      	add	r3, sp, #12
 8011eae:	9300      	str	r3, [sp, #0]
 8011eb0:	462a      	mov	r2, r5
 8011eb2:	4b06      	ldr	r3, [pc, #24]	; (8011ecc <_svfiprintf_r+0x1f8>)
 8011eb4:	a904      	add	r1, sp, #16
 8011eb6:	4638      	mov	r0, r7
 8011eb8:	f7fc fc32 	bl	800e720 <_printf_i>
 8011ebc:	e7eb      	b.n	8011e96 <_svfiprintf_r+0x1c2>
 8011ebe:	bf00      	nop
 8011ec0:	080139b4 	.word	0x080139b4
 8011ec4:	080139be 	.word	0x080139be
 8011ec8:	0800e1d9 	.word	0x0800e1d9
 8011ecc:	08011c1d 	.word	0x08011c1d
 8011ed0:	080139ba 	.word	0x080139ba

08011ed4 <_sungetc_r>:
 8011ed4:	b538      	push	{r3, r4, r5, lr}
 8011ed6:	1c4b      	adds	r3, r1, #1
 8011ed8:	4614      	mov	r4, r2
 8011eda:	d103      	bne.n	8011ee4 <_sungetc_r+0x10>
 8011edc:	f04f 35ff 	mov.w	r5, #4294967295
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	bd38      	pop	{r3, r4, r5, pc}
 8011ee4:	8993      	ldrh	r3, [r2, #12]
 8011ee6:	f023 0320 	bic.w	r3, r3, #32
 8011eea:	8193      	strh	r3, [r2, #12]
 8011eec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011eee:	6852      	ldr	r2, [r2, #4]
 8011ef0:	b2cd      	uxtb	r5, r1
 8011ef2:	b18b      	cbz	r3, 8011f18 <_sungetc_r+0x44>
 8011ef4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011ef6:	4293      	cmp	r3, r2
 8011ef8:	dd08      	ble.n	8011f0c <_sungetc_r+0x38>
 8011efa:	6823      	ldr	r3, [r4, #0]
 8011efc:	1e5a      	subs	r2, r3, #1
 8011efe:	6022      	str	r2, [r4, #0]
 8011f00:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011f04:	6863      	ldr	r3, [r4, #4]
 8011f06:	3301      	adds	r3, #1
 8011f08:	6063      	str	r3, [r4, #4]
 8011f0a:	e7e9      	b.n	8011ee0 <_sungetc_r+0xc>
 8011f0c:	4621      	mov	r1, r4
 8011f0e:	f000 fbd9 	bl	80126c4 <__submore>
 8011f12:	2800      	cmp	r0, #0
 8011f14:	d0f1      	beq.n	8011efa <_sungetc_r+0x26>
 8011f16:	e7e1      	b.n	8011edc <_sungetc_r+0x8>
 8011f18:	6921      	ldr	r1, [r4, #16]
 8011f1a:	6823      	ldr	r3, [r4, #0]
 8011f1c:	b151      	cbz	r1, 8011f34 <_sungetc_r+0x60>
 8011f1e:	4299      	cmp	r1, r3
 8011f20:	d208      	bcs.n	8011f34 <_sungetc_r+0x60>
 8011f22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011f26:	42a9      	cmp	r1, r5
 8011f28:	d104      	bne.n	8011f34 <_sungetc_r+0x60>
 8011f2a:	3b01      	subs	r3, #1
 8011f2c:	3201      	adds	r2, #1
 8011f2e:	6023      	str	r3, [r4, #0]
 8011f30:	6062      	str	r2, [r4, #4]
 8011f32:	e7d5      	b.n	8011ee0 <_sungetc_r+0xc>
 8011f34:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f3c:	6363      	str	r3, [r4, #52]	; 0x34
 8011f3e:	2303      	movs	r3, #3
 8011f40:	63a3      	str	r3, [r4, #56]	; 0x38
 8011f42:	4623      	mov	r3, r4
 8011f44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011f48:	6023      	str	r3, [r4, #0]
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	e7dc      	b.n	8011f08 <_sungetc_r+0x34>

08011f4e <__ssrefill_r>:
 8011f4e:	b510      	push	{r4, lr}
 8011f50:	460c      	mov	r4, r1
 8011f52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011f54:	b169      	cbz	r1, 8011f72 <__ssrefill_r+0x24>
 8011f56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f5a:	4299      	cmp	r1, r3
 8011f5c:	d001      	beq.n	8011f62 <__ssrefill_r+0x14>
 8011f5e:	f7ff fdb3 	bl	8011ac8 <_free_r>
 8011f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011f64:	6063      	str	r3, [r4, #4]
 8011f66:	2000      	movs	r0, #0
 8011f68:	6360      	str	r0, [r4, #52]	; 0x34
 8011f6a:	b113      	cbz	r3, 8011f72 <__ssrefill_r+0x24>
 8011f6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011f6e:	6023      	str	r3, [r4, #0]
 8011f70:	bd10      	pop	{r4, pc}
 8011f72:	6923      	ldr	r3, [r4, #16]
 8011f74:	6023      	str	r3, [r4, #0]
 8011f76:	2300      	movs	r3, #0
 8011f78:	6063      	str	r3, [r4, #4]
 8011f7a:	89a3      	ldrh	r3, [r4, #12]
 8011f7c:	f043 0320 	orr.w	r3, r3, #32
 8011f80:	81a3      	strh	r3, [r4, #12]
 8011f82:	f04f 30ff 	mov.w	r0, #4294967295
 8011f86:	e7f3      	b.n	8011f70 <__ssrefill_r+0x22>

08011f88 <__ssvfiscanf_r>:
 8011f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f8c:	460c      	mov	r4, r1
 8011f8e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8011f92:	2100      	movs	r1, #0
 8011f94:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011f98:	49b2      	ldr	r1, [pc, #712]	; (8012264 <__ssvfiscanf_r+0x2dc>)
 8011f9a:	91a0      	str	r1, [sp, #640]	; 0x280
 8011f9c:	f10d 0804 	add.w	r8, sp, #4
 8011fa0:	49b1      	ldr	r1, [pc, #708]	; (8012268 <__ssvfiscanf_r+0x2e0>)
 8011fa2:	4fb2      	ldr	r7, [pc, #712]	; (801226c <__ssvfiscanf_r+0x2e4>)
 8011fa4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8012270 <__ssvfiscanf_r+0x2e8>
 8011fa8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011fac:	4606      	mov	r6, r0
 8011fae:	91a1      	str	r1, [sp, #644]	; 0x284
 8011fb0:	9300      	str	r3, [sp, #0]
 8011fb2:	f892 a000 	ldrb.w	sl, [r2]
 8011fb6:	f1ba 0f00 	cmp.w	sl, #0
 8011fba:	f000 8151 	beq.w	8012260 <__ssvfiscanf_r+0x2d8>
 8011fbe:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8011fc2:	f013 0308 	ands.w	r3, r3, #8
 8011fc6:	f102 0501 	add.w	r5, r2, #1
 8011fca:	d019      	beq.n	8012000 <__ssvfiscanf_r+0x78>
 8011fcc:	6863      	ldr	r3, [r4, #4]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	dd0f      	ble.n	8011ff2 <__ssvfiscanf_r+0x6a>
 8011fd2:	6823      	ldr	r3, [r4, #0]
 8011fd4:	781a      	ldrb	r2, [r3, #0]
 8011fd6:	5cba      	ldrb	r2, [r7, r2]
 8011fd8:	0712      	lsls	r2, r2, #28
 8011fda:	d401      	bmi.n	8011fe0 <__ssvfiscanf_r+0x58>
 8011fdc:	462a      	mov	r2, r5
 8011fde:	e7e8      	b.n	8011fb2 <__ssvfiscanf_r+0x2a>
 8011fe0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011fe2:	3201      	adds	r2, #1
 8011fe4:	9245      	str	r2, [sp, #276]	; 0x114
 8011fe6:	6862      	ldr	r2, [r4, #4]
 8011fe8:	3301      	adds	r3, #1
 8011fea:	3a01      	subs	r2, #1
 8011fec:	6062      	str	r2, [r4, #4]
 8011fee:	6023      	str	r3, [r4, #0]
 8011ff0:	e7ec      	b.n	8011fcc <__ssvfiscanf_r+0x44>
 8011ff2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011ff4:	4621      	mov	r1, r4
 8011ff6:	4630      	mov	r0, r6
 8011ff8:	4798      	blx	r3
 8011ffa:	2800      	cmp	r0, #0
 8011ffc:	d0e9      	beq.n	8011fd2 <__ssvfiscanf_r+0x4a>
 8011ffe:	e7ed      	b.n	8011fdc <__ssvfiscanf_r+0x54>
 8012000:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8012004:	f040 8083 	bne.w	801210e <__ssvfiscanf_r+0x186>
 8012008:	9341      	str	r3, [sp, #260]	; 0x104
 801200a:	9343      	str	r3, [sp, #268]	; 0x10c
 801200c:	7853      	ldrb	r3, [r2, #1]
 801200e:	2b2a      	cmp	r3, #42	; 0x2a
 8012010:	bf02      	ittt	eq
 8012012:	2310      	moveq	r3, #16
 8012014:	1c95      	addeq	r5, r2, #2
 8012016:	9341      	streq	r3, [sp, #260]	; 0x104
 8012018:	220a      	movs	r2, #10
 801201a:	46ab      	mov	fp, r5
 801201c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8012020:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012024:	2b09      	cmp	r3, #9
 8012026:	d91d      	bls.n	8012064 <__ssvfiscanf_r+0xdc>
 8012028:	4891      	ldr	r0, [pc, #580]	; (8012270 <__ssvfiscanf_r+0x2e8>)
 801202a:	2203      	movs	r2, #3
 801202c:	f7ee f8e0 	bl	80001f0 <memchr>
 8012030:	b140      	cbz	r0, 8012044 <__ssvfiscanf_r+0xbc>
 8012032:	2301      	movs	r3, #1
 8012034:	eba0 0009 	sub.w	r0, r0, r9
 8012038:	fa03 f000 	lsl.w	r0, r3, r0
 801203c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801203e:	4318      	orrs	r0, r3
 8012040:	9041      	str	r0, [sp, #260]	; 0x104
 8012042:	465d      	mov	r5, fp
 8012044:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012048:	2b78      	cmp	r3, #120	; 0x78
 801204a:	d806      	bhi.n	801205a <__ssvfiscanf_r+0xd2>
 801204c:	2b57      	cmp	r3, #87	; 0x57
 801204e:	d810      	bhi.n	8012072 <__ssvfiscanf_r+0xea>
 8012050:	2b25      	cmp	r3, #37	; 0x25
 8012052:	d05c      	beq.n	801210e <__ssvfiscanf_r+0x186>
 8012054:	d856      	bhi.n	8012104 <__ssvfiscanf_r+0x17c>
 8012056:	2b00      	cmp	r3, #0
 8012058:	d074      	beq.n	8012144 <__ssvfiscanf_r+0x1bc>
 801205a:	2303      	movs	r3, #3
 801205c:	9347      	str	r3, [sp, #284]	; 0x11c
 801205e:	230a      	movs	r3, #10
 8012060:	9342      	str	r3, [sp, #264]	; 0x108
 8012062:	e081      	b.n	8012168 <__ssvfiscanf_r+0x1e0>
 8012064:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012066:	fb02 1303 	mla	r3, r2, r3, r1
 801206a:	3b30      	subs	r3, #48	; 0x30
 801206c:	9343      	str	r3, [sp, #268]	; 0x10c
 801206e:	465d      	mov	r5, fp
 8012070:	e7d3      	b.n	801201a <__ssvfiscanf_r+0x92>
 8012072:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012076:	2a20      	cmp	r2, #32
 8012078:	d8ef      	bhi.n	801205a <__ssvfiscanf_r+0xd2>
 801207a:	a101      	add	r1, pc, #4	; (adr r1, 8012080 <__ssvfiscanf_r+0xf8>)
 801207c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012080:	08012153 	.word	0x08012153
 8012084:	0801205b 	.word	0x0801205b
 8012088:	0801205b 	.word	0x0801205b
 801208c:	080121b1 	.word	0x080121b1
 8012090:	0801205b 	.word	0x0801205b
 8012094:	0801205b 	.word	0x0801205b
 8012098:	0801205b 	.word	0x0801205b
 801209c:	0801205b 	.word	0x0801205b
 80120a0:	0801205b 	.word	0x0801205b
 80120a4:	0801205b 	.word	0x0801205b
 80120a8:	0801205b 	.word	0x0801205b
 80120ac:	080121c7 	.word	0x080121c7
 80120b0:	0801219d 	.word	0x0801219d
 80120b4:	0801210b 	.word	0x0801210b
 80120b8:	0801210b 	.word	0x0801210b
 80120bc:	0801210b 	.word	0x0801210b
 80120c0:	0801205b 	.word	0x0801205b
 80120c4:	080121a1 	.word	0x080121a1
 80120c8:	0801205b 	.word	0x0801205b
 80120cc:	0801205b 	.word	0x0801205b
 80120d0:	0801205b 	.word	0x0801205b
 80120d4:	0801205b 	.word	0x0801205b
 80120d8:	080121d7 	.word	0x080121d7
 80120dc:	080121a9 	.word	0x080121a9
 80120e0:	0801214b 	.word	0x0801214b
 80120e4:	0801205b 	.word	0x0801205b
 80120e8:	0801205b 	.word	0x0801205b
 80120ec:	080121d3 	.word	0x080121d3
 80120f0:	0801205b 	.word	0x0801205b
 80120f4:	0801219d 	.word	0x0801219d
 80120f8:	0801205b 	.word	0x0801205b
 80120fc:	0801205b 	.word	0x0801205b
 8012100:	08012153 	.word	0x08012153
 8012104:	3b45      	subs	r3, #69	; 0x45
 8012106:	2b02      	cmp	r3, #2
 8012108:	d8a7      	bhi.n	801205a <__ssvfiscanf_r+0xd2>
 801210a:	2305      	movs	r3, #5
 801210c:	e02b      	b.n	8012166 <__ssvfiscanf_r+0x1de>
 801210e:	6863      	ldr	r3, [r4, #4]
 8012110:	2b00      	cmp	r3, #0
 8012112:	dd0d      	ble.n	8012130 <__ssvfiscanf_r+0x1a8>
 8012114:	6823      	ldr	r3, [r4, #0]
 8012116:	781a      	ldrb	r2, [r3, #0]
 8012118:	4552      	cmp	r2, sl
 801211a:	f040 80a1 	bne.w	8012260 <__ssvfiscanf_r+0x2d8>
 801211e:	3301      	adds	r3, #1
 8012120:	6862      	ldr	r2, [r4, #4]
 8012122:	6023      	str	r3, [r4, #0]
 8012124:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012126:	3a01      	subs	r2, #1
 8012128:	3301      	adds	r3, #1
 801212a:	6062      	str	r2, [r4, #4]
 801212c:	9345      	str	r3, [sp, #276]	; 0x114
 801212e:	e755      	b.n	8011fdc <__ssvfiscanf_r+0x54>
 8012130:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012132:	4621      	mov	r1, r4
 8012134:	4630      	mov	r0, r6
 8012136:	4798      	blx	r3
 8012138:	2800      	cmp	r0, #0
 801213a:	d0eb      	beq.n	8012114 <__ssvfiscanf_r+0x18c>
 801213c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801213e:	2800      	cmp	r0, #0
 8012140:	f040 8084 	bne.w	801224c <__ssvfiscanf_r+0x2c4>
 8012144:	f04f 30ff 	mov.w	r0, #4294967295
 8012148:	e086      	b.n	8012258 <__ssvfiscanf_r+0x2d0>
 801214a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801214c:	f042 0220 	orr.w	r2, r2, #32
 8012150:	9241      	str	r2, [sp, #260]	; 0x104
 8012152:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012158:	9241      	str	r2, [sp, #260]	; 0x104
 801215a:	2210      	movs	r2, #16
 801215c:	2b6f      	cmp	r3, #111	; 0x6f
 801215e:	9242      	str	r2, [sp, #264]	; 0x108
 8012160:	bf34      	ite	cc
 8012162:	2303      	movcc	r3, #3
 8012164:	2304      	movcs	r3, #4
 8012166:	9347      	str	r3, [sp, #284]	; 0x11c
 8012168:	6863      	ldr	r3, [r4, #4]
 801216a:	2b00      	cmp	r3, #0
 801216c:	dd41      	ble.n	80121f2 <__ssvfiscanf_r+0x26a>
 801216e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012170:	0659      	lsls	r1, r3, #25
 8012172:	d404      	bmi.n	801217e <__ssvfiscanf_r+0x1f6>
 8012174:	6823      	ldr	r3, [r4, #0]
 8012176:	781a      	ldrb	r2, [r3, #0]
 8012178:	5cba      	ldrb	r2, [r7, r2]
 801217a:	0712      	lsls	r2, r2, #28
 801217c:	d440      	bmi.n	8012200 <__ssvfiscanf_r+0x278>
 801217e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012180:	2b02      	cmp	r3, #2
 8012182:	dc4f      	bgt.n	8012224 <__ssvfiscanf_r+0x29c>
 8012184:	466b      	mov	r3, sp
 8012186:	4622      	mov	r2, r4
 8012188:	a941      	add	r1, sp, #260	; 0x104
 801218a:	4630      	mov	r0, r6
 801218c:	f000 f874 	bl	8012278 <_scanf_chars>
 8012190:	2801      	cmp	r0, #1
 8012192:	d065      	beq.n	8012260 <__ssvfiscanf_r+0x2d8>
 8012194:	2802      	cmp	r0, #2
 8012196:	f47f af21 	bne.w	8011fdc <__ssvfiscanf_r+0x54>
 801219a:	e7cf      	b.n	801213c <__ssvfiscanf_r+0x1b4>
 801219c:	220a      	movs	r2, #10
 801219e:	e7dd      	b.n	801215c <__ssvfiscanf_r+0x1d4>
 80121a0:	2300      	movs	r3, #0
 80121a2:	9342      	str	r3, [sp, #264]	; 0x108
 80121a4:	2303      	movs	r3, #3
 80121a6:	e7de      	b.n	8012166 <__ssvfiscanf_r+0x1de>
 80121a8:	2308      	movs	r3, #8
 80121aa:	9342      	str	r3, [sp, #264]	; 0x108
 80121ac:	2304      	movs	r3, #4
 80121ae:	e7da      	b.n	8012166 <__ssvfiscanf_r+0x1de>
 80121b0:	4629      	mov	r1, r5
 80121b2:	4640      	mov	r0, r8
 80121b4:	f000 f9ce 	bl	8012554 <__sccl>
 80121b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80121ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121be:	9341      	str	r3, [sp, #260]	; 0x104
 80121c0:	4605      	mov	r5, r0
 80121c2:	2301      	movs	r3, #1
 80121c4:	e7cf      	b.n	8012166 <__ssvfiscanf_r+0x1de>
 80121c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80121c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121cc:	9341      	str	r3, [sp, #260]	; 0x104
 80121ce:	2300      	movs	r3, #0
 80121d0:	e7c9      	b.n	8012166 <__ssvfiscanf_r+0x1de>
 80121d2:	2302      	movs	r3, #2
 80121d4:	e7c7      	b.n	8012166 <__ssvfiscanf_r+0x1de>
 80121d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80121d8:	06c3      	lsls	r3, r0, #27
 80121da:	f53f aeff 	bmi.w	8011fdc <__ssvfiscanf_r+0x54>
 80121de:	9b00      	ldr	r3, [sp, #0]
 80121e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80121e2:	1d19      	adds	r1, r3, #4
 80121e4:	9100      	str	r1, [sp, #0]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	07c0      	lsls	r0, r0, #31
 80121ea:	bf4c      	ite	mi
 80121ec:	801a      	strhmi	r2, [r3, #0]
 80121ee:	601a      	strpl	r2, [r3, #0]
 80121f0:	e6f4      	b.n	8011fdc <__ssvfiscanf_r+0x54>
 80121f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80121f4:	4621      	mov	r1, r4
 80121f6:	4630      	mov	r0, r6
 80121f8:	4798      	blx	r3
 80121fa:	2800      	cmp	r0, #0
 80121fc:	d0b7      	beq.n	801216e <__ssvfiscanf_r+0x1e6>
 80121fe:	e79d      	b.n	801213c <__ssvfiscanf_r+0x1b4>
 8012200:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012202:	3201      	adds	r2, #1
 8012204:	9245      	str	r2, [sp, #276]	; 0x114
 8012206:	6862      	ldr	r2, [r4, #4]
 8012208:	3a01      	subs	r2, #1
 801220a:	2a00      	cmp	r2, #0
 801220c:	6062      	str	r2, [r4, #4]
 801220e:	dd02      	ble.n	8012216 <__ssvfiscanf_r+0x28e>
 8012210:	3301      	adds	r3, #1
 8012212:	6023      	str	r3, [r4, #0]
 8012214:	e7ae      	b.n	8012174 <__ssvfiscanf_r+0x1ec>
 8012216:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012218:	4621      	mov	r1, r4
 801221a:	4630      	mov	r0, r6
 801221c:	4798      	blx	r3
 801221e:	2800      	cmp	r0, #0
 8012220:	d0a8      	beq.n	8012174 <__ssvfiscanf_r+0x1ec>
 8012222:	e78b      	b.n	801213c <__ssvfiscanf_r+0x1b4>
 8012224:	2b04      	cmp	r3, #4
 8012226:	dc06      	bgt.n	8012236 <__ssvfiscanf_r+0x2ae>
 8012228:	466b      	mov	r3, sp
 801222a:	4622      	mov	r2, r4
 801222c:	a941      	add	r1, sp, #260	; 0x104
 801222e:	4630      	mov	r0, r6
 8012230:	f000 f87a 	bl	8012328 <_scanf_i>
 8012234:	e7ac      	b.n	8012190 <__ssvfiscanf_r+0x208>
 8012236:	4b0f      	ldr	r3, [pc, #60]	; (8012274 <__ssvfiscanf_r+0x2ec>)
 8012238:	2b00      	cmp	r3, #0
 801223a:	f43f aecf 	beq.w	8011fdc <__ssvfiscanf_r+0x54>
 801223e:	466b      	mov	r3, sp
 8012240:	4622      	mov	r2, r4
 8012242:	a941      	add	r1, sp, #260	; 0x104
 8012244:	4630      	mov	r0, r6
 8012246:	f7fc fb91 	bl	800e96c <_scanf_float>
 801224a:	e7a1      	b.n	8012190 <__ssvfiscanf_r+0x208>
 801224c:	89a3      	ldrh	r3, [r4, #12]
 801224e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012252:	bf18      	it	ne
 8012254:	f04f 30ff 	movne.w	r0, #4294967295
 8012258:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801225c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012260:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012262:	e7f9      	b.n	8012258 <__ssvfiscanf_r+0x2d0>
 8012264:	08011ed5 	.word	0x08011ed5
 8012268:	08011f4f 	.word	0x08011f4f
 801226c:	08013641 	.word	0x08013641
 8012270:	080139ba 	.word	0x080139ba
 8012274:	0800e96d 	.word	0x0800e96d

08012278 <_scanf_chars>:
 8012278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801227c:	4615      	mov	r5, r2
 801227e:	688a      	ldr	r2, [r1, #8]
 8012280:	4680      	mov	r8, r0
 8012282:	460c      	mov	r4, r1
 8012284:	b932      	cbnz	r2, 8012294 <_scanf_chars+0x1c>
 8012286:	698a      	ldr	r2, [r1, #24]
 8012288:	2a00      	cmp	r2, #0
 801228a:	bf0c      	ite	eq
 801228c:	2201      	moveq	r2, #1
 801228e:	f04f 32ff 	movne.w	r2, #4294967295
 8012292:	608a      	str	r2, [r1, #8]
 8012294:	6822      	ldr	r2, [r4, #0]
 8012296:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8012324 <_scanf_chars+0xac>
 801229a:	06d1      	lsls	r1, r2, #27
 801229c:	bf5f      	itttt	pl
 801229e:	681a      	ldrpl	r2, [r3, #0]
 80122a0:	1d11      	addpl	r1, r2, #4
 80122a2:	6019      	strpl	r1, [r3, #0]
 80122a4:	6816      	ldrpl	r6, [r2, #0]
 80122a6:	2700      	movs	r7, #0
 80122a8:	69a0      	ldr	r0, [r4, #24]
 80122aa:	b188      	cbz	r0, 80122d0 <_scanf_chars+0x58>
 80122ac:	2801      	cmp	r0, #1
 80122ae:	d107      	bne.n	80122c0 <_scanf_chars+0x48>
 80122b0:	682b      	ldr	r3, [r5, #0]
 80122b2:	781a      	ldrb	r2, [r3, #0]
 80122b4:	6963      	ldr	r3, [r4, #20]
 80122b6:	5c9b      	ldrb	r3, [r3, r2]
 80122b8:	b953      	cbnz	r3, 80122d0 <_scanf_chars+0x58>
 80122ba:	bb27      	cbnz	r7, 8012306 <_scanf_chars+0x8e>
 80122bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122c0:	2802      	cmp	r0, #2
 80122c2:	d120      	bne.n	8012306 <_scanf_chars+0x8e>
 80122c4:	682b      	ldr	r3, [r5, #0]
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80122cc:	071b      	lsls	r3, r3, #28
 80122ce:	d41a      	bmi.n	8012306 <_scanf_chars+0x8e>
 80122d0:	6823      	ldr	r3, [r4, #0]
 80122d2:	06da      	lsls	r2, r3, #27
 80122d4:	bf5e      	ittt	pl
 80122d6:	682b      	ldrpl	r3, [r5, #0]
 80122d8:	781b      	ldrbpl	r3, [r3, #0]
 80122da:	f806 3b01 	strbpl.w	r3, [r6], #1
 80122de:	682a      	ldr	r2, [r5, #0]
 80122e0:	686b      	ldr	r3, [r5, #4]
 80122e2:	3201      	adds	r2, #1
 80122e4:	602a      	str	r2, [r5, #0]
 80122e6:	68a2      	ldr	r2, [r4, #8]
 80122e8:	3b01      	subs	r3, #1
 80122ea:	3a01      	subs	r2, #1
 80122ec:	606b      	str	r3, [r5, #4]
 80122ee:	3701      	adds	r7, #1
 80122f0:	60a2      	str	r2, [r4, #8]
 80122f2:	b142      	cbz	r2, 8012306 <_scanf_chars+0x8e>
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	dcd7      	bgt.n	80122a8 <_scanf_chars+0x30>
 80122f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80122fc:	4629      	mov	r1, r5
 80122fe:	4640      	mov	r0, r8
 8012300:	4798      	blx	r3
 8012302:	2800      	cmp	r0, #0
 8012304:	d0d0      	beq.n	80122a8 <_scanf_chars+0x30>
 8012306:	6823      	ldr	r3, [r4, #0]
 8012308:	f013 0310 	ands.w	r3, r3, #16
 801230c:	d105      	bne.n	801231a <_scanf_chars+0xa2>
 801230e:	68e2      	ldr	r2, [r4, #12]
 8012310:	3201      	adds	r2, #1
 8012312:	60e2      	str	r2, [r4, #12]
 8012314:	69a2      	ldr	r2, [r4, #24]
 8012316:	b102      	cbz	r2, 801231a <_scanf_chars+0xa2>
 8012318:	7033      	strb	r3, [r6, #0]
 801231a:	6923      	ldr	r3, [r4, #16]
 801231c:	441f      	add	r7, r3
 801231e:	6127      	str	r7, [r4, #16]
 8012320:	2000      	movs	r0, #0
 8012322:	e7cb      	b.n	80122bc <_scanf_chars+0x44>
 8012324:	08013641 	.word	0x08013641

08012328 <_scanf_i>:
 8012328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801232c:	4698      	mov	r8, r3
 801232e:	4b74      	ldr	r3, [pc, #464]	; (8012500 <_scanf_i+0x1d8>)
 8012330:	460c      	mov	r4, r1
 8012332:	4682      	mov	sl, r0
 8012334:	4616      	mov	r6, r2
 8012336:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801233a:	b087      	sub	sp, #28
 801233c:	ab03      	add	r3, sp, #12
 801233e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012342:	4b70      	ldr	r3, [pc, #448]	; (8012504 <_scanf_i+0x1dc>)
 8012344:	69a1      	ldr	r1, [r4, #24]
 8012346:	4a70      	ldr	r2, [pc, #448]	; (8012508 <_scanf_i+0x1e0>)
 8012348:	2903      	cmp	r1, #3
 801234a:	bf18      	it	ne
 801234c:	461a      	movne	r2, r3
 801234e:	68a3      	ldr	r3, [r4, #8]
 8012350:	9201      	str	r2, [sp, #4]
 8012352:	1e5a      	subs	r2, r3, #1
 8012354:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012358:	bf88      	it	hi
 801235a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801235e:	4627      	mov	r7, r4
 8012360:	bf82      	ittt	hi
 8012362:	eb03 0905 	addhi.w	r9, r3, r5
 8012366:	f240 135d 	movwhi	r3, #349	; 0x15d
 801236a:	60a3      	strhi	r3, [r4, #8]
 801236c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012370:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012374:	bf98      	it	ls
 8012376:	f04f 0900 	movls.w	r9, #0
 801237a:	6023      	str	r3, [r4, #0]
 801237c:	463d      	mov	r5, r7
 801237e:	f04f 0b00 	mov.w	fp, #0
 8012382:	6831      	ldr	r1, [r6, #0]
 8012384:	ab03      	add	r3, sp, #12
 8012386:	7809      	ldrb	r1, [r1, #0]
 8012388:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801238c:	2202      	movs	r2, #2
 801238e:	f7ed ff2f 	bl	80001f0 <memchr>
 8012392:	b328      	cbz	r0, 80123e0 <_scanf_i+0xb8>
 8012394:	f1bb 0f01 	cmp.w	fp, #1
 8012398:	d159      	bne.n	801244e <_scanf_i+0x126>
 801239a:	6862      	ldr	r2, [r4, #4]
 801239c:	b92a      	cbnz	r2, 80123aa <_scanf_i+0x82>
 801239e:	6822      	ldr	r2, [r4, #0]
 80123a0:	2308      	movs	r3, #8
 80123a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80123a6:	6063      	str	r3, [r4, #4]
 80123a8:	6022      	str	r2, [r4, #0]
 80123aa:	6822      	ldr	r2, [r4, #0]
 80123ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80123b0:	6022      	str	r2, [r4, #0]
 80123b2:	68a2      	ldr	r2, [r4, #8]
 80123b4:	1e51      	subs	r1, r2, #1
 80123b6:	60a1      	str	r1, [r4, #8]
 80123b8:	b192      	cbz	r2, 80123e0 <_scanf_i+0xb8>
 80123ba:	6832      	ldr	r2, [r6, #0]
 80123bc:	1c51      	adds	r1, r2, #1
 80123be:	6031      	str	r1, [r6, #0]
 80123c0:	7812      	ldrb	r2, [r2, #0]
 80123c2:	f805 2b01 	strb.w	r2, [r5], #1
 80123c6:	6872      	ldr	r2, [r6, #4]
 80123c8:	3a01      	subs	r2, #1
 80123ca:	2a00      	cmp	r2, #0
 80123cc:	6072      	str	r2, [r6, #4]
 80123ce:	dc07      	bgt.n	80123e0 <_scanf_i+0xb8>
 80123d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80123d4:	4631      	mov	r1, r6
 80123d6:	4650      	mov	r0, sl
 80123d8:	4790      	blx	r2
 80123da:	2800      	cmp	r0, #0
 80123dc:	f040 8085 	bne.w	80124ea <_scanf_i+0x1c2>
 80123e0:	f10b 0b01 	add.w	fp, fp, #1
 80123e4:	f1bb 0f03 	cmp.w	fp, #3
 80123e8:	d1cb      	bne.n	8012382 <_scanf_i+0x5a>
 80123ea:	6863      	ldr	r3, [r4, #4]
 80123ec:	b90b      	cbnz	r3, 80123f2 <_scanf_i+0xca>
 80123ee:	230a      	movs	r3, #10
 80123f0:	6063      	str	r3, [r4, #4]
 80123f2:	6863      	ldr	r3, [r4, #4]
 80123f4:	4945      	ldr	r1, [pc, #276]	; (801250c <_scanf_i+0x1e4>)
 80123f6:	6960      	ldr	r0, [r4, #20]
 80123f8:	1ac9      	subs	r1, r1, r3
 80123fa:	f000 f8ab 	bl	8012554 <__sccl>
 80123fe:	f04f 0b00 	mov.w	fp, #0
 8012402:	68a3      	ldr	r3, [r4, #8]
 8012404:	6822      	ldr	r2, [r4, #0]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d03d      	beq.n	8012486 <_scanf_i+0x15e>
 801240a:	6831      	ldr	r1, [r6, #0]
 801240c:	6960      	ldr	r0, [r4, #20]
 801240e:	f891 c000 	ldrb.w	ip, [r1]
 8012412:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012416:	2800      	cmp	r0, #0
 8012418:	d035      	beq.n	8012486 <_scanf_i+0x15e>
 801241a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801241e:	d124      	bne.n	801246a <_scanf_i+0x142>
 8012420:	0510      	lsls	r0, r2, #20
 8012422:	d522      	bpl.n	801246a <_scanf_i+0x142>
 8012424:	f10b 0b01 	add.w	fp, fp, #1
 8012428:	f1b9 0f00 	cmp.w	r9, #0
 801242c:	d003      	beq.n	8012436 <_scanf_i+0x10e>
 801242e:	3301      	adds	r3, #1
 8012430:	f109 39ff 	add.w	r9, r9, #4294967295
 8012434:	60a3      	str	r3, [r4, #8]
 8012436:	6873      	ldr	r3, [r6, #4]
 8012438:	3b01      	subs	r3, #1
 801243a:	2b00      	cmp	r3, #0
 801243c:	6073      	str	r3, [r6, #4]
 801243e:	dd1b      	ble.n	8012478 <_scanf_i+0x150>
 8012440:	6833      	ldr	r3, [r6, #0]
 8012442:	3301      	adds	r3, #1
 8012444:	6033      	str	r3, [r6, #0]
 8012446:	68a3      	ldr	r3, [r4, #8]
 8012448:	3b01      	subs	r3, #1
 801244a:	60a3      	str	r3, [r4, #8]
 801244c:	e7d9      	b.n	8012402 <_scanf_i+0xda>
 801244e:	f1bb 0f02 	cmp.w	fp, #2
 8012452:	d1ae      	bne.n	80123b2 <_scanf_i+0x8a>
 8012454:	6822      	ldr	r2, [r4, #0]
 8012456:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801245a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801245e:	d1bf      	bne.n	80123e0 <_scanf_i+0xb8>
 8012460:	2310      	movs	r3, #16
 8012462:	6063      	str	r3, [r4, #4]
 8012464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012468:	e7a2      	b.n	80123b0 <_scanf_i+0x88>
 801246a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801246e:	6022      	str	r2, [r4, #0]
 8012470:	780b      	ldrb	r3, [r1, #0]
 8012472:	f805 3b01 	strb.w	r3, [r5], #1
 8012476:	e7de      	b.n	8012436 <_scanf_i+0x10e>
 8012478:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801247c:	4631      	mov	r1, r6
 801247e:	4650      	mov	r0, sl
 8012480:	4798      	blx	r3
 8012482:	2800      	cmp	r0, #0
 8012484:	d0df      	beq.n	8012446 <_scanf_i+0x11e>
 8012486:	6823      	ldr	r3, [r4, #0]
 8012488:	05d9      	lsls	r1, r3, #23
 801248a:	d50d      	bpl.n	80124a8 <_scanf_i+0x180>
 801248c:	42bd      	cmp	r5, r7
 801248e:	d909      	bls.n	80124a4 <_scanf_i+0x17c>
 8012490:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012494:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012498:	4632      	mov	r2, r6
 801249a:	4650      	mov	r0, sl
 801249c:	4798      	blx	r3
 801249e:	f105 39ff 	add.w	r9, r5, #4294967295
 80124a2:	464d      	mov	r5, r9
 80124a4:	42bd      	cmp	r5, r7
 80124a6:	d028      	beq.n	80124fa <_scanf_i+0x1d2>
 80124a8:	6822      	ldr	r2, [r4, #0]
 80124aa:	f012 0210 	ands.w	r2, r2, #16
 80124ae:	d113      	bne.n	80124d8 <_scanf_i+0x1b0>
 80124b0:	702a      	strb	r2, [r5, #0]
 80124b2:	6863      	ldr	r3, [r4, #4]
 80124b4:	9e01      	ldr	r6, [sp, #4]
 80124b6:	4639      	mov	r1, r7
 80124b8:	4650      	mov	r0, sl
 80124ba:	47b0      	blx	r6
 80124bc:	f8d8 3000 	ldr.w	r3, [r8]
 80124c0:	6821      	ldr	r1, [r4, #0]
 80124c2:	1d1a      	adds	r2, r3, #4
 80124c4:	f8c8 2000 	str.w	r2, [r8]
 80124c8:	f011 0f20 	tst.w	r1, #32
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	d00f      	beq.n	80124f0 <_scanf_i+0x1c8>
 80124d0:	6018      	str	r0, [r3, #0]
 80124d2:	68e3      	ldr	r3, [r4, #12]
 80124d4:	3301      	adds	r3, #1
 80124d6:	60e3      	str	r3, [r4, #12]
 80124d8:	1bed      	subs	r5, r5, r7
 80124da:	44ab      	add	fp, r5
 80124dc:	6925      	ldr	r5, [r4, #16]
 80124de:	445d      	add	r5, fp
 80124e0:	6125      	str	r5, [r4, #16]
 80124e2:	2000      	movs	r0, #0
 80124e4:	b007      	add	sp, #28
 80124e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ea:	f04f 0b00 	mov.w	fp, #0
 80124ee:	e7ca      	b.n	8012486 <_scanf_i+0x15e>
 80124f0:	07ca      	lsls	r2, r1, #31
 80124f2:	bf4c      	ite	mi
 80124f4:	8018      	strhmi	r0, [r3, #0]
 80124f6:	6018      	strpl	r0, [r3, #0]
 80124f8:	e7eb      	b.n	80124d2 <_scanf_i+0x1aa>
 80124fa:	2001      	movs	r0, #1
 80124fc:	e7f2      	b.n	80124e4 <_scanf_i+0x1bc>
 80124fe:	bf00      	nop
 8012500:	08013318 	.word	0x08013318
 8012504:	080126c1 	.word	0x080126c1
 8012508:	0800fca1 	.word	0x0800fca1
 801250c:	080139de 	.word	0x080139de

08012510 <_read_r>:
 8012510:	b538      	push	{r3, r4, r5, lr}
 8012512:	4d07      	ldr	r5, [pc, #28]	; (8012530 <_read_r+0x20>)
 8012514:	4604      	mov	r4, r0
 8012516:	4608      	mov	r0, r1
 8012518:	4611      	mov	r1, r2
 801251a:	2200      	movs	r2, #0
 801251c:	602a      	str	r2, [r5, #0]
 801251e:	461a      	mov	r2, r3
 8012520:	f7f3 f870 	bl	8005604 <_read>
 8012524:	1c43      	adds	r3, r0, #1
 8012526:	d102      	bne.n	801252e <_read_r+0x1e>
 8012528:	682b      	ldr	r3, [r5, #0]
 801252a:	b103      	cbz	r3, 801252e <_read_r+0x1e>
 801252c:	6023      	str	r3, [r4, #0]
 801252e:	bd38      	pop	{r3, r4, r5, pc}
 8012530:	20000a4c 	.word	0x20000a4c

08012534 <_sbrk_r>:
 8012534:	b538      	push	{r3, r4, r5, lr}
 8012536:	4d06      	ldr	r5, [pc, #24]	; (8012550 <_sbrk_r+0x1c>)
 8012538:	2300      	movs	r3, #0
 801253a:	4604      	mov	r4, r0
 801253c:	4608      	mov	r0, r1
 801253e:	602b      	str	r3, [r5, #0]
 8012540:	f7f3 f8ce 	bl	80056e0 <_sbrk>
 8012544:	1c43      	adds	r3, r0, #1
 8012546:	d102      	bne.n	801254e <_sbrk_r+0x1a>
 8012548:	682b      	ldr	r3, [r5, #0]
 801254a:	b103      	cbz	r3, 801254e <_sbrk_r+0x1a>
 801254c:	6023      	str	r3, [r4, #0]
 801254e:	bd38      	pop	{r3, r4, r5, pc}
 8012550:	20000a4c 	.word	0x20000a4c

08012554 <__sccl>:
 8012554:	b570      	push	{r4, r5, r6, lr}
 8012556:	780b      	ldrb	r3, [r1, #0]
 8012558:	4604      	mov	r4, r0
 801255a:	2b5e      	cmp	r3, #94	; 0x5e
 801255c:	bf0b      	itete	eq
 801255e:	784b      	ldrbeq	r3, [r1, #1]
 8012560:	1c48      	addne	r0, r1, #1
 8012562:	1c88      	addeq	r0, r1, #2
 8012564:	2200      	movne	r2, #0
 8012566:	bf08      	it	eq
 8012568:	2201      	moveq	r2, #1
 801256a:	1e61      	subs	r1, r4, #1
 801256c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8012570:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012574:	42a9      	cmp	r1, r5
 8012576:	d1fb      	bne.n	8012570 <__sccl+0x1c>
 8012578:	b90b      	cbnz	r3, 801257e <__sccl+0x2a>
 801257a:	3801      	subs	r0, #1
 801257c:	bd70      	pop	{r4, r5, r6, pc}
 801257e:	f082 0101 	eor.w	r1, r2, #1
 8012582:	54e1      	strb	r1, [r4, r3]
 8012584:	1c42      	adds	r2, r0, #1
 8012586:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801258a:	2d2d      	cmp	r5, #45	; 0x2d
 801258c:	f102 36ff 	add.w	r6, r2, #4294967295
 8012590:	4610      	mov	r0, r2
 8012592:	d006      	beq.n	80125a2 <__sccl+0x4e>
 8012594:	2d5d      	cmp	r5, #93	; 0x5d
 8012596:	d0f1      	beq.n	801257c <__sccl+0x28>
 8012598:	b90d      	cbnz	r5, 801259e <__sccl+0x4a>
 801259a:	4630      	mov	r0, r6
 801259c:	e7ee      	b.n	801257c <__sccl+0x28>
 801259e:	462b      	mov	r3, r5
 80125a0:	e7ef      	b.n	8012582 <__sccl+0x2e>
 80125a2:	7816      	ldrb	r6, [r2, #0]
 80125a4:	2e5d      	cmp	r6, #93	; 0x5d
 80125a6:	d0fa      	beq.n	801259e <__sccl+0x4a>
 80125a8:	42b3      	cmp	r3, r6
 80125aa:	dcf8      	bgt.n	801259e <__sccl+0x4a>
 80125ac:	4618      	mov	r0, r3
 80125ae:	3001      	adds	r0, #1
 80125b0:	4286      	cmp	r6, r0
 80125b2:	5421      	strb	r1, [r4, r0]
 80125b4:	dcfb      	bgt.n	80125ae <__sccl+0x5a>
 80125b6:	43d8      	mvns	r0, r3
 80125b8:	4430      	add	r0, r6
 80125ba:	1c5d      	adds	r5, r3, #1
 80125bc:	42b3      	cmp	r3, r6
 80125be:	bfa8      	it	ge
 80125c0:	2000      	movge	r0, #0
 80125c2:	182b      	adds	r3, r5, r0
 80125c4:	3202      	adds	r2, #2
 80125c6:	e7de      	b.n	8012586 <__sccl+0x32>

080125c8 <_strtoul_l.isra.0>:
 80125c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125cc:	4e3b      	ldr	r6, [pc, #236]	; (80126bc <_strtoul_l.isra.0+0xf4>)
 80125ce:	4686      	mov	lr, r0
 80125d0:	468c      	mov	ip, r1
 80125d2:	4660      	mov	r0, ip
 80125d4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80125d8:	5da5      	ldrb	r5, [r4, r6]
 80125da:	f015 0508 	ands.w	r5, r5, #8
 80125de:	d1f8      	bne.n	80125d2 <_strtoul_l.isra.0+0xa>
 80125e0:	2c2d      	cmp	r4, #45	; 0x2d
 80125e2:	d134      	bne.n	801264e <_strtoul_l.isra.0+0x86>
 80125e4:	f89c 4000 	ldrb.w	r4, [ip]
 80125e8:	f04f 0801 	mov.w	r8, #1
 80125ec:	f100 0c02 	add.w	ip, r0, #2
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d05e      	beq.n	80126b2 <_strtoul_l.isra.0+0xea>
 80125f4:	2b10      	cmp	r3, #16
 80125f6:	d10c      	bne.n	8012612 <_strtoul_l.isra.0+0x4a>
 80125f8:	2c30      	cmp	r4, #48	; 0x30
 80125fa:	d10a      	bne.n	8012612 <_strtoul_l.isra.0+0x4a>
 80125fc:	f89c 0000 	ldrb.w	r0, [ip]
 8012600:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012604:	2858      	cmp	r0, #88	; 0x58
 8012606:	d14f      	bne.n	80126a8 <_strtoul_l.isra.0+0xe0>
 8012608:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801260c:	2310      	movs	r3, #16
 801260e:	f10c 0c02 	add.w	ip, ip, #2
 8012612:	f04f 37ff 	mov.w	r7, #4294967295
 8012616:	2500      	movs	r5, #0
 8012618:	fbb7 f7f3 	udiv	r7, r7, r3
 801261c:	fb03 f907 	mul.w	r9, r3, r7
 8012620:	ea6f 0909 	mvn.w	r9, r9
 8012624:	4628      	mov	r0, r5
 8012626:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801262a:	2e09      	cmp	r6, #9
 801262c:	d818      	bhi.n	8012660 <_strtoul_l.isra.0+0x98>
 801262e:	4634      	mov	r4, r6
 8012630:	42a3      	cmp	r3, r4
 8012632:	dd24      	ble.n	801267e <_strtoul_l.isra.0+0xb6>
 8012634:	2d00      	cmp	r5, #0
 8012636:	db1f      	blt.n	8012678 <_strtoul_l.isra.0+0xb0>
 8012638:	4287      	cmp	r7, r0
 801263a:	d31d      	bcc.n	8012678 <_strtoul_l.isra.0+0xb0>
 801263c:	d101      	bne.n	8012642 <_strtoul_l.isra.0+0x7a>
 801263e:	45a1      	cmp	r9, r4
 8012640:	db1a      	blt.n	8012678 <_strtoul_l.isra.0+0xb0>
 8012642:	fb00 4003 	mla	r0, r0, r3, r4
 8012646:	2501      	movs	r5, #1
 8012648:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801264c:	e7eb      	b.n	8012626 <_strtoul_l.isra.0+0x5e>
 801264e:	2c2b      	cmp	r4, #43	; 0x2b
 8012650:	bf08      	it	eq
 8012652:	f89c 4000 	ldrbeq.w	r4, [ip]
 8012656:	46a8      	mov	r8, r5
 8012658:	bf08      	it	eq
 801265a:	f100 0c02 	addeq.w	ip, r0, #2
 801265e:	e7c7      	b.n	80125f0 <_strtoul_l.isra.0+0x28>
 8012660:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8012664:	2e19      	cmp	r6, #25
 8012666:	d801      	bhi.n	801266c <_strtoul_l.isra.0+0xa4>
 8012668:	3c37      	subs	r4, #55	; 0x37
 801266a:	e7e1      	b.n	8012630 <_strtoul_l.isra.0+0x68>
 801266c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8012670:	2e19      	cmp	r6, #25
 8012672:	d804      	bhi.n	801267e <_strtoul_l.isra.0+0xb6>
 8012674:	3c57      	subs	r4, #87	; 0x57
 8012676:	e7db      	b.n	8012630 <_strtoul_l.isra.0+0x68>
 8012678:	f04f 35ff 	mov.w	r5, #4294967295
 801267c:	e7e4      	b.n	8012648 <_strtoul_l.isra.0+0x80>
 801267e:	2d00      	cmp	r5, #0
 8012680:	da07      	bge.n	8012692 <_strtoul_l.isra.0+0xca>
 8012682:	2322      	movs	r3, #34	; 0x22
 8012684:	f8ce 3000 	str.w	r3, [lr]
 8012688:	f04f 30ff 	mov.w	r0, #4294967295
 801268c:	b942      	cbnz	r2, 80126a0 <_strtoul_l.isra.0+0xd8>
 801268e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012692:	f1b8 0f00 	cmp.w	r8, #0
 8012696:	d000      	beq.n	801269a <_strtoul_l.isra.0+0xd2>
 8012698:	4240      	negs	r0, r0
 801269a:	2a00      	cmp	r2, #0
 801269c:	d0f7      	beq.n	801268e <_strtoul_l.isra.0+0xc6>
 801269e:	b10d      	cbz	r5, 80126a4 <_strtoul_l.isra.0+0xdc>
 80126a0:	f10c 31ff 	add.w	r1, ip, #4294967295
 80126a4:	6011      	str	r1, [r2, #0]
 80126a6:	e7f2      	b.n	801268e <_strtoul_l.isra.0+0xc6>
 80126a8:	2430      	movs	r4, #48	; 0x30
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d1b1      	bne.n	8012612 <_strtoul_l.isra.0+0x4a>
 80126ae:	2308      	movs	r3, #8
 80126b0:	e7af      	b.n	8012612 <_strtoul_l.isra.0+0x4a>
 80126b2:	2c30      	cmp	r4, #48	; 0x30
 80126b4:	d0a2      	beq.n	80125fc <_strtoul_l.isra.0+0x34>
 80126b6:	230a      	movs	r3, #10
 80126b8:	e7ab      	b.n	8012612 <_strtoul_l.isra.0+0x4a>
 80126ba:	bf00      	nop
 80126bc:	08013641 	.word	0x08013641

080126c0 <_strtoul_r>:
 80126c0:	f7ff bf82 	b.w	80125c8 <_strtoul_l.isra.0>

080126c4 <__submore>:
 80126c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c8:	460c      	mov	r4, r1
 80126ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80126cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126d0:	4299      	cmp	r1, r3
 80126d2:	d11d      	bne.n	8012710 <__submore+0x4c>
 80126d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80126d8:	f7ff fa46 	bl	8011b68 <_malloc_r>
 80126dc:	b918      	cbnz	r0, 80126e6 <__submore+0x22>
 80126de:	f04f 30ff 	mov.w	r0, #4294967295
 80126e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126ea:	63a3      	str	r3, [r4, #56]	; 0x38
 80126ec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80126f0:	6360      	str	r0, [r4, #52]	; 0x34
 80126f2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80126f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80126fa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80126fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012702:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8012706:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801270a:	6020      	str	r0, [r4, #0]
 801270c:	2000      	movs	r0, #0
 801270e:	e7e8      	b.n	80126e2 <__submore+0x1e>
 8012710:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8012712:	0077      	lsls	r7, r6, #1
 8012714:	463a      	mov	r2, r7
 8012716:	f000 fa2d 	bl	8012b74 <_realloc_r>
 801271a:	4605      	mov	r5, r0
 801271c:	2800      	cmp	r0, #0
 801271e:	d0de      	beq.n	80126de <__submore+0x1a>
 8012720:	eb00 0806 	add.w	r8, r0, r6
 8012724:	4601      	mov	r1, r0
 8012726:	4632      	mov	r2, r6
 8012728:	4640      	mov	r0, r8
 801272a:	f7fe fcf5 	bl	8011118 <memcpy>
 801272e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8012732:	f8c4 8000 	str.w	r8, [r4]
 8012736:	e7e9      	b.n	801270c <__submore+0x48>

08012738 <__ascii_wctomb>:
 8012738:	b149      	cbz	r1, 801274e <__ascii_wctomb+0x16>
 801273a:	2aff      	cmp	r2, #255	; 0xff
 801273c:	bf85      	ittet	hi
 801273e:	238a      	movhi	r3, #138	; 0x8a
 8012740:	6003      	strhi	r3, [r0, #0]
 8012742:	700a      	strbls	r2, [r1, #0]
 8012744:	f04f 30ff 	movhi.w	r0, #4294967295
 8012748:	bf98      	it	ls
 801274a:	2001      	movls	r0, #1
 801274c:	4770      	bx	lr
 801274e:	4608      	mov	r0, r1
 8012750:	4770      	bx	lr
	...

08012754 <__assert_func>:
 8012754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012756:	4614      	mov	r4, r2
 8012758:	461a      	mov	r2, r3
 801275a:	4b09      	ldr	r3, [pc, #36]	; (8012780 <__assert_func+0x2c>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	4605      	mov	r5, r0
 8012760:	68d8      	ldr	r0, [r3, #12]
 8012762:	b14c      	cbz	r4, 8012778 <__assert_func+0x24>
 8012764:	4b07      	ldr	r3, [pc, #28]	; (8012784 <__assert_func+0x30>)
 8012766:	9100      	str	r1, [sp, #0]
 8012768:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801276c:	4906      	ldr	r1, [pc, #24]	; (8012788 <__assert_func+0x34>)
 801276e:	462b      	mov	r3, r5
 8012770:	f000 f9a6 	bl	8012ac0 <fiprintf>
 8012774:	f000 fc3e 	bl	8012ff4 <abort>
 8012778:	4b04      	ldr	r3, [pc, #16]	; (801278c <__assert_func+0x38>)
 801277a:	461c      	mov	r4, r3
 801277c:	e7f3      	b.n	8012766 <__assert_func+0x12>
 801277e:	bf00      	nop
 8012780:	20000060 	.word	0x20000060
 8012784:	080139e0 	.word	0x080139e0
 8012788:	080139ed 	.word	0x080139ed
 801278c:	08013a1b 	.word	0x08013a1b

08012790 <__sflush_r>:
 8012790:	898a      	ldrh	r2, [r1, #12]
 8012792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012796:	4605      	mov	r5, r0
 8012798:	0710      	lsls	r0, r2, #28
 801279a:	460c      	mov	r4, r1
 801279c:	d458      	bmi.n	8012850 <__sflush_r+0xc0>
 801279e:	684b      	ldr	r3, [r1, #4]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	dc05      	bgt.n	80127b0 <__sflush_r+0x20>
 80127a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	dc02      	bgt.n	80127b0 <__sflush_r+0x20>
 80127aa:	2000      	movs	r0, #0
 80127ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127b2:	2e00      	cmp	r6, #0
 80127b4:	d0f9      	beq.n	80127aa <__sflush_r+0x1a>
 80127b6:	2300      	movs	r3, #0
 80127b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80127bc:	682f      	ldr	r7, [r5, #0]
 80127be:	602b      	str	r3, [r5, #0]
 80127c0:	d032      	beq.n	8012828 <__sflush_r+0x98>
 80127c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80127c4:	89a3      	ldrh	r3, [r4, #12]
 80127c6:	075a      	lsls	r2, r3, #29
 80127c8:	d505      	bpl.n	80127d6 <__sflush_r+0x46>
 80127ca:	6863      	ldr	r3, [r4, #4]
 80127cc:	1ac0      	subs	r0, r0, r3
 80127ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127d0:	b10b      	cbz	r3, 80127d6 <__sflush_r+0x46>
 80127d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80127d4:	1ac0      	subs	r0, r0, r3
 80127d6:	2300      	movs	r3, #0
 80127d8:	4602      	mov	r2, r0
 80127da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127dc:	6a21      	ldr	r1, [r4, #32]
 80127de:	4628      	mov	r0, r5
 80127e0:	47b0      	blx	r6
 80127e2:	1c43      	adds	r3, r0, #1
 80127e4:	89a3      	ldrh	r3, [r4, #12]
 80127e6:	d106      	bne.n	80127f6 <__sflush_r+0x66>
 80127e8:	6829      	ldr	r1, [r5, #0]
 80127ea:	291d      	cmp	r1, #29
 80127ec:	d82c      	bhi.n	8012848 <__sflush_r+0xb8>
 80127ee:	4a2a      	ldr	r2, [pc, #168]	; (8012898 <__sflush_r+0x108>)
 80127f0:	40ca      	lsrs	r2, r1
 80127f2:	07d6      	lsls	r6, r2, #31
 80127f4:	d528      	bpl.n	8012848 <__sflush_r+0xb8>
 80127f6:	2200      	movs	r2, #0
 80127f8:	6062      	str	r2, [r4, #4]
 80127fa:	04d9      	lsls	r1, r3, #19
 80127fc:	6922      	ldr	r2, [r4, #16]
 80127fe:	6022      	str	r2, [r4, #0]
 8012800:	d504      	bpl.n	801280c <__sflush_r+0x7c>
 8012802:	1c42      	adds	r2, r0, #1
 8012804:	d101      	bne.n	801280a <__sflush_r+0x7a>
 8012806:	682b      	ldr	r3, [r5, #0]
 8012808:	b903      	cbnz	r3, 801280c <__sflush_r+0x7c>
 801280a:	6560      	str	r0, [r4, #84]	; 0x54
 801280c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801280e:	602f      	str	r7, [r5, #0]
 8012810:	2900      	cmp	r1, #0
 8012812:	d0ca      	beq.n	80127aa <__sflush_r+0x1a>
 8012814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012818:	4299      	cmp	r1, r3
 801281a:	d002      	beq.n	8012822 <__sflush_r+0x92>
 801281c:	4628      	mov	r0, r5
 801281e:	f7ff f953 	bl	8011ac8 <_free_r>
 8012822:	2000      	movs	r0, #0
 8012824:	6360      	str	r0, [r4, #52]	; 0x34
 8012826:	e7c1      	b.n	80127ac <__sflush_r+0x1c>
 8012828:	6a21      	ldr	r1, [r4, #32]
 801282a:	2301      	movs	r3, #1
 801282c:	4628      	mov	r0, r5
 801282e:	47b0      	blx	r6
 8012830:	1c41      	adds	r1, r0, #1
 8012832:	d1c7      	bne.n	80127c4 <__sflush_r+0x34>
 8012834:	682b      	ldr	r3, [r5, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d0c4      	beq.n	80127c4 <__sflush_r+0x34>
 801283a:	2b1d      	cmp	r3, #29
 801283c:	d001      	beq.n	8012842 <__sflush_r+0xb2>
 801283e:	2b16      	cmp	r3, #22
 8012840:	d101      	bne.n	8012846 <__sflush_r+0xb6>
 8012842:	602f      	str	r7, [r5, #0]
 8012844:	e7b1      	b.n	80127aa <__sflush_r+0x1a>
 8012846:	89a3      	ldrh	r3, [r4, #12]
 8012848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801284c:	81a3      	strh	r3, [r4, #12]
 801284e:	e7ad      	b.n	80127ac <__sflush_r+0x1c>
 8012850:	690f      	ldr	r7, [r1, #16]
 8012852:	2f00      	cmp	r7, #0
 8012854:	d0a9      	beq.n	80127aa <__sflush_r+0x1a>
 8012856:	0793      	lsls	r3, r2, #30
 8012858:	680e      	ldr	r6, [r1, #0]
 801285a:	bf08      	it	eq
 801285c:	694b      	ldreq	r3, [r1, #20]
 801285e:	600f      	str	r7, [r1, #0]
 8012860:	bf18      	it	ne
 8012862:	2300      	movne	r3, #0
 8012864:	eba6 0807 	sub.w	r8, r6, r7
 8012868:	608b      	str	r3, [r1, #8]
 801286a:	f1b8 0f00 	cmp.w	r8, #0
 801286e:	dd9c      	ble.n	80127aa <__sflush_r+0x1a>
 8012870:	6a21      	ldr	r1, [r4, #32]
 8012872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012874:	4643      	mov	r3, r8
 8012876:	463a      	mov	r2, r7
 8012878:	4628      	mov	r0, r5
 801287a:	47b0      	blx	r6
 801287c:	2800      	cmp	r0, #0
 801287e:	dc06      	bgt.n	801288e <__sflush_r+0xfe>
 8012880:	89a3      	ldrh	r3, [r4, #12]
 8012882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012886:	81a3      	strh	r3, [r4, #12]
 8012888:	f04f 30ff 	mov.w	r0, #4294967295
 801288c:	e78e      	b.n	80127ac <__sflush_r+0x1c>
 801288e:	4407      	add	r7, r0
 8012890:	eba8 0800 	sub.w	r8, r8, r0
 8012894:	e7e9      	b.n	801286a <__sflush_r+0xda>
 8012896:	bf00      	nop
 8012898:	20400001 	.word	0x20400001

0801289c <_fflush_r>:
 801289c:	b538      	push	{r3, r4, r5, lr}
 801289e:	690b      	ldr	r3, [r1, #16]
 80128a0:	4605      	mov	r5, r0
 80128a2:	460c      	mov	r4, r1
 80128a4:	b913      	cbnz	r3, 80128ac <_fflush_r+0x10>
 80128a6:	2500      	movs	r5, #0
 80128a8:	4628      	mov	r0, r5
 80128aa:	bd38      	pop	{r3, r4, r5, pc}
 80128ac:	b118      	cbz	r0, 80128b6 <_fflush_r+0x1a>
 80128ae:	6983      	ldr	r3, [r0, #24]
 80128b0:	b90b      	cbnz	r3, 80128b6 <_fflush_r+0x1a>
 80128b2:	f000 f887 	bl	80129c4 <__sinit>
 80128b6:	4b14      	ldr	r3, [pc, #80]	; (8012908 <_fflush_r+0x6c>)
 80128b8:	429c      	cmp	r4, r3
 80128ba:	d11b      	bne.n	80128f4 <_fflush_r+0x58>
 80128bc:	686c      	ldr	r4, [r5, #4]
 80128be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d0ef      	beq.n	80128a6 <_fflush_r+0xa>
 80128c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80128c8:	07d0      	lsls	r0, r2, #31
 80128ca:	d404      	bmi.n	80128d6 <_fflush_r+0x3a>
 80128cc:	0599      	lsls	r1, r3, #22
 80128ce:	d402      	bmi.n	80128d6 <_fflush_r+0x3a>
 80128d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128d2:	f000 f927 	bl	8012b24 <__retarget_lock_acquire_recursive>
 80128d6:	4628      	mov	r0, r5
 80128d8:	4621      	mov	r1, r4
 80128da:	f7ff ff59 	bl	8012790 <__sflush_r>
 80128de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128e0:	07da      	lsls	r2, r3, #31
 80128e2:	4605      	mov	r5, r0
 80128e4:	d4e0      	bmi.n	80128a8 <_fflush_r+0xc>
 80128e6:	89a3      	ldrh	r3, [r4, #12]
 80128e8:	059b      	lsls	r3, r3, #22
 80128ea:	d4dd      	bmi.n	80128a8 <_fflush_r+0xc>
 80128ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128ee:	f000 f91a 	bl	8012b26 <__retarget_lock_release_recursive>
 80128f2:	e7d9      	b.n	80128a8 <_fflush_r+0xc>
 80128f4:	4b05      	ldr	r3, [pc, #20]	; (801290c <_fflush_r+0x70>)
 80128f6:	429c      	cmp	r4, r3
 80128f8:	d101      	bne.n	80128fe <_fflush_r+0x62>
 80128fa:	68ac      	ldr	r4, [r5, #8]
 80128fc:	e7df      	b.n	80128be <_fflush_r+0x22>
 80128fe:	4b04      	ldr	r3, [pc, #16]	; (8012910 <_fflush_r+0x74>)
 8012900:	429c      	cmp	r4, r3
 8012902:	bf08      	it	eq
 8012904:	68ec      	ldreq	r4, [r5, #12]
 8012906:	e7da      	b.n	80128be <_fflush_r+0x22>
 8012908:	08013a3c 	.word	0x08013a3c
 801290c:	08013a5c 	.word	0x08013a5c
 8012910:	08013a1c 	.word	0x08013a1c

08012914 <std>:
 8012914:	2300      	movs	r3, #0
 8012916:	b510      	push	{r4, lr}
 8012918:	4604      	mov	r4, r0
 801291a:	e9c0 3300 	strd	r3, r3, [r0]
 801291e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012922:	6083      	str	r3, [r0, #8]
 8012924:	8181      	strh	r1, [r0, #12]
 8012926:	6643      	str	r3, [r0, #100]	; 0x64
 8012928:	81c2      	strh	r2, [r0, #14]
 801292a:	6183      	str	r3, [r0, #24]
 801292c:	4619      	mov	r1, r3
 801292e:	2208      	movs	r2, #8
 8012930:	305c      	adds	r0, #92	; 0x5c
 8012932:	f7fb fba9 	bl	800e088 <memset>
 8012936:	4b05      	ldr	r3, [pc, #20]	; (801294c <std+0x38>)
 8012938:	6263      	str	r3, [r4, #36]	; 0x24
 801293a:	4b05      	ldr	r3, [pc, #20]	; (8012950 <std+0x3c>)
 801293c:	62a3      	str	r3, [r4, #40]	; 0x28
 801293e:	4b05      	ldr	r3, [pc, #20]	; (8012954 <std+0x40>)
 8012940:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012942:	4b05      	ldr	r3, [pc, #20]	; (8012958 <std+0x44>)
 8012944:	6224      	str	r4, [r4, #32]
 8012946:	6323      	str	r3, [r4, #48]	; 0x30
 8012948:	bd10      	pop	{r4, pc}
 801294a:	bf00      	nop
 801294c:	0800ee8d 	.word	0x0800ee8d
 8012950:	0800eeb3 	.word	0x0800eeb3
 8012954:	0800eeeb 	.word	0x0800eeeb
 8012958:	0800ef0f 	.word	0x0800ef0f

0801295c <_cleanup_r>:
 801295c:	4901      	ldr	r1, [pc, #4]	; (8012964 <_cleanup_r+0x8>)
 801295e:	f000 b8c1 	b.w	8012ae4 <_fwalk_reent>
 8012962:	bf00      	nop
 8012964:	0801289d 	.word	0x0801289d

08012968 <__sfmoreglue>:
 8012968:	b570      	push	{r4, r5, r6, lr}
 801296a:	1e4a      	subs	r2, r1, #1
 801296c:	2568      	movs	r5, #104	; 0x68
 801296e:	4355      	muls	r5, r2
 8012970:	460e      	mov	r6, r1
 8012972:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012976:	f7ff f8f7 	bl	8011b68 <_malloc_r>
 801297a:	4604      	mov	r4, r0
 801297c:	b140      	cbz	r0, 8012990 <__sfmoreglue+0x28>
 801297e:	2100      	movs	r1, #0
 8012980:	e9c0 1600 	strd	r1, r6, [r0]
 8012984:	300c      	adds	r0, #12
 8012986:	60a0      	str	r0, [r4, #8]
 8012988:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801298c:	f7fb fb7c 	bl	800e088 <memset>
 8012990:	4620      	mov	r0, r4
 8012992:	bd70      	pop	{r4, r5, r6, pc}

08012994 <__sfp_lock_acquire>:
 8012994:	4801      	ldr	r0, [pc, #4]	; (801299c <__sfp_lock_acquire+0x8>)
 8012996:	f000 b8c5 	b.w	8012b24 <__retarget_lock_acquire_recursive>
 801299a:	bf00      	nop
 801299c:	20000a58 	.word	0x20000a58

080129a0 <__sfp_lock_release>:
 80129a0:	4801      	ldr	r0, [pc, #4]	; (80129a8 <__sfp_lock_release+0x8>)
 80129a2:	f000 b8c0 	b.w	8012b26 <__retarget_lock_release_recursive>
 80129a6:	bf00      	nop
 80129a8:	20000a58 	.word	0x20000a58

080129ac <__sinit_lock_acquire>:
 80129ac:	4801      	ldr	r0, [pc, #4]	; (80129b4 <__sinit_lock_acquire+0x8>)
 80129ae:	f000 b8b9 	b.w	8012b24 <__retarget_lock_acquire_recursive>
 80129b2:	bf00      	nop
 80129b4:	20000a53 	.word	0x20000a53

080129b8 <__sinit_lock_release>:
 80129b8:	4801      	ldr	r0, [pc, #4]	; (80129c0 <__sinit_lock_release+0x8>)
 80129ba:	f000 b8b4 	b.w	8012b26 <__retarget_lock_release_recursive>
 80129be:	bf00      	nop
 80129c0:	20000a53 	.word	0x20000a53

080129c4 <__sinit>:
 80129c4:	b510      	push	{r4, lr}
 80129c6:	4604      	mov	r4, r0
 80129c8:	f7ff fff0 	bl	80129ac <__sinit_lock_acquire>
 80129cc:	69a3      	ldr	r3, [r4, #24]
 80129ce:	b11b      	cbz	r3, 80129d8 <__sinit+0x14>
 80129d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129d4:	f7ff bff0 	b.w	80129b8 <__sinit_lock_release>
 80129d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80129dc:	6523      	str	r3, [r4, #80]	; 0x50
 80129de:	4b13      	ldr	r3, [pc, #76]	; (8012a2c <__sinit+0x68>)
 80129e0:	4a13      	ldr	r2, [pc, #76]	; (8012a30 <__sinit+0x6c>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80129e6:	42a3      	cmp	r3, r4
 80129e8:	bf04      	itt	eq
 80129ea:	2301      	moveq	r3, #1
 80129ec:	61a3      	streq	r3, [r4, #24]
 80129ee:	4620      	mov	r0, r4
 80129f0:	f000 f820 	bl	8012a34 <__sfp>
 80129f4:	6060      	str	r0, [r4, #4]
 80129f6:	4620      	mov	r0, r4
 80129f8:	f000 f81c 	bl	8012a34 <__sfp>
 80129fc:	60a0      	str	r0, [r4, #8]
 80129fe:	4620      	mov	r0, r4
 8012a00:	f000 f818 	bl	8012a34 <__sfp>
 8012a04:	2200      	movs	r2, #0
 8012a06:	60e0      	str	r0, [r4, #12]
 8012a08:	2104      	movs	r1, #4
 8012a0a:	6860      	ldr	r0, [r4, #4]
 8012a0c:	f7ff ff82 	bl	8012914 <std>
 8012a10:	68a0      	ldr	r0, [r4, #8]
 8012a12:	2201      	movs	r2, #1
 8012a14:	2109      	movs	r1, #9
 8012a16:	f7ff ff7d 	bl	8012914 <std>
 8012a1a:	68e0      	ldr	r0, [r4, #12]
 8012a1c:	2202      	movs	r2, #2
 8012a1e:	2112      	movs	r1, #18
 8012a20:	f7ff ff78 	bl	8012914 <std>
 8012a24:	2301      	movs	r3, #1
 8012a26:	61a3      	str	r3, [r4, #24]
 8012a28:	e7d2      	b.n	80129d0 <__sinit+0xc>
 8012a2a:	bf00      	nop
 8012a2c:	080135b0 	.word	0x080135b0
 8012a30:	0801295d 	.word	0x0801295d

08012a34 <__sfp>:
 8012a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a36:	4607      	mov	r7, r0
 8012a38:	f7ff ffac 	bl	8012994 <__sfp_lock_acquire>
 8012a3c:	4b1e      	ldr	r3, [pc, #120]	; (8012ab8 <__sfp+0x84>)
 8012a3e:	681e      	ldr	r6, [r3, #0]
 8012a40:	69b3      	ldr	r3, [r6, #24]
 8012a42:	b913      	cbnz	r3, 8012a4a <__sfp+0x16>
 8012a44:	4630      	mov	r0, r6
 8012a46:	f7ff ffbd 	bl	80129c4 <__sinit>
 8012a4a:	3648      	adds	r6, #72	; 0x48
 8012a4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012a50:	3b01      	subs	r3, #1
 8012a52:	d503      	bpl.n	8012a5c <__sfp+0x28>
 8012a54:	6833      	ldr	r3, [r6, #0]
 8012a56:	b30b      	cbz	r3, 8012a9c <__sfp+0x68>
 8012a58:	6836      	ldr	r6, [r6, #0]
 8012a5a:	e7f7      	b.n	8012a4c <__sfp+0x18>
 8012a5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012a60:	b9d5      	cbnz	r5, 8012a98 <__sfp+0x64>
 8012a62:	4b16      	ldr	r3, [pc, #88]	; (8012abc <__sfp+0x88>)
 8012a64:	60e3      	str	r3, [r4, #12]
 8012a66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012a6a:	6665      	str	r5, [r4, #100]	; 0x64
 8012a6c:	f000 f859 	bl	8012b22 <__retarget_lock_init_recursive>
 8012a70:	f7ff ff96 	bl	80129a0 <__sfp_lock_release>
 8012a74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012a78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012a7c:	6025      	str	r5, [r4, #0]
 8012a7e:	61a5      	str	r5, [r4, #24]
 8012a80:	2208      	movs	r2, #8
 8012a82:	4629      	mov	r1, r5
 8012a84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012a88:	f7fb fafe 	bl	800e088 <memset>
 8012a8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012a90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012a94:	4620      	mov	r0, r4
 8012a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a98:	3468      	adds	r4, #104	; 0x68
 8012a9a:	e7d9      	b.n	8012a50 <__sfp+0x1c>
 8012a9c:	2104      	movs	r1, #4
 8012a9e:	4638      	mov	r0, r7
 8012aa0:	f7ff ff62 	bl	8012968 <__sfmoreglue>
 8012aa4:	4604      	mov	r4, r0
 8012aa6:	6030      	str	r0, [r6, #0]
 8012aa8:	2800      	cmp	r0, #0
 8012aaa:	d1d5      	bne.n	8012a58 <__sfp+0x24>
 8012aac:	f7ff ff78 	bl	80129a0 <__sfp_lock_release>
 8012ab0:	230c      	movs	r3, #12
 8012ab2:	603b      	str	r3, [r7, #0]
 8012ab4:	e7ee      	b.n	8012a94 <__sfp+0x60>
 8012ab6:	bf00      	nop
 8012ab8:	080135b0 	.word	0x080135b0
 8012abc:	ffff0001 	.word	0xffff0001

08012ac0 <fiprintf>:
 8012ac0:	b40e      	push	{r1, r2, r3}
 8012ac2:	b503      	push	{r0, r1, lr}
 8012ac4:	4601      	mov	r1, r0
 8012ac6:	ab03      	add	r3, sp, #12
 8012ac8:	4805      	ldr	r0, [pc, #20]	; (8012ae0 <fiprintf+0x20>)
 8012aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ace:	6800      	ldr	r0, [r0, #0]
 8012ad0:	9301      	str	r3, [sp, #4]
 8012ad2:	f000 f89f 	bl	8012c14 <_vfiprintf_r>
 8012ad6:	b002      	add	sp, #8
 8012ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012adc:	b003      	add	sp, #12
 8012ade:	4770      	bx	lr
 8012ae0:	20000060 	.word	0x20000060

08012ae4 <_fwalk_reent>:
 8012ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ae8:	4606      	mov	r6, r0
 8012aea:	4688      	mov	r8, r1
 8012aec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012af0:	2700      	movs	r7, #0
 8012af2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012af6:	f1b9 0901 	subs.w	r9, r9, #1
 8012afa:	d505      	bpl.n	8012b08 <_fwalk_reent+0x24>
 8012afc:	6824      	ldr	r4, [r4, #0]
 8012afe:	2c00      	cmp	r4, #0
 8012b00:	d1f7      	bne.n	8012af2 <_fwalk_reent+0xe>
 8012b02:	4638      	mov	r0, r7
 8012b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b08:	89ab      	ldrh	r3, [r5, #12]
 8012b0a:	2b01      	cmp	r3, #1
 8012b0c:	d907      	bls.n	8012b1e <_fwalk_reent+0x3a>
 8012b0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012b12:	3301      	adds	r3, #1
 8012b14:	d003      	beq.n	8012b1e <_fwalk_reent+0x3a>
 8012b16:	4629      	mov	r1, r5
 8012b18:	4630      	mov	r0, r6
 8012b1a:	47c0      	blx	r8
 8012b1c:	4307      	orrs	r7, r0
 8012b1e:	3568      	adds	r5, #104	; 0x68
 8012b20:	e7e9      	b.n	8012af6 <_fwalk_reent+0x12>

08012b22 <__retarget_lock_init_recursive>:
 8012b22:	4770      	bx	lr

08012b24 <__retarget_lock_acquire_recursive>:
 8012b24:	4770      	bx	lr

08012b26 <__retarget_lock_release_recursive>:
 8012b26:	4770      	bx	lr

08012b28 <memmove>:
 8012b28:	4288      	cmp	r0, r1
 8012b2a:	b510      	push	{r4, lr}
 8012b2c:	eb01 0402 	add.w	r4, r1, r2
 8012b30:	d902      	bls.n	8012b38 <memmove+0x10>
 8012b32:	4284      	cmp	r4, r0
 8012b34:	4623      	mov	r3, r4
 8012b36:	d807      	bhi.n	8012b48 <memmove+0x20>
 8012b38:	1e43      	subs	r3, r0, #1
 8012b3a:	42a1      	cmp	r1, r4
 8012b3c:	d008      	beq.n	8012b50 <memmove+0x28>
 8012b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b46:	e7f8      	b.n	8012b3a <memmove+0x12>
 8012b48:	4402      	add	r2, r0
 8012b4a:	4601      	mov	r1, r0
 8012b4c:	428a      	cmp	r2, r1
 8012b4e:	d100      	bne.n	8012b52 <memmove+0x2a>
 8012b50:	bd10      	pop	{r4, pc}
 8012b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b5a:	e7f7      	b.n	8012b4c <memmove+0x24>

08012b5c <__malloc_lock>:
 8012b5c:	4801      	ldr	r0, [pc, #4]	; (8012b64 <__malloc_lock+0x8>)
 8012b5e:	f7ff bfe1 	b.w	8012b24 <__retarget_lock_acquire_recursive>
 8012b62:	bf00      	nop
 8012b64:	20000a54 	.word	0x20000a54

08012b68 <__malloc_unlock>:
 8012b68:	4801      	ldr	r0, [pc, #4]	; (8012b70 <__malloc_unlock+0x8>)
 8012b6a:	f7ff bfdc 	b.w	8012b26 <__retarget_lock_release_recursive>
 8012b6e:	bf00      	nop
 8012b70:	20000a54 	.word	0x20000a54

08012b74 <_realloc_r>:
 8012b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b76:	4607      	mov	r7, r0
 8012b78:	4614      	mov	r4, r2
 8012b7a:	460e      	mov	r6, r1
 8012b7c:	b921      	cbnz	r1, 8012b88 <_realloc_r+0x14>
 8012b7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012b82:	4611      	mov	r1, r2
 8012b84:	f7fe bff0 	b.w	8011b68 <_malloc_r>
 8012b88:	b922      	cbnz	r2, 8012b94 <_realloc_r+0x20>
 8012b8a:	f7fe ff9d 	bl	8011ac8 <_free_r>
 8012b8e:	4625      	mov	r5, r4
 8012b90:	4628      	mov	r0, r5
 8012b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b94:	f000 fa9a 	bl	80130cc <_malloc_usable_size_r>
 8012b98:	42a0      	cmp	r0, r4
 8012b9a:	d20f      	bcs.n	8012bbc <_realloc_r+0x48>
 8012b9c:	4621      	mov	r1, r4
 8012b9e:	4638      	mov	r0, r7
 8012ba0:	f7fe ffe2 	bl	8011b68 <_malloc_r>
 8012ba4:	4605      	mov	r5, r0
 8012ba6:	2800      	cmp	r0, #0
 8012ba8:	d0f2      	beq.n	8012b90 <_realloc_r+0x1c>
 8012baa:	4631      	mov	r1, r6
 8012bac:	4622      	mov	r2, r4
 8012bae:	f7fe fab3 	bl	8011118 <memcpy>
 8012bb2:	4631      	mov	r1, r6
 8012bb4:	4638      	mov	r0, r7
 8012bb6:	f7fe ff87 	bl	8011ac8 <_free_r>
 8012bba:	e7e9      	b.n	8012b90 <_realloc_r+0x1c>
 8012bbc:	4635      	mov	r5, r6
 8012bbe:	e7e7      	b.n	8012b90 <_realloc_r+0x1c>

08012bc0 <__sfputc_r>:
 8012bc0:	6893      	ldr	r3, [r2, #8]
 8012bc2:	3b01      	subs	r3, #1
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	b410      	push	{r4}
 8012bc8:	6093      	str	r3, [r2, #8]
 8012bca:	da08      	bge.n	8012bde <__sfputc_r+0x1e>
 8012bcc:	6994      	ldr	r4, [r2, #24]
 8012bce:	42a3      	cmp	r3, r4
 8012bd0:	db01      	blt.n	8012bd6 <__sfputc_r+0x16>
 8012bd2:	290a      	cmp	r1, #10
 8012bd4:	d103      	bne.n	8012bde <__sfputc_r+0x1e>
 8012bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bda:	f000 b94b 	b.w	8012e74 <__swbuf_r>
 8012bde:	6813      	ldr	r3, [r2, #0]
 8012be0:	1c58      	adds	r0, r3, #1
 8012be2:	6010      	str	r0, [r2, #0]
 8012be4:	7019      	strb	r1, [r3, #0]
 8012be6:	4608      	mov	r0, r1
 8012be8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bec:	4770      	bx	lr

08012bee <__sfputs_r>:
 8012bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bf0:	4606      	mov	r6, r0
 8012bf2:	460f      	mov	r7, r1
 8012bf4:	4614      	mov	r4, r2
 8012bf6:	18d5      	adds	r5, r2, r3
 8012bf8:	42ac      	cmp	r4, r5
 8012bfa:	d101      	bne.n	8012c00 <__sfputs_r+0x12>
 8012bfc:	2000      	movs	r0, #0
 8012bfe:	e007      	b.n	8012c10 <__sfputs_r+0x22>
 8012c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c04:	463a      	mov	r2, r7
 8012c06:	4630      	mov	r0, r6
 8012c08:	f7ff ffda 	bl	8012bc0 <__sfputc_r>
 8012c0c:	1c43      	adds	r3, r0, #1
 8012c0e:	d1f3      	bne.n	8012bf8 <__sfputs_r+0xa>
 8012c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012c14 <_vfiprintf_r>:
 8012c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c18:	460d      	mov	r5, r1
 8012c1a:	b09d      	sub	sp, #116	; 0x74
 8012c1c:	4614      	mov	r4, r2
 8012c1e:	4698      	mov	r8, r3
 8012c20:	4606      	mov	r6, r0
 8012c22:	b118      	cbz	r0, 8012c2c <_vfiprintf_r+0x18>
 8012c24:	6983      	ldr	r3, [r0, #24]
 8012c26:	b90b      	cbnz	r3, 8012c2c <_vfiprintf_r+0x18>
 8012c28:	f7ff fecc 	bl	80129c4 <__sinit>
 8012c2c:	4b89      	ldr	r3, [pc, #548]	; (8012e54 <_vfiprintf_r+0x240>)
 8012c2e:	429d      	cmp	r5, r3
 8012c30:	d11b      	bne.n	8012c6a <_vfiprintf_r+0x56>
 8012c32:	6875      	ldr	r5, [r6, #4]
 8012c34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c36:	07d9      	lsls	r1, r3, #31
 8012c38:	d405      	bmi.n	8012c46 <_vfiprintf_r+0x32>
 8012c3a:	89ab      	ldrh	r3, [r5, #12]
 8012c3c:	059a      	lsls	r2, r3, #22
 8012c3e:	d402      	bmi.n	8012c46 <_vfiprintf_r+0x32>
 8012c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c42:	f7ff ff6f 	bl	8012b24 <__retarget_lock_acquire_recursive>
 8012c46:	89ab      	ldrh	r3, [r5, #12]
 8012c48:	071b      	lsls	r3, r3, #28
 8012c4a:	d501      	bpl.n	8012c50 <_vfiprintf_r+0x3c>
 8012c4c:	692b      	ldr	r3, [r5, #16]
 8012c4e:	b9eb      	cbnz	r3, 8012c8c <_vfiprintf_r+0x78>
 8012c50:	4629      	mov	r1, r5
 8012c52:	4630      	mov	r0, r6
 8012c54:	f000 f960 	bl	8012f18 <__swsetup_r>
 8012c58:	b1c0      	cbz	r0, 8012c8c <_vfiprintf_r+0x78>
 8012c5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c5c:	07dc      	lsls	r4, r3, #31
 8012c5e:	d50e      	bpl.n	8012c7e <_vfiprintf_r+0x6a>
 8012c60:	f04f 30ff 	mov.w	r0, #4294967295
 8012c64:	b01d      	add	sp, #116	; 0x74
 8012c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c6a:	4b7b      	ldr	r3, [pc, #492]	; (8012e58 <_vfiprintf_r+0x244>)
 8012c6c:	429d      	cmp	r5, r3
 8012c6e:	d101      	bne.n	8012c74 <_vfiprintf_r+0x60>
 8012c70:	68b5      	ldr	r5, [r6, #8]
 8012c72:	e7df      	b.n	8012c34 <_vfiprintf_r+0x20>
 8012c74:	4b79      	ldr	r3, [pc, #484]	; (8012e5c <_vfiprintf_r+0x248>)
 8012c76:	429d      	cmp	r5, r3
 8012c78:	bf08      	it	eq
 8012c7a:	68f5      	ldreq	r5, [r6, #12]
 8012c7c:	e7da      	b.n	8012c34 <_vfiprintf_r+0x20>
 8012c7e:	89ab      	ldrh	r3, [r5, #12]
 8012c80:	0598      	lsls	r0, r3, #22
 8012c82:	d4ed      	bmi.n	8012c60 <_vfiprintf_r+0x4c>
 8012c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c86:	f7ff ff4e 	bl	8012b26 <__retarget_lock_release_recursive>
 8012c8a:	e7e9      	b.n	8012c60 <_vfiprintf_r+0x4c>
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8012c90:	2320      	movs	r3, #32
 8012c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c9a:	2330      	movs	r3, #48	; 0x30
 8012c9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012e60 <_vfiprintf_r+0x24c>
 8012ca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ca4:	f04f 0901 	mov.w	r9, #1
 8012ca8:	4623      	mov	r3, r4
 8012caa:	469a      	mov	sl, r3
 8012cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cb0:	b10a      	cbz	r2, 8012cb6 <_vfiprintf_r+0xa2>
 8012cb2:	2a25      	cmp	r2, #37	; 0x25
 8012cb4:	d1f9      	bne.n	8012caa <_vfiprintf_r+0x96>
 8012cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8012cba:	d00b      	beq.n	8012cd4 <_vfiprintf_r+0xc0>
 8012cbc:	465b      	mov	r3, fp
 8012cbe:	4622      	mov	r2, r4
 8012cc0:	4629      	mov	r1, r5
 8012cc2:	4630      	mov	r0, r6
 8012cc4:	f7ff ff93 	bl	8012bee <__sfputs_r>
 8012cc8:	3001      	adds	r0, #1
 8012cca:	f000 80aa 	beq.w	8012e22 <_vfiprintf_r+0x20e>
 8012cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cd0:	445a      	add	r2, fp
 8012cd2:	9209      	str	r2, [sp, #36]	; 0x24
 8012cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	f000 80a2 	beq.w	8012e22 <_vfiprintf_r+0x20e>
 8012cde:	2300      	movs	r3, #0
 8012ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ce8:	f10a 0a01 	add.w	sl, sl, #1
 8012cec:	9304      	str	r3, [sp, #16]
 8012cee:	9307      	str	r3, [sp, #28]
 8012cf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012cf4:	931a      	str	r3, [sp, #104]	; 0x68
 8012cf6:	4654      	mov	r4, sl
 8012cf8:	2205      	movs	r2, #5
 8012cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cfe:	4858      	ldr	r0, [pc, #352]	; (8012e60 <_vfiprintf_r+0x24c>)
 8012d00:	f7ed fa76 	bl	80001f0 <memchr>
 8012d04:	9a04      	ldr	r2, [sp, #16]
 8012d06:	b9d8      	cbnz	r0, 8012d40 <_vfiprintf_r+0x12c>
 8012d08:	06d1      	lsls	r1, r2, #27
 8012d0a:	bf44      	itt	mi
 8012d0c:	2320      	movmi	r3, #32
 8012d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d12:	0713      	lsls	r3, r2, #28
 8012d14:	bf44      	itt	mi
 8012d16:	232b      	movmi	r3, #43	; 0x2b
 8012d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8012d20:	2b2a      	cmp	r3, #42	; 0x2a
 8012d22:	d015      	beq.n	8012d50 <_vfiprintf_r+0x13c>
 8012d24:	9a07      	ldr	r2, [sp, #28]
 8012d26:	4654      	mov	r4, sl
 8012d28:	2000      	movs	r0, #0
 8012d2a:	f04f 0c0a 	mov.w	ip, #10
 8012d2e:	4621      	mov	r1, r4
 8012d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d34:	3b30      	subs	r3, #48	; 0x30
 8012d36:	2b09      	cmp	r3, #9
 8012d38:	d94e      	bls.n	8012dd8 <_vfiprintf_r+0x1c4>
 8012d3a:	b1b0      	cbz	r0, 8012d6a <_vfiprintf_r+0x156>
 8012d3c:	9207      	str	r2, [sp, #28]
 8012d3e:	e014      	b.n	8012d6a <_vfiprintf_r+0x156>
 8012d40:	eba0 0308 	sub.w	r3, r0, r8
 8012d44:	fa09 f303 	lsl.w	r3, r9, r3
 8012d48:	4313      	orrs	r3, r2
 8012d4a:	9304      	str	r3, [sp, #16]
 8012d4c:	46a2      	mov	sl, r4
 8012d4e:	e7d2      	b.n	8012cf6 <_vfiprintf_r+0xe2>
 8012d50:	9b03      	ldr	r3, [sp, #12]
 8012d52:	1d19      	adds	r1, r3, #4
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	9103      	str	r1, [sp, #12]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	bfbb      	ittet	lt
 8012d5c:	425b      	neglt	r3, r3
 8012d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8012d62:	9307      	strge	r3, [sp, #28]
 8012d64:	9307      	strlt	r3, [sp, #28]
 8012d66:	bfb8      	it	lt
 8012d68:	9204      	strlt	r2, [sp, #16]
 8012d6a:	7823      	ldrb	r3, [r4, #0]
 8012d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8012d6e:	d10c      	bne.n	8012d8a <_vfiprintf_r+0x176>
 8012d70:	7863      	ldrb	r3, [r4, #1]
 8012d72:	2b2a      	cmp	r3, #42	; 0x2a
 8012d74:	d135      	bne.n	8012de2 <_vfiprintf_r+0x1ce>
 8012d76:	9b03      	ldr	r3, [sp, #12]
 8012d78:	1d1a      	adds	r2, r3, #4
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	9203      	str	r2, [sp, #12]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	bfb8      	it	lt
 8012d82:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d86:	3402      	adds	r4, #2
 8012d88:	9305      	str	r3, [sp, #20]
 8012d8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012e70 <_vfiprintf_r+0x25c>
 8012d8e:	7821      	ldrb	r1, [r4, #0]
 8012d90:	2203      	movs	r2, #3
 8012d92:	4650      	mov	r0, sl
 8012d94:	f7ed fa2c 	bl	80001f0 <memchr>
 8012d98:	b140      	cbz	r0, 8012dac <_vfiprintf_r+0x198>
 8012d9a:	2340      	movs	r3, #64	; 0x40
 8012d9c:	eba0 000a 	sub.w	r0, r0, sl
 8012da0:	fa03 f000 	lsl.w	r0, r3, r0
 8012da4:	9b04      	ldr	r3, [sp, #16]
 8012da6:	4303      	orrs	r3, r0
 8012da8:	3401      	adds	r4, #1
 8012daa:	9304      	str	r3, [sp, #16]
 8012dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012db0:	482c      	ldr	r0, [pc, #176]	; (8012e64 <_vfiprintf_r+0x250>)
 8012db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012db6:	2206      	movs	r2, #6
 8012db8:	f7ed fa1a 	bl	80001f0 <memchr>
 8012dbc:	2800      	cmp	r0, #0
 8012dbe:	d03f      	beq.n	8012e40 <_vfiprintf_r+0x22c>
 8012dc0:	4b29      	ldr	r3, [pc, #164]	; (8012e68 <_vfiprintf_r+0x254>)
 8012dc2:	bb1b      	cbnz	r3, 8012e0c <_vfiprintf_r+0x1f8>
 8012dc4:	9b03      	ldr	r3, [sp, #12]
 8012dc6:	3307      	adds	r3, #7
 8012dc8:	f023 0307 	bic.w	r3, r3, #7
 8012dcc:	3308      	adds	r3, #8
 8012dce:	9303      	str	r3, [sp, #12]
 8012dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dd2:	443b      	add	r3, r7
 8012dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8012dd6:	e767      	b.n	8012ca8 <_vfiprintf_r+0x94>
 8012dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ddc:	460c      	mov	r4, r1
 8012dde:	2001      	movs	r0, #1
 8012de0:	e7a5      	b.n	8012d2e <_vfiprintf_r+0x11a>
 8012de2:	2300      	movs	r3, #0
 8012de4:	3401      	adds	r4, #1
 8012de6:	9305      	str	r3, [sp, #20]
 8012de8:	4619      	mov	r1, r3
 8012dea:	f04f 0c0a 	mov.w	ip, #10
 8012dee:	4620      	mov	r0, r4
 8012df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012df4:	3a30      	subs	r2, #48	; 0x30
 8012df6:	2a09      	cmp	r2, #9
 8012df8:	d903      	bls.n	8012e02 <_vfiprintf_r+0x1ee>
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d0c5      	beq.n	8012d8a <_vfiprintf_r+0x176>
 8012dfe:	9105      	str	r1, [sp, #20]
 8012e00:	e7c3      	b.n	8012d8a <_vfiprintf_r+0x176>
 8012e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e06:	4604      	mov	r4, r0
 8012e08:	2301      	movs	r3, #1
 8012e0a:	e7f0      	b.n	8012dee <_vfiprintf_r+0x1da>
 8012e0c:	ab03      	add	r3, sp, #12
 8012e0e:	9300      	str	r3, [sp, #0]
 8012e10:	462a      	mov	r2, r5
 8012e12:	4b16      	ldr	r3, [pc, #88]	; (8012e6c <_vfiprintf_r+0x258>)
 8012e14:	a904      	add	r1, sp, #16
 8012e16:	4630      	mov	r0, r6
 8012e18:	f7fb f9de 	bl	800e1d8 <_printf_float>
 8012e1c:	4607      	mov	r7, r0
 8012e1e:	1c78      	adds	r0, r7, #1
 8012e20:	d1d6      	bne.n	8012dd0 <_vfiprintf_r+0x1bc>
 8012e22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e24:	07d9      	lsls	r1, r3, #31
 8012e26:	d405      	bmi.n	8012e34 <_vfiprintf_r+0x220>
 8012e28:	89ab      	ldrh	r3, [r5, #12]
 8012e2a:	059a      	lsls	r2, r3, #22
 8012e2c:	d402      	bmi.n	8012e34 <_vfiprintf_r+0x220>
 8012e2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e30:	f7ff fe79 	bl	8012b26 <__retarget_lock_release_recursive>
 8012e34:	89ab      	ldrh	r3, [r5, #12]
 8012e36:	065b      	lsls	r3, r3, #25
 8012e38:	f53f af12 	bmi.w	8012c60 <_vfiprintf_r+0x4c>
 8012e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e3e:	e711      	b.n	8012c64 <_vfiprintf_r+0x50>
 8012e40:	ab03      	add	r3, sp, #12
 8012e42:	9300      	str	r3, [sp, #0]
 8012e44:	462a      	mov	r2, r5
 8012e46:	4b09      	ldr	r3, [pc, #36]	; (8012e6c <_vfiprintf_r+0x258>)
 8012e48:	a904      	add	r1, sp, #16
 8012e4a:	4630      	mov	r0, r6
 8012e4c:	f7fb fc68 	bl	800e720 <_printf_i>
 8012e50:	e7e4      	b.n	8012e1c <_vfiprintf_r+0x208>
 8012e52:	bf00      	nop
 8012e54:	08013a3c 	.word	0x08013a3c
 8012e58:	08013a5c 	.word	0x08013a5c
 8012e5c:	08013a1c 	.word	0x08013a1c
 8012e60:	080139b4 	.word	0x080139b4
 8012e64:	080139be 	.word	0x080139be
 8012e68:	0800e1d9 	.word	0x0800e1d9
 8012e6c:	08012bef 	.word	0x08012bef
 8012e70:	080139ba 	.word	0x080139ba

08012e74 <__swbuf_r>:
 8012e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e76:	460e      	mov	r6, r1
 8012e78:	4614      	mov	r4, r2
 8012e7a:	4605      	mov	r5, r0
 8012e7c:	b118      	cbz	r0, 8012e86 <__swbuf_r+0x12>
 8012e7e:	6983      	ldr	r3, [r0, #24]
 8012e80:	b90b      	cbnz	r3, 8012e86 <__swbuf_r+0x12>
 8012e82:	f7ff fd9f 	bl	80129c4 <__sinit>
 8012e86:	4b21      	ldr	r3, [pc, #132]	; (8012f0c <__swbuf_r+0x98>)
 8012e88:	429c      	cmp	r4, r3
 8012e8a:	d12b      	bne.n	8012ee4 <__swbuf_r+0x70>
 8012e8c:	686c      	ldr	r4, [r5, #4]
 8012e8e:	69a3      	ldr	r3, [r4, #24]
 8012e90:	60a3      	str	r3, [r4, #8]
 8012e92:	89a3      	ldrh	r3, [r4, #12]
 8012e94:	071a      	lsls	r2, r3, #28
 8012e96:	d52f      	bpl.n	8012ef8 <__swbuf_r+0x84>
 8012e98:	6923      	ldr	r3, [r4, #16]
 8012e9a:	b36b      	cbz	r3, 8012ef8 <__swbuf_r+0x84>
 8012e9c:	6923      	ldr	r3, [r4, #16]
 8012e9e:	6820      	ldr	r0, [r4, #0]
 8012ea0:	1ac0      	subs	r0, r0, r3
 8012ea2:	6963      	ldr	r3, [r4, #20]
 8012ea4:	b2f6      	uxtb	r6, r6
 8012ea6:	4283      	cmp	r3, r0
 8012ea8:	4637      	mov	r7, r6
 8012eaa:	dc04      	bgt.n	8012eb6 <__swbuf_r+0x42>
 8012eac:	4621      	mov	r1, r4
 8012eae:	4628      	mov	r0, r5
 8012eb0:	f7ff fcf4 	bl	801289c <_fflush_r>
 8012eb4:	bb30      	cbnz	r0, 8012f04 <__swbuf_r+0x90>
 8012eb6:	68a3      	ldr	r3, [r4, #8]
 8012eb8:	3b01      	subs	r3, #1
 8012eba:	60a3      	str	r3, [r4, #8]
 8012ebc:	6823      	ldr	r3, [r4, #0]
 8012ebe:	1c5a      	adds	r2, r3, #1
 8012ec0:	6022      	str	r2, [r4, #0]
 8012ec2:	701e      	strb	r6, [r3, #0]
 8012ec4:	6963      	ldr	r3, [r4, #20]
 8012ec6:	3001      	adds	r0, #1
 8012ec8:	4283      	cmp	r3, r0
 8012eca:	d004      	beq.n	8012ed6 <__swbuf_r+0x62>
 8012ecc:	89a3      	ldrh	r3, [r4, #12]
 8012ece:	07db      	lsls	r3, r3, #31
 8012ed0:	d506      	bpl.n	8012ee0 <__swbuf_r+0x6c>
 8012ed2:	2e0a      	cmp	r6, #10
 8012ed4:	d104      	bne.n	8012ee0 <__swbuf_r+0x6c>
 8012ed6:	4621      	mov	r1, r4
 8012ed8:	4628      	mov	r0, r5
 8012eda:	f7ff fcdf 	bl	801289c <_fflush_r>
 8012ede:	b988      	cbnz	r0, 8012f04 <__swbuf_r+0x90>
 8012ee0:	4638      	mov	r0, r7
 8012ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ee4:	4b0a      	ldr	r3, [pc, #40]	; (8012f10 <__swbuf_r+0x9c>)
 8012ee6:	429c      	cmp	r4, r3
 8012ee8:	d101      	bne.n	8012eee <__swbuf_r+0x7a>
 8012eea:	68ac      	ldr	r4, [r5, #8]
 8012eec:	e7cf      	b.n	8012e8e <__swbuf_r+0x1a>
 8012eee:	4b09      	ldr	r3, [pc, #36]	; (8012f14 <__swbuf_r+0xa0>)
 8012ef0:	429c      	cmp	r4, r3
 8012ef2:	bf08      	it	eq
 8012ef4:	68ec      	ldreq	r4, [r5, #12]
 8012ef6:	e7ca      	b.n	8012e8e <__swbuf_r+0x1a>
 8012ef8:	4621      	mov	r1, r4
 8012efa:	4628      	mov	r0, r5
 8012efc:	f000 f80c 	bl	8012f18 <__swsetup_r>
 8012f00:	2800      	cmp	r0, #0
 8012f02:	d0cb      	beq.n	8012e9c <__swbuf_r+0x28>
 8012f04:	f04f 37ff 	mov.w	r7, #4294967295
 8012f08:	e7ea      	b.n	8012ee0 <__swbuf_r+0x6c>
 8012f0a:	bf00      	nop
 8012f0c:	08013a3c 	.word	0x08013a3c
 8012f10:	08013a5c 	.word	0x08013a5c
 8012f14:	08013a1c 	.word	0x08013a1c

08012f18 <__swsetup_r>:
 8012f18:	4b32      	ldr	r3, [pc, #200]	; (8012fe4 <__swsetup_r+0xcc>)
 8012f1a:	b570      	push	{r4, r5, r6, lr}
 8012f1c:	681d      	ldr	r5, [r3, #0]
 8012f1e:	4606      	mov	r6, r0
 8012f20:	460c      	mov	r4, r1
 8012f22:	b125      	cbz	r5, 8012f2e <__swsetup_r+0x16>
 8012f24:	69ab      	ldr	r3, [r5, #24]
 8012f26:	b913      	cbnz	r3, 8012f2e <__swsetup_r+0x16>
 8012f28:	4628      	mov	r0, r5
 8012f2a:	f7ff fd4b 	bl	80129c4 <__sinit>
 8012f2e:	4b2e      	ldr	r3, [pc, #184]	; (8012fe8 <__swsetup_r+0xd0>)
 8012f30:	429c      	cmp	r4, r3
 8012f32:	d10f      	bne.n	8012f54 <__swsetup_r+0x3c>
 8012f34:	686c      	ldr	r4, [r5, #4]
 8012f36:	89a3      	ldrh	r3, [r4, #12]
 8012f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012f3c:	0719      	lsls	r1, r3, #28
 8012f3e:	d42c      	bmi.n	8012f9a <__swsetup_r+0x82>
 8012f40:	06dd      	lsls	r5, r3, #27
 8012f42:	d411      	bmi.n	8012f68 <__swsetup_r+0x50>
 8012f44:	2309      	movs	r3, #9
 8012f46:	6033      	str	r3, [r6, #0]
 8012f48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012f4c:	81a3      	strh	r3, [r4, #12]
 8012f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8012f52:	e03e      	b.n	8012fd2 <__swsetup_r+0xba>
 8012f54:	4b25      	ldr	r3, [pc, #148]	; (8012fec <__swsetup_r+0xd4>)
 8012f56:	429c      	cmp	r4, r3
 8012f58:	d101      	bne.n	8012f5e <__swsetup_r+0x46>
 8012f5a:	68ac      	ldr	r4, [r5, #8]
 8012f5c:	e7eb      	b.n	8012f36 <__swsetup_r+0x1e>
 8012f5e:	4b24      	ldr	r3, [pc, #144]	; (8012ff0 <__swsetup_r+0xd8>)
 8012f60:	429c      	cmp	r4, r3
 8012f62:	bf08      	it	eq
 8012f64:	68ec      	ldreq	r4, [r5, #12]
 8012f66:	e7e6      	b.n	8012f36 <__swsetup_r+0x1e>
 8012f68:	0758      	lsls	r0, r3, #29
 8012f6a:	d512      	bpl.n	8012f92 <__swsetup_r+0x7a>
 8012f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f6e:	b141      	cbz	r1, 8012f82 <__swsetup_r+0x6a>
 8012f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f74:	4299      	cmp	r1, r3
 8012f76:	d002      	beq.n	8012f7e <__swsetup_r+0x66>
 8012f78:	4630      	mov	r0, r6
 8012f7a:	f7fe fda5 	bl	8011ac8 <_free_r>
 8012f7e:	2300      	movs	r3, #0
 8012f80:	6363      	str	r3, [r4, #52]	; 0x34
 8012f82:	89a3      	ldrh	r3, [r4, #12]
 8012f84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012f88:	81a3      	strh	r3, [r4, #12]
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	6063      	str	r3, [r4, #4]
 8012f8e:	6923      	ldr	r3, [r4, #16]
 8012f90:	6023      	str	r3, [r4, #0]
 8012f92:	89a3      	ldrh	r3, [r4, #12]
 8012f94:	f043 0308 	orr.w	r3, r3, #8
 8012f98:	81a3      	strh	r3, [r4, #12]
 8012f9a:	6923      	ldr	r3, [r4, #16]
 8012f9c:	b94b      	cbnz	r3, 8012fb2 <__swsetup_r+0x9a>
 8012f9e:	89a3      	ldrh	r3, [r4, #12]
 8012fa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012fa8:	d003      	beq.n	8012fb2 <__swsetup_r+0x9a>
 8012faa:	4621      	mov	r1, r4
 8012fac:	4630      	mov	r0, r6
 8012fae:	f000 f84d 	bl	801304c <__smakebuf_r>
 8012fb2:	89a0      	ldrh	r0, [r4, #12]
 8012fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012fb8:	f010 0301 	ands.w	r3, r0, #1
 8012fbc:	d00a      	beq.n	8012fd4 <__swsetup_r+0xbc>
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	60a3      	str	r3, [r4, #8]
 8012fc2:	6963      	ldr	r3, [r4, #20]
 8012fc4:	425b      	negs	r3, r3
 8012fc6:	61a3      	str	r3, [r4, #24]
 8012fc8:	6923      	ldr	r3, [r4, #16]
 8012fca:	b943      	cbnz	r3, 8012fde <__swsetup_r+0xc6>
 8012fcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012fd0:	d1ba      	bne.n	8012f48 <__swsetup_r+0x30>
 8012fd2:	bd70      	pop	{r4, r5, r6, pc}
 8012fd4:	0781      	lsls	r1, r0, #30
 8012fd6:	bf58      	it	pl
 8012fd8:	6963      	ldrpl	r3, [r4, #20]
 8012fda:	60a3      	str	r3, [r4, #8]
 8012fdc:	e7f4      	b.n	8012fc8 <__swsetup_r+0xb0>
 8012fde:	2000      	movs	r0, #0
 8012fe0:	e7f7      	b.n	8012fd2 <__swsetup_r+0xba>
 8012fe2:	bf00      	nop
 8012fe4:	20000060 	.word	0x20000060
 8012fe8:	08013a3c 	.word	0x08013a3c
 8012fec:	08013a5c 	.word	0x08013a5c
 8012ff0:	08013a1c 	.word	0x08013a1c

08012ff4 <abort>:
 8012ff4:	b508      	push	{r3, lr}
 8012ff6:	2006      	movs	r0, #6
 8012ff8:	f000 f898 	bl	801312c <raise>
 8012ffc:	2001      	movs	r0, #1
 8012ffe:	f7f2 faf7 	bl	80055f0 <_exit>

08013002 <__swhatbuf_r>:
 8013002:	b570      	push	{r4, r5, r6, lr}
 8013004:	460e      	mov	r6, r1
 8013006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801300a:	2900      	cmp	r1, #0
 801300c:	b096      	sub	sp, #88	; 0x58
 801300e:	4614      	mov	r4, r2
 8013010:	461d      	mov	r5, r3
 8013012:	da07      	bge.n	8013024 <__swhatbuf_r+0x22>
 8013014:	2300      	movs	r3, #0
 8013016:	602b      	str	r3, [r5, #0]
 8013018:	89b3      	ldrh	r3, [r6, #12]
 801301a:	061a      	lsls	r2, r3, #24
 801301c:	d410      	bmi.n	8013040 <__swhatbuf_r+0x3e>
 801301e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013022:	e00e      	b.n	8013042 <__swhatbuf_r+0x40>
 8013024:	466a      	mov	r2, sp
 8013026:	f000 f89d 	bl	8013164 <_fstat_r>
 801302a:	2800      	cmp	r0, #0
 801302c:	dbf2      	blt.n	8013014 <__swhatbuf_r+0x12>
 801302e:	9a01      	ldr	r2, [sp, #4]
 8013030:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013034:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013038:	425a      	negs	r2, r3
 801303a:	415a      	adcs	r2, r3
 801303c:	602a      	str	r2, [r5, #0]
 801303e:	e7ee      	b.n	801301e <__swhatbuf_r+0x1c>
 8013040:	2340      	movs	r3, #64	; 0x40
 8013042:	2000      	movs	r0, #0
 8013044:	6023      	str	r3, [r4, #0]
 8013046:	b016      	add	sp, #88	; 0x58
 8013048:	bd70      	pop	{r4, r5, r6, pc}
	...

0801304c <__smakebuf_r>:
 801304c:	898b      	ldrh	r3, [r1, #12]
 801304e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013050:	079d      	lsls	r5, r3, #30
 8013052:	4606      	mov	r6, r0
 8013054:	460c      	mov	r4, r1
 8013056:	d507      	bpl.n	8013068 <__smakebuf_r+0x1c>
 8013058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801305c:	6023      	str	r3, [r4, #0]
 801305e:	6123      	str	r3, [r4, #16]
 8013060:	2301      	movs	r3, #1
 8013062:	6163      	str	r3, [r4, #20]
 8013064:	b002      	add	sp, #8
 8013066:	bd70      	pop	{r4, r5, r6, pc}
 8013068:	ab01      	add	r3, sp, #4
 801306a:	466a      	mov	r2, sp
 801306c:	f7ff ffc9 	bl	8013002 <__swhatbuf_r>
 8013070:	9900      	ldr	r1, [sp, #0]
 8013072:	4605      	mov	r5, r0
 8013074:	4630      	mov	r0, r6
 8013076:	f7fe fd77 	bl	8011b68 <_malloc_r>
 801307a:	b948      	cbnz	r0, 8013090 <__smakebuf_r+0x44>
 801307c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013080:	059a      	lsls	r2, r3, #22
 8013082:	d4ef      	bmi.n	8013064 <__smakebuf_r+0x18>
 8013084:	f023 0303 	bic.w	r3, r3, #3
 8013088:	f043 0302 	orr.w	r3, r3, #2
 801308c:	81a3      	strh	r3, [r4, #12]
 801308e:	e7e3      	b.n	8013058 <__smakebuf_r+0xc>
 8013090:	4b0d      	ldr	r3, [pc, #52]	; (80130c8 <__smakebuf_r+0x7c>)
 8013092:	62b3      	str	r3, [r6, #40]	; 0x28
 8013094:	89a3      	ldrh	r3, [r4, #12]
 8013096:	6020      	str	r0, [r4, #0]
 8013098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801309c:	81a3      	strh	r3, [r4, #12]
 801309e:	9b00      	ldr	r3, [sp, #0]
 80130a0:	6163      	str	r3, [r4, #20]
 80130a2:	9b01      	ldr	r3, [sp, #4]
 80130a4:	6120      	str	r0, [r4, #16]
 80130a6:	b15b      	cbz	r3, 80130c0 <__smakebuf_r+0x74>
 80130a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130ac:	4630      	mov	r0, r6
 80130ae:	f000 f86b 	bl	8013188 <_isatty_r>
 80130b2:	b128      	cbz	r0, 80130c0 <__smakebuf_r+0x74>
 80130b4:	89a3      	ldrh	r3, [r4, #12]
 80130b6:	f023 0303 	bic.w	r3, r3, #3
 80130ba:	f043 0301 	orr.w	r3, r3, #1
 80130be:	81a3      	strh	r3, [r4, #12]
 80130c0:	89a0      	ldrh	r0, [r4, #12]
 80130c2:	4305      	orrs	r5, r0
 80130c4:	81a5      	strh	r5, [r4, #12]
 80130c6:	e7cd      	b.n	8013064 <__smakebuf_r+0x18>
 80130c8:	0801295d 	.word	0x0801295d

080130cc <_malloc_usable_size_r>:
 80130cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130d0:	1f18      	subs	r0, r3, #4
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	bfbc      	itt	lt
 80130d6:	580b      	ldrlt	r3, [r1, r0]
 80130d8:	18c0      	addlt	r0, r0, r3
 80130da:	4770      	bx	lr

080130dc <_raise_r>:
 80130dc:	291f      	cmp	r1, #31
 80130de:	b538      	push	{r3, r4, r5, lr}
 80130e0:	4604      	mov	r4, r0
 80130e2:	460d      	mov	r5, r1
 80130e4:	d904      	bls.n	80130f0 <_raise_r+0x14>
 80130e6:	2316      	movs	r3, #22
 80130e8:	6003      	str	r3, [r0, #0]
 80130ea:	f04f 30ff 	mov.w	r0, #4294967295
 80130ee:	bd38      	pop	{r3, r4, r5, pc}
 80130f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80130f2:	b112      	cbz	r2, 80130fa <_raise_r+0x1e>
 80130f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80130f8:	b94b      	cbnz	r3, 801310e <_raise_r+0x32>
 80130fa:	4620      	mov	r0, r4
 80130fc:	f000 f830 	bl	8013160 <_getpid_r>
 8013100:	462a      	mov	r2, r5
 8013102:	4601      	mov	r1, r0
 8013104:	4620      	mov	r0, r4
 8013106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801310a:	f000 b817 	b.w	801313c <_kill_r>
 801310e:	2b01      	cmp	r3, #1
 8013110:	d00a      	beq.n	8013128 <_raise_r+0x4c>
 8013112:	1c59      	adds	r1, r3, #1
 8013114:	d103      	bne.n	801311e <_raise_r+0x42>
 8013116:	2316      	movs	r3, #22
 8013118:	6003      	str	r3, [r0, #0]
 801311a:	2001      	movs	r0, #1
 801311c:	e7e7      	b.n	80130ee <_raise_r+0x12>
 801311e:	2400      	movs	r4, #0
 8013120:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013124:	4628      	mov	r0, r5
 8013126:	4798      	blx	r3
 8013128:	2000      	movs	r0, #0
 801312a:	e7e0      	b.n	80130ee <_raise_r+0x12>

0801312c <raise>:
 801312c:	4b02      	ldr	r3, [pc, #8]	; (8013138 <raise+0xc>)
 801312e:	4601      	mov	r1, r0
 8013130:	6818      	ldr	r0, [r3, #0]
 8013132:	f7ff bfd3 	b.w	80130dc <_raise_r>
 8013136:	bf00      	nop
 8013138:	20000060 	.word	0x20000060

0801313c <_kill_r>:
 801313c:	b538      	push	{r3, r4, r5, lr}
 801313e:	4d07      	ldr	r5, [pc, #28]	; (801315c <_kill_r+0x20>)
 8013140:	2300      	movs	r3, #0
 8013142:	4604      	mov	r4, r0
 8013144:	4608      	mov	r0, r1
 8013146:	4611      	mov	r1, r2
 8013148:	602b      	str	r3, [r5, #0]
 801314a:	f7f2 fa41 	bl	80055d0 <_kill>
 801314e:	1c43      	adds	r3, r0, #1
 8013150:	d102      	bne.n	8013158 <_kill_r+0x1c>
 8013152:	682b      	ldr	r3, [r5, #0]
 8013154:	b103      	cbz	r3, 8013158 <_kill_r+0x1c>
 8013156:	6023      	str	r3, [r4, #0]
 8013158:	bd38      	pop	{r3, r4, r5, pc}
 801315a:	bf00      	nop
 801315c:	20000a4c 	.word	0x20000a4c

08013160 <_getpid_r>:
 8013160:	f7f2 ba2e 	b.w	80055c0 <_getpid>

08013164 <_fstat_r>:
 8013164:	b538      	push	{r3, r4, r5, lr}
 8013166:	4d07      	ldr	r5, [pc, #28]	; (8013184 <_fstat_r+0x20>)
 8013168:	2300      	movs	r3, #0
 801316a:	4604      	mov	r4, r0
 801316c:	4608      	mov	r0, r1
 801316e:	4611      	mov	r1, r2
 8013170:	602b      	str	r3, [r5, #0]
 8013172:	f7f2 fa8c 	bl	800568e <_fstat>
 8013176:	1c43      	adds	r3, r0, #1
 8013178:	d102      	bne.n	8013180 <_fstat_r+0x1c>
 801317a:	682b      	ldr	r3, [r5, #0]
 801317c:	b103      	cbz	r3, 8013180 <_fstat_r+0x1c>
 801317e:	6023      	str	r3, [r4, #0]
 8013180:	bd38      	pop	{r3, r4, r5, pc}
 8013182:	bf00      	nop
 8013184:	20000a4c 	.word	0x20000a4c

08013188 <_isatty_r>:
 8013188:	b538      	push	{r3, r4, r5, lr}
 801318a:	4d06      	ldr	r5, [pc, #24]	; (80131a4 <_isatty_r+0x1c>)
 801318c:	2300      	movs	r3, #0
 801318e:	4604      	mov	r4, r0
 8013190:	4608      	mov	r0, r1
 8013192:	602b      	str	r3, [r5, #0]
 8013194:	f7f2 fa8b 	bl	80056ae <_isatty>
 8013198:	1c43      	adds	r3, r0, #1
 801319a:	d102      	bne.n	80131a2 <_isatty_r+0x1a>
 801319c:	682b      	ldr	r3, [r5, #0]
 801319e:	b103      	cbz	r3, 80131a2 <_isatty_r+0x1a>
 80131a0:	6023      	str	r3, [r4, #0]
 80131a2:	bd38      	pop	{r3, r4, r5, pc}
 80131a4:	20000a4c 	.word	0x20000a4c

080131a8 <_init>:
 80131a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131aa:	bf00      	nop
 80131ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131ae:	bc08      	pop	{r3}
 80131b0:	469e      	mov	lr, r3
 80131b2:	4770      	bx	lr

080131b4 <_fini>:
 80131b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131b6:	bf00      	nop
 80131b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131ba:	bc08      	pop	{r3}
 80131bc:	469e      	mov	lr, r3
 80131be:	4770      	bx	lr
