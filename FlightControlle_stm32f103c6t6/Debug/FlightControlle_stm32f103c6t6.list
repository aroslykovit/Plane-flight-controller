
FlightControlle_stm32f103c6t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e0c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005f1c  08005f1c  00015f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fb8  08005fb8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005fb8  08005fb8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fb8  08005fb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fbc  08005fbc  00015fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000070  08006030  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08006030  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f976  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000244d  00000000  00000000  0002fa0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00031e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00032e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183d6  00000000  00000000  00033d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdc1  00000000  00000000  0004c15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ae00  00000000  00000000  0005bf1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6d1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004840  00000000  00000000  000e6d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f04 	.word	0x08005f04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005f04 	.word	0x08005f04

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ce:	2afd      	cmp	r2, #253	; 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	; 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	; 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	; 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__gesf2>:
 800061c:	f04f 3cff 	mov.w	ip, #4294967295
 8000620:	e006      	b.n	8000630 <__cmpsf2+0x4>
 8000622:	bf00      	nop

08000624 <__lesf2>:
 8000624:	f04f 0c01 	mov.w	ip, #1
 8000628:	e002      	b.n	8000630 <__cmpsf2+0x4>
 800062a:	bf00      	nop

0800062c <__cmpsf2>:
 800062c:	f04f 0c01 	mov.w	ip, #1
 8000630:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000634:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000638:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800063c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000640:	bf18      	it	ne
 8000642:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000646:	d011      	beq.n	800066c <__cmpsf2+0x40>
 8000648:	b001      	add	sp, #4
 800064a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064e:	bf18      	it	ne
 8000650:	ea90 0f01 	teqne	r0, r1
 8000654:	bf58      	it	pl
 8000656:	ebb2 0003 	subspl.w	r0, r2, r3
 800065a:	bf88      	it	hi
 800065c:	17c8      	asrhi	r0, r1, #31
 800065e:	bf38      	it	cc
 8000660:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000664:	bf18      	it	ne
 8000666:	f040 0001 	orrne.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	d102      	bne.n	8000678 <__cmpsf2+0x4c>
 8000672:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000676:	d105      	bne.n	8000684 <__cmpsf2+0x58>
 8000678:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800067c:	d1e4      	bne.n	8000648 <__cmpsf2+0x1c>
 800067e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000682:	d0e1      	beq.n	8000648 <__cmpsf2+0x1c>
 8000684:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <__aeabi_cfrcmple>:
 800068c:	4684      	mov	ip, r0
 800068e:	4608      	mov	r0, r1
 8000690:	4661      	mov	r1, ip
 8000692:	e7ff      	b.n	8000694 <__aeabi_cfcmpeq>

08000694 <__aeabi_cfcmpeq>:
 8000694:	b50f      	push	{r0, r1, r2, r3, lr}
 8000696:	f7ff ffc9 	bl	800062c <__cmpsf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a4 <__aeabi_fcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cfcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cfcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cfcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffd2 	bl	800068c <__aeabi_cfrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc8 	bl	800068c <__aeabi_cfrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_f2uiz>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	d20e      	bcs.n	800072a <__aeabi_f2uiz+0x22>
 800070c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000710:	d30b      	bcc.n	800072a <__aeabi_f2uiz+0x22>
 8000712:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000716:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800071a:	d409      	bmi.n	8000730 <__aeabi_f2uiz+0x28>
 800071c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000724:	fa23 f002 	lsr.w	r0, r3, r2
 8000728:	4770      	bx	lr
 800072a:	f04f 0000 	mov.w	r0, #0
 800072e:	4770      	bx	lr
 8000730:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000734:	d101      	bne.n	800073a <__aeabi_f2uiz+0x32>
 8000736:	0242      	lsls	r2, r0, #9
 8000738:	d102      	bne.n	8000740 <__aeabi_f2uiz+0x38>
 800073a:	f04f 30ff 	mov.w	r0, #4294967295
 800073e:	4770      	bx	lr
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <sbus_to_pwm>:
 */

#include "SBUS.h"

uint16_t sbus_to_pwm(uint16_t sbus_value)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	80fb      	strh	r3, [r7, #6]
    float pwm;
    pwm = (float)SBUS_TARGET_MIN + (float)(sbus_value - SBUS_RANGE_MIN) * SBUS_SCALE_FACTOR;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fdbb 	bl	80002d4 <__aeabi_i2f>
 800075e:	4603      	mov	r3, r0
 8000760:	4915      	ldr	r1, [pc, #84]	; (80007b8 <sbus_to_pwm+0x70>)
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fe0a 	bl	800037c <__aeabi_fmul>
 8000768:	4603      	mov	r3, r0
 800076a:	4914      	ldr	r1, [pc, #80]	; (80007bc <sbus_to_pwm+0x74>)
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff feb9 	bl	80004e4 <__aeabi_fdiv>
 8000772:	4603      	mov	r3, r0
 8000774:	4910      	ldr	r1, [pc, #64]	; (80007b8 <sbus_to_pwm+0x70>)
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fcf8 	bl	800016c <__addsf3>
 800077c:	4603      	mov	r3, r0
 800077e:	60fb      	str	r3, [r7, #12]
    //                1000                                   300              1000/1400
    if (pwm > 2000) pwm = 2000;
 8000780:	490f      	ldr	r1, [pc, #60]	; (80007c0 <sbus_to_pwm+0x78>)
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ffb6 	bl	80006f4 <__aeabi_fcmpgt>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <sbus_to_pwm+0x4a>
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <sbus_to_pwm+0x78>)
 8000790:	60fb      	str	r3, [r7, #12]
    if (pwm < 1000) pwm = 1000;
 8000792:	4909      	ldr	r1, [pc, #36]	; (80007b8 <sbus_to_pwm+0x70>)
 8000794:	68f8      	ldr	r0, [r7, #12]
 8000796:	f7ff ff8f 	bl	80006b8 <__aeabi_fcmplt>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <sbus_to_pwm+0x5c>
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <sbus_to_pwm+0x70>)
 80007a2:	60fb      	str	r3, [r7, #12]
    return (uint16_t)pwm;
 80007a4:	68f8      	ldr	r0, [r7, #12]
 80007a6:	f7ff ffaf 	bl	8000708 <__aeabi_f2uiz>
 80007aa:	4603      	mov	r3, r0
 80007ac:	b29b      	uxth	r3, r3
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	447a0000 	.word	0x447a0000
 80007bc:	44af0000 	.word	0x44af0000
 80007c0:	44fa0000 	.word	0x44fa0000

080007c4 <CalculateSBUS>:

uint16_t CalculateSBUS(uint8_t buf[25], uint16_t CH[18]){
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
if (buf[0] == 0x0F) {
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b0f      	cmp	r3, #15
 80007d4:	f040 818d 	bne.w	8000af2 <CalculateSBUS+0x32e>
		CH[0] = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3301      	adds	r3, #1
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b21a      	sxth	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3302      	adds	r3, #2
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	021b      	lsls	r3, r3, #8
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	801a      	strh	r2, [r3, #0]
		CH[1] = (buf[2] >> 3 | (buf[3] << 5)) & 0x07FF;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3302      	adds	r3, #2
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	08db      	lsrs	r3, r3, #3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	b21a      	sxth	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3303      	adds	r3, #3
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	015b      	lsls	r3, r3, #5
 800080e:	b21b      	sxth	r3, r3
 8000810:	4313      	orrs	r3, r2
 8000812:	b21b      	sxth	r3, r3
 8000814:	b29a      	uxth	r2, r3
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	3302      	adds	r3, #2
 800081a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800081e:	b292      	uxth	r2, r2
 8000820:	801a      	strh	r2, [r3, #0]
		CH[2] = (buf[3] >> 6 | (buf[4] << 2) | buf[5] << 10) & 0x07FF;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3303      	adds	r3, #3
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	099b      	lsrs	r3, r3, #6
 800082a:	b2db      	uxtb	r3, r3
 800082c:	b21a      	sxth	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3304      	adds	r3, #4
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21a      	sxth	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3305      	adds	r3, #5
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	029b      	lsls	r3, r3, #10
 8000844:	b21b      	sxth	r3, r3
 8000846:	4313      	orrs	r3, r2
 8000848:	b21b      	sxth	r3, r3
 800084a:	b29a      	uxth	r2, r3
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	3304      	adds	r3, #4
 8000850:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000854:	b292      	uxth	r2, r2
 8000856:	801a      	strh	r2, [r3, #0]
		CH[3] = (buf[5] >> 1 | (buf[6] << 7)) & 0x07FF;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3305      	adds	r3, #5
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	085b      	lsrs	r3, r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	b21a      	sxth	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3306      	adds	r3, #6
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	01db      	lsls	r3, r3, #7
 800086c:	b21b      	sxth	r3, r3
 800086e:	4313      	orrs	r3, r2
 8000870:	b21b      	sxth	r3, r3
 8000872:	b29a      	uxth	r2, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	3306      	adds	r3, #6
 8000878:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800087c:	b292      	uxth	r2, r2
 800087e:	801a      	strh	r2, [r3, #0]
		CH[4] = (buf[6] >> 4 | (buf[7] << 4)) & 0x07FF;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3306      	adds	r3, #6
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	091b      	lsrs	r3, r3, #4
 8000888:	b2db      	uxtb	r3, r3
 800088a:	b21a      	sxth	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3307      	adds	r3, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	011b      	lsls	r3, r3, #4
 8000894:	b21b      	sxth	r3, r3
 8000896:	4313      	orrs	r3, r2
 8000898:	b21b      	sxth	r3, r3
 800089a:	b29a      	uxth	r2, r3
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	3308      	adds	r3, #8
 80008a0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80008a4:	b292      	uxth	r2, r2
 80008a6:	801a      	strh	r2, [r3, #0]
		CH[5] = (buf[7] >> 7 | (buf[8] << 1) | buf[9] << 9) & 0x07FF;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3307      	adds	r3, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	09db      	lsrs	r3, r3, #7
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	b21a      	sxth	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3308      	adds	r3, #8
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b21a      	sxth	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3309      	adds	r3, #9
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	025b      	lsls	r3, r3, #9
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	330a      	adds	r3, #10
 80008d6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80008da:	b292      	uxth	r2, r2
 80008dc:	801a      	strh	r2, [r3, #0]
		CH[6] = (buf[9] >> 2 | (buf[10] << 6)) & 0x07FF;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3309      	adds	r3, #9
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	089b      	lsrs	r3, r3, #2
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	330a      	adds	r3, #10
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	019b      	lsls	r3, r3, #6
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	330c      	adds	r3, #12
 80008fe:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000902:	b292      	uxth	r2, r2
 8000904:	801a      	strh	r2, [r3, #0]
		CH[7] = (buf[10] >> 5 | (buf[11] << 3)) & 0x07FF;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	330a      	adds	r3, #10
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	095b      	lsrs	r3, r3, #5
 800090e:	b2db      	uxtb	r3, r3
 8000910:	b21a      	sxth	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	330b      	adds	r3, #11
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	b21b      	sxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b21b      	sxth	r3, r3
 8000920:	b29a      	uxth	r2, r3
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	330e      	adds	r3, #14
 8000926:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800092a:	b292      	uxth	r2, r2
 800092c:	801a      	strh	r2, [r3, #0]
		CH[8] = (buf[12] << 0 | (buf[13] << 8)) & 0x07FF;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	330c      	adds	r3, #12
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b21a      	sxth	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	330d      	adds	r3, #13
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	021b      	lsls	r3, r3, #8
 800093e:	b21b      	sxth	r3, r3
 8000940:	4313      	orrs	r3, r2
 8000942:	b21b      	sxth	r3, r3
 8000944:	b29a      	uxth	r2, r3
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	3310      	adds	r3, #16
 800094a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800094e:	b292      	uxth	r2, r2
 8000950:	801a      	strh	r2, [r3, #0]
		CH[9] = (buf[13] >> 3 | (buf[14] << 5)) & 0x07FF;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	330d      	adds	r3, #13
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	08db      	lsrs	r3, r3, #3
 800095a:	b2db      	uxtb	r3, r3
 800095c:	b21a      	sxth	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	330e      	adds	r3, #14
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	015b      	lsls	r3, r3, #5
 8000966:	b21b      	sxth	r3, r3
 8000968:	4313      	orrs	r3, r2
 800096a:	b21b      	sxth	r3, r3
 800096c:	b29a      	uxth	r2, r3
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	3312      	adds	r3, #18
 8000972:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000976:	b292      	uxth	r2, r2
 8000978:	801a      	strh	r2, [r3, #0]
		CH[10] = (buf[14] >> 6 | (buf[15] << 2) | buf[16] << 10) & 0x07FF;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	330e      	adds	r3, #14
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	099b      	lsrs	r3, r3, #6
 8000982:	b2db      	uxtb	r3, r3
 8000984:	b21a      	sxth	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	330f      	adds	r3, #15
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	b21b      	sxth	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b21a      	sxth	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3310      	adds	r3, #16
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	029b      	lsls	r3, r3, #10
 800099c:	b21b      	sxth	r3, r3
 800099e:	4313      	orrs	r3, r2
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	3314      	adds	r3, #20
 80009a8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80009ac:	b292      	uxth	r2, r2
 80009ae:	801a      	strh	r2, [r3, #0]
		CH[11] = (buf[16] >> 1 | (buf[17] << 7)) & 0x07FF;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3310      	adds	r3, #16
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	085b      	lsrs	r3, r3, #1
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	b21a      	sxth	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3311      	adds	r3, #17
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	01db      	lsls	r3, r3, #7
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	3316      	adds	r3, #22
 80009d0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80009d4:	b292      	uxth	r2, r2
 80009d6:	801a      	strh	r2, [r3, #0]
		CH[12] = (buf[17] >> 4 | (buf[18] << 4)) & 0x07FF;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3311      	adds	r3, #17
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	091b      	lsrs	r3, r3, #4
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	b21a      	sxth	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3312      	adds	r3, #18
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	011b      	lsls	r3, r3, #4
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b21b      	sxth	r3, r3
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	3318      	adds	r3, #24
 80009f8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80009fc:	b292      	uxth	r2, r2
 80009fe:	801a      	strh	r2, [r3, #0]
		CH[13] = (buf[18] >> 7 | (buf[19] << 1) | buf[20] << 9) & 0x07FF;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3312      	adds	r3, #18
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	09db      	lsrs	r3, r3, #7
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	b21a      	sxth	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3313      	adds	r3, #19
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b21a      	sxth	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3314      	adds	r3, #20
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	025b      	lsls	r3, r3, #9
 8000a22:	b21b      	sxth	r3, r3
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	331a      	adds	r3, #26
 8000a2e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000a32:	b292      	uxth	r2, r2
 8000a34:	801a      	strh	r2, [r3, #0]
		CH[14] = (buf[20] >> 2 | (buf[21] << 6)) & 0x07FF;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3314      	adds	r3, #20
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	089b      	lsrs	r3, r3, #2
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3315      	adds	r3, #21
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	019b      	lsls	r3, r3, #6
 8000a4a:	b21b      	sxth	r3, r3
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	b21b      	sxth	r3, r3
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	331c      	adds	r3, #28
 8000a56:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000a5a:	b292      	uxth	r2, r2
 8000a5c:	801a      	strh	r2, [r3, #0]
		CH[15] = (buf[21] >> 5 | (buf[22] << 3)) & 0x07FF;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3315      	adds	r3, #21
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	095b      	lsrs	r3, r3, #5
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3316      	adds	r3, #22
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	b21b      	sxth	r3, r3
 8000a74:	4313      	orrs	r3, r2
 8000a76:	b21b      	sxth	r3, r3
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	331e      	adds	r3, #30
 8000a7e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000a82:	b292      	uxth	r2, r2
 8000a84:	801a      	strh	r2, [r3, #0]

		if (buf[23] & (1 << 0)) {
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3317      	adds	r3, #23
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d004      	beq.n	8000a9e <CalculateSBUS+0x2da>
			CH[16] = 1;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	3320      	adds	r3, #32
 8000a98:	2201      	movs	r2, #1
 8000a9a:	801a      	strh	r2, [r3, #0]
 8000a9c:	e003      	b.n	8000aa6 <CalculateSBUS+0x2e2>
		} else {
			CH[16] = 0;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	3320      	adds	r3, #32
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	801a      	strh	r2, [r3, #0]
		}

		if (buf[23] & (1 << 1)) {
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3317      	adds	r3, #23
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	f003 0302 	and.w	r3, r3, #2
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <CalculateSBUS+0x2fa>
			CH[17] = 1;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	3322      	adds	r3, #34	; 0x22
 8000ab8:	2201      	movs	r2, #1
 8000aba:	801a      	strh	r2, [r3, #0]
 8000abc:	e003      	b.n	8000ac6 <CalculateSBUS+0x302>
		} else {
			CH[17] = 0;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	3322      	adds	r3, #34	; 0x22
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	801a      	strh	r2, [r3, #0]
		}

		// Failsafe
		uint16_t failsafe_status = SBUS_SIGNAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	81fb      	strh	r3, [r7, #14]
		if (buf[23] & (1 << 2)) {
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3317      	adds	r3, #23
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <CalculateSBUS+0x318>
			failsafe_status = SBUS_SIGNAL_LOST;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	81fb      	strh	r3, [r7, #14]
		}

		if (buf[23] & (1 << 3)) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3317      	adds	r3, #23
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <CalculateSBUS+0x32a>
			failsafe_status = SBUS_SIGNAL_FAILSAFE;
 8000aea:	2303      	movs	r3, #3
 8000aec:	81fb      	strh	r3, [r7, #14]
		}

		//	SBUS_footer=buf[24];

		return(failsafe_status);
 8000aee:	89fb      	ldrh	r3, [r7, #14]
 8000af0:	e000      	b.n	8000af4 <CalculateSBUS+0x330>

	}
else{
	return(0);
 8000af2:	2300      	movs	r3, #0
}
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
	...

08000b00 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

	if (huart == &huart2) {
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a24      	ldr	r2, [pc, #144]	; (8000b9c <HAL_UART_RxCpltCallback+0x9c>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d119      	bne.n	8000b44 <HAL_UART_RxCpltCallback+0x44>
		failsafe_status = CalculateSBUS(buf, CH);
 8000b10:	4923      	ldr	r1, [pc, #140]	; (8000ba0 <HAL_UART_RxCpltCallback+0xa0>)
 8000b12:	4824      	ldr	r0, [pc, #144]	; (8000ba4 <HAL_UART_RxCpltCallback+0xa4>)
 8000b14:	f7ff fe56 	bl	80007c4 <CalculateSBUS>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <HAL_UART_RxCpltCallback+0xa8>)
 8000b1e:	801a      	strh	r2, [r3, #0]
		sbus_packet_time = HAL_GetTick();
 8000b20:	f001 fc18 	bl	8002354 <HAL_GetTick>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4a21      	ldr	r2, [pc, #132]	; (8000bac <HAL_UART_RxCpltCallback+0xac>)
 8000b28:	6013      	str	r3, [r2, #0]

		/*Decide manual/autopilot*/
		if (CH[4] > 1300) {
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <HAL_UART_RxCpltCallback+0xa0>)
 8000b2c:	891b      	ldrh	r3, [r3, #8]
 8000b2e:	f240 5214 	movw	r2, #1300	; 0x514
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d903      	bls.n	8000b3e <HAL_UART_RxCpltCallback+0x3e>
			controlMode = 1;
 8000b36:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <HAL_UART_RxCpltCallback+0xb0>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e002      	b.n	8000b44 <HAL_UART_RxCpltCallback+0x44>
		} else {
			controlMode = 0;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_UART_RxCpltCallback+0xb0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
		}
	}
	if (huart == &huart1) {
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d122      	bne.n	8000b92 <HAL_UART_RxCpltCallback+0x92>
		uint8_t ack[32] = {0, };
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	619a      	str	r2, [r3, #24]
		switch(uart_mode){
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_UART_RxCpltCallback+0xb8>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d108      	bne.n	8000b7e <HAL_UART_RxCpltCallback+0x7e>
		case 1:
			HAL_UART_Transmit_DMA(&huart1, nrf_data, 32);
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	4913      	ldr	r1, [pc, #76]	; (8000bbc <HAL_UART_RxCpltCallback+0xbc>)
 8000b70:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8000b72:	f003 ff9b 	bl	8004aac <HAL_UART_Transmit_DMA>
			uart_mode = 0;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_UART_RxCpltCallback+0xb8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
			break;
 8000b7c:	e009      	b.n	8000b92 <HAL_UART_RxCpltCallback+0x92>
		default:
			ack[0] = 4;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	723b      	strb	r3, [r7, #8]
		HAL_UART_Transmit_DMA(&huart1, ack, 32);
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	2220      	movs	r2, #32
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8000b8c:	f003 ff8e 	bl	8004aac <HAL_UART_Transmit_DMA>
		break;
 8000b90:	bf00      	nop
		}

	}

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000314 	.word	0x20000314
 8000ba0:	20000114 	.word	0x20000114
 8000ba4:	20000258 	.word	0x20000258
 8000ba8:	20000138 	.word	0x20000138
 8000bac:	20000090 	.word	0x20000090
 8000bb0:	2000008c 	.word	0x2000008c
 8000bb4:	20000214 	.word	0x20000214
 8000bb8:	200000b8 	.word	0x200000b8
 8000bbc:	20000098 	.word	0x20000098

08000bc0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_UART_TxCpltCallback+0x24>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d104      	bne.n	8000bda <HAL_UART_TxCpltCallback+0x1a>
		HAL_UART_Receive_DMA(&huart1, &RecieveStruct, sizeof(RecieveStruct));
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	4905      	ldr	r1, [pc, #20]	; (8000be8 <HAL_UART_TxCpltCallback+0x28>)
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <HAL_UART_TxCpltCallback+0x24>)
 8000bd6:	f003 ffd5 	bl	8004b84 <HAL_UART_Receive_DMA>
	}
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000214 	.word	0x20000214
 8000be8:	2000013c 	.word	0x2000013c
 8000bec:	00000000 	.word	0x00000000

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b094      	sub	sp, #80	; 0x50
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f001 fb55 	bl	80022a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 f9c3 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 fbb7 	bl	8001370 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c02:	f000 fb87 	bl	8001314 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000c06:	f000 fb2f 	bl	8001268 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c0a:	f000 fb57 	bl	80012bc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000c0e:	f000 f9ff 	bl	8001010 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000c12:	f000 fa33 	bl	800107c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c16:	f000 faab 	bl	8001170 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, buf, 25);
 8000c1a:	2219      	movs	r2, #25
 8000c1c:	4998      	ldr	r1, [pc, #608]	; (8000e80 <main+0x290>)
 8000c1e:	4899      	ldr	r0, [pc, #612]	; (8000e84 <main+0x294>)
 8000c20:	f003 ffb0 	bl	8004b84 <HAL_UART_Receive_DMA>

	HAL_UART_Receive_DMA(&huart1, &RecieveStruct, sizeof(RecieveStruct));
 8000c24:	2204      	movs	r2, #4
 8000c26:	4998      	ldr	r1, [pc, #608]	; (8000e88 <main+0x298>)
 8000c28:	4898      	ldr	r0, [pc, #608]	; (8000e8c <main+0x29c>)
 8000c2a:	f003 ffab 	bl	8004b84 <HAL_UART_Receive_DMA>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4897      	ldr	r0, [pc, #604]	; (8000e90 <main+0x2a0>)
 8000c32:	f003 faf3 	bl	800421c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c36:	2104      	movs	r1, #4
 8000c38:	4895      	ldr	r0, [pc, #596]	; (8000e90 <main+0x2a0>)
 8000c3a:	f003 faef 	bl	800421c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c3e:	2108      	movs	r1, #8
 8000c40:	4893      	ldr	r0, [pc, #588]	; (8000e90 <main+0x2a0>)
 8000c42:	f003 faeb 	bl	800421c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000c46:	210c      	movs	r1, #12
 8000c48:	4891      	ldr	r0, [pc, #580]	; (8000e90 <main+0x2a0>)
 8000c4a:	f003 fae7 	bl	800421c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4890      	ldr	r0, [pc, #576]	; (8000e94 <main+0x2a4>)
 8000c52:	f003 fae3 	bl	800421c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c56:	2104      	movs	r1, #4
 8000c58:	488e      	ldr	r0, [pc, #568]	; (8000e94 <main+0x2a4>)
 8000c5a:	f003 fadf 	bl	800421c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000c5e:	2108      	movs	r1, #8
 8000c60:	488c      	ldr	r0, [pc, #560]	; (8000e94 <main+0x2a4>)
 8000c62:	f003 fadb 	bl	800421c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000c66:	210c      	movs	r1, #12
 8000c68:	488a      	ldr	r0, [pc, #552]	; (8000e94 <main+0x2a4>)
 8000c6a:	f003 fad7 	bl	800421c <HAL_TIM_PWM_Start>

	DWT_Init(); // счётчик для микросекундных пауз
 8000c6e:	f000 fbe5 	bl	800143c <DWT_Init>

	const uint64_t pipe1 = 0xE8E8F0F0E2LL;
 8000c72:	a381      	add	r3, pc, #516	; (adr r3, 8000e78 <main+0x288>)
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t res = isChipConnected(); // проверяет подключён ли модуль к SPI
 8000c7c:	f000 fdd4 	bl	8001828 <isChipConnected>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	char str[64] = { 0, };
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	223c      	movs	r2, #60	; 0x3c
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f004 fcee 	bl	8005674 <memset>
	snprintf(str, 64, "Connected: %s\n", 1 ? "OK" : "NOT OK");
 8000c98:	1d38      	adds	r0, r7, #4
 8000c9a:	4b7f      	ldr	r3, [pc, #508]	; (8000e98 <main+0x2a8>)
 8000c9c:	4a7f      	ldr	r2, [pc, #508]	; (8000e9c <main+0x2ac>)
 8000c9e:	2140      	movs	r1, #64	; 0x40
 8000ca0:	f004 fcf0 	bl	8005684 <sniprintf>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) str, strlen(str));
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fa52 	bl	8000150 <strlen>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4875      	ldr	r0, [pc, #468]	; (8000e8c <main+0x29c>)
 8000cb6:	f003 feb4 	bl	8004a22 <HAL_UART_Transmit_IT>

	res = NRF_Init(); // инициализация
 8000cba:	f000 fd3f 	bl	800173c <NRF_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	snprintf(str, 64, "Init: %s\n", res > 0 && res < 255 ? "OK" : "NOT OK");
 8000cc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d005      	beq.n	8000cd8 <main+0xe8>
 8000ccc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000cd0:	2bff      	cmp	r3, #255	; 0xff
 8000cd2:	d001      	beq.n	8000cd8 <main+0xe8>
 8000cd4:	4b70      	ldr	r3, [pc, #448]	; (8000e98 <main+0x2a8>)
 8000cd6:	e000      	b.n	8000cda <main+0xea>
 8000cd8:	4b71      	ldr	r3, [pc, #452]	; (8000ea0 <main+0x2b0>)
 8000cda:	1d38      	adds	r0, r7, #4
 8000cdc:	4a71      	ldr	r2, [pc, #452]	; (8000ea4 <main+0x2b4>)
 8000cde:	2140      	movs	r1, #64	; 0x40
 8000ce0:	f004 fcd0 	bl	8005684 <sniprintf>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) str, strlen(str));
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fa32 	bl	8000150 <strlen>
 8000cec:	4603      	mov	r3, r0
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4865      	ldr	r0, [pc, #404]	; (8000e8c <main+0x29c>)
 8000cf6:	f003 fe94 	bl	8004a22 <HAL_UART_Transmit_IT>

	/****************** NRF Settings ****************************/
	enableAckPayload();
 8000cfa:	f000 fefb 	bl	8001af4 <enableAckPayload>
	//setAutoAck(false);
	//setPayloadSize(6);
	setChannel(19);
 8000cfe:	2013      	movs	r0, #19
 8000d00:	f000 fd0e 	bl	8001720 <setChannel>
	openReadingPipe(1, pipe1);
 8000d04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 fe5b 	bl	80019c4 <openReadingPipe>
	startListening();
 8000d0e:	f000 fda1 	bl	8001854 <startListening>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if(HAL_GetTick() - sbus_packet_time > 500 || failsafe_status == SBUS_SIGNAL_LOST || failsafe_status == SBUS_SIGNAL_FAILSAFE){
 8000d12:	f001 fb1f 	bl	8002354 <HAL_GetTick>
 8000d16:	4602      	mov	r2, r0
 8000d18:	4b63      	ldr	r3, [pc, #396]	; (8000ea8 <main+0x2b8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d22:	d807      	bhi.n	8000d34 <main+0x144>
 8000d24:	4b61      	ldr	r3, [pc, #388]	; (8000eac <main+0x2bc>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d003      	beq.n	8000d34 <main+0x144>
 8000d2c:	4b5f      	ldr	r3, [pc, #380]	; (8000eac <main+0x2bc>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d104      	bne.n	8000d3e <main+0x14e>
			HAL_UART_Receive_DMA(&huart2, buf, 25);
 8000d34:	2219      	movs	r2, #25
 8000d36:	4952      	ldr	r1, [pc, #328]	; (8000e80 <main+0x290>)
 8000d38:	4852      	ldr	r0, [pc, #328]	; (8000e84 <main+0x294>)
 8000d3a:	f003 ff23 	bl	8004b84 <HAL_UART_Receive_DMA>
		 * TIM2->CCR4 CH4
		 * TIM2->CCR3 CH5
		 * TIM3->CCR4 CH6
		 * TIM3->CCR3 CH7
		 */
		if(failsafe_status == SBUS_SIGNAL_OK)
 8000d3e:	4b5b      	ldr	r3, [pc, #364]	; (8000eac <main+0x2bc>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 80db 	bne.w	8000efe <main+0x30e>
		if (!controlMode) {
 8000d48:	4b59      	ldr	r3, [pc, #356]	; (8000eb0 <main+0x2c0>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	f083 0301 	eor.w	r3, r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d030      	beq.n	8000db8 <main+0x1c8>
			/*Manual control*/
			TIM2->CCR1 = sbus_to_pwm(CH[0]); //Aile
 8000d56:	4b57      	ldr	r3, [pc, #348]	; (8000eb4 <main+0x2c4>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fcf4 	bl	8000748 <sbus_to_pwm>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = sbus_to_pwm(CH[1]); //Alev
 8000d6a:	4b52      	ldr	r3, [pc, #328]	; (8000eb4 <main+0x2c4>)
 8000d6c:	885b      	ldrh	r3, [r3, #2]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fcea 	bl	8000748 <sbus_to_pwm>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d7c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR1 = sbus_to_pwm(CH[2]); //Throttle
 8000d7e:	4b4d      	ldr	r3, [pc, #308]	; (8000eb4 <main+0x2c4>)
 8000d80:	889b      	ldrh	r3, [r3, #4]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fce0 	bl	8000748 <sbus_to_pwm>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b4a      	ldr	r3, [pc, #296]	; (8000eb8 <main+0x2c8>)
 8000d8e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = sbus_to_pwm(CH[3]); //Ruder
 8000d90:	4b48      	ldr	r3, [pc, #288]	; (8000eb4 <main+0x2c4>)
 8000d92:	88db      	ldrh	r3, [r3, #6]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fcd7 	bl	8000748 <sbus_to_pwm>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b46      	ldr	r3, [pc, #280]	; (8000eb8 <main+0x2c8>)
 8000da0:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = sbus_to_pwm(CH[0]); //Aile
 8000da2:	4b44      	ldr	r3, [pc, #272]	; (8000eb4 <main+0x2c4>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fcce 	bl	8000748 <sbus_to_pwm>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000db6:	e0a2      	b.n	8000efe <main+0x30e>
		} else {
			/*Autopilot*/
			if(CH[6] < 500){
 8000db8:	4b3e      	ldr	r3, [pc, #248]	; (8000eb4 <main+0x2c4>)
 8000dba:	899b      	ldrh	r3, [r3, #12]
 8000dbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000dc0:	d226      	bcs.n	8000e10 <main+0x220>
				TIM2->CCR1 = RecieveStruct.Roll_PWM;
 8000dc2:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <main+0x298>)
 8000dc4:	885a      	ldrh	r2, [r3, #2]
 8000dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = sbus_to_pwm(CH[1]);
 8000dcc:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <main+0x2c4>)
 8000dce:	885b      	ldrh	r3, [r3, #2]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fcb9 	bl	8000748 <sbus_to_pwm>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dde:	639a      	str	r2, [r3, #56]	; 0x38
				TIM3->CCR1 = sbus_to_pwm(CH[2]);
 8000de0:	4b34      	ldr	r3, [pc, #208]	; (8000eb4 <main+0x2c4>)
 8000de2:	889b      	ldrh	r3, [r3, #4]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fcaf 	bl	8000748 <sbus_to_pwm>
 8000dea:	4603      	mov	r3, r0
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <main+0x2c8>)
 8000df0:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->CCR2 = sbus_to_pwm(CH[3]);
 8000df2:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <main+0x2c4>)
 8000df4:	88db      	ldrh	r3, [r3, #6]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fca6 	bl	8000748 <sbus_to_pwm>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <main+0x2c8>)
 8000e02:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3 = RecieveStruct.Roll_PWM; //Aile
 8000e04:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <main+0x298>)
 8000e06:	885a      	ldrh	r2, [r3, #2]
 8000e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e0e:	e076      	b.n	8000efe <main+0x30e>
			}
			else{
				if(CH[6] < 1200){
 8000e10:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <main+0x2c4>)
 8000e12:	899b      	ldrh	r3, [r3, #12]
 8000e14:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000e18:	d250      	bcs.n	8000ebc <main+0x2cc>
					TIM2->CCR1 = sbus_to_pwm(CH[0]);
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <main+0x2c4>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fc92 	bl	8000748 <sbus_to_pwm>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e2c:	635a      	str	r2, [r3, #52]	; 0x34
					TIM2->CCR2 = RecieveStruct.Pitch_PWM;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <main+0x298>)
 8000e30:	881a      	ldrh	r2, [r3, #0]
 8000e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e36:	639a      	str	r2, [r3, #56]	; 0x38
					TIM3->CCR1 = sbus_to_pwm(CH[2]);
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <main+0x2c4>)
 8000e3a:	889b      	ldrh	r3, [r3, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fc83 	bl	8000748 <sbus_to_pwm>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <main+0x2c8>)
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34
					TIM3->CCR2 = sbus_to_pwm(CH[3]);
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <main+0x2c4>)
 8000e4c:	88db      	ldrh	r3, [r3, #6]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fc7a 	bl	8000748 <sbus_to_pwm>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <main+0x2c8>)
 8000e5a:	639a      	str	r2, [r3, #56]	; 0x38
					TIM2->CCR3 = sbus_to_pwm(CH[0]); //Aile
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <main+0x2c4>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fc71 	bl	8000748 <sbus_to_pwm>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e70:	e045      	b.n	8000efe <main+0x30e>
 8000e72:	bf00      	nop
 8000e74:	f3af 8000 	nop.w
 8000e78:	e8f0f0e2 	.word	0xe8f0f0e2
 8000e7c:	000000e8 	.word	0x000000e8
 8000e80:	20000258 	.word	0x20000258
 8000e84:	20000314 	.word	0x20000314
 8000e88:	2000013c 	.word	0x2000013c
 8000e8c:	20000214 	.word	0x20000214
 8000e90:	200002cc 	.word	0x200002cc
 8000e94:	20000144 	.word	0x20000144
 8000e98:	08005f1c 	.word	0x08005f1c
 8000e9c:	08005f20 	.word	0x08005f20
 8000ea0:	08005f30 	.word	0x08005f30
 8000ea4:	08005f38 	.word	0x08005f38
 8000ea8:	20000090 	.word	0x20000090
 8000eac:	20000138 	.word	0x20000138
 8000eb0:	2000008c 	.word	0x2000008c
 8000eb4:	20000114 	.word	0x20000114
 8000eb8:	40000400 	.word	0x40000400
				}
				else{
					TIM2->CCR1 = RecieveStruct.Roll_PWM;
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <main+0x378>)
 8000ebe:	885a      	ldrh	r2, [r3, #2]
 8000ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec4:	635a      	str	r2, [r3, #52]	; 0x34
					TIM2->CCR2 = RecieveStruct.Pitch_PWM;
 8000ec6:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <main+0x378>)
 8000ec8:	881a      	ldrh	r2, [r3, #0]
 8000eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38
					TIM3->CCR1 = sbus_to_pwm(CH[2]);
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <main+0x37c>)
 8000ed2:	889b      	ldrh	r3, [r3, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fc37 	bl	8000748 <sbus_to_pwm>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <main+0x380>)
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
					TIM3->CCR2 = sbus_to_pwm(CH[3]);
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <main+0x37c>)
 8000ee4:	88db      	ldrh	r3, [r3, #6]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fc2e 	bl	8000748 <sbus_to_pwm>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <main+0x380>)
 8000ef2:	639a      	str	r2, [r3, #56]	; 0x38
					TIM2->CCR3 = RecieveStruct.Roll_PWM; //Aile
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <main+0x378>)
 8000ef6:	885a      	ldrh	r2, [r3, #2]
 8000ef8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000efc:	63da      	str	r2, [r3, #60]	; 0x3c
		}


		/************************************ Receive NRF ********************************************/

		uint8_t pipe_num = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	70fb      	strb	r3, [r7, #3]

		if (available(&pipe_num)) // проверяем пришло ли что-то
 8000f02:	1cfb      	adds	r3, r7, #3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fd27 	bl	8001958 <available>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f43f af00 	beq.w	8000d12 <main+0x122>
				{

			writeAckPayload(pipe_num, &remsg, sizeof(remsg)); // отправляем полезную нагрузку вместе с подтверждением
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	2201      	movs	r2, #1
 8000f16:	4917      	ldr	r1, [pc, #92]	; (8000f74 <main+0x384>)
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fe0b 	bl	8001b34 <writeAckPayload>

			if (pipe_num == 1) {
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	f47f aef6 	bne.w	8000d12 <main+0x122>

				count_payload = getDynamicPayloadSize(); // смотрим сколько байт прилетело
 8000f26:	f000 fce7 	bl	80018f8 <getDynamicPayloadSize>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <main+0x388>)
 8000f30:	701a      	strb	r2, [r3, #0]

				read(&nrf_data, count_payload); // Читаем данные в массив nrf_data и указываем сколько байт читать
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <main+0x388>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4810      	ldr	r0, [pc, #64]	; (8000f7c <main+0x38c>)
 8000f3a:	f000 fd2f 	bl	800199c <read>

				if(nrf_data[0] == 2 || nrf_data[0] == 3 || nrf_data[0] == 5){
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <main+0x38c>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d008      	beq.n	8000f58 <main+0x368>
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <main+0x38c>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	d004      	beq.n	8000f58 <main+0x368>
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <main+0x38c>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	f47f aedd 	bne.w	8000d12 <main+0x122>
					remsg = 7;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <main+0x384>)
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	701a      	strb	r2, [r3, #0]
					uart_mode = 1;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <main+0x390>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
	while (1) {
 8000f64:	e6d5      	b.n	8000d12 <main+0x122>
 8000f66:	bf00      	nop
 8000f68:	2000013c 	.word	0x2000013c
 8000f6c:	20000114 	.word	0x20000114
 8000f70:	40000400 	.word	0x40000400
 8000f74:	20000094 	.word	0x20000094
 8000f78:	20000140 	.word	0x20000140
 8000f7c:	20000098 	.word	0x20000098
 8000f80:	200000b8 	.word	0x200000b8

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b090      	sub	sp, #64	; 0x40
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	2228      	movs	r2, #40	; 0x28
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 fb6e 	bl	8005674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fc2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 ff4f 	bl	8002e70 <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fd8:	f000 fa2a 	bl	8001430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fdc:	230f      	movs	r3, #15
 8000fde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 f9ba 	bl	8003370 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001002:	f000 fa15 	bl	8001430 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3740      	adds	r7, #64	; 0x40
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_SPI1_Init+0x64>)
 8001016:	4a18      	ldr	r2, [pc, #96]	; (8001078 <MX_SPI1_Init+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <MX_SPI1_Init+0x64>)
 800101c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001020:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_SPI1_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_SPI1_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_SPI1_Init+0x64>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_SPI1_Init+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_SPI1_Init+0x64>)
 800103c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001040:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_SPI1_Init+0x64>)
 8001044:	2218      	movs	r2, #24
 8001046:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <MX_SPI1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_SPI1_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <MX_SPI1_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_SPI1_Init+0x64>)
 800105c:	220a      	movs	r2, #10
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_SPI1_Init+0x64>)
 8001062:	f002 fb1f 	bl	80036a4 <HAL_SPI_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800106c:	f000 f9e0 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000274 	.word	0x20000274
 8001078:	40013000 	.word	0x40013000

0800107c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109e:	4b33      	ldr	r3, [pc, #204]	; (800116c <MX_TIM2_Init+0xf0>)
 80010a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <MX_TIM2_Init+0xf0>)
 80010a8:	2247      	movs	r2, #71	; 0x47
 80010aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <MX_TIM2_Init+0xf0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <MX_TIM2_Init+0xf0>)
 80010b4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80010b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <MX_TIM2_Init+0xf0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c0:	4b2a      	ldr	r3, [pc, #168]	; (800116c <MX_TIM2_Init+0xf0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010c6:	4829      	ldr	r0, [pc, #164]	; (800116c <MX_TIM2_Init+0xf0>)
 80010c8:	f003 f858 	bl	800417c <HAL_TIM_PWM_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80010d2:	f000 f9ad 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	4619      	mov	r1, r3
 80010e4:	4821      	ldr	r0, [pc, #132]	; (800116c <MX_TIM2_Init+0xf0>)
 80010e6:	f003 fbf7 	bl	80048d8 <HAL_TIMEx_MasterConfigSynchronization>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80010f0:	f000 f99e 	bl	8001430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f4:	2360      	movs	r3, #96	; 0x60
 80010f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80010f8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80010fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	4619      	mov	r1, r3
 800110c:	4817      	ldr	r0, [pc, #92]	; (800116c <MX_TIM2_Init+0xf0>)
 800110e:	f003 f921 	bl	8004354 <HAL_TIM_PWM_ConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001118:	f000 f98a 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2204      	movs	r2, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4812      	ldr	r0, [pc, #72]	; (800116c <MX_TIM2_Init+0xf0>)
 8001124:	f003 f916 	bl	8004354 <HAL_TIM_PWM_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800112e:	f000 f97f 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2208      	movs	r2, #8
 8001136:	4619      	mov	r1, r3
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <MX_TIM2_Init+0xf0>)
 800113a:	f003 f90b 	bl	8004354 <HAL_TIM_PWM_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8001144:	f000 f974 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	220c      	movs	r2, #12
 800114c:	4619      	mov	r1, r3
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <MX_TIM2_Init+0xf0>)
 8001150:	f003 f900 	bl	8004354 <HAL_TIM_PWM_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 800115a:	f000 f969 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800115e:	4803      	ldr	r0, [pc, #12]	; (800116c <MX_TIM2_Init+0xf0>)
 8001160:	f000 fe4a 	bl	8001df8 <HAL_TIM_MspPostInit>

}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200002cc 	.word	0x200002cc

08001170 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	615a      	str	r2, [r3, #20]
 8001190:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001192:	4b33      	ldr	r3, [pc, #204]	; (8001260 <MX_TIM3_Init+0xf0>)
 8001194:	4a33      	ldr	r2, [pc, #204]	; (8001264 <MX_TIM3_Init+0xf4>)
 8001196:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001198:	4b31      	ldr	r3, [pc, #196]	; (8001260 <MX_TIM3_Init+0xf0>)
 800119a:	2247      	movs	r2, #71	; 0x47
 800119c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b30      	ldr	r3, [pc, #192]	; (8001260 <MX_TIM3_Init+0xf0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80011a4:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <MX_TIM3_Init+0xf0>)
 80011a6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80011aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <MX_TIM3_Init+0xf0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_TIM3_Init+0xf0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011b8:	4829      	ldr	r0, [pc, #164]	; (8001260 <MX_TIM3_Init+0xf0>)
 80011ba:	f002 ffdf 	bl	800417c <HAL_TIM_PWM_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011c4:	f000 f934 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	4619      	mov	r1, r3
 80011d6:	4822      	ldr	r0, [pc, #136]	; (8001260 <MX_TIM3_Init+0xf0>)
 80011d8:	f003 fb7e 	bl	80048d8 <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011e2:	f000 f925 	bl	8001430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e6:	2360      	movs	r3, #96	; 0x60
 80011e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80011ea:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80011ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	4619      	mov	r1, r3
 80011fe:	4818      	ldr	r0, [pc, #96]	; (8001260 <MX_TIM3_Init+0xf0>)
 8001200:	f003 f8a8 	bl	8004354 <HAL_TIM_PWM_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800120a:	f000 f911 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2204      	movs	r2, #4
 8001212:	4619      	mov	r1, r3
 8001214:	4812      	ldr	r0, [pc, #72]	; (8001260 <MX_TIM3_Init+0xf0>)
 8001216:	f003 f89d 	bl	8004354 <HAL_TIM_PWM_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001220:	f000 f906 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2208      	movs	r2, #8
 8001228:	4619      	mov	r1, r3
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <MX_TIM3_Init+0xf0>)
 800122c:	f003 f892 	bl	8004354 <HAL_TIM_PWM_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001236:	f000 f8fb 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	220c      	movs	r2, #12
 800123e:	4619      	mov	r1, r3
 8001240:	4807      	ldr	r0, [pc, #28]	; (8001260 <MX_TIM3_Init+0xf0>)
 8001242:	f003 f887 	bl	8004354 <HAL_TIM_PWM_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800124c:	f000 f8f0 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <MX_TIM3_Init+0xf0>)
 8001252:	f000 fdd1 	bl	8001df8 <HAL_TIM_MspPostInit>

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000144 	.word	0x20000144
 8001264:	40000400 	.word	0x40000400

08001268 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <MX_USART1_UART_Init+0x50>)
 8001270:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_USART1_UART_Init+0x4c>)
 80012a0:	f003 fb72 	bl	8004988 <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012aa:	f000 f8c1 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000214 	.word	0x20000214
 80012b8:	40013800 	.word	0x40013800

080012bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <MX_USART2_UART_Init+0x50>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012c8:	4a11      	ldr	r2, [pc, #68]	; (8001310 <MX_USART2_UART_Init+0x54>)
 80012ca:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012e4:	2204      	movs	r2, #4
 80012e6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012f6:	f003 fb47 	bl	8004988 <HAL_UART_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001300:	f000 f896 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000314 	.word	0x20000314
 800130c:	40004400 	.word	0x40004400
 8001310:	000186a0 	.word	0x000186a0

08001314 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_DMA_Init+0x58>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4a13      	ldr	r2, [pc, #76]	; (800136c <MX_DMA_Init+0x58>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6153      	str	r3, [r2, #20]
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_DMA_Init+0x58>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	200e      	movs	r0, #14
 8001338:	f001 f911 	bl	800255e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800133c:	200e      	movs	r0, #14
 800133e:	f001 f92a 	bl	8002596 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	200f      	movs	r0, #15
 8001348:	f001 f909 	bl	800255e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800134c:	200f      	movs	r0, #15
 800134e:	f001 f922 	bl	8002596 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2010      	movs	r0, #16
 8001358:	f001 f901 	bl	800255e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800135c:	2010      	movs	r0, #16
 800135e:	f001 f91a 	bl	8002596 <HAL_NVIC_EnableIRQ>

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <MX_GPIO_Init+0xb4>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a26      	ldr	r2, [pc, #152]	; (8001424 <MX_GPIO_Init+0xb4>)
 800138a:	f043 0320 	orr.w	r3, r3, #32
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <MX_GPIO_Init+0xb4>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0320 	and.w	r3, r3, #32
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b21      	ldr	r3, [pc, #132]	; (8001424 <MX_GPIO_Init+0xb4>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a20      	ldr	r2, [pc, #128]	; (8001424 <MX_GPIO_Init+0xb4>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <MX_GPIO_Init+0xb4>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <MX_GPIO_Init+0xb4>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <MX_GPIO_Init+0xb4>)
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_GPIO_Init+0xb4>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2112      	movs	r1, #18
 80013d0:	4815      	ldr	r0, [pc, #84]	; (8001428 <MX_GPIO_Init+0xb8>)
 80013d2:	f001 fd13 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80013d6:	2301      	movs	r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_GPIO_Init+0xbc>)
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4619      	mov	r1, r3
 80013e8:	480f      	ldr	r0, [pc, #60]	; (8001428 <MX_GPIO_Init+0xb8>)
 80013ea:	f001 fb8d 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 80013ee:	2312      	movs	r3, #18
 80013f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <MX_GPIO_Init+0xb8>)
 8001406:	f001 fb7f 	bl	8002b08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2006      	movs	r0, #6
 8001410:	f001 f8a5 	bl	800255e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001414:	2006      	movs	r0, #6
 8001416:	f001 f8be 	bl	8002596 <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	40010800 	.word	0x40010800
 800142c:	10210000 	.word	0x10210000

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001438:	e7fe      	b.n	8001438 <Error_Handler+0x8>
	...

0800143c <DWT_Init>:
uint8_t addr_width = 0; /**< The address width to use - 3,4 or 5 bytes. */
uint8_t txDelay = 0;


void DWT_Init(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <DWT_Init+0x24>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <DWT_Init+0x24>)
 8001446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800144a:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <DWT_Init+0x28>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <DWT_Init+0x28>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	e000edfc 	.word	0xe000edfc
 8001464:	e0001000 	.word	0xe0001000

08001468 <delay_us>:

void delay_us(uint32_t us) // DelayMicro
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <delay_us+0x3c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <delay_us+0x40>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0c9a      	lsrs	r2, r3, #18
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <delay_us+0x44>)
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 800148a:	bf00      	nop
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <delay_us+0x44>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	429a      	cmp	r2, r3
 8001494:	d8fa      	bhi.n	800148c <delay_us+0x24>
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000000 	.word	0x20000000
 80014a8:	431bde83 	.word	0x431bde83
 80014ac:	e0001000 	.word	0xe0001000

080014b0 <csn>:

void csn(uint8_t level)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, level);
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	461a      	mov	r2, r3
 80014be:	2110      	movs	r1, #16
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <csn+0x24>)
 80014c2:	f001 fc9b 	bl	8002dfc <HAL_GPIO_WritePin>
	delay_us(5);
 80014c6:	2005      	movs	r0, #5
 80014c8:	f7ff ffce 	bl	8001468 <delay_us>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40010800 	.word	0x40010800

080014d8 <ce>:

void ce(uint8_t level)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, level);
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	461a      	mov	r2, r3
 80014e6:	2102      	movs	r1, #2
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <ce+0x20>)
 80014ea:	f001 fc87 	bl	8002dfc <HAL_GPIO_WritePin>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40010800 	.word	0x40010800

080014fc <read_register>:

uint8_t read_register(uint8_t reg)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af02      	add	r7, sp, #8
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	b2db      	uxtb	r3, r3
 800150e:	73fb      	strb	r3, [r7, #15]
	uint8_t dt = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff ffcb 	bl	80014b0 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 800151a:	f107 020e 	add.w	r2, r7, #14
 800151e:	f107 010f 	add.w	r1, r7, #15
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2301      	movs	r3, #1
 800152a:	480a      	ldr	r0, [pc, #40]	; (8001554 <read_register+0x58>)
 800152c:	f002 fb8b 	bl	8003c46 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &dt, 1, 1000);
 8001530:	f107 020e 	add.w	r2, r7, #14
 8001534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2301      	movs	r3, #1
 800153c:	21ff      	movs	r1, #255	; 0xff
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <read_register+0x58>)
 8001540:	f002 fb81 	bl	8003c46 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff ffb3 	bl	80014b0 <csn>
	return dt;
 800154a:	7bbb      	ldrb	r3, [r7, #14]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000274 	.word	0x20000274

08001558 <write_registerMy>:

uint8_t write_registerMy(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af02      	add	r7, sp, #8
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
 8001564:	4613      	mov	r3, r2
 8001566:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f043 0320 	orr.w	r3, r3, #32
 8001578:	b2db      	uxtb	r3, r3
 800157a:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff ff97 	bl	80014b0 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8001582:	f107 020f 	add.w	r2, r7, #15
 8001586:	f107 010e 	add.w	r1, r7, #14
 800158a:	2364      	movs	r3, #100	; 0x64
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2301      	movs	r3, #1
 8001590:	4808      	ldr	r0, [pc, #32]	; (80015b4 <write_registerMy+0x5c>)
 8001592:	f002 fb58 	bl	8003c46 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, len, 100);
 8001596:	79bb      	ldrb	r3, [r7, #6]
 8001598:	b29a      	uxth	r2, r3
 800159a:	2364      	movs	r3, #100	; 0x64
 800159c:	6839      	ldr	r1, [r7, #0]
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <write_registerMy+0x5c>)
 80015a0:	f002 f904 	bl	80037ac <HAL_SPI_Transmit>
	csn(HIGH);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff ff83 	bl	80014b0 <csn>
	return status;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000274 	.word	0x20000274

080015b8 <write_register>:

uint8_t write_register(uint8_t reg, uint8_t value)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af02      	add	r7, sp, #8
 80015be:	4603      	mov	r3, r0
 80015c0:	460a      	mov	r2, r1
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	4613      	mov	r3, r2
 80015c6:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f043 0320 	orr.w	r3, r3, #32
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	73bb      	strb	r3, [r7, #14]
	csn(LOW);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff ff67 	bl	80014b0 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 80015e2:	f107 020f 	add.w	r2, r7, #15
 80015e6:	f107 010e 	add.w	r1, r7, #14
 80015ea:	2364      	movs	r3, #100	; 0x64
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2301      	movs	r3, #1
 80015f0:	4808      	ldr	r0, [pc, #32]	; (8001614 <write_register+0x5c>)
 80015f2:	f002 fb28 	bl	8003c46 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 80015f6:	1db9      	adds	r1, r7, #6
 80015f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fc:	2201      	movs	r2, #1
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <write_register+0x5c>)
 8001600:	f002 f8d4 	bl	80037ac <HAL_SPI_Transmit>
	csn(HIGH);
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff ff53 	bl	80014b0 <csn>
	return status;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000274 	.word	0x20000274

08001618 <read_payload>:
	csn(HIGH);
	return status;
}

uint8_t read_payload(void* buf, uint8_t data_len)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	75bb      	strb	r3, [r7, #22]
	uint8_t* current = (uint8_t*)buf;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	613b      	str	r3, [r7, #16]

	if(data_len > payload_size)
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <read_payload+0x90>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	78fa      	ldrb	r2, [r7, #3]
 8001632:	429a      	cmp	r2, r3
 8001634:	d902      	bls.n	800163c <read_payload+0x24>
	{
		data_len = payload_size;
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <read_payload+0x90>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	70fb      	strb	r3, [r7, #3]
	}

	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <read_payload+0x94>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <read_payload+0x30>
 8001644:	2300      	movs	r3, #0
 8001646:	e004      	b.n	8001652 <read_payload+0x3a>
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <read_payload+0x90>)
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	75fb      	strb	r3, [r7, #23]

	uint8_t addr = R_RX_PAYLOAD;
 8001654:	2361      	movs	r3, #97	; 0x61
 8001656:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff ff29 	bl	80014b0 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 800165e:	f107 010f 	add.w	r1, r7, #15
 8001662:	2364      	movs	r3, #100	; 0x64
 8001664:	2201      	movs	r2, #1
 8001666:	4812      	ldr	r0, [pc, #72]	; (80016b0 <read_payload+0x98>)
 8001668:	f002 f8a0 	bl	80037ac <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)current, data_len, 100);
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	b29a      	uxth	r2, r3
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	6939      	ldr	r1, [r7, #16]
 8001674:	480e      	ldr	r0, [pc, #56]	; (80016b0 <read_payload+0x98>)
 8001676:	f002 f9d5 	bl	8003a24 <HAL_SPI_Receive>

	while(blank_len--)
 800167a:	e008      	b.n	800168e <read_payload+0x76>
	{
		uint8_t empt = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 8001680:	f107 010e 	add.w	r1, r7, #14
 8001684:	2364      	movs	r3, #100	; 0x64
 8001686:	2201      	movs	r2, #1
 8001688:	4809      	ldr	r0, [pc, #36]	; (80016b0 <read_payload+0x98>)
 800168a:	f002 f9cb 	bl	8003a24 <HAL_SPI_Receive>
	while(blank_len--)
 800168e:	7dfb      	ldrb	r3, [r7, #23]
 8001690:	1e5a      	subs	r2, r3, #1
 8001692:	75fa      	strb	r2, [r7, #23]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f1      	bne.n	800167c <read_payload+0x64>
	}

	csn(HIGH);
 8001698:	2001      	movs	r0, #1
 800169a:	f7ff ff09 	bl	80014b0 <csn>
	return status;
 800169e:	7dbb      	ldrb	r3, [r7, #22]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200000b9 	.word	0x200000b9
 80016ac:	20000358 	.word	0x20000358
 80016b0:	20000274 	.word	0x20000274

080016b4 <flush_rx>:

uint8_t flush_rx(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_RX);
 80016b8:	20e2      	movs	r0, #226	; 0xe2
 80016ba:	f000 f80b 	bl	80016d4 <spiTrans>
 80016be:	4603      	mov	r3, r0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <flush_tx>:

uint8_t flush_tx(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_TX);
 80016c8:	20e1      	movs	r0, #225	; 0xe1
 80016ca:	f000 f803 	bl	80016d4 <spiTrans>
 80016ce:	4603      	mov	r3, r0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <spiTrans>:

uint8_t spiTrans(uint8_t cmd)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af02      	add	r7, sp, #8
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 80016e2:	2000      	movs	r0, #0
 80016e4:	f7ff fee4 	bl	80014b0 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &cmd, &status, 1, 1000);
 80016e8:	f107 020f 	add.w	r2, r7, #15
 80016ec:	1df9      	adds	r1, r7, #7
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <spiTrans+0x38>)
 80016f8:	f002 faa5 	bl	8003c46 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 80016fc:	2001      	movs	r0, #1
 80016fe:	f7ff fed7 	bl	80014b0 <csn>
	return status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000274 	.word	0x20000274

08001710 <get_status>:

uint8_t get_status(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	return spiTrans(NOP);
 8001714:	20ff      	movs	r0, #255	; 0xff
 8001716:	f7ff ffdd 	bl	80016d4 <spiTrans>
 800171a:	4603      	mov	r3, r0
}
 800171c:	4618      	mov	r0, r3
 800171e:	bd80      	pop	{r7, pc}

08001720 <setChannel>:

void setChannel(uint8_t channel)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
	write_register(RF_CH, channel);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4619      	mov	r1, r3
 800172e:	2005      	movs	r0, #5
 8001730:	f7ff ff42 	bl	80015b8 <write_register>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <NRF_Init>:
{
	return payload_size;
}

uint8_t NRF_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
	uint8_t setup = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	71fb      	strb	r3, [r7, #7]
	p_variant = false;
 8001746:	4b33      	ldr	r3, [pc, #204]	; (8001814 <NRF_Init+0xd8>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
	payload_size = 32;
 800174c:	4b32      	ldr	r3, [pc, #200]	; (8001818 <NRF_Init+0xdc>)
 800174e:	2220      	movs	r2, #32
 8001750:	701a      	strb	r2, [r3, #0]
	dynamic_payloads_enabled = false;
 8001752:	4b32      	ldr	r3, [pc, #200]	; (800181c <NRF_Init+0xe0>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
	addr_width = 5;
 8001758:	4b31      	ldr	r3, [pc, #196]	; (8001820 <NRF_Init+0xe4>)
 800175a:	2205      	movs	r2, #5
 800175c:	701a      	strb	r2, [r3, #0]
	pipe0_reading_address[0] = 0;
 800175e:	4b31      	ldr	r3, [pc, #196]	; (8001824 <NRF_Init+0xe8>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]

	ce(LOW);
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff feb7 	bl	80014d8 <ce>
	csn(HIGH);
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fea0 	bl	80014b0 <csn>
	HAL_Delay(5);
 8001770:	2005      	movs	r0, #5
 8001772:	f000 fdf9 	bl	8002368 <HAL_Delay>

	write_register(NRF_CONFIG, 0x0C); // Reset NRF_CONFIG and enable 16-bit CRC.
 8001776:	210c      	movs	r1, #12
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff ff1d 	bl	80015b8 <write_register>
	setRetries(5, 15);
 800177e:	210f      	movs	r1, #15
 8001780:	2005      	movs	r0, #5
 8001782:	f000 fa71 	bl	8001c68 <setRetries>
	setPALevel(RF24_PA_MAX); // Reset value is MAX
 8001786:	2003      	movs	r0, #3
 8001788:	f000 fa0a 	bl	8001ba0 <setPALevel>

	if(setDataRate(RF24_250KBPS)) // check for connected module and if this is a p nRF24l01 variant
 800178c:	2002      	movs	r0, #2
 800178e:	f000 fa2b 	bl	8001be8 <setDataRate>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <NRF_Init+0x62>
	{
		p_variant = true;
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <NRF_Init+0xd8>)
 800179a:	2201      	movs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
	}

	setup = read_register(RF_SETUP);
 800179e:	2006      	movs	r0, #6
 80017a0:	f7ff feac 	bl	80014fc <read_register>
 80017a4:	4603      	mov	r3, r0
 80017a6:	71fb      	strb	r3, [r7, #7]
	setDataRate(RF24_1MBPS); // Then set the data rate to the slowest (and most reliable) speed supported by all hardware.
 80017a8:	2000      	movs	r0, #0
 80017aa:	f000 fa1d 	bl	8001be8 <setDataRate>

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	toggle_features();
 80017ae:	f000 f981 	bl	8001ab4 <toggle_features>
	write_register(FEATURE, 0);
 80017b2:	2100      	movs	r1, #0
 80017b4:	201d      	movs	r0, #29
 80017b6:	f7ff feff 	bl	80015b8 <write_register>
	write_register(DYNPD, 0);
 80017ba:	2100      	movs	r1, #0
 80017bc:	201c      	movs	r0, #28
 80017be:	f7ff fefb 	bl	80015b8 <write_register>
	dynamic_payloads_enabled = false;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <NRF_Init+0xe0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]

	// Reset current status. Notice reset and flush is the last thing we do
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 80017c8:	2170      	movs	r1, #112	; 0x70
 80017ca:	2007      	movs	r0, #7
 80017cc:	f7ff fef4 	bl	80015b8 <write_register>
	setChannel(76);
 80017d0:	204c      	movs	r0, #76	; 0x4c
 80017d2:	f7ff ffa5 	bl	8001720 <setChannel>
	flush_rx();
 80017d6:	f7ff ff6d 	bl	80016b4 <flush_rx>
	flush_tx();
 80017da:	f7ff ff73 	bl	80016c4 <flush_tx>
	powerUp(); //Power up by default when begin() is called
 80017de:	f000 f86f 	bl	80018c0 <powerUp>
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 80017e2:	2000      	movs	r0, #0
 80017e4:	f7ff fe8a 	bl	80014fc <read_register>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4619      	mov	r1, r3
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fee0 	bl	80015b8 <write_register>
	return (setup != 0 && setup != 0xff);
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <NRF_Init+0xcc>
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2bff      	cmp	r3, #255	; 0xff
 8001802:	d001      	beq.n	8001808 <NRF_Init+0xcc>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <NRF_Init+0xce>
 8001808:	2300      	movs	r3, #0
 800180a:	b2db      	uxtb	r3, r3
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000359 	.word	0x20000359
 8001818:	200000b9 	.word	0x200000b9
 800181c:	20000358 	.word	0x20000358
 8001820:	200000c1 	.word	0x200000c1
 8001824:	200000bc 	.word	0x200000bc

08001828 <isChipConnected>:

bool isChipConnected()
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
	uint8_t setup = read_register(SETUP_AW);
 800182e:	2003      	movs	r0, #3
 8001830:	f7ff fe64 	bl	80014fc <read_register>
 8001834:	4603      	mov	r3, r0
 8001836:	71fb      	strb	r3, [r7, #7]

	if(setup >= 1 && setup <= 3)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d004      	beq.n	8001848 <isChipConnected+0x20>
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d801      	bhi.n	8001848 <isChipConnected+0x20>
	{
		return true;
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <isChipConnected+0x22>
	}

	return false;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <startListening>:

void startListening(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	powerUp();
 8001858:	f000 f832 	bl	80018c0 <powerUp>

	write_register(NRF_CONFIG, read_register(NRF_CONFIG) | (1 << PRIM_RX));
 800185c:	2000      	movs	r0, #0
 800185e:	f7ff fe4d 	bl	80014fc <read_register>
 8001862:	4603      	mov	r3, r0
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	4619      	mov	r1, r3
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff fea3 	bl	80015b8 <write_register>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8001872:	2170      	movs	r1, #112	; 0x70
 8001874:	2007      	movs	r0, #7
 8001876:	f7ff fe9f 	bl	80015b8 <write_register>
	ce(HIGH);
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff fe2c 	bl	80014d8 <ce>
	// Restore the pipe0 adddress, if exists
	if(pipe0_reading_address[0] > 0)
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <startListening+0x64>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d007      	beq.n	8001898 <startListening+0x44>
	{
		write_registerMy(RX_ADDR_P0, pipe0_reading_address, addr_width);
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <startListening+0x68>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	490a      	ldr	r1, [pc, #40]	; (80018b8 <startListening+0x64>)
 8001890:	200a      	movs	r0, #10
 8001892:	f7ff fe61 	bl	8001558 <write_registerMy>
 8001896:	e002      	b.n	800189e <startListening+0x4a>
	}
	else
	{
		closeReadingPipe(0);
 8001898:	2000      	movs	r0, #0
 800189a:	f000 f8eb 	bl	8001a74 <closeReadingPipe>
	}

	if(read_register(FEATURE) & (1 << EN_ACK_PAY))
 800189e:	201d      	movs	r0, #29
 80018a0:	f7ff fe2c 	bl	80014fc <read_register>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <startListening+0x5e>
	{
		flush_tx();
 80018ae:	f7ff ff09 	bl	80016c4 <flush_tx>
	}
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200000bc 	.word	0x200000bc
 80018bc:	200000c1 	.word	0x200000c1

080018c0 <powerUp>:
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) & ~(1 << PWR_UP));
}

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void powerUp(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
	uint8_t cfg = read_register(NRF_CONFIG);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7ff fe18 	bl	80014fc <read_register>
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
	// if not powered up then power up and wait for the radio to initialize
	if(!(cfg & (1 << PWR_UP)))
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10a      	bne.n	80018f0 <powerUp+0x30>
	{
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	4619      	mov	r1, r3
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff fe67 	bl	80015b8 <write_register>
		HAL_Delay(5);
 80018ea:	2005      	movs	r0, #5
 80018ec:	f000 fd3c 	bl	8002368 <HAL_Delay>
	}
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <getDynamicPayloadSize>:
	config |= fail << MASK_MAX_RT | tx << MASK_TX_DS | rx << MASK_RX_DR; // set the specified interrupt flags
	write_register(NRF_CONFIG, config);
}

uint8_t getDynamicPayloadSize(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af02      	add	r7, sp, #8
	uint8_t result = 0, addr;
 80018fe:	2300      	movs	r3, #0
 8001900:	71fb      	strb	r3, [r7, #7]
	csn(LOW);
 8001902:	2000      	movs	r0, #0
 8001904:	f7ff fdd4 	bl	80014b0 <csn>
	addr = R_RX_PL_WID;
 8001908:	2360      	movs	r3, #96	; 0x60
 800190a:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1, &addr, &result, 1, 1000);
 800190c:	1dfa      	adds	r2, r7, #7
 800190e:	1db9      	adds	r1, r7, #6
 8001910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2301      	movs	r3, #1
 8001918:	480e      	ldr	r0, [pc, #56]	; (8001954 <getDynamicPayloadSize+0x5c>)
 800191a:	f002 f994 	bl	8003c46 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &result, 1, 1000);
 800191e:	1dfa      	adds	r2, r7, #7
 8001920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	21ff      	movs	r1, #255	; 0xff
 800192a:	480a      	ldr	r0, [pc, #40]	; (8001954 <getDynamicPayloadSize+0x5c>)
 800192c:	f002 f98b 	bl	8003c46 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8001930:	2001      	movs	r0, #1
 8001932:	f7ff fdbd 	bl	80014b0 <csn>

	if(result > 32)
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b20      	cmp	r3, #32
 800193a:	d906      	bls.n	800194a <getDynamicPayloadSize+0x52>
	{
		flush_rx();
 800193c:	f7ff feba 	bl	80016b4 <flush_rx>
		HAL_Delay(2);
 8001940:	2002      	movs	r0, #2
 8001942:	f000 fd11 	bl	8002368 <HAL_Delay>
		return 0;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <getDynamicPayloadSize+0x54>
	}

	return result;
 800194a:	79fb      	ldrb	r3, [r7, #7]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000274 	.word	0x20000274

08001958 <available>:
{
	return available(NULL);
}

bool available(uint8_t* pipe_num)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	if(!(read_register(FIFO_STATUS) & (1 << RX_EMPTY)))
 8001960:	2017      	movs	r0, #23
 8001962:	f7ff fdcb 	bl	80014fc <read_register>
 8001966:	4603      	mov	r3, r0
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d110      	bne.n	8001992 <available+0x3a>
	{
		if(pipe_num) // If the caller wants the pipe number, include that
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <available+0x36>
		{
			uint8_t status = get_status();
 8001976:	f7ff fecb 	bl	8001710 <get_status>
 800197a:	4603      	mov	r3, r0
 800197c:	73fb      	strb	r3, [r7, #15]
			*pipe_num = (status >> RX_P_NO) & 0x07;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	b2da      	uxtb	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	701a      	strb	r2, [r3, #0]
		}

		return 1;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <available+0x3c>
	}

	return 0;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <read>:

void read(void* buf, uint8_t len)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70fb      	strb	r3, [r7, #3]
	read_payload(buf, len);
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	4619      	mov	r1, r3
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff fe33 	bl	8001618 <read_payload>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
 80019b2:	2170      	movs	r1, #112	; 0x70
 80019b4:	2007      	movs	r0, #7
 80019b6:	f7ff fdff 	bl	80015b8 <write_register>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <openReadingPipe>:

static const uint8_t child_payload_size[] = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};


void openReadingPipe(uint8_t child, uint64_t address)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4601      	mov	r1, r0
 80019cc:	e9c7 2300 	strd	r2, r3, [r7]
 80019d0:	460b      	mov	r3, r1
 80019d2:	73fb      	strb	r3, [r7, #15]
	if(child == 0)
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d107      	bne.n	80019ea <openReadingPipe+0x26>
	{
		memcpy(pipe0_reading_address, &address, addr_width);
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <openReadingPipe+0x98>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	463b      	mov	r3, r7
 80019e2:	4619      	mov	r1, r3
 80019e4:	481e      	ldr	r0, [pc, #120]	; (8001a60 <openReadingPipe+0x9c>)
 80019e6:	f003 fe37 	bl	8005658 <memcpy>
	}

	if(child <= 6)
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b06      	cmp	r3, #6
 80019ee:	d830      	bhi.n	8001a52 <openReadingPipe+0x8e>
	{
		// For pipes 2-5, only write the LSB
		if(child < 2)
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d809      	bhi.n	8001a0a <openReadingPipe+0x46>
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, addr_width);
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	4a1a      	ldr	r2, [pc, #104]	; (8001a64 <openReadingPipe+0xa0>)
 80019fa:	5cd3      	ldrb	r3, [r2, r3]
 80019fc:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <openReadingPipe+0x98>)
 80019fe:	7812      	ldrb	r2, [r2, #0]
 8001a00:	4639      	mov	r1, r7
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fda8 	bl	8001558 <write_registerMy>
 8001a08:	e007      	b.n	8001a1a <openReadingPipe+0x56>
		else
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, 1);
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <openReadingPipe+0xa0>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	4639      	mov	r1, r7
 8001a12:	2201      	movs	r2, #1
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fd9f 	bl	8001558 <write_registerMy>

		write_register(child_payload_size[child], payload_size);
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <openReadingPipe+0xa4>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <openReadingPipe+0xa8>)
 8001a22:	7812      	ldrb	r2, [r2, #0]
 8001a24:	4611      	mov	r1, r2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fdc6 	bl	80015b8 <write_register>
		write_register(EN_RXADDR, read_register(EN_RXADDR) | (1 << child_pipe_enable[child]));
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f7ff fd65 	bl	80014fc <read_register>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b25a      	sxtb	r2, r3
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	490d      	ldr	r1, [pc, #52]	; (8001a70 <openReadingPipe+0xac>)
 8001a3a:	5ccb      	ldrb	r3, [r1, r3]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	2301      	movs	r3, #1
 8001a40:	408b      	lsls	r3, r1
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	4313      	orrs	r3, r2
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f7ff fdb3 	bl	80015b8 <write_register>
	}
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200000c1 	.word	0x200000c1
 8001a60:	200000bc 	.word	0x200000bc
 8001a64:	08005f5c 	.word	0x08005f5c
 8001a68:	08005f64 	.word	0x08005f64
 8001a6c:	200000b9 	.word	0x200000b9
 8001a70:	08005f54 	.word	0x08005f54

08001a74 <closeReadingPipe>:
        addr_width = 2;
    }
}

void closeReadingPipe(uint8_t pipe)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f7ff fd3c 	bl	80014fc <read_register>
 8001a84:	4603      	mov	r3, r0
 8001a86:	b25a      	sxtb	r2, r3
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	4909      	ldr	r1, [pc, #36]	; (8001ab0 <closeReadingPipe+0x3c>)
 8001a8c:	5ccb      	ldrb	r3, [r1, r3]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	2301      	movs	r3, #1
 8001a92:	408b      	lsls	r3, r1
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	b25b      	sxtb	r3, r3
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	b25b      	sxtb	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f7ff fd88 	bl	80015b8 <write_register>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	08005f54 	.word	0x08005f54

08001ab4 <toggle_features>:

void toggle_features(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
	uint8_t addr = ACTIVATE;
 8001aba:	2350      	movs	r3, #80	; 0x50
 8001abc:	71fb      	strb	r3, [r7, #7]
	csn(LOW);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff fcf6 	bl	80014b0 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8001ac4:	1df9      	adds	r1, r7, #7
 8001ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aca:	2201      	movs	r2, #1
 8001acc:	4808      	ldr	r0, [pc, #32]	; (8001af0 <toggle_features+0x3c>)
 8001ace:	f001 fe6d 	bl	80037ac <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)0x73, 1, 1000);
 8001ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	2173      	movs	r1, #115	; 0x73
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <toggle_features+0x3c>)
 8001adc:	f001 fe66 	bl	80037ac <HAL_SPI_Transmit>
	csn(HIGH);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7ff fce5 	bl	80014b0 <csn>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000274 	.word	0x20000274

08001af4 <enableAckPayload>:
	write_register(DYNPD, 0);
	dynamic_payloads_enabled = false;
}

void enableAckPayload(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_ACK_PAY) | (1 << EN_DPL));
 8001af8:	201d      	movs	r0, #29
 8001afa:	f7ff fcff 	bl	80014fc <read_register>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f043 0306 	orr.w	r3, r3, #6
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4619      	mov	r1, r3
 8001b08:	201d      	movs	r0, #29
 8001b0a:	f7ff fd55 	bl	80015b8 <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P1) | (1 << DPL_P0));
 8001b0e:	201c      	movs	r0, #28
 8001b10:	f7ff fcf4 	bl	80014fc <read_register>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f043 0303 	orr.w	r3, r3, #3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	201c      	movs	r0, #28
 8001b20:	f7ff fd4a 	bl	80015b8 <write_register>
	dynamic_payloads_enabled = true;
 8001b24:	4b02      	ldr	r3, [pc, #8]	; (8001b30 <enableAckPayload+0x3c>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000358 	.word	0x20000358

08001b34 <writeAckPayload>:
{
    write_register(FEATURE, read_register(FEATURE) | (1 << EN_DYN_ACK));
}

void writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	6039      	str	r1, [r7, #0]
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	4613      	mov	r3, r2
 8001b42:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (const uint8_t*)buf;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	60fb      	str	r3, [r7, #12]
	uint8_t data_len = rf24_min(len, 32);
 8001b48:	79bb      	ldrb	r3, [r7, #6]
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	bf28      	it	cs
 8001b4e:	2320      	movcs	r3, #32
 8001b50:	72fb      	strb	r3, [r7, #11]
	uint8_t addr = W_ACK_PAYLOAD | (pipe & 0x07);
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	b25b      	sxtb	r3, r3
 8001b5c:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	72bb      	strb	r3, [r7, #10]
	csn(LOW);
 8001b66:	2000      	movs	r0, #0
 8001b68:	f7ff fca2 	bl	80014b0 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8001b6c:	f107 010a 	add.w	r1, r7, #10
 8001b70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b74:	2201      	movs	r2, #1
 8001b76:	4809      	ldr	r0, [pc, #36]	; (8001b9c <writeAckPayload+0x68>)
 8001b78:	f001 fe18 	bl	80037ac <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)current, data_len, 1000);
 8001b7c:	7afb      	ldrb	r3, [r7, #11]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b84:	68f9      	ldr	r1, [r7, #12]
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <writeAckPayload+0x68>)
 8001b88:	f001 fe10 	bl	80037ac <HAL_SPI_Transmit>
	csn(HIGH);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7ff fc8f 	bl	80014b0 <csn>
}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000274 	.word	0x20000274

08001ba0 <setPALevel>:
		write_register(EN_AA, en_aa);
	}
}

void setPALevel(uint8_t level)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 8001baa:	2006      	movs	r0, #6
 8001bac:	f7ff fca6 	bl	80014fc <read_register>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f023 0307 	bic.w	r3, r3, #7
 8001bb6:	73fb      	strb	r3, [r7, #15]

  if(level > 3) // If invalid level, go to max PA
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d902      	bls.n	8001bc4 <setPALevel+0x24>
  {
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	71fb      	strb	r3, [r7, #7]
 8001bc2:	e004      	b.n	8001bce <setPALevel+0x2e>
  }
  else
  {
	  level = (level << 1) + 1;	 		// Else set level as requested
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	71fb      	strb	r3, [r7, #7]
  }

  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	73fb      	strb	r3, [r7, #15]
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	2006      	movs	r0, #6
 8001bdc:	f7ff fcec 	bl	80015b8 <write_register>
}
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <setDataRate>:
{
	return (read_register(RF_SETUP) & ((1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH))) >> 1;
}

bool setDataRate(rf24_datarate_e speed)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = read_register(RF_SETUP);
 8001bf6:	2006      	movs	r0, #6
 8001bf8:	f7ff fc80 	bl	80014fc <read_register>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	73bb      	strb	r3, [r7, #14]
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001c06:	73bb      	strb	r3, [r7, #14]
	txDelay = 85;
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <setDataRate+0x7c>)
 8001c0a:	2255      	movs	r2, #85	; 0x55
 8001c0c:	701a      	strb	r2, [r3, #0]

	if(speed == RF24_250KBPS)
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d107      	bne.n	8001c24 <setDataRate+0x3c>
	{
		setup |= (1 << RF_DR_LOW);
 8001c14:	7bbb      	ldrb	r3, [r7, #14]
 8001c16:	f043 0320 	orr.w	r3, r3, #32
 8001c1a:	73bb      	strb	r3, [r7, #14]
		txDelay = 155;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <setDataRate+0x7c>)
 8001c1e:	229b      	movs	r2, #155	; 0x9b
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e009      	b.n	8001c38 <setDataRate+0x50>
	}
	else
	{
		if(speed == RF24_2MBPS)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d106      	bne.n	8001c38 <setDataRate+0x50>
		{
			setup |= (1 << RF_DR_HIGH);
 8001c2a:	7bbb      	ldrb	r3, [r7, #14]
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	73bb      	strb	r3, [r7, #14]
			txDelay = 65;
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <setDataRate+0x7c>)
 8001c34:	2241      	movs	r2, #65	; 0x41
 8001c36:	701a      	strb	r2, [r3, #0]
		}
	}

	write_register(RF_SETUP, setup);
 8001c38:	7bbb      	ldrb	r3, [r7, #14]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	2006      	movs	r0, #6
 8001c3e:	f7ff fcbb 	bl	80015b8 <write_register>
	uint8_t ggg = read_register(RF_SETUP);
 8001c42:	2006      	movs	r0, #6
 8001c44:	f7ff fc5a 	bl	80014fc <read_register>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	737b      	strb	r3, [r7, #13]

	if(ggg == setup)
 8001c4c:	7b7a      	ldrb	r2, [r7, #13]
 8001c4e:	7bbb      	ldrb	r3, [r7, #14]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d101      	bne.n	8001c58 <setDataRate+0x70>
	{
		result = true;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200000c2 	.word	0x200000c2

08001c68 <setRetries>:
	uint8_t disable = read_register(NRF_CONFIG) & ~(1 << EN_CRC);
	write_register(NRF_CONFIG, disable);
}

void setRetries(uint8_t delay, uint8_t count)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	460a      	mov	r2, r1
 8001c72:	71fb      	strb	r3, [r7, #7]
 8001c74:	4613      	mov	r3, r2
 8001c76:	71bb      	strb	r3, [r7, #6]
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	b25a      	sxtb	r2, r3
 8001c7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	b25b      	sxtb	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4619      	mov	r1, r3
 8001c90:	2004      	movs	r0, #4
 8001c92:	f7ff fc91 	bl	80015b8 <write_register>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_MspInit+0x5c>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <HAL_MspInit+0x5c>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6193      	str	r3, [r2, #24]
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_MspInit+0x5c>)
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <HAL_MspInit+0x5c>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <HAL_MspInit+0x5c>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	61d3      	str	r3, [r2, #28]
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_MspInit+0x5c>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_MspInit+0x60>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_MspInit+0x60>)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010000 	.word	0x40010000

08001d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <HAL_SPI_MspInit+0x88>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d12f      	bne.n	8001d84 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_SPI_MspInit+0x8c>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <HAL_SPI_MspInit+0x8c>)
 8001d2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_SPI_MspInit+0x8c>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <HAL_SPI_MspInit+0x8c>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4a13      	ldr	r2, [pc, #76]	; (8001d90 <HAL_SPI_MspInit+0x8c>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6193      	str	r3, [r2, #24]
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_SPI_MspInit+0x8c>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d54:	23a0      	movs	r3, #160	; 0xa0
 8001d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4619      	mov	r1, r3
 8001d66:	480b      	ldr	r0, [pc, #44]	; (8001d94 <HAL_SPI_MspInit+0x90>)
 8001d68:	f000 fece 	bl	8002b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d6c:	2340      	movs	r3, #64	; 0x40
 8001d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <HAL_SPI_MspInit+0x90>)
 8001d80:	f000 fec2 	bl	8002b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d84:	bf00      	nop
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40013000 	.word	0x40013000
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40010800 	.word	0x40010800

08001d98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da8:	d10c      	bne.n	8001dc4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_TIM_PWM_MspInit+0x58>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <HAL_TIM_PWM_MspInit+0x58>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_TIM_PWM_MspInit+0x58>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dc2:	e010      	b.n	8001de6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10b      	bne.n	8001de6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_TIM_PWM_MspInit+0x58>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <HAL_TIM_PWM_MspInit+0x58>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	61d3      	str	r3, [r2, #28]
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_TIM_PWM_MspInit+0x58>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40000400 	.word	0x40000400

08001df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	; 0x30
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0318 	add.w	r3, r7, #24
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e16:	d144      	bne.n	8001ea2 <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e18:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <HAL_TIM_MspPostInit+0x110>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a3a      	ldr	r2, [pc, #232]	; (8001f08 <HAL_TIM_MspPostInit+0x110>)
 8001e1e:	f043 0308 	orr.w	r3, r3, #8
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <HAL_TIM_MspPostInit+0x110>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e30:	4b35      	ldr	r3, [pc, #212]	; (8001f08 <HAL_TIM_MspPostInit+0x110>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a34      	ldr	r2, [pc, #208]	; (8001f08 <HAL_TIM_MspPostInit+0x110>)
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <HAL_TIM_MspPostInit+0x110>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8001e48:	f640 4308 	movw	r3, #3080	; 0xc08
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2302      	movs	r3, #2
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e56:	f107 0318 	add.w	r3, r7, #24
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	482b      	ldr	r0, [pc, #172]	; (8001f0c <HAL_TIM_MspPostInit+0x114>)
 8001e5e:	f000 fe53 	bl	8002b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	f107 0318 	add.w	r3, r7, #24
 8001e74:	4619      	mov	r1, r3
 8001e76:	4826      	ldr	r0, [pc, #152]	; (8001f10 <HAL_TIM_MspPostInit+0x118>)
 8001e78:	f000 fe46 	bl	8002b08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <HAL_TIM_MspPostInit+0x11c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e94:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e9a:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_TIM_MspPostInit+0x11c>)
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ea0:	e02e      	b.n	8001f00 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM3)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <HAL_TIM_MspPostInit+0x120>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d129      	bne.n	8001f00 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eac:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_TIM_MspPostInit+0x110>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a15      	ldr	r2, [pc, #84]	; (8001f08 <HAL_TIM_MspPostInit+0x110>)
 8001eb2:	f043 0308 	orr.w	r3, r3, #8
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <HAL_TIM_MspPostInit+0x110>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001ec4:	2333      	movs	r3, #51	; 0x33
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed0:	f107 0318 	add.w	r3, r7, #24
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480d      	ldr	r0, [pc, #52]	; (8001f0c <HAL_TIM_MspPostInit+0x114>)
 8001ed8:	f000 fe16 	bl	8002b08 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_TIM_MspPostInit+0x11c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eec:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001efa:	4a06      	ldr	r2, [pc, #24]	; (8001f14 <HAL_TIM_MspPostInit+0x11c>)
 8001efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efe:	6053      	str	r3, [r2, #4]
}
 8001f00:	bf00      	nop
 8001f02:	3730      	adds	r7, #48	; 0x30
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010c00 	.word	0x40010c00
 8001f10:	40010800 	.word	0x40010800
 8001f14:	40010000 	.word	0x40010000
 8001f18:	40000400 	.word	0x40000400

08001f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0318 	add.w	r3, r7, #24
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a75      	ldr	r2, [pc, #468]	; (800210c <HAL_UART_MspInit+0x1f0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	f040 8087 	bne.w	800204c <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f3e:	4b74      	ldr	r3, [pc, #464]	; (8002110 <HAL_UART_MspInit+0x1f4>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	4a73      	ldr	r2, [pc, #460]	; (8002110 <HAL_UART_MspInit+0x1f4>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f48:	6193      	str	r3, [r2, #24]
 8001f4a:	4b71      	ldr	r3, [pc, #452]	; (8002110 <HAL_UART_MspInit+0x1f4>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	4b6e      	ldr	r3, [pc, #440]	; (8002110 <HAL_UART_MspInit+0x1f4>)
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	4a6d      	ldr	r2, [pc, #436]	; (8002110 <HAL_UART_MspInit+0x1f4>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	6193      	str	r3, [r2, #24]
 8001f62:	4b6b      	ldr	r3, [pc, #428]	; (8002110 <HAL_UART_MspInit+0x1f4>)
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7c:	f107 0318 	add.w	r3, r7, #24
 8001f80:	4619      	mov	r1, r3
 8001f82:	4864      	ldr	r0, [pc, #400]	; (8002114 <HAL_UART_MspInit+0x1f8>)
 8001f84:	f000 fdc0 	bl	8002b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	f107 0318 	add.w	r3, r7, #24
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	485d      	ldr	r0, [pc, #372]	; (8002114 <HAL_UART_MspInit+0x1f8>)
 8001f9e:	f000 fdb3 	bl	8002b08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001fa2:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8001fa4:	4a5d      	ldr	r2, [pc, #372]	; (800211c <HAL_UART_MspInit+0x200>)
 8001fa6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fa8:	4b5b      	ldr	r3, [pc, #364]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fae:	4b5a      	ldr	r3, [pc, #360]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb4:	4b58      	ldr	r3, [pc, #352]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fba:	4b57      	ldr	r3, [pc, #348]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc0:	4b55      	ldr	r3, [pc, #340]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001fc6:	4b54      	ldr	r3, [pc, #336]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fcc:	4b52      	ldr	r3, [pc, #328]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fd2:	4851      	ldr	r0, [pc, #324]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8001fd4:	f000 fafa 	bl	80025cc <HAL_DMA_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001fde:	f7ff fa27 	bl	8001430 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4c      	ldr	r2, [pc, #304]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8001fe6:	639a      	str	r2, [r3, #56]	; 0x38
 8001fe8:	4a4b      	ldr	r2, [pc, #300]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001fee:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <HAL_UART_MspInit+0x204>)
 8001ff0:	4a4c      	ldr	r2, [pc, #304]	; (8002124 <HAL_UART_MspInit+0x208>)
 8001ff2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ff4:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <HAL_UART_MspInit+0x204>)
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffa:	4b49      	ldr	r3, [pc, #292]	; (8002120 <HAL_UART_MspInit+0x204>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002000:	4b47      	ldr	r3, [pc, #284]	; (8002120 <HAL_UART_MspInit+0x204>)
 8002002:	2280      	movs	r2, #128	; 0x80
 8002004:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002006:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_UART_MspInit+0x204>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800200c:	4b44      	ldr	r3, [pc, #272]	; (8002120 <HAL_UART_MspInit+0x204>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002012:	4b43      	ldr	r3, [pc, #268]	; (8002120 <HAL_UART_MspInit+0x204>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002018:	4b41      	ldr	r3, [pc, #260]	; (8002120 <HAL_UART_MspInit+0x204>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800201e:	4840      	ldr	r0, [pc, #256]	; (8002120 <HAL_UART_MspInit+0x204>)
 8002020:	f000 fad4 	bl	80025cc <HAL_DMA_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800202a:	f7ff fa01 	bl	8001430 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a3b      	ldr	r2, [pc, #236]	; (8002120 <HAL_UART_MspInit+0x204>)
 8002032:	635a      	str	r2, [r3, #52]	; 0x34
 8002034:	4a3a      	ldr	r2, [pc, #232]	; (8002120 <HAL_UART_MspInit+0x204>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	2025      	movs	r0, #37	; 0x25
 8002040:	f000 fa8d 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002044:	2025      	movs	r0, #37	; 0x25
 8002046:	f000 faa6 	bl	8002596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800204a:	e05a      	b.n	8002102 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a35      	ldr	r2, [pc, #212]	; (8002128 <HAL_UART_MspInit+0x20c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d155      	bne.n	8002102 <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002056:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <HAL_UART_MspInit+0x1f4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a2d      	ldr	r2, [pc, #180]	; (8002110 <HAL_UART_MspInit+0x1f4>)
 800205c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002060:	61d3      	str	r3, [r2, #28]
 8002062:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <HAL_UART_MspInit+0x1f4>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	4b28      	ldr	r3, [pc, #160]	; (8002110 <HAL_UART_MspInit+0x1f4>)
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	4a27      	ldr	r2, [pc, #156]	; (8002110 <HAL_UART_MspInit+0x1f4>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6193      	str	r3, [r2, #24]
 800207a:	4b25      	ldr	r3, [pc, #148]	; (8002110 <HAL_UART_MspInit+0x1f4>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002086:	2304      	movs	r3, #4
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	f107 0318 	add.w	r3, r7, #24
 8002096:	4619      	mov	r1, r3
 8002098:	481e      	ldr	r0, [pc, #120]	; (8002114 <HAL_UART_MspInit+0x1f8>)
 800209a:	f000 fd35 	bl	8002b08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800209e:	2308      	movs	r3, #8
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 0318 	add.w	r3, r7, #24
 80020ae:	4619      	mov	r1, r3
 80020b0:	4818      	ldr	r0, [pc, #96]	; (8002114 <HAL_UART_MspInit+0x1f8>)
 80020b2:	f000 fd29 	bl	8002b08 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_UART_MspInit+0x210>)
 80020b8:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <HAL_UART_MspInit+0x214>)
 80020ba:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_UART_MspInit+0x210>)
 80020be:	2200      	movs	r2, #0
 80020c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	; (800212c <HAL_UART_MspInit+0x210>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_UART_MspInit+0x210>)
 80020ca:	2280      	movs	r2, #128	; 0x80
 80020cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <HAL_UART_MspInit+0x210>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_UART_MspInit+0x210>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_UART_MspInit+0x210>)
 80020dc:	2220      	movs	r2, #32
 80020de:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_UART_MspInit+0x210>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020e6:	4811      	ldr	r0, [pc, #68]	; (800212c <HAL_UART_MspInit+0x210>)
 80020e8:	f000 fa70 	bl	80025cc <HAL_DMA_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 80020f2:	f7ff f99d 	bl	8001430 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a0c      	ldr	r2, [pc, #48]	; (800212c <HAL_UART_MspInit+0x210>)
 80020fa:	639a      	str	r2, [r3, #56]	; 0x38
 80020fc:	4a0b      	ldr	r2, [pc, #44]	; (800212c <HAL_UART_MspInit+0x210>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002102:	bf00      	nop
 8002104:	3728      	adds	r7, #40	; 0x28
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40013800 	.word	0x40013800
 8002110:	40021000 	.word	0x40021000
 8002114:	40010800 	.word	0x40010800
 8002118:	200001d0 	.word	0x200001d0
 800211c:	40020058 	.word	0x40020058
 8002120:	2000018c 	.word	0x2000018c
 8002124:	40020044 	.word	0x40020044
 8002128:	40004400 	.word	0x40004400
 800212c:	200000d0 	.word	0x200000d0
 8002130:	4002006c 	.word	0x4002006c

08002134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <NMI_Handler+0x4>

0800213a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <HardFault_Handler+0x4>

08002140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <MemManage_Handler+0x4>

08002146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214a:	e7fe      	b.n	800214a <BusFault_Handler+0x4>

0800214c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <UsageFault_Handler+0x4>

08002152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217a:	f000 f8d9 	bl	8002330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}

08002182 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8002186:	2001      	movs	r0, #1
 8002188:	f000 fe50 	bl	8002e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}

08002190 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <DMA1_Channel4_IRQHandler+0x10>)
 8002196:	f000 fb83 	bl	80028a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	2000018c 	.word	0x2000018c

080021a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <DMA1_Channel5_IRQHandler+0x10>)
 80021aa:	f000 fb79 	bl	80028a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200001d0 	.word	0x200001d0

080021b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <DMA1_Channel6_IRQHandler+0x10>)
 80021be:	f000 fb6f 	bl	80028a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200000d0 	.word	0x200000d0

080021cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <USART1_IRQHandler+0x10>)
 80021d2:	f002 fd07 	bl	8004be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000214 	.word	0x20000214

080021e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <_sbrk+0x5c>)
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <_sbrk+0x60>)
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <_sbrk+0x64>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <_sbrk+0x68>)
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	429a      	cmp	r2, r3
 800220e:	d207      	bcs.n	8002220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002210:	f003 f9f8 	bl	8005604 <__errno>
 8002214:	4603      	mov	r3, r0
 8002216:	220c      	movs	r2, #12
 8002218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	e009      	b.n	8002234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <_sbrk+0x64>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <_sbrk+0x64>)
 8002230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002232:	68fb      	ldr	r3, [r7, #12]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20002800 	.word	0x20002800
 8002240:	00000400 	.word	0x00000400
 8002244:	200000c4 	.word	0x200000c4
 8002248:	20000370 	.word	0x20000370

0800224c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002258:	480c      	ldr	r0, [pc, #48]	; (800228c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800225a:	490d      	ldr	r1, [pc, #52]	; (8002290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002260:	e002      	b.n	8002268 <LoopCopyDataInit>

08002262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002266:	3304      	adds	r3, #4

08002268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800226c:	d3f9      	bcc.n	8002262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002270:	4c0a      	ldr	r4, [pc, #40]	; (800229c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002274:	e001      	b.n	800227a <LoopFillZerobss>

08002276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002278:	3204      	adds	r2, #4

0800227a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800227c:	d3fb      	bcc.n	8002276 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800227e:	f7ff ffe5 	bl	800224c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002282:	f003 f9c5 	bl	8005610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002286:	f7fe fcb3 	bl	8000bf0 <main>
  bx lr
 800228a:	4770      	bx	lr
  ldr r0, =_sdata
 800228c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002290:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002294:	08005fc0 	.word	0x08005fc0
  ldr r2, =_sbss
 8002298:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800229c:	20000370 	.word	0x20000370

080022a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022a0:	e7fe      	b.n	80022a0 <ADC1_2_IRQHandler>
	...

080022a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_Init+0x28>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_Init+0x28>)
 80022ae:	f043 0310 	orr.w	r3, r3, #16
 80022b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b4:	2003      	movs	r0, #3
 80022b6:	f000 f947 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ba:	200f      	movs	r0, #15
 80022bc:	f000 f808 	bl	80022d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c0:	f7ff fcee 	bl	8001ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40022000 	.word	0x40022000

080022d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_InitTick+0x54>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_InitTick+0x58>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f95f 	bl	80025b2 <HAL_SYSTICK_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00e      	b.n	800231c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d80a      	bhi.n	800231a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002304:	2200      	movs	r2, #0
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f000 f927 	bl	800255e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <HAL_InitTick+0x5c>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000000 	.word	0x20000000
 8002328:	20000008 	.word	0x20000008
 800232c:	20000004 	.word	0x20000004

08002330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_IncTick+0x1c>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_IncTick+0x20>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a03      	ldr	r2, [pc, #12]	; (8002350 <HAL_IncTick+0x20>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	20000008 	.word	0x20000008
 8002350:	2000035c 	.word	0x2000035c

08002354 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return uwTick;
 8002358:	4b02      	ldr	r3, [pc, #8]	; (8002364 <HAL_GetTick+0x10>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	2000035c 	.word	0x2000035c

08002368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff fff0 	bl	8002354 <HAL_GetTick>
 8002374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d005      	beq.n	800238e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_Delay+0x44>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800238e:	bf00      	nop
 8002390:	f7ff ffe0 	bl	8002354 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	429a      	cmp	r2, r3
 800239e:	d8f7      	bhi.n	8002390 <HAL_Delay+0x28>
  {
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000008 	.word	0x20000008

080023b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	60d3      	str	r3, [r2, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <__NVIC_GetPriorityGrouping+0x18>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0307 	and.w	r3, r3, #7
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	2b00      	cmp	r3, #0
 8002424:	db0b      	blt.n	800243e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4906      	ldr	r1, [pc, #24]	; (8002448 <__NVIC_EnableIRQ+0x34>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2001      	movs	r0, #1
 8002436:	fa00 f202 	lsl.w	r2, r0, r2
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f1c3 0307 	rsb	r3, r3, #7
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf28      	it	cs
 80024be:	2304      	movcs	r3, #4
 80024c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d902      	bls.n	80024d0 <NVIC_EncodePriority+0x30>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	e000      	b.n	80024d2 <NVIC_EncodePriority+0x32>
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	4313      	orrs	r3, r2
         );
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002514:	d301      	bcc.n	800251a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002516:	2301      	movs	r3, #1
 8002518:	e00f      	b.n	800253a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <SysTick_Config+0x40>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002522:	210f      	movs	r1, #15
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f7ff ff90 	bl	800244c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <SysTick_Config+0x40>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <SysTick_Config+0x40>)
 8002534:	2207      	movs	r2, #7
 8002536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff2d 	bl	80023b0 <__NVIC_SetPriorityGrouping>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002570:	f7ff ff42 	bl	80023f8 <__NVIC_GetPriorityGrouping>
 8002574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7ff ff90 	bl	80024a0 <NVIC_EncodePriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff5f 	bl	800244c <__NVIC_SetPriority>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff35 	bl	8002414 <__NVIC_EnableIRQ>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffa2 	bl	8002504 <SysTick_Config>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e043      	b.n	800266a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b22      	ldr	r3, [pc, #136]	; (8002674 <HAL_DMA_Init+0xa8>)
 80025ea:	4413      	add	r3, r2
 80025ec:	4a22      	ldr	r2, [pc, #136]	; (8002678 <HAL_DMA_Init+0xac>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	009a      	lsls	r2, r3, #2
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a1f      	ldr	r2, [pc, #124]	; (800267c <HAL_DMA_Init+0xb0>)
 80025fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002616:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800261a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	bffdfff8 	.word	0xbffdfff8
 8002678:	cccccccd 	.word	0xcccccccd
 800267c:	40020000 	.word	0x40020000

08002680 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_DMA_Start_IT+0x20>
 800269c:	2302      	movs	r3, #2
 800269e:	e04a      	b.n	8002736 <HAL_DMA_Start_IT+0xb6>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d13a      	bne.n	8002728 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2202      	movs	r2, #2
 80026b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f9e8 	bl	8002aac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 020e 	orr.w	r2, r2, #14
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	e00f      	b.n	8002716 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0204 	bic.w	r2, r2, #4
 8002704:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 020a 	orr.w	r2, r2, #10
 8002714:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0201 	orr.w	r2, r2, #1
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e005      	b.n	8002734 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002730:	2302      	movs	r3, #2
 8002732:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002734:	7dfb      	ldrb	r3, [r7, #23]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002750:	2b02      	cmp	r3, #2
 8002752:	d008      	beq.n	8002766 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2204      	movs	r2, #4
 8002758:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e020      	b.n	80027a8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 020e 	bic.w	r2, r2, #14
 8002774:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0201 	bic.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f202 	lsl.w	r2, r1, r2
 8002794:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d005      	beq.n	80027d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2204      	movs	r2, #4
 80027ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
 80027d4:	e051      	b.n	800287a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 020e 	bic.w	r2, r2, #14
 80027e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a22      	ldr	r2, [pc, #136]	; (8002884 <HAL_DMA_Abort_IT+0xd0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d029      	beq.n	8002854 <HAL_DMA_Abort_IT+0xa0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a20      	ldr	r2, [pc, #128]	; (8002888 <HAL_DMA_Abort_IT+0xd4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d022      	beq.n	8002850 <HAL_DMA_Abort_IT+0x9c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1f      	ldr	r2, [pc, #124]	; (800288c <HAL_DMA_Abort_IT+0xd8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d01a      	beq.n	800284a <HAL_DMA_Abort_IT+0x96>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <HAL_DMA_Abort_IT+0xdc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d012      	beq.n	8002844 <HAL_DMA_Abort_IT+0x90>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <HAL_DMA_Abort_IT+0xe0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00a      	beq.n	800283e <HAL_DMA_Abort_IT+0x8a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1a      	ldr	r2, [pc, #104]	; (8002898 <HAL_DMA_Abort_IT+0xe4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d102      	bne.n	8002838 <HAL_DMA_Abort_IT+0x84>
 8002832:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002836:	e00e      	b.n	8002856 <HAL_DMA_Abort_IT+0xa2>
 8002838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800283c:	e00b      	b.n	8002856 <HAL_DMA_Abort_IT+0xa2>
 800283e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002842:	e008      	b.n	8002856 <HAL_DMA_Abort_IT+0xa2>
 8002844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002848:	e005      	b.n	8002856 <HAL_DMA_Abort_IT+0xa2>
 800284a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800284e:	e002      	b.n	8002856 <HAL_DMA_Abort_IT+0xa2>
 8002850:	2310      	movs	r3, #16
 8002852:	e000      	b.n	8002856 <HAL_DMA_Abort_IT+0xa2>
 8002854:	2301      	movs	r3, #1
 8002856:	4a11      	ldr	r2, [pc, #68]	; (800289c <HAL_DMA_Abort_IT+0xe8>)
 8002858:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
    } 
  }
  return status;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40020008 	.word	0x40020008
 8002888:	4002001c 	.word	0x4002001c
 800288c:	40020030 	.word	0x40020030
 8002890:	40020044 	.word	0x40020044
 8002894:	40020058 	.word	0x40020058
 8002898:	4002006c 	.word	0x4002006c
 800289c:	40020000 	.word	0x40020000

080028a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	2204      	movs	r2, #4
 80028be:	409a      	lsls	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d04f      	beq.n	8002968 <HAL_DMA_IRQHandler+0xc8>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d04a      	beq.n	8002968 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0204 	bic.w	r2, r2, #4
 80028ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a66      	ldr	r2, [pc, #408]	; (8002a90 <HAL_DMA_IRQHandler+0x1f0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d029      	beq.n	800294e <HAL_DMA_IRQHandler+0xae>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a65      	ldr	r2, [pc, #404]	; (8002a94 <HAL_DMA_IRQHandler+0x1f4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d022      	beq.n	800294a <HAL_DMA_IRQHandler+0xaa>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a63      	ldr	r2, [pc, #396]	; (8002a98 <HAL_DMA_IRQHandler+0x1f8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01a      	beq.n	8002944 <HAL_DMA_IRQHandler+0xa4>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a62      	ldr	r2, [pc, #392]	; (8002a9c <HAL_DMA_IRQHandler+0x1fc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d012      	beq.n	800293e <HAL_DMA_IRQHandler+0x9e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a60      	ldr	r2, [pc, #384]	; (8002aa0 <HAL_DMA_IRQHandler+0x200>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00a      	beq.n	8002938 <HAL_DMA_IRQHandler+0x98>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a5f      	ldr	r2, [pc, #380]	; (8002aa4 <HAL_DMA_IRQHandler+0x204>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d102      	bne.n	8002932 <HAL_DMA_IRQHandler+0x92>
 800292c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002930:	e00e      	b.n	8002950 <HAL_DMA_IRQHandler+0xb0>
 8002932:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002936:	e00b      	b.n	8002950 <HAL_DMA_IRQHandler+0xb0>
 8002938:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800293c:	e008      	b.n	8002950 <HAL_DMA_IRQHandler+0xb0>
 800293e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002942:	e005      	b.n	8002950 <HAL_DMA_IRQHandler+0xb0>
 8002944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002948:	e002      	b.n	8002950 <HAL_DMA_IRQHandler+0xb0>
 800294a:	2340      	movs	r3, #64	; 0x40
 800294c:	e000      	b.n	8002950 <HAL_DMA_IRQHandler+0xb0>
 800294e:	2304      	movs	r3, #4
 8002950:	4a55      	ldr	r2, [pc, #340]	; (8002aa8 <HAL_DMA_IRQHandler+0x208>)
 8002952:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8094 	beq.w	8002a86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002966:	e08e      	b.n	8002a86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2202      	movs	r2, #2
 800296e:	409a      	lsls	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d056      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x186>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d051      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10b      	bne.n	80029a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 020a 	bic.w	r2, r2, #10
 800299e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a38      	ldr	r2, [pc, #224]	; (8002a90 <HAL_DMA_IRQHandler+0x1f0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d029      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x166>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a37      	ldr	r2, [pc, #220]	; (8002a94 <HAL_DMA_IRQHandler+0x1f4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d022      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x162>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a35      	ldr	r2, [pc, #212]	; (8002a98 <HAL_DMA_IRQHandler+0x1f8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d01a      	beq.n	80029fc <HAL_DMA_IRQHandler+0x15c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a34      	ldr	r2, [pc, #208]	; (8002a9c <HAL_DMA_IRQHandler+0x1fc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d012      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x156>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a32      	ldr	r2, [pc, #200]	; (8002aa0 <HAL_DMA_IRQHandler+0x200>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00a      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x150>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a31      	ldr	r2, [pc, #196]	; (8002aa4 <HAL_DMA_IRQHandler+0x204>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d102      	bne.n	80029ea <HAL_DMA_IRQHandler+0x14a>
 80029e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029e8:	e00e      	b.n	8002a08 <HAL_DMA_IRQHandler+0x168>
 80029ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ee:	e00b      	b.n	8002a08 <HAL_DMA_IRQHandler+0x168>
 80029f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f4:	e008      	b.n	8002a08 <HAL_DMA_IRQHandler+0x168>
 80029f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029fa:	e005      	b.n	8002a08 <HAL_DMA_IRQHandler+0x168>
 80029fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a00:	e002      	b.n	8002a08 <HAL_DMA_IRQHandler+0x168>
 8002a02:	2320      	movs	r3, #32
 8002a04:	e000      	b.n	8002a08 <HAL_DMA_IRQHandler+0x168>
 8002a06:	2302      	movs	r3, #2
 8002a08:	4a27      	ldr	r2, [pc, #156]	; (8002aa8 <HAL_DMA_IRQHandler+0x208>)
 8002a0a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d034      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a24:	e02f      	b.n	8002a86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d028      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x1e8>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d023      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 020e 	bic.w	r2, r2, #14
 8002a4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	2101      	movs	r1, #1
 8002a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d004      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
    }
  }
  return;
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
}
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40020008 	.word	0x40020008
 8002a94:	4002001c 	.word	0x4002001c
 8002a98:	40020030 	.word	0x40020030
 8002a9c:	40020044 	.word	0x40020044
 8002aa0:	40020058 	.word	0x40020058
 8002aa4:	4002006c 	.word	0x4002006c
 8002aa8:	40020000 	.word	0x40020000

08002aac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d108      	bne.n	8002aec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002aea:	e007      	b.n	8002afc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	60da      	str	r2, [r3, #12]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
	...

08002b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b08b      	sub	sp, #44	; 0x2c
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1a:	e148      	b.n	8002dae <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f040 8137 	bne.w	8002da8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4aa3      	ldr	r2, [pc, #652]	; (8002dcc <HAL_GPIO_Init+0x2c4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d05e      	beq.n	8002c02 <HAL_GPIO_Init+0xfa>
 8002b44:	4aa1      	ldr	r2, [pc, #644]	; (8002dcc <HAL_GPIO_Init+0x2c4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d875      	bhi.n	8002c36 <HAL_GPIO_Init+0x12e>
 8002b4a:	4aa1      	ldr	r2, [pc, #644]	; (8002dd0 <HAL_GPIO_Init+0x2c8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d058      	beq.n	8002c02 <HAL_GPIO_Init+0xfa>
 8002b50:	4a9f      	ldr	r2, [pc, #636]	; (8002dd0 <HAL_GPIO_Init+0x2c8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d86f      	bhi.n	8002c36 <HAL_GPIO_Init+0x12e>
 8002b56:	4a9f      	ldr	r2, [pc, #636]	; (8002dd4 <HAL_GPIO_Init+0x2cc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d052      	beq.n	8002c02 <HAL_GPIO_Init+0xfa>
 8002b5c:	4a9d      	ldr	r2, [pc, #628]	; (8002dd4 <HAL_GPIO_Init+0x2cc>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d869      	bhi.n	8002c36 <HAL_GPIO_Init+0x12e>
 8002b62:	4a9d      	ldr	r2, [pc, #628]	; (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d04c      	beq.n	8002c02 <HAL_GPIO_Init+0xfa>
 8002b68:	4a9b      	ldr	r2, [pc, #620]	; (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d863      	bhi.n	8002c36 <HAL_GPIO_Init+0x12e>
 8002b6e:	4a9b      	ldr	r2, [pc, #620]	; (8002ddc <HAL_GPIO_Init+0x2d4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d046      	beq.n	8002c02 <HAL_GPIO_Init+0xfa>
 8002b74:	4a99      	ldr	r2, [pc, #612]	; (8002ddc <HAL_GPIO_Init+0x2d4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d85d      	bhi.n	8002c36 <HAL_GPIO_Init+0x12e>
 8002b7a:	2b12      	cmp	r3, #18
 8002b7c:	d82a      	bhi.n	8002bd4 <HAL_GPIO_Init+0xcc>
 8002b7e:	2b12      	cmp	r3, #18
 8002b80:	d859      	bhi.n	8002c36 <HAL_GPIO_Init+0x12e>
 8002b82:	a201      	add	r2, pc, #4	; (adr r2, 8002b88 <HAL_GPIO_Init+0x80>)
 8002b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b88:	08002c03 	.word	0x08002c03
 8002b8c:	08002bdd 	.word	0x08002bdd
 8002b90:	08002bef 	.word	0x08002bef
 8002b94:	08002c31 	.word	0x08002c31
 8002b98:	08002c37 	.word	0x08002c37
 8002b9c:	08002c37 	.word	0x08002c37
 8002ba0:	08002c37 	.word	0x08002c37
 8002ba4:	08002c37 	.word	0x08002c37
 8002ba8:	08002c37 	.word	0x08002c37
 8002bac:	08002c37 	.word	0x08002c37
 8002bb0:	08002c37 	.word	0x08002c37
 8002bb4:	08002c37 	.word	0x08002c37
 8002bb8:	08002c37 	.word	0x08002c37
 8002bbc:	08002c37 	.word	0x08002c37
 8002bc0:	08002c37 	.word	0x08002c37
 8002bc4:	08002c37 	.word	0x08002c37
 8002bc8:	08002c37 	.word	0x08002c37
 8002bcc:	08002be5 	.word	0x08002be5
 8002bd0:	08002bf9 	.word	0x08002bf9
 8002bd4:	4a82      	ldr	r2, [pc, #520]	; (8002de0 <HAL_GPIO_Init+0x2d8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bda:	e02c      	b.n	8002c36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	623b      	str	r3, [r7, #32]
          break;
 8002be2:	e029      	b.n	8002c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	3304      	adds	r3, #4
 8002bea:	623b      	str	r3, [r7, #32]
          break;
 8002bec:	e024      	b.n	8002c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	3308      	adds	r3, #8
 8002bf4:	623b      	str	r3, [r7, #32]
          break;
 8002bf6:	e01f      	b.n	8002c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	623b      	str	r3, [r7, #32]
          break;
 8002c00:	e01a      	b.n	8002c38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d102      	bne.n	8002c10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	623b      	str	r3, [r7, #32]
          break;
 8002c0e:	e013      	b.n	8002c38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d105      	bne.n	8002c24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c18:	2308      	movs	r3, #8
 8002c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	611a      	str	r2, [r3, #16]
          break;
 8002c22:	e009      	b.n	8002c38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c24:	2308      	movs	r3, #8
 8002c26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	615a      	str	r2, [r3, #20]
          break;
 8002c2e:	e003      	b.n	8002c38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c30:	2300      	movs	r3, #0
 8002c32:	623b      	str	r3, [r7, #32]
          break;
 8002c34:	e000      	b.n	8002c38 <HAL_GPIO_Init+0x130>
          break;
 8002c36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2bff      	cmp	r3, #255	; 0xff
 8002c3c:	d801      	bhi.n	8002c42 <HAL_GPIO_Init+0x13a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	e001      	b.n	8002c46 <HAL_GPIO_Init+0x13e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3304      	adds	r3, #4
 8002c46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2bff      	cmp	r3, #255	; 0xff
 8002c4c:	d802      	bhi.n	8002c54 <HAL_GPIO_Init+0x14c>
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	e002      	b.n	8002c5a <HAL_GPIO_Init+0x152>
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	3b08      	subs	r3, #8
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	210f      	movs	r1, #15
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	6a39      	ldr	r1, [r7, #32]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	431a      	orrs	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8090 	beq.w	8002da8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c88:	4b56      	ldr	r3, [pc, #344]	; (8002de4 <HAL_GPIO_Init+0x2dc>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	4a55      	ldr	r2, [pc, #340]	; (8002de4 <HAL_GPIO_Init+0x2dc>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6193      	str	r3, [r2, #24]
 8002c94:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <HAL_GPIO_Init+0x2dc>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ca0:	4a51      	ldr	r2, [pc, #324]	; (8002de8 <HAL_GPIO_Init+0x2e0>)
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	220f      	movs	r2, #15
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a49      	ldr	r2, [pc, #292]	; (8002dec <HAL_GPIO_Init+0x2e4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00d      	beq.n	8002ce8 <HAL_GPIO_Init+0x1e0>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a48      	ldr	r2, [pc, #288]	; (8002df0 <HAL_GPIO_Init+0x2e8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d007      	beq.n	8002ce4 <HAL_GPIO_Init+0x1dc>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a47      	ldr	r2, [pc, #284]	; (8002df4 <HAL_GPIO_Init+0x2ec>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d101      	bne.n	8002ce0 <HAL_GPIO_Init+0x1d8>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e004      	b.n	8002cea <HAL_GPIO_Init+0x1e2>
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e002      	b.n	8002cea <HAL_GPIO_Init+0x1e2>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_GPIO_Init+0x1e2>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cec:	f002 0203 	and.w	r2, r2, #3
 8002cf0:	0092      	lsls	r2, r2, #2
 8002cf2:	4093      	lsls	r3, r2
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cfa:	493b      	ldr	r1, [pc, #236]	; (8002de8 <HAL_GPIO_Init+0x2e0>)
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	3302      	adds	r3, #2
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d006      	beq.n	8002d22 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d14:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4937      	ldr	r1, [pc, #220]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]
 8002d20:	e006      	b.n	8002d30 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d22:	4b35      	ldr	r3, [pc, #212]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	4933      	ldr	r1, [pc, #204]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d3c:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	492d      	ldr	r1, [pc, #180]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
 8002d48:	e006      	b.n	8002d58 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d4a:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	4929      	ldr	r1, [pc, #164]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d64:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	4923      	ldr	r1, [pc, #140]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	608b      	str	r3, [r1, #8]
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d72:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	491f      	ldr	r1, [pc, #124]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d006      	beq.n	8002d9a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	4919      	ldr	r1, [pc, #100]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60cb      	str	r3, [r1, #12]
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d9a:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	4915      	ldr	r1, [pc, #84]	; (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	3301      	adds	r3, #1
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f47f aeaf 	bne.w	8002b1c <HAL_GPIO_Init+0x14>
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	372c      	adds	r7, #44	; 0x2c
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	10320000 	.word	0x10320000
 8002dd0:	10310000 	.word	0x10310000
 8002dd4:	10220000 	.word	0x10220000
 8002dd8:	10210000 	.word	0x10210000
 8002ddc:	10120000 	.word	0x10120000
 8002de0:	10110000 	.word	0x10110000
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40010000 	.word	0x40010000
 8002dec:	40010800 	.word	0x40010800
 8002df0:	40010c00 	.word	0x40010c00
 8002df4:	40011000 	.word	0x40011000
 8002df8:	40010400 	.word	0x40010400

08002dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e0c:	787b      	ldrb	r3, [r7, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e18:	e003      	b.n	8002e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	041a      	lsls	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	611a      	str	r2, [r3, #16]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e42:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f806 	bl	8002e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40010400 	.word	0x40010400

08002e5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e26c      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 8087 	beq.w	8002f9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e90:	4b92      	ldr	r3, [pc, #584]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d00c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e9c:	4b8f      	ldr	r3, [pc, #572]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d112      	bne.n	8002ece <HAL_RCC_OscConfig+0x5e>
 8002ea8:	4b8c      	ldr	r3, [pc, #560]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d10b      	bne.n	8002ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb6:	4b89      	ldr	r3, [pc, #548]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d06c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x12c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d168      	bne.n	8002f9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e246      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x76>
 8002ed8:	4b80      	ldr	r3, [pc, #512]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a7f      	ldr	r2, [pc, #508]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	e02e      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x98>
 8002eee:	4b7b      	ldr	r3, [pc, #492]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a7a      	ldr	r2, [pc, #488]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b78      	ldr	r3, [pc, #480]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a77      	ldr	r2, [pc, #476]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e01d      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0xbc>
 8002f12:	4b72      	ldr	r3, [pc, #456]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a71      	ldr	r2, [pc, #452]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002f2c:	4b6b      	ldr	r3, [pc, #428]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6a      	ldr	r2, [pc, #424]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a67      	ldr	r2, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7ff fa02 	bl	8002354 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f54:	f7ff f9fe 	bl	8002354 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e1fa      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	4b5d      	ldr	r3, [pc, #372]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0xe4>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7ff f9ee 	bl	8002354 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7ff f9ea 	bl	8002354 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1e6      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	4b53      	ldr	r3, [pc, #332]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x10c>
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d063      	beq.n	8003072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002faa:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fb6:	4b49      	ldr	r3, [pc, #292]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d11c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x18c>
 8002fc2:	4b46      	ldr	r3, [pc, #280]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d116      	bne.n	8002ffc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fce:	4b43      	ldr	r3, [pc, #268]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x176>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e1ba      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4939      	ldr	r1, [pc, #228]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	e03a      	b.n	8003072 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d020      	beq.n	8003046 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003004:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7ff f9a3 	bl	8002354 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003012:	f7ff f99f 	bl	8002354 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e19b      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003030:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4927      	ldr	r1, [pc, #156]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003040:	4313      	orrs	r3, r2
 8003042:	600b      	str	r3, [r1, #0]
 8003044:	e015      	b.n	8003072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7ff f982 	bl	8002354 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003054:	f7ff f97e 	bl	8002354 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e17a      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d03a      	beq.n	80030f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d019      	beq.n	80030ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_RCC_OscConfig+0x274>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308c:	f7ff f962 	bl	8002354 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003094:	f7ff f95e 	bl	8002354 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e15a      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030b2:	2001      	movs	r0, #1
 80030b4:	f000 fad8 	bl	8003668 <RCC_Delay>
 80030b8:	e01c      	b.n	80030f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_RCC_OscConfig+0x274>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7ff f948 	bl	8002354 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c6:	e00f      	b.n	80030e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c8:	f7ff f944 	bl	8002354 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d908      	bls.n	80030e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e140      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	42420000 	.word	0x42420000
 80030e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	4b9e      	ldr	r3, [pc, #632]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e9      	bne.n	80030c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a6 	beq.w	800324e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003106:	4b97      	ldr	r3, [pc, #604]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10d      	bne.n	800312e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	4b94      	ldr	r3, [pc, #592]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	4a93      	ldr	r2, [pc, #588]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311c:	61d3      	str	r3, [r2, #28]
 800311e:	4b91      	ldr	r3, [pc, #580]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312e:	4b8e      	ldr	r3, [pc, #568]	; (8003368 <HAL_RCC_OscConfig+0x4f8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d118      	bne.n	800316c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313a:	4b8b      	ldr	r3, [pc, #556]	; (8003368 <HAL_RCC_OscConfig+0x4f8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a8a      	ldr	r2, [pc, #552]	; (8003368 <HAL_RCC_OscConfig+0x4f8>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003146:	f7ff f905 	bl	8002354 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7ff f901 	bl	8002354 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b64      	cmp	r3, #100	; 0x64
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e0fd      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	4b81      	ldr	r3, [pc, #516]	; (8003368 <HAL_RCC_OscConfig+0x4f8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x312>
 8003174:	4b7b      	ldr	r3, [pc, #492]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	4a7a      	ldr	r2, [pc, #488]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6213      	str	r3, [r2, #32]
 8003180:	e02d      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x334>
 800318a:	4b76      	ldr	r3, [pc, #472]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4a75      	ldr	r2, [pc, #468]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	6213      	str	r3, [r2, #32]
 8003196:	4b73      	ldr	r3, [pc, #460]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4a72      	ldr	r2, [pc, #456]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 800319c:	f023 0304 	bic.w	r3, r3, #4
 80031a0:	6213      	str	r3, [r2, #32]
 80031a2:	e01c      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x356>
 80031ac:	4b6d      	ldr	r3, [pc, #436]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a6c      	ldr	r2, [pc, #432]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	4b6a      	ldr	r3, [pc, #424]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4a69      	ldr	r2, [pc, #420]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6213      	str	r3, [r2, #32]
 80031c4:	e00b      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 80031c6:	4b67      	ldr	r3, [pc, #412]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4a66      	ldr	r2, [pc, #408]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	6213      	str	r3, [r2, #32]
 80031d2:	4b64      	ldr	r3, [pc, #400]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4a63      	ldr	r2, [pc, #396]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031d8:	f023 0304 	bic.w	r3, r3, #4
 80031dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d015      	beq.n	8003212 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e6:	f7ff f8b5 	bl	8002354 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7ff f8b1 	bl	8002354 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0ab      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	4b57      	ldr	r3, [pc, #348]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ee      	beq.n	80031ee <HAL_RCC_OscConfig+0x37e>
 8003210:	e014      	b.n	800323c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7ff f89f 	bl	8002354 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7ff f89b 	bl	8002354 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e095      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1ee      	bne.n	800321a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d105      	bne.n	800324e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003242:	4b48      	ldr	r3, [pc, #288]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4a47      	ldr	r2, [pc, #284]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8081 	beq.w	800335a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003258:	4b42      	ldr	r3, [pc, #264]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b08      	cmp	r3, #8
 8003262:	d061      	beq.n	8003328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d146      	bne.n	80032fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326c:	4b3f      	ldr	r3, [pc, #252]	; (800336c <HAL_RCC_OscConfig+0x4fc>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7ff f86f 	bl	8002354 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327a:	f7ff f86b 	bl	8002354 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e067      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328c:	4b35      	ldr	r3, [pc, #212]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d108      	bne.n	80032b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032a2:	4b30      	ldr	r3, [pc, #192]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	492d      	ldr	r1, [pc, #180]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b4:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a19      	ldr	r1, [r3, #32]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	430b      	orrs	r3, r1
 80032c6:	4927      	ldr	r1, [pc, #156]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032cc:	4b27      	ldr	r3, [pc, #156]	; (800336c <HAL_RCC_OscConfig+0x4fc>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7ff f83f 	bl	8002354 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032da:	f7ff f83b 	bl	8002354 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e037      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x46a>
 80032f8:	e02f      	b.n	800335a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fa:	4b1c      	ldr	r3, [pc, #112]	; (800336c <HAL_RCC_OscConfig+0x4fc>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7ff f828 	bl	8002354 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003308:	f7ff f824 	bl	8002354 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e020      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x498>
 8003326:	e018      	b.n	800335a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e013      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	429a      	cmp	r2, r3
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	40007000 	.word	0x40007000
 800336c:	42420060 	.word	0x42420060

08003370 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0d0      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003384:	4b6a      	ldr	r3, [pc, #424]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d910      	bls.n	80033b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b67      	ldr	r3, [pc, #412]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 0207 	bic.w	r2, r3, #7
 800339a:	4965      	ldr	r1, [pc, #404]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	4313      	orrs	r3, r2
 80033a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	4b63      	ldr	r3, [pc, #396]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0b8      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d020      	beq.n	8003402 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033cc:	4b59      	ldr	r3, [pc, #356]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4a58      	ldr	r2, [pc, #352]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e4:	4b53      	ldr	r3, [pc, #332]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4a52      	ldr	r2, [pc, #328]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f0:	4b50      	ldr	r3, [pc, #320]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	494d      	ldr	r1, [pc, #308]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d040      	beq.n	8003490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b47      	ldr	r3, [pc, #284]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d115      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e07f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	4b41      	ldr	r3, [pc, #260]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e073      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343e:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e06b      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344e:	4b39      	ldr	r3, [pc, #228]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4936      	ldr	r1, [pc, #216]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003460:	f7fe ff78 	bl	8002354 <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	e00a      	b.n	800347e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003468:	f7fe ff74 	bl	8002354 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e053      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 020c 	and.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	429a      	cmp	r2, r3
 800348e:	d1eb      	bne.n	8003468 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003490:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d210      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b24      	ldr	r3, [pc, #144]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 0207 	bic.w	r2, r3, #7
 80034a6:	4922      	ldr	r1, [pc, #136]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b20      	ldr	r3, [pc, #128]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e032      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034cc:	4b19      	ldr	r3, [pc, #100]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4916      	ldr	r1, [pc, #88]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ea:	4b12      	ldr	r3, [pc, #72]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	490e      	ldr	r1, [pc, #56]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034fe:	f000 f821 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8003502:	4602      	mov	r2, r0
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	490a      	ldr	r1, [pc, #40]	; (8003538 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	5ccb      	ldrb	r3, [r1, r3]
 8003512:	fa22 f303 	lsr.w	r3, r2, r3
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_RCC_ClockConfig+0x1cc>)
 8003518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_ClockConfig+0x1d0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe fed6 	bl	80022d0 <HAL_InitTick>

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40022000 	.word	0x40022000
 8003534:	40021000 	.word	0x40021000
 8003538:	08005f6c 	.word	0x08005f6c
 800353c:	20000000 	.word	0x20000000
 8003540:	20000004 	.word	0x20000004

08003544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003544:	b490      	push	{r4, r7}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800354a:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800354c:	1d3c      	adds	r4, r7, #4
 800354e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003554:	f240 2301 	movw	r3, #513	; 0x201
 8003558:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800356e:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b04      	cmp	r3, #4
 800357c:	d002      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x40>
 800357e:	2b08      	cmp	r3, #8
 8003580:	d003      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0x46>
 8003582:	e02d      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003584:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003586:	623b      	str	r3, [r7, #32]
      break;
 8003588:	e02d      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	0c9b      	lsrs	r3, r3, #18
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003596:	4413      	add	r3, r2
 8003598:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800359c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d013      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035a8:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	0c5b      	lsrs	r3, r3, #17
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035b6:	4413      	add	r3, r2
 80035b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c2:	fb02 f203 	mul.w	r2, r2, r3
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
 80035ce:	e004      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	4a0b      	ldr	r2, [pc, #44]	; (8003600 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	623b      	str	r3, [r7, #32]
      break;
 80035de:	e002      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035e0:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80035e2:	623b      	str	r3, [r7, #32]
      break;
 80035e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e6:	6a3b      	ldr	r3, [r7, #32]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3728      	adds	r7, #40	; 0x28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc90      	pop	{r4, r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	08005f44 	.word	0x08005f44
 80035f8:	40021000 	.word	0x40021000
 80035fc:	007a1200 	.word	0x007a1200
 8003600:	003d0900 	.word	0x003d0900

08003604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003608:	4b02      	ldr	r3, [pc, #8]	; (8003614 <HAL_RCC_GetHCLKFreq+0x10>)
 800360a:	681b      	ldr	r3, [r3, #0]
}
 800360c:	4618      	mov	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	20000000 	.word	0x20000000

08003618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800361c:	f7ff fff2 	bl	8003604 <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	0a1b      	lsrs	r3, r3, #8
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4903      	ldr	r1, [pc, #12]	; (800363c <HAL_RCC_GetPCLK1Freq+0x24>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	08005f7c 	.word	0x08005f7c

08003640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003644:	f7ff ffde 	bl	8003604 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	0adb      	lsrs	r3, r3, #11
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4903      	ldr	r1, [pc, #12]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000
 8003664:	08005f7c 	.word	0x08005f7c

08003668 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <RCC_Delay+0x34>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <RCC_Delay+0x38>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	0a5b      	lsrs	r3, r3, #9
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003684:	bf00      	nop
  }
  while (Delay --);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1e5a      	subs	r2, r3, #1
 800368a:	60fa      	str	r2, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f9      	bne.n	8003684 <RCC_Delay+0x1c>
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr
 800369c:	20000000 	.word	0x20000000
 80036a0:	10624dd3 	.word	0x10624dd3

080036a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e076      	b.n	80037a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d108      	bne.n	80036d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036c6:	d009      	beq.n	80036dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	61da      	str	r2, [r3, #28]
 80036ce:	e005      	b.n	80036dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe fb04 	bl	8001d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003712:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003760:	ea42 0103 	orr.w	r1, r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	0c1a      	lsrs	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f002 0204 	and.w	r2, r2, #4
 8003782:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003792:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_SPI_Transmit+0x22>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e126      	b.n	8003a1c <HAL_SPI_Transmit+0x270>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037d6:	f7fe fdbd 	bl	8002354 <HAL_GetTick>
 80037da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d002      	beq.n	80037f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
 80037ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037f0:	e10b      	b.n	8003a0a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_SPI_Transmit+0x52>
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d102      	bne.n	8003804 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003802:	e102      	b.n	8003a0a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2203      	movs	r2, #3
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	88fa      	ldrh	r2, [r7, #6]
 800381c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	88fa      	ldrh	r2, [r7, #6]
 8003822:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384a:	d10f      	bne.n	800386c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800386a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d007      	beq.n	800388a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003888:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003892:	d14b      	bne.n	800392c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_SPI_Transmit+0xf6>
 800389c:	8afb      	ldrh	r3, [r7, #22]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d13e      	bne.n	8003920 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	881a      	ldrh	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	1c9a      	adds	r2, r3, #2
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038c6:	e02b      	b.n	8003920 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d112      	bne.n	80038fc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	881a      	ldrh	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	1c9a      	adds	r2, r3, #2
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80038fa:	e011      	b.n	8003920 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038fc:	f7fe fd2a 	bl	8002354 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d803      	bhi.n	8003914 <HAL_SPI_Transmit+0x168>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003912:	d102      	bne.n	800391a <HAL_SPI_Transmit+0x16e>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800391e:	e074      	b.n	8003a0a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1ce      	bne.n	80038c8 <HAL_SPI_Transmit+0x11c>
 800392a:	e04c      	b.n	80039c6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_SPI_Transmit+0x18e>
 8003934:	8afb      	ldrh	r3, [r7, #22]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d140      	bne.n	80039bc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	330c      	adds	r3, #12
 8003944:	7812      	ldrb	r2, [r2, #0]
 8003946:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003960:	e02c      	b.n	80039bc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b02      	cmp	r3, #2
 800396e:	d113      	bne.n	8003998 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	7812      	ldrb	r2, [r2, #0]
 800397c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	86da      	strh	r2, [r3, #54]	; 0x36
 8003996:	e011      	b.n	80039bc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003998:	f7fe fcdc 	bl	8002354 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d803      	bhi.n	80039b0 <HAL_SPI_Transmit+0x204>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ae:	d102      	bne.n	80039b6 <HAL_SPI_Transmit+0x20a>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d102      	bne.n	80039bc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039ba:	e026      	b.n	8003a0a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1cd      	bne.n	8003962 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 fbb8 	bl	8004140 <SPI_EndRxTxTransaction>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039e4:	2300      	movs	r3, #0
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e000      	b.n	8003a0a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3720      	adds	r7, #32
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a40:	d112      	bne.n	8003a68 <HAL_SPI_Receive+0x44>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10e      	bne.n	8003a68 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f8f1 	bl	8003c46 <HAL_SPI_TransmitReceive>
 8003a64:	4603      	mov	r3, r0
 8003a66:	e0ea      	b.n	8003c3e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_SPI_Receive+0x52>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e0e3      	b.n	8003c3e <HAL_SPI_Receive+0x21a>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a7e:	f7fe fc69 	bl	8002354 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d002      	beq.n	8003a96 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
 8003a92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a94:	e0ca      	b.n	8003c2c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_SPI_Receive+0x7e>
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d102      	bne.n	8003aa8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003aa6:	e0c1      	b.n	8003c2c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	88fa      	ldrh	r2, [r7, #6]
 8003ac0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	88fa      	ldrh	r2, [r7, #6]
 8003ac6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aee:	d10f      	bne.n	8003b10 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003afe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b0e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	d007      	beq.n	8003b2e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d162      	bne.n	8003bfc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b36:	e02e      	b.n	8003b96 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d115      	bne.n	8003b72 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f103 020c 	add.w	r2, r3, #12
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	7812      	ldrb	r2, [r2, #0]
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b70:	e011      	b.n	8003b96 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b72:	f7fe fbef 	bl	8002354 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d803      	bhi.n	8003b8a <HAL_SPI_Receive+0x166>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d102      	bne.n	8003b90 <HAL_SPI_Receive+0x16c>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b94:	e04a      	b.n	8003c2c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1cb      	bne.n	8003b38 <HAL_SPI_Receive+0x114>
 8003ba0:	e031      	b.n	8003c06 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d113      	bne.n	8003bd8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	b292      	uxth	r2, r2
 8003bbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	1c9a      	adds	r2, r3, #2
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bd6:	e011      	b.n	8003bfc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bd8:	f7fe fbbc 	bl	8002354 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d803      	bhi.n	8003bf0 <HAL_SPI_Receive+0x1cc>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d102      	bne.n	8003bf6 <HAL_SPI_Receive+0x1d2>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d102      	bne.n	8003bfc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bfa:	e017      	b.n	8003c2c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1cd      	bne.n	8003ba2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	6839      	ldr	r1, [r7, #0]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fa46 	bl	800409c <SPI_EndRxTransaction>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	75fb      	strb	r3, [r7, #23]
 8003c28:	e000      	b.n	8003c2c <HAL_SPI_Receive+0x208>
  }

error :
 8003c2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b08c      	sub	sp, #48	; 0x30
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c54:	2301      	movs	r3, #1
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x26>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e18a      	b.n	8003f82 <HAL_SPI_TransmitReceive+0x33c>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c74:	f7fe fb6e 	bl	8002354 <HAL_GetTick>
 8003c78:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c8a:	887b      	ldrh	r3, [r7, #2]
 8003c8c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d00f      	beq.n	8003cb6 <HAL_SPI_TransmitReceive+0x70>
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c9c:	d107      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x68>
 8003ca6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d003      	beq.n	8003cb6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cb4:	e15b      	b.n	8003f6e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_SPI_TransmitReceive+0x82>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_SPI_TransmitReceive+0x82>
 8003cc2:	887b      	ldrh	r3, [r7, #2]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d103      	bne.n	8003cd0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cce:	e14e      	b.n	8003f6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d003      	beq.n	8003ce4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2205      	movs	r2, #5
 8003ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	887a      	ldrh	r2, [r7, #2]
 8003cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	887a      	ldrh	r2, [r7, #2]
 8003cfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	887a      	ldrh	r2, [r7, #2]
 8003d06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d007      	beq.n	8003d38 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d40:	d178      	bne.n	8003e34 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_SPI_TransmitReceive+0x10a>
 8003d4a:	8b7b      	ldrh	r3, [r7, #26]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d166      	bne.n	8003e1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	881a      	ldrh	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	1c9a      	adds	r2, r3, #2
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d74:	e053      	b.n	8003e1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d11b      	bne.n	8003dbc <HAL_SPI_TransmitReceive+0x176>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_SPI_TransmitReceive+0x176>
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d113      	bne.n	8003dbc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	881a      	ldrh	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	1c9a      	adds	r2, r3, #2
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d119      	bne.n	8003dfe <HAL_SPI_TransmitReceive+0x1b8>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d014      	beq.n	8003dfe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	b292      	uxth	r2, r2
 8003de0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	1c9a      	adds	r2, r3, #2
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dfe:	f7fe faa9 	bl	8002354 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d807      	bhi.n	8003e1e <HAL_SPI_TransmitReceive+0x1d8>
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d003      	beq.n	8003e1e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e1c:	e0a7      	b.n	8003f6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1a6      	bne.n	8003d76 <HAL_SPI_TransmitReceive+0x130>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1a1      	bne.n	8003d76 <HAL_SPI_TransmitReceive+0x130>
 8003e32:	e07c      	b.n	8003f2e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <HAL_SPI_TransmitReceive+0x1fc>
 8003e3c:	8b7b      	ldrh	r3, [r7, #26]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d16b      	bne.n	8003f1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	330c      	adds	r3, #12
 8003e4c:	7812      	ldrb	r2, [r2, #0]
 8003e4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e68:	e057      	b.n	8003f1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d11c      	bne.n	8003eb2 <HAL_SPI_TransmitReceive+0x26c>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d017      	beq.n	8003eb2 <HAL_SPI_TransmitReceive+0x26c>
 8003e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d114      	bne.n	8003eb2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	330c      	adds	r3, #12
 8003e92:	7812      	ldrb	r2, [r2, #0]
 8003e94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d119      	bne.n	8003ef4 <HAL_SPI_TransmitReceive+0x2ae>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d014      	beq.n	8003ef4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ef4:	f7fe fa2e 	bl	8002354 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d803      	bhi.n	8003f0c <HAL_SPI_TransmitReceive+0x2c6>
 8003f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0a:	d102      	bne.n	8003f12 <HAL_SPI_TransmitReceive+0x2cc>
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f18:	e029      	b.n	8003f6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1a2      	bne.n	8003e6a <HAL_SPI_TransmitReceive+0x224>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d19d      	bne.n	8003e6a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f904 	bl	8004140 <SPI_EndRxTxTransaction>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d006      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f4a:	e010      	b.n	8003f6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	e000      	b.n	8003f6e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3730      	adds	r7, #48	; 0x30
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f9c:	f7fe f9da 	bl	8002354 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	4413      	add	r3, r2
 8003faa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fac:	f7fe f9d2 	bl	8002354 <HAL_GetTick>
 8003fb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fb2:	4b39      	ldr	r3, [pc, #228]	; (8004098 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	015b      	lsls	r3, r3, #5
 8003fb8:	0d1b      	lsrs	r3, r3, #20
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	fb02 f303 	mul.w	r3, r2, r3
 8003fc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fc2:	e054      	b.n	800406e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fca:	d050      	beq.n	800406e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fcc:	f7fe f9c2 	bl	8002354 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d902      	bls.n	8003fe2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d13d      	bne.n	800405e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ffa:	d111      	bne.n	8004020 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004004:	d004      	beq.n	8004010 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400e:	d107      	bne.n	8004020 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800401e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004028:	d10f      	bne.n	800404a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004048:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e017      	b.n	800408e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	3b01      	subs	r3, #1
 800406c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4013      	ands	r3, r2
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	429a      	cmp	r2, r3
 800407c:	bf0c      	ite	eq
 800407e:	2301      	moveq	r3, #1
 8004080:	2300      	movne	r3, #0
 8004082:	b2db      	uxtb	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	429a      	cmp	r2, r3
 800408a:	d19b      	bne.n	8003fc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000000 	.word	0x20000000

0800409c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b0:	d111      	bne.n	80040d6 <SPI_EndRxTransaction+0x3a>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ba:	d004      	beq.n	80040c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c4:	d107      	bne.n	80040d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040de:	d117      	bne.n	8004110 <SPI_EndRxTransaction+0x74>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e8:	d112      	bne.n	8004110 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2200      	movs	r2, #0
 80040f2:	2101      	movs	r1, #1
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f7ff ff49 	bl	8003f8c <SPI_WaitFlagStateUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01a      	beq.n	8004136 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	f043 0220 	orr.w	r2, r3, #32
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e013      	b.n	8004138 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2200      	movs	r2, #0
 8004118:	2180      	movs	r1, #128	; 0x80
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f7ff ff36 	bl	8003f8c <SPI_WaitFlagStateUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	f043 0220 	orr.w	r2, r3, #32
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e000      	b.n	8004138 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2200      	movs	r2, #0
 8004154:	2180      	movs	r1, #128	; 0x80
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f7ff ff18 	bl	8003f8c <SPI_WaitFlagStateUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	f043 0220 	orr.w	r2, r3, #32
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e000      	b.n	8004174 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e041      	b.n	8004212 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fd fdf8 	bl	8001d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f000 f988 	bl	80044d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <HAL_TIM_PWM_Start+0x24>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	e022      	b.n	8004286 <HAL_TIM_PWM_Start+0x6a>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b04      	cmp	r3, #4
 8004244:	d109      	bne.n	800425a <HAL_TIM_PWM_Start+0x3e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b01      	cmp	r3, #1
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	e015      	b.n	8004286 <HAL_TIM_PWM_Start+0x6a>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d109      	bne.n	8004274 <HAL_TIM_PWM_Start+0x58>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b01      	cmp	r3, #1
 800426a:	bf14      	ite	ne
 800426c:	2301      	movne	r3, #1
 800426e:	2300      	moveq	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	e008      	b.n	8004286 <HAL_TIM_PWM_Start+0x6a>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	bf14      	ite	ne
 8004280:	2301      	movne	r3, #1
 8004282:	2300      	moveq	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e059      	b.n	8004342 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <HAL_TIM_PWM_Start+0x82>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800429c:	e013      	b.n	80042c6 <HAL_TIM_PWM_Start+0xaa>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start+0x92>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ac:	e00b      	b.n	80042c6 <HAL_TIM_PWM_Start+0xaa>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start+0xa2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042bc:	e003      	b.n	80042c6 <HAL_TIM_PWM_Start+0xaa>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2201      	movs	r2, #1
 80042cc:	6839      	ldr	r1, [r7, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fade 	bl	8004890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1c      	ldr	r2, [pc, #112]	; (800434c <HAL_TIM_PWM_Start+0x130>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d107      	bne.n	80042ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a16      	ldr	r2, [pc, #88]	; (800434c <HAL_TIM_PWM_Start+0x130>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d009      	beq.n	800430c <HAL_TIM_PWM_Start+0xf0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004300:	d004      	beq.n	800430c <HAL_TIM_PWM_Start+0xf0>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a12      	ldr	r2, [pc, #72]	; (8004350 <HAL_TIM_PWM_Start+0x134>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d111      	bne.n	8004330 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b06      	cmp	r3, #6
 800431c:	d010      	beq.n	8004340 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432e:	e007      	b.n	8004340 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40012c00 	.word	0x40012c00
 8004350:	40000400 	.word	0x40000400

08004354 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800436a:	2302      	movs	r3, #2
 800436c:	e0ac      	b.n	80044c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b0c      	cmp	r3, #12
 800437a:	f200 809f 	bhi.w	80044bc <HAL_TIM_PWM_ConfigChannel+0x168>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043b9 	.word	0x080043b9
 8004388:	080044bd 	.word	0x080044bd
 800438c:	080044bd 	.word	0x080044bd
 8004390:	080044bd 	.word	0x080044bd
 8004394:	080043f9 	.word	0x080043f9
 8004398:	080044bd 	.word	0x080044bd
 800439c:	080044bd 	.word	0x080044bd
 80043a0:	080044bd 	.word	0x080044bd
 80043a4:	0800443b 	.word	0x0800443b
 80043a8:	080044bd 	.word	0x080044bd
 80043ac:	080044bd 	.word	0x080044bd
 80043b0:	080044bd 	.word	0x080044bd
 80043b4:	0800447b 	.word	0x0800447b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f8de 	bl	8004580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0208 	orr.w	r2, r2, #8
 80043d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0204 	bic.w	r2, r2, #4
 80043e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6999      	ldr	r1, [r3, #24]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	619a      	str	r2, [r3, #24]
      break;
 80043f6:	e062      	b.n	80044be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 f924 	bl	800464c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6999      	ldr	r1, [r3, #24]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	021a      	lsls	r2, r3, #8
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	619a      	str	r2, [r3, #24]
      break;
 8004438:	e041      	b.n	80044be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	4618      	mov	r0, r3
 8004442:	f000 f96d 	bl	8004720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0208 	orr.w	r2, r2, #8
 8004454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0204 	bic.w	r2, r2, #4
 8004464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69d9      	ldr	r1, [r3, #28]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	61da      	str	r2, [r3, #28]
      break;
 8004478:	e021      	b.n	80044be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	4618      	mov	r0, r3
 8004482:	f000 f9b7 	bl	80047f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69da      	ldr	r2, [r3, #28]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69d9      	ldr	r1, [r3, #28]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	021a      	lsls	r2, r3, #8
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	61da      	str	r2, [r3, #28]
      break;
 80044ba:	e000      	b.n	80044be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80044bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a25      	ldr	r2, [pc, #148]	; (8004578 <TIM_Base_SetConfig+0xa8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d007      	beq.n	80044f8 <TIM_Base_SetConfig+0x28>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ee:	d003      	beq.n	80044f8 <TIM_Base_SetConfig+0x28>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a22      	ldr	r2, [pc, #136]	; (800457c <TIM_Base_SetConfig+0xac>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d108      	bne.n	800450a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1a      	ldr	r2, [pc, #104]	; (8004578 <TIM_Base_SetConfig+0xa8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d007      	beq.n	8004522 <TIM_Base_SetConfig+0x52>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004518:	d003      	beq.n	8004522 <TIM_Base_SetConfig+0x52>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a17      	ldr	r2, [pc, #92]	; (800457c <TIM_Base_SetConfig+0xac>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d108      	bne.n	8004534 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a07      	ldr	r2, [pc, #28]	; (8004578 <TIM_Base_SetConfig+0xa8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d103      	bne.n	8004568 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	615a      	str	r2, [r3, #20]
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40000400 	.word	0x40000400

08004580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0201 	bic.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 0302 	bic.w	r3, r3, #2
 80045c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <TIM_OC1_SetConfig+0xc8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d10c      	bne.n	80045f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f023 0308 	bic.w	r3, r3, #8
 80045e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f023 0304 	bic.w	r3, r3, #4
 80045f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a13      	ldr	r2, [pc, #76]	; (8004648 <TIM_OC1_SetConfig+0xc8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d111      	bne.n	8004622 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800460c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	621a      	str	r2, [r3, #32]
}
 800463c:	bf00      	nop
 800463e:	371c      	adds	r7, #28
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40012c00 	.word	0x40012c00

0800464c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f023 0210 	bic.w	r2, r3, #16
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800467a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	021b      	lsls	r3, r3, #8
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f023 0320 	bic.w	r3, r3, #32
 8004696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a1d      	ldr	r2, [pc, #116]	; (800471c <TIM_OC2_SetConfig+0xd0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d10d      	bne.n	80046c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a14      	ldr	r2, [pc, #80]	; (800471c <TIM_OC2_SetConfig+0xd0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d113      	bne.n	80046f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	621a      	str	r2, [r3, #32]
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr
 800471c:	40012c00 	.word	0x40012c00

08004720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a1d      	ldr	r2, [pc, #116]	; (80047f0 <TIM_OC3_SetConfig+0xd0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d10d      	bne.n	800479a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a14      	ldr	r2, [pc, #80]	; (80047f0 <TIM_OC3_SetConfig+0xd0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d113      	bne.n	80047ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	621a      	str	r2, [r3, #32]
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40012c00 	.word	0x40012c00

080047f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	021b      	lsls	r3, r3, #8
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800483e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	031b      	lsls	r3, r3, #12
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a0f      	ldr	r2, [pc, #60]	; (800488c <TIM_OC4_SetConfig+0x98>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d109      	bne.n	8004868 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800485a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	019b      	lsls	r3, r3, #6
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr
 800488c:	40012c00 	.word	0x40012c00

08004890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	2201      	movs	r2, #1
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1a      	ldr	r2, [r3, #32]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	401a      	ands	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a1a      	ldr	r2, [r3, #32]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	fa01 f303 	lsl.w	r3, r1, r3
 80048c8:	431a      	orrs	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e041      	b.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a14      	ldr	r2, [pc, #80]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d009      	beq.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d004      	beq.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a10      	ldr	r2, [pc, #64]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d10c      	bne.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800494e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	4313      	orrs	r3, r2
 8004958:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40012c00 	.word	0x40012c00
 8004984:	40000400 	.word	0x40000400

08004988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e03f      	b.n	8004a1a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fd fab4 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2224      	movs	r2, #36	; 0x24
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fd8b 	bl	80054e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695a      	ldr	r2, [r3, #20]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b085      	sub	sp, #20
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d130      	bne.n	8004a9e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_UART_Transmit_IT+0x26>
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e029      	b.n	8004aa0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_UART_Transmit_IT+0x38>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e022      	b.n	8004aa0 <HAL_UART_Transmit_IT+0x7e>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	88fa      	ldrh	r2, [r7, #6]
 8004a72:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2221      	movs	r2, #33	; 0x21
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a98:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e000      	b.n	8004aa0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
  }
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr
	...

08004aac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d153      	bne.n	8004b6e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_UART_Transmit_DMA+0x26>
 8004acc:	88fb      	ldrh	r3, [r7, #6]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e04c      	b.n	8004b70 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_UART_Transmit_DMA+0x38>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e045      	b.n	8004b70 <HAL_UART_Transmit_DMA+0xc4>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	88fa      	ldrh	r2, [r7, #6]
 8004af6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	88fa      	ldrh	r2, [r7, #6]
 8004afc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2221      	movs	r2, #33	; 0x21
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b10:	4a19      	ldr	r2, [pc, #100]	; (8004b78 <HAL_UART_Transmit_DMA+0xcc>)
 8004b12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b18:	4a18      	ldr	r2, [pc, #96]	; (8004b7c <HAL_UART_Transmit_DMA+0xd0>)
 8004b1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	4a17      	ldr	r2, [pc, #92]	; (8004b80 <HAL_UART_Transmit_DMA+0xd4>)
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	2200      	movs	r2, #0
 8004b2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004b2c:	f107 0308 	add.w	r3, r7, #8
 8004b30:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6819      	ldr	r1, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	461a      	mov	r2, r3
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	f7fd fd9c 	bl	8002680 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b50:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695a      	ldr	r2, [r3, #20]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b68:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e000      	b.n	8004b70 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004b6e:	2302      	movs	r3, #2
  }
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	08004f85 	.word	0x08004f85
 8004b7c:	08004fd7 	.word	0x08004fd7
 8004b80:	080050bf 	.word	0x080050bf

08004b84 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d11d      	bne.n	8004bda <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_UART_Receive_DMA+0x26>
 8004ba4:	88fb      	ldrh	r3, [r7, #6]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e016      	b.n	8004bdc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_UART_Receive_DMA+0x38>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e00f      	b.n	8004bdc <HAL_UART_Receive_DMA+0x58>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 fabf 	bl	8005154 <UART_Start_Receive_DMA>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	e000      	b.n	8004bdc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	; 0x28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10d      	bne.n	8004c36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_UART_IRQHandler+0x52>
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fbb0 	bl	8005394 <UART_Receive_IT>
      return;
 8004c34:	e17b      	b.n	8004f2e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 80b1 	beq.w	8004da0 <HAL_UART_IRQHandler+0x1bc>
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d105      	bne.n	8004c54 <HAL_UART_IRQHandler+0x70>
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80a6 	beq.w	8004da0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <HAL_UART_IRQHandler+0x90>
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	f043 0201 	orr.w	r2, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_UART_IRQHandler+0xb0>
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	f043 0202 	orr.w	r2, r3, #2
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_UART_IRQHandler+0xd0>
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	f043 0204 	orr.w	r2, r3, #4
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00f      	beq.n	8004cde <HAL_UART_IRQHandler+0xfa>
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d104      	bne.n	8004cd2 <HAL_UART_IRQHandler+0xee>
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d005      	beq.n	8004cde <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f043 0208 	orr.w	r2, r3, #8
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 811e 	beq.w	8004f24 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <HAL_UART_IRQHandler+0x11e>
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fb49 	bl	8005394 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bf14      	ite	ne
 8004d10:	2301      	movne	r3, #1
 8004d12:	2300      	moveq	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d102      	bne.n	8004d2a <HAL_UART_IRQHandler+0x146>
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d031      	beq.n	8004d8e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fa8b 	bl	8005246 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d023      	beq.n	8004d86 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d013      	beq.n	8004d7e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	4a76      	ldr	r2, [pc, #472]	; (8004f34 <HAL_UART_IRQHandler+0x350>)
 8004d5c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fd fd26 	bl	80027b4 <HAL_DMA_Abort_IT>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d016      	beq.n	8004d9c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d78:	4610      	mov	r0, r2
 8004d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d7c:	e00e      	b.n	8004d9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f8ec 	bl	8004f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d84:	e00a      	b.n	8004d9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f8e8 	bl	8004f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8c:	e006      	b.n	8004d9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f8e4 	bl	8004f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d9a:	e0c3      	b.n	8004f24 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9c:	bf00      	nop
    return;
 8004d9e:	e0c1      	b.n	8004f24 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	f040 80a1 	bne.w	8004eec <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 809b 	beq.w	8004eec <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8095 	beq.w	8004eec <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d04e      	beq.n	8004e84 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004df0:	8a3b      	ldrh	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 8098 	beq.w	8004f28 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dfc:	8a3a      	ldrh	r2, [r7, #16]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	f080 8092 	bcs.w	8004f28 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8a3a      	ldrh	r2, [r7, #16]
 8004e08:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d02b      	beq.n	8004e6c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e22:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695a      	ldr	r2, [r3, #20]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e42:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0210 	bic.w	r2, r2, #16
 8004e60:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fd fc69 	bl	800273e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f876 	bl	8004f6e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e82:	e051      	b.n	8004f28 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d047      	beq.n	8004f2c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004e9c:	8a7b      	ldrh	r3, [r7, #18]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d044      	beq.n	8004f2c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004eb0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695a      	ldr	r2, [r3, #20]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0201 	bic.w	r2, r2, #1
 8004ec0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0210 	bic.w	r2, r2, #16
 8004ede:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ee0:	8a7b      	ldrh	r3, [r7, #18]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f842 	bl	8004f6e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004eea:	e01f      	b.n	8004f2c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <HAL_UART_IRQHandler+0x324>
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f9e0 	bl	80052c6 <UART_Transmit_IT>
    return;
 8004f06:	e012      	b.n	8004f2e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00d      	beq.n	8004f2e <HAL_UART_IRQHandler+0x34a>
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d008      	beq.n	8004f2e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fa21 	bl	8005364 <UART_EndTransmit_IT>
    return;
 8004f22:	e004      	b.n	8004f2e <HAL_UART_IRQHandler+0x34a>
    return;
 8004f24:	bf00      	nop
 8004f26:	e002      	b.n	8004f2e <HAL_UART_IRQHandler+0x34a>
      return;
 8004f28:	bf00      	nop
 8004f2a:	e000      	b.n	8004f2e <HAL_UART_IRQHandler+0x34a>
      return;
 8004f2c:	bf00      	nop
  }
}
 8004f2e:	3728      	adds	r7, #40	; 0x28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	0800529f 	.word	0x0800529f

08004f38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr

08004f4a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr

08004f6e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	460b      	mov	r3, r1
 8004f78:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d113      	bne.n	8004fc8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fb4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fc4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fc6:	e002      	b.n	8004fce <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f7fb fdf9 	bl	8000bc0 <HAL_UART_TxCpltCallback>
}
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f7ff ffa7 	bl	8004f38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	d12a      	bne.n	8005064 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005022:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695a      	ldr	r2, [r3, #20]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0201 	bic.w	r2, r2, #1
 8005032:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695a      	ldr	r2, [r3, #20]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005042:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	2b01      	cmp	r3, #1
 8005052:	d107      	bne.n	8005064 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0210 	bic.w	r2, r2, #16
 8005062:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	2b01      	cmp	r3, #1
 800506a:	d106      	bne.n	800507a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005070:	4619      	mov	r1, r3
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff ff7b 	bl	8004f6e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005078:	e002      	b.n	8005080 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7fb fd40 	bl	8000b00 <HAL_UART_RxCpltCallback>
}
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	2b01      	cmp	r3, #1
 800509c:	d108      	bne.n	80050b0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050a2:	085b      	lsrs	r3, r3, #1
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	4619      	mov	r1, r3
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7ff ff60 	bl	8004f6e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050ae:	e002      	b.n	80050b6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff ff4a 	bl	8004f4a <HAL_UART_RxHalfCpltCallback>
}
 80050b6:	bf00      	nop
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bf14      	ite	ne
 80050de:	2301      	movne	r3, #1
 80050e0:	2300      	moveq	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b21      	cmp	r3, #33	; 0x21
 80050f0:	d108      	bne.n	8005104 <UART_DMAError+0x46>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2200      	movs	r2, #0
 80050fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80050fe:	68b8      	ldr	r0, [r7, #8]
 8005100:	f000 f88c 	bl	800521c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf14      	ite	ne
 8005112:	2301      	movne	r3, #1
 8005114:	2300      	moveq	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b22      	cmp	r3, #34	; 0x22
 8005124:	d108      	bne.n	8005138 <UART_DMAError+0x7a>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2200      	movs	r2, #0
 8005130:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005132:	68b8      	ldr	r0, [r7, #8]
 8005134:	f000 f887 	bl	8005246 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	f043 0210 	orr.w	r2, r3, #16
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005144:	68b8      	ldr	r0, [r7, #8]
 8005146:	f7ff ff09 	bl	8004f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	4613      	mov	r3, r2
 8005160:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	88fa      	ldrh	r2, [r7, #6]
 800516c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2222      	movs	r2, #34	; 0x22
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	4a23      	ldr	r2, [pc, #140]	; (8005210 <UART_Start_Receive_DMA+0xbc>)
 8005182:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	4a22      	ldr	r2, [pc, #136]	; (8005214 <UART_Start_Receive_DMA+0xc0>)
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	4a21      	ldr	r2, [pc, #132]	; (8005218 <UART_Start_Receive_DMA+0xc4>)
 8005192:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	2200      	movs	r2, #0
 800519a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800519c:	f107 0308 	add.w	r3, r7, #8
 80051a0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4619      	mov	r1, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	f7fd fa64 	bl	8002680 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80051b8:	2300      	movs	r3, #0
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695a      	ldr	r2, [r3, #20]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695a      	ldr	r2, [r3, #20]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005204:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	08004ff3 	.word	0x08004ff3
 8005214:	08005089 	.word	0x08005089
 8005218:	080050bf 	.word	0x080050bf

0800521c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005232:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	bc80      	pop	{r7}
 8005244:	4770      	bx	lr

08005246 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800525c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695a      	ldr	r2, [r3, #20]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	2b01      	cmp	r3, #1
 8005274:	d107      	bne.n	8005286 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0210 	bic.w	r2, r2, #16
 8005284:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7ff fe4f 	bl	8004f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b21      	cmp	r3, #33	; 0x21
 80052d8:	d13e      	bne.n	8005358 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e2:	d114      	bne.n	800530e <UART_Transmit_IT+0x48>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d110      	bne.n	800530e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005300:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	1c9a      	adds	r2, r3, #2
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	621a      	str	r2, [r3, #32]
 800530c:	e008      	b.n	8005320 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	1c59      	adds	r1, r3, #1
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6211      	str	r1, [r2, #32]
 8005318:	781a      	ldrb	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29b      	uxth	r3, r3
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	4619      	mov	r1, r3
 800532e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10f      	bne.n	8005354 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005342:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005352:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	e000      	b.n	800535a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005358:	2302      	movs	r3, #2
  }
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr

08005364 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800537a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7fb fc1b 	bl	8000bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b22      	cmp	r3, #34	; 0x22
 80053a6:	f040 8099 	bne.w	80054dc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b2:	d117      	bne.n	80053e4 <UART_Receive_IT+0x50>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d113      	bne.n	80053e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053dc:	1c9a      	adds	r2, r3, #2
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	629a      	str	r2, [r3, #40]	; 0x28
 80053e2:	e026      	b.n	8005432 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f6:	d007      	beq.n	8005408 <UART_Receive_IT+0x74>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <UART_Receive_IT+0x82>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	b2da      	uxtb	r2, r3
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	e008      	b.n	8005428 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005422:	b2da      	uxtb	r2, r3
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b29b      	uxth	r3, r3
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	4619      	mov	r1, r3
 8005440:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005442:	2b00      	cmp	r3, #0
 8005444:	d148      	bne.n	80054d8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0220 	bic.w	r2, r2, #32
 8005454:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005464:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695a      	ldr	r2, [r3, #20]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0201 	bic.w	r2, r2, #1
 8005474:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	2b01      	cmp	r3, #1
 8005484:	d123      	bne.n	80054ce <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0210 	bic.w	r2, r2, #16
 800549a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d10a      	bne.n	80054c0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff fd51 	bl	8004f6e <HAL_UARTEx_RxEventCallback>
 80054cc:	e002      	b.n	80054d4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fb fb16 	bl	8000b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	e002      	b.n	80054de <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	e000      	b.n	80054de <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80054dc:	2302      	movs	r3, #2
  }
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005522:	f023 030c 	bic.w	r3, r3, #12
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6812      	ldr	r2, [r2, #0]
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	430b      	orrs	r3, r1
 800552e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a2c      	ldr	r2, [pc, #176]	; (80055fc <UART_SetConfig+0x114>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d103      	bne.n	8005558 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005550:	f7fe f876 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	e002      	b.n	800555e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005558:	f7fe f85e 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 800555c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	009a      	lsls	r2, r3, #2
 8005568:	441a      	add	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	fbb2 f3f3 	udiv	r3, r2, r3
 8005574:	4a22      	ldr	r2, [pc, #136]	; (8005600 <UART_SetConfig+0x118>)
 8005576:	fba2 2303 	umull	r2, r3, r2, r3
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	0119      	lsls	r1, r3, #4
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009a      	lsls	r2, r3, #2
 8005588:	441a      	add	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	fbb2 f2f3 	udiv	r2, r2, r3
 8005594:	4b1a      	ldr	r3, [pc, #104]	; (8005600 <UART_SetConfig+0x118>)
 8005596:	fba3 0302 	umull	r0, r3, r3, r2
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	2064      	movs	r0, #100	; 0x64
 800559e:	fb00 f303 	mul.w	r3, r0, r3
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	3332      	adds	r3, #50	; 0x32
 80055a8:	4a15      	ldr	r2, [pc, #84]	; (8005600 <UART_SetConfig+0x118>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055b4:	4419      	add	r1, r3
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009a      	lsls	r2, r3, #2
 80055c0:	441a      	add	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055cc:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <UART_SetConfig+0x118>)
 80055ce:	fba3 0302 	umull	r0, r3, r3, r2
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	2064      	movs	r0, #100	; 0x64
 80055d6:	fb00 f303 	mul.w	r3, r0, r3
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	3332      	adds	r3, #50	; 0x32
 80055e0:	4a07      	ldr	r2, [pc, #28]	; (8005600 <UART_SetConfig+0x118>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	f003 020f 	and.w	r2, r3, #15
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	440a      	add	r2, r1
 80055f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055f4:	bf00      	nop
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40013800 	.word	0x40013800
 8005600:	51eb851f 	.word	0x51eb851f

08005604 <__errno>:
 8005604:	4b01      	ldr	r3, [pc, #4]	; (800560c <__errno+0x8>)
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	2000000c 	.word	0x2000000c

08005610 <__libc_init_array>:
 8005610:	b570      	push	{r4, r5, r6, lr}
 8005612:	2600      	movs	r6, #0
 8005614:	4d0c      	ldr	r5, [pc, #48]	; (8005648 <__libc_init_array+0x38>)
 8005616:	4c0d      	ldr	r4, [pc, #52]	; (800564c <__libc_init_array+0x3c>)
 8005618:	1b64      	subs	r4, r4, r5
 800561a:	10a4      	asrs	r4, r4, #2
 800561c:	42a6      	cmp	r6, r4
 800561e:	d109      	bne.n	8005634 <__libc_init_array+0x24>
 8005620:	f000 fc70 	bl	8005f04 <_init>
 8005624:	2600      	movs	r6, #0
 8005626:	4d0a      	ldr	r5, [pc, #40]	; (8005650 <__libc_init_array+0x40>)
 8005628:	4c0a      	ldr	r4, [pc, #40]	; (8005654 <__libc_init_array+0x44>)
 800562a:	1b64      	subs	r4, r4, r5
 800562c:	10a4      	asrs	r4, r4, #2
 800562e:	42a6      	cmp	r6, r4
 8005630:	d105      	bne.n	800563e <__libc_init_array+0x2e>
 8005632:	bd70      	pop	{r4, r5, r6, pc}
 8005634:	f855 3b04 	ldr.w	r3, [r5], #4
 8005638:	4798      	blx	r3
 800563a:	3601      	adds	r6, #1
 800563c:	e7ee      	b.n	800561c <__libc_init_array+0xc>
 800563e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005642:	4798      	blx	r3
 8005644:	3601      	adds	r6, #1
 8005646:	e7f2      	b.n	800562e <__libc_init_array+0x1e>
 8005648:	08005fb8 	.word	0x08005fb8
 800564c:	08005fb8 	.word	0x08005fb8
 8005650:	08005fb8 	.word	0x08005fb8
 8005654:	08005fbc 	.word	0x08005fbc

08005658 <memcpy>:
 8005658:	440a      	add	r2, r1
 800565a:	4291      	cmp	r1, r2
 800565c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005660:	d100      	bne.n	8005664 <memcpy+0xc>
 8005662:	4770      	bx	lr
 8005664:	b510      	push	{r4, lr}
 8005666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800566a:	4291      	cmp	r1, r2
 800566c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005670:	d1f9      	bne.n	8005666 <memcpy+0xe>
 8005672:	bd10      	pop	{r4, pc}

08005674 <memset>:
 8005674:	4603      	mov	r3, r0
 8005676:	4402      	add	r2, r0
 8005678:	4293      	cmp	r3, r2
 800567a:	d100      	bne.n	800567e <memset+0xa>
 800567c:	4770      	bx	lr
 800567e:	f803 1b01 	strb.w	r1, [r3], #1
 8005682:	e7f9      	b.n	8005678 <memset+0x4>

08005684 <sniprintf>:
 8005684:	b40c      	push	{r2, r3}
 8005686:	b530      	push	{r4, r5, lr}
 8005688:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <sniprintf+0x64>)
 800568a:	1e0c      	subs	r4, r1, #0
 800568c:	681d      	ldr	r5, [r3, #0]
 800568e:	b09d      	sub	sp, #116	; 0x74
 8005690:	da08      	bge.n	80056a4 <sniprintf+0x20>
 8005692:	238b      	movs	r3, #139	; 0x8b
 8005694:	f04f 30ff 	mov.w	r0, #4294967295
 8005698:	602b      	str	r3, [r5, #0]
 800569a:	b01d      	add	sp, #116	; 0x74
 800569c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056a0:	b002      	add	sp, #8
 80056a2:	4770      	bx	lr
 80056a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80056a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80056ac:	bf0c      	ite	eq
 80056ae:	4623      	moveq	r3, r4
 80056b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80056b4:	9304      	str	r3, [sp, #16]
 80056b6:	9307      	str	r3, [sp, #28]
 80056b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056bc:	9002      	str	r0, [sp, #8]
 80056be:	9006      	str	r0, [sp, #24]
 80056c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80056c4:	4628      	mov	r0, r5
 80056c6:	ab21      	add	r3, sp, #132	; 0x84
 80056c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80056ca:	a902      	add	r1, sp, #8
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	f000 f869 	bl	80057a4 <_svfiprintf_r>
 80056d2:	1c43      	adds	r3, r0, #1
 80056d4:	bfbc      	itt	lt
 80056d6:	238b      	movlt	r3, #139	; 0x8b
 80056d8:	602b      	strlt	r3, [r5, #0]
 80056da:	2c00      	cmp	r4, #0
 80056dc:	d0dd      	beq.n	800569a <sniprintf+0x16>
 80056de:	2200      	movs	r2, #0
 80056e0:	9b02      	ldr	r3, [sp, #8]
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e7d9      	b.n	800569a <sniprintf+0x16>
 80056e6:	bf00      	nop
 80056e8:	2000000c 	.word	0x2000000c

080056ec <__ssputs_r>:
 80056ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f0:	688e      	ldr	r6, [r1, #8]
 80056f2:	4682      	mov	sl, r0
 80056f4:	429e      	cmp	r6, r3
 80056f6:	460c      	mov	r4, r1
 80056f8:	4690      	mov	r8, r2
 80056fa:	461f      	mov	r7, r3
 80056fc:	d838      	bhi.n	8005770 <__ssputs_r+0x84>
 80056fe:	898a      	ldrh	r2, [r1, #12]
 8005700:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005704:	d032      	beq.n	800576c <__ssputs_r+0x80>
 8005706:	6825      	ldr	r5, [r4, #0]
 8005708:	6909      	ldr	r1, [r1, #16]
 800570a:	3301      	adds	r3, #1
 800570c:	eba5 0901 	sub.w	r9, r5, r1
 8005710:	6965      	ldr	r5, [r4, #20]
 8005712:	444b      	add	r3, r9
 8005714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005718:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800571c:	106d      	asrs	r5, r5, #1
 800571e:	429d      	cmp	r5, r3
 8005720:	bf38      	it	cc
 8005722:	461d      	movcc	r5, r3
 8005724:	0553      	lsls	r3, r2, #21
 8005726:	d531      	bpl.n	800578c <__ssputs_r+0xa0>
 8005728:	4629      	mov	r1, r5
 800572a:	f000 fb45 	bl	8005db8 <_malloc_r>
 800572e:	4606      	mov	r6, r0
 8005730:	b950      	cbnz	r0, 8005748 <__ssputs_r+0x5c>
 8005732:	230c      	movs	r3, #12
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	f8ca 3000 	str.w	r3, [sl]
 800573c:	89a3      	ldrh	r3, [r4, #12]
 800573e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005742:	81a3      	strh	r3, [r4, #12]
 8005744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005748:	464a      	mov	r2, r9
 800574a:	6921      	ldr	r1, [r4, #16]
 800574c:	f7ff ff84 	bl	8005658 <memcpy>
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575a:	81a3      	strh	r3, [r4, #12]
 800575c:	6126      	str	r6, [r4, #16]
 800575e:	444e      	add	r6, r9
 8005760:	6026      	str	r6, [r4, #0]
 8005762:	463e      	mov	r6, r7
 8005764:	6165      	str	r5, [r4, #20]
 8005766:	eba5 0509 	sub.w	r5, r5, r9
 800576a:	60a5      	str	r5, [r4, #8]
 800576c:	42be      	cmp	r6, r7
 800576e:	d900      	bls.n	8005772 <__ssputs_r+0x86>
 8005770:	463e      	mov	r6, r7
 8005772:	4632      	mov	r2, r6
 8005774:	4641      	mov	r1, r8
 8005776:	6820      	ldr	r0, [r4, #0]
 8005778:	f000 fab8 	bl	8005cec <memmove>
 800577c:	68a3      	ldr	r3, [r4, #8]
 800577e:	6822      	ldr	r2, [r4, #0]
 8005780:	1b9b      	subs	r3, r3, r6
 8005782:	4432      	add	r2, r6
 8005784:	2000      	movs	r0, #0
 8005786:	60a3      	str	r3, [r4, #8]
 8005788:	6022      	str	r2, [r4, #0]
 800578a:	e7db      	b.n	8005744 <__ssputs_r+0x58>
 800578c:	462a      	mov	r2, r5
 800578e:	f000 fb6d 	bl	8005e6c <_realloc_r>
 8005792:	4606      	mov	r6, r0
 8005794:	2800      	cmp	r0, #0
 8005796:	d1e1      	bne.n	800575c <__ssputs_r+0x70>
 8005798:	4650      	mov	r0, sl
 800579a:	6921      	ldr	r1, [r4, #16]
 800579c:	f000 fac0 	bl	8005d20 <_free_r>
 80057a0:	e7c7      	b.n	8005732 <__ssputs_r+0x46>
	...

080057a4 <_svfiprintf_r>:
 80057a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a8:	4698      	mov	r8, r3
 80057aa:	898b      	ldrh	r3, [r1, #12]
 80057ac:	4607      	mov	r7, r0
 80057ae:	061b      	lsls	r3, r3, #24
 80057b0:	460d      	mov	r5, r1
 80057b2:	4614      	mov	r4, r2
 80057b4:	b09d      	sub	sp, #116	; 0x74
 80057b6:	d50e      	bpl.n	80057d6 <_svfiprintf_r+0x32>
 80057b8:	690b      	ldr	r3, [r1, #16]
 80057ba:	b963      	cbnz	r3, 80057d6 <_svfiprintf_r+0x32>
 80057bc:	2140      	movs	r1, #64	; 0x40
 80057be:	f000 fafb 	bl	8005db8 <_malloc_r>
 80057c2:	6028      	str	r0, [r5, #0]
 80057c4:	6128      	str	r0, [r5, #16]
 80057c6:	b920      	cbnz	r0, 80057d2 <_svfiprintf_r+0x2e>
 80057c8:	230c      	movs	r3, #12
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	f04f 30ff 	mov.w	r0, #4294967295
 80057d0:	e0d1      	b.n	8005976 <_svfiprintf_r+0x1d2>
 80057d2:	2340      	movs	r3, #64	; 0x40
 80057d4:	616b      	str	r3, [r5, #20]
 80057d6:	2300      	movs	r3, #0
 80057d8:	9309      	str	r3, [sp, #36]	; 0x24
 80057da:	2320      	movs	r3, #32
 80057dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057e0:	2330      	movs	r3, #48	; 0x30
 80057e2:	f04f 0901 	mov.w	r9, #1
 80057e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80057ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005990 <_svfiprintf_r+0x1ec>
 80057ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057f2:	4623      	mov	r3, r4
 80057f4:	469a      	mov	sl, r3
 80057f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057fa:	b10a      	cbz	r2, 8005800 <_svfiprintf_r+0x5c>
 80057fc:	2a25      	cmp	r2, #37	; 0x25
 80057fe:	d1f9      	bne.n	80057f4 <_svfiprintf_r+0x50>
 8005800:	ebba 0b04 	subs.w	fp, sl, r4
 8005804:	d00b      	beq.n	800581e <_svfiprintf_r+0x7a>
 8005806:	465b      	mov	r3, fp
 8005808:	4622      	mov	r2, r4
 800580a:	4629      	mov	r1, r5
 800580c:	4638      	mov	r0, r7
 800580e:	f7ff ff6d 	bl	80056ec <__ssputs_r>
 8005812:	3001      	adds	r0, #1
 8005814:	f000 80aa 	beq.w	800596c <_svfiprintf_r+0x1c8>
 8005818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800581a:	445a      	add	r2, fp
 800581c:	9209      	str	r2, [sp, #36]	; 0x24
 800581e:	f89a 3000 	ldrb.w	r3, [sl]
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 80a2 	beq.w	800596c <_svfiprintf_r+0x1c8>
 8005828:	2300      	movs	r3, #0
 800582a:	f04f 32ff 	mov.w	r2, #4294967295
 800582e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005832:	f10a 0a01 	add.w	sl, sl, #1
 8005836:	9304      	str	r3, [sp, #16]
 8005838:	9307      	str	r3, [sp, #28]
 800583a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800583e:	931a      	str	r3, [sp, #104]	; 0x68
 8005840:	4654      	mov	r4, sl
 8005842:	2205      	movs	r2, #5
 8005844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005848:	4851      	ldr	r0, [pc, #324]	; (8005990 <_svfiprintf_r+0x1ec>)
 800584a:	f000 fa41 	bl	8005cd0 <memchr>
 800584e:	9a04      	ldr	r2, [sp, #16]
 8005850:	b9d8      	cbnz	r0, 800588a <_svfiprintf_r+0xe6>
 8005852:	06d0      	lsls	r0, r2, #27
 8005854:	bf44      	itt	mi
 8005856:	2320      	movmi	r3, #32
 8005858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800585c:	0711      	lsls	r1, r2, #28
 800585e:	bf44      	itt	mi
 8005860:	232b      	movmi	r3, #43	; 0x2b
 8005862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005866:	f89a 3000 	ldrb.w	r3, [sl]
 800586a:	2b2a      	cmp	r3, #42	; 0x2a
 800586c:	d015      	beq.n	800589a <_svfiprintf_r+0xf6>
 800586e:	4654      	mov	r4, sl
 8005870:	2000      	movs	r0, #0
 8005872:	f04f 0c0a 	mov.w	ip, #10
 8005876:	9a07      	ldr	r2, [sp, #28]
 8005878:	4621      	mov	r1, r4
 800587a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800587e:	3b30      	subs	r3, #48	; 0x30
 8005880:	2b09      	cmp	r3, #9
 8005882:	d94e      	bls.n	8005922 <_svfiprintf_r+0x17e>
 8005884:	b1b0      	cbz	r0, 80058b4 <_svfiprintf_r+0x110>
 8005886:	9207      	str	r2, [sp, #28]
 8005888:	e014      	b.n	80058b4 <_svfiprintf_r+0x110>
 800588a:	eba0 0308 	sub.w	r3, r0, r8
 800588e:	fa09 f303 	lsl.w	r3, r9, r3
 8005892:	4313      	orrs	r3, r2
 8005894:	46a2      	mov	sl, r4
 8005896:	9304      	str	r3, [sp, #16]
 8005898:	e7d2      	b.n	8005840 <_svfiprintf_r+0x9c>
 800589a:	9b03      	ldr	r3, [sp, #12]
 800589c:	1d19      	adds	r1, r3, #4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	9103      	str	r1, [sp, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bfbb      	ittet	lt
 80058a6:	425b      	neglt	r3, r3
 80058a8:	f042 0202 	orrlt.w	r2, r2, #2
 80058ac:	9307      	strge	r3, [sp, #28]
 80058ae:	9307      	strlt	r3, [sp, #28]
 80058b0:	bfb8      	it	lt
 80058b2:	9204      	strlt	r2, [sp, #16]
 80058b4:	7823      	ldrb	r3, [r4, #0]
 80058b6:	2b2e      	cmp	r3, #46	; 0x2e
 80058b8:	d10c      	bne.n	80058d4 <_svfiprintf_r+0x130>
 80058ba:	7863      	ldrb	r3, [r4, #1]
 80058bc:	2b2a      	cmp	r3, #42	; 0x2a
 80058be:	d135      	bne.n	800592c <_svfiprintf_r+0x188>
 80058c0:	9b03      	ldr	r3, [sp, #12]
 80058c2:	3402      	adds	r4, #2
 80058c4:	1d1a      	adds	r2, r3, #4
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	9203      	str	r2, [sp, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	bfb8      	it	lt
 80058ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80058d2:	9305      	str	r3, [sp, #20]
 80058d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059a0 <_svfiprintf_r+0x1fc>
 80058d8:	2203      	movs	r2, #3
 80058da:	4650      	mov	r0, sl
 80058dc:	7821      	ldrb	r1, [r4, #0]
 80058de:	f000 f9f7 	bl	8005cd0 <memchr>
 80058e2:	b140      	cbz	r0, 80058f6 <_svfiprintf_r+0x152>
 80058e4:	2340      	movs	r3, #64	; 0x40
 80058e6:	eba0 000a 	sub.w	r0, r0, sl
 80058ea:	fa03 f000 	lsl.w	r0, r3, r0
 80058ee:	9b04      	ldr	r3, [sp, #16]
 80058f0:	3401      	adds	r4, #1
 80058f2:	4303      	orrs	r3, r0
 80058f4:	9304      	str	r3, [sp, #16]
 80058f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058fa:	2206      	movs	r2, #6
 80058fc:	4825      	ldr	r0, [pc, #148]	; (8005994 <_svfiprintf_r+0x1f0>)
 80058fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005902:	f000 f9e5 	bl	8005cd0 <memchr>
 8005906:	2800      	cmp	r0, #0
 8005908:	d038      	beq.n	800597c <_svfiprintf_r+0x1d8>
 800590a:	4b23      	ldr	r3, [pc, #140]	; (8005998 <_svfiprintf_r+0x1f4>)
 800590c:	bb1b      	cbnz	r3, 8005956 <_svfiprintf_r+0x1b2>
 800590e:	9b03      	ldr	r3, [sp, #12]
 8005910:	3307      	adds	r3, #7
 8005912:	f023 0307 	bic.w	r3, r3, #7
 8005916:	3308      	adds	r3, #8
 8005918:	9303      	str	r3, [sp, #12]
 800591a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800591c:	4433      	add	r3, r6
 800591e:	9309      	str	r3, [sp, #36]	; 0x24
 8005920:	e767      	b.n	80057f2 <_svfiprintf_r+0x4e>
 8005922:	460c      	mov	r4, r1
 8005924:	2001      	movs	r0, #1
 8005926:	fb0c 3202 	mla	r2, ip, r2, r3
 800592a:	e7a5      	b.n	8005878 <_svfiprintf_r+0xd4>
 800592c:	2300      	movs	r3, #0
 800592e:	f04f 0c0a 	mov.w	ip, #10
 8005932:	4619      	mov	r1, r3
 8005934:	3401      	adds	r4, #1
 8005936:	9305      	str	r3, [sp, #20]
 8005938:	4620      	mov	r0, r4
 800593a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800593e:	3a30      	subs	r2, #48	; 0x30
 8005940:	2a09      	cmp	r2, #9
 8005942:	d903      	bls.n	800594c <_svfiprintf_r+0x1a8>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0c5      	beq.n	80058d4 <_svfiprintf_r+0x130>
 8005948:	9105      	str	r1, [sp, #20]
 800594a:	e7c3      	b.n	80058d4 <_svfiprintf_r+0x130>
 800594c:	4604      	mov	r4, r0
 800594e:	2301      	movs	r3, #1
 8005950:	fb0c 2101 	mla	r1, ip, r1, r2
 8005954:	e7f0      	b.n	8005938 <_svfiprintf_r+0x194>
 8005956:	ab03      	add	r3, sp, #12
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	462a      	mov	r2, r5
 800595c:	4638      	mov	r0, r7
 800595e:	4b0f      	ldr	r3, [pc, #60]	; (800599c <_svfiprintf_r+0x1f8>)
 8005960:	a904      	add	r1, sp, #16
 8005962:	f3af 8000 	nop.w
 8005966:	1c42      	adds	r2, r0, #1
 8005968:	4606      	mov	r6, r0
 800596a:	d1d6      	bne.n	800591a <_svfiprintf_r+0x176>
 800596c:	89ab      	ldrh	r3, [r5, #12]
 800596e:	065b      	lsls	r3, r3, #25
 8005970:	f53f af2c 	bmi.w	80057cc <_svfiprintf_r+0x28>
 8005974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005976:	b01d      	add	sp, #116	; 0x74
 8005978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597c:	ab03      	add	r3, sp, #12
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	462a      	mov	r2, r5
 8005982:	4638      	mov	r0, r7
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <_svfiprintf_r+0x1f8>)
 8005986:	a904      	add	r1, sp, #16
 8005988:	f000 f87c 	bl	8005a84 <_printf_i>
 800598c:	e7eb      	b.n	8005966 <_svfiprintf_r+0x1c2>
 800598e:	bf00      	nop
 8005990:	08005f84 	.word	0x08005f84
 8005994:	08005f8e 	.word	0x08005f8e
 8005998:	00000000 	.word	0x00000000
 800599c:	080056ed 	.word	0x080056ed
 80059a0:	08005f8a 	.word	0x08005f8a

080059a4 <_printf_common>:
 80059a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a8:	4616      	mov	r6, r2
 80059aa:	4699      	mov	r9, r3
 80059ac:	688a      	ldr	r2, [r1, #8]
 80059ae:	690b      	ldr	r3, [r1, #16]
 80059b0:	4607      	mov	r7, r0
 80059b2:	4293      	cmp	r3, r2
 80059b4:	bfb8      	it	lt
 80059b6:	4613      	movlt	r3, r2
 80059b8:	6033      	str	r3, [r6, #0]
 80059ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059be:	460c      	mov	r4, r1
 80059c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059c4:	b10a      	cbz	r2, 80059ca <_printf_common+0x26>
 80059c6:	3301      	adds	r3, #1
 80059c8:	6033      	str	r3, [r6, #0]
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	0699      	lsls	r1, r3, #26
 80059ce:	bf42      	ittt	mi
 80059d0:	6833      	ldrmi	r3, [r6, #0]
 80059d2:	3302      	addmi	r3, #2
 80059d4:	6033      	strmi	r3, [r6, #0]
 80059d6:	6825      	ldr	r5, [r4, #0]
 80059d8:	f015 0506 	ands.w	r5, r5, #6
 80059dc:	d106      	bne.n	80059ec <_printf_common+0x48>
 80059de:	f104 0a19 	add.w	sl, r4, #25
 80059e2:	68e3      	ldr	r3, [r4, #12]
 80059e4:	6832      	ldr	r2, [r6, #0]
 80059e6:	1a9b      	subs	r3, r3, r2
 80059e8:	42ab      	cmp	r3, r5
 80059ea:	dc28      	bgt.n	8005a3e <_printf_common+0x9a>
 80059ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059f0:	1e13      	subs	r3, r2, #0
 80059f2:	6822      	ldr	r2, [r4, #0]
 80059f4:	bf18      	it	ne
 80059f6:	2301      	movne	r3, #1
 80059f8:	0692      	lsls	r2, r2, #26
 80059fa:	d42d      	bmi.n	8005a58 <_printf_common+0xb4>
 80059fc:	4649      	mov	r1, r9
 80059fe:	4638      	mov	r0, r7
 8005a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a04:	47c0      	blx	r8
 8005a06:	3001      	adds	r0, #1
 8005a08:	d020      	beq.n	8005a4c <_printf_common+0xa8>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	68e5      	ldr	r5, [r4, #12]
 8005a0e:	f003 0306 	and.w	r3, r3, #6
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	bf18      	it	ne
 8005a16:	2500      	movne	r5, #0
 8005a18:	6832      	ldr	r2, [r6, #0]
 8005a1a:	f04f 0600 	mov.w	r6, #0
 8005a1e:	68a3      	ldr	r3, [r4, #8]
 8005a20:	bf08      	it	eq
 8005a22:	1aad      	subeq	r5, r5, r2
 8005a24:	6922      	ldr	r2, [r4, #16]
 8005a26:	bf08      	it	eq
 8005a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	bfc4      	itt	gt
 8005a30:	1a9b      	subgt	r3, r3, r2
 8005a32:	18ed      	addgt	r5, r5, r3
 8005a34:	341a      	adds	r4, #26
 8005a36:	42b5      	cmp	r5, r6
 8005a38:	d11a      	bne.n	8005a70 <_printf_common+0xcc>
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	e008      	b.n	8005a50 <_printf_common+0xac>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4652      	mov	r2, sl
 8005a42:	4649      	mov	r1, r9
 8005a44:	4638      	mov	r0, r7
 8005a46:	47c0      	blx	r8
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d103      	bne.n	8005a54 <_printf_common+0xb0>
 8005a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a54:	3501      	adds	r5, #1
 8005a56:	e7c4      	b.n	80059e2 <_printf_common+0x3e>
 8005a58:	2030      	movs	r0, #48	; 0x30
 8005a5a:	18e1      	adds	r1, r4, r3
 8005a5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a66:	4422      	add	r2, r4
 8005a68:	3302      	adds	r3, #2
 8005a6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a6e:	e7c5      	b.n	80059fc <_printf_common+0x58>
 8005a70:	2301      	movs	r3, #1
 8005a72:	4622      	mov	r2, r4
 8005a74:	4649      	mov	r1, r9
 8005a76:	4638      	mov	r0, r7
 8005a78:	47c0      	blx	r8
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	d0e6      	beq.n	8005a4c <_printf_common+0xa8>
 8005a7e:	3601      	adds	r6, #1
 8005a80:	e7d9      	b.n	8005a36 <_printf_common+0x92>
	...

08005a84 <_printf_i>:
 8005a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a88:	460c      	mov	r4, r1
 8005a8a:	7e27      	ldrb	r7, [r4, #24]
 8005a8c:	4691      	mov	r9, r2
 8005a8e:	2f78      	cmp	r7, #120	; 0x78
 8005a90:	4680      	mov	r8, r0
 8005a92:	469a      	mov	sl, r3
 8005a94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a9a:	d807      	bhi.n	8005aac <_printf_i+0x28>
 8005a9c:	2f62      	cmp	r7, #98	; 0x62
 8005a9e:	d80a      	bhi.n	8005ab6 <_printf_i+0x32>
 8005aa0:	2f00      	cmp	r7, #0
 8005aa2:	f000 80d9 	beq.w	8005c58 <_printf_i+0x1d4>
 8005aa6:	2f58      	cmp	r7, #88	; 0x58
 8005aa8:	f000 80a4 	beq.w	8005bf4 <_printf_i+0x170>
 8005aac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ab4:	e03a      	b.n	8005b2c <_printf_i+0xa8>
 8005ab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005aba:	2b15      	cmp	r3, #21
 8005abc:	d8f6      	bhi.n	8005aac <_printf_i+0x28>
 8005abe:	a001      	add	r0, pc, #4	; (adr r0, 8005ac4 <_printf_i+0x40>)
 8005ac0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ac4:	08005b1d 	.word	0x08005b1d
 8005ac8:	08005b31 	.word	0x08005b31
 8005acc:	08005aad 	.word	0x08005aad
 8005ad0:	08005aad 	.word	0x08005aad
 8005ad4:	08005aad 	.word	0x08005aad
 8005ad8:	08005aad 	.word	0x08005aad
 8005adc:	08005b31 	.word	0x08005b31
 8005ae0:	08005aad 	.word	0x08005aad
 8005ae4:	08005aad 	.word	0x08005aad
 8005ae8:	08005aad 	.word	0x08005aad
 8005aec:	08005aad 	.word	0x08005aad
 8005af0:	08005c3f 	.word	0x08005c3f
 8005af4:	08005b61 	.word	0x08005b61
 8005af8:	08005c21 	.word	0x08005c21
 8005afc:	08005aad 	.word	0x08005aad
 8005b00:	08005aad 	.word	0x08005aad
 8005b04:	08005c61 	.word	0x08005c61
 8005b08:	08005aad 	.word	0x08005aad
 8005b0c:	08005b61 	.word	0x08005b61
 8005b10:	08005aad 	.word	0x08005aad
 8005b14:	08005aad 	.word	0x08005aad
 8005b18:	08005c29 	.word	0x08005c29
 8005b1c:	680b      	ldr	r3, [r1, #0]
 8005b1e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b22:	1d1a      	adds	r2, r3, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	600a      	str	r2, [r1, #0]
 8005b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e0a4      	b.n	8005c7a <_printf_i+0x1f6>
 8005b30:	6825      	ldr	r5, [r4, #0]
 8005b32:	6808      	ldr	r0, [r1, #0]
 8005b34:	062e      	lsls	r6, r5, #24
 8005b36:	f100 0304 	add.w	r3, r0, #4
 8005b3a:	d50a      	bpl.n	8005b52 <_printf_i+0xce>
 8005b3c:	6805      	ldr	r5, [r0, #0]
 8005b3e:	600b      	str	r3, [r1, #0]
 8005b40:	2d00      	cmp	r5, #0
 8005b42:	da03      	bge.n	8005b4c <_printf_i+0xc8>
 8005b44:	232d      	movs	r3, #45	; 0x2d
 8005b46:	426d      	negs	r5, r5
 8005b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b4c:	230a      	movs	r3, #10
 8005b4e:	485e      	ldr	r0, [pc, #376]	; (8005cc8 <_printf_i+0x244>)
 8005b50:	e019      	b.n	8005b86 <_printf_i+0x102>
 8005b52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b56:	6805      	ldr	r5, [r0, #0]
 8005b58:	600b      	str	r3, [r1, #0]
 8005b5a:	bf18      	it	ne
 8005b5c:	b22d      	sxthne	r5, r5
 8005b5e:	e7ef      	b.n	8005b40 <_printf_i+0xbc>
 8005b60:	680b      	ldr	r3, [r1, #0]
 8005b62:	6825      	ldr	r5, [r4, #0]
 8005b64:	1d18      	adds	r0, r3, #4
 8005b66:	6008      	str	r0, [r1, #0]
 8005b68:	0628      	lsls	r0, r5, #24
 8005b6a:	d501      	bpl.n	8005b70 <_printf_i+0xec>
 8005b6c:	681d      	ldr	r5, [r3, #0]
 8005b6e:	e002      	b.n	8005b76 <_printf_i+0xf2>
 8005b70:	0669      	lsls	r1, r5, #25
 8005b72:	d5fb      	bpl.n	8005b6c <_printf_i+0xe8>
 8005b74:	881d      	ldrh	r5, [r3, #0]
 8005b76:	2f6f      	cmp	r7, #111	; 0x6f
 8005b78:	bf0c      	ite	eq
 8005b7a:	2308      	moveq	r3, #8
 8005b7c:	230a      	movne	r3, #10
 8005b7e:	4852      	ldr	r0, [pc, #328]	; (8005cc8 <_printf_i+0x244>)
 8005b80:	2100      	movs	r1, #0
 8005b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b86:	6866      	ldr	r6, [r4, #4]
 8005b88:	2e00      	cmp	r6, #0
 8005b8a:	bfa8      	it	ge
 8005b8c:	6821      	ldrge	r1, [r4, #0]
 8005b8e:	60a6      	str	r6, [r4, #8]
 8005b90:	bfa4      	itt	ge
 8005b92:	f021 0104 	bicge.w	r1, r1, #4
 8005b96:	6021      	strge	r1, [r4, #0]
 8005b98:	b90d      	cbnz	r5, 8005b9e <_printf_i+0x11a>
 8005b9a:	2e00      	cmp	r6, #0
 8005b9c:	d04d      	beq.n	8005c3a <_printf_i+0x1b6>
 8005b9e:	4616      	mov	r6, r2
 8005ba0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ba4:	fb03 5711 	mls	r7, r3, r1, r5
 8005ba8:	5dc7      	ldrb	r7, [r0, r7]
 8005baa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bae:	462f      	mov	r7, r5
 8005bb0:	42bb      	cmp	r3, r7
 8005bb2:	460d      	mov	r5, r1
 8005bb4:	d9f4      	bls.n	8005ba0 <_printf_i+0x11c>
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d10b      	bne.n	8005bd2 <_printf_i+0x14e>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	07df      	lsls	r7, r3, #31
 8005bbe:	d508      	bpl.n	8005bd2 <_printf_i+0x14e>
 8005bc0:	6923      	ldr	r3, [r4, #16]
 8005bc2:	6861      	ldr	r1, [r4, #4]
 8005bc4:	4299      	cmp	r1, r3
 8005bc6:	bfde      	ittt	le
 8005bc8:	2330      	movle	r3, #48	; 0x30
 8005bca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bce:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bd2:	1b92      	subs	r2, r2, r6
 8005bd4:	6122      	str	r2, [r4, #16]
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	4621      	mov	r1, r4
 8005bda:	4640      	mov	r0, r8
 8005bdc:	f8cd a000 	str.w	sl, [sp]
 8005be0:	aa03      	add	r2, sp, #12
 8005be2:	f7ff fedf 	bl	80059a4 <_printf_common>
 8005be6:	3001      	adds	r0, #1
 8005be8:	d14c      	bne.n	8005c84 <_printf_i+0x200>
 8005bea:	f04f 30ff 	mov.w	r0, #4294967295
 8005bee:	b004      	add	sp, #16
 8005bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf4:	4834      	ldr	r0, [pc, #208]	; (8005cc8 <_printf_i+0x244>)
 8005bf6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bfa:	680e      	ldr	r6, [r1, #0]
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c02:	061f      	lsls	r7, r3, #24
 8005c04:	600e      	str	r6, [r1, #0]
 8005c06:	d514      	bpl.n	8005c32 <_printf_i+0x1ae>
 8005c08:	07d9      	lsls	r1, r3, #31
 8005c0a:	bf44      	itt	mi
 8005c0c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c10:	6023      	strmi	r3, [r4, #0]
 8005c12:	b91d      	cbnz	r5, 8005c1c <_printf_i+0x198>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	f023 0320 	bic.w	r3, r3, #32
 8005c1a:	6023      	str	r3, [r4, #0]
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	e7af      	b.n	8005b80 <_printf_i+0xfc>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	f043 0320 	orr.w	r3, r3, #32
 8005c26:	6023      	str	r3, [r4, #0]
 8005c28:	2378      	movs	r3, #120	; 0x78
 8005c2a:	4828      	ldr	r0, [pc, #160]	; (8005ccc <_printf_i+0x248>)
 8005c2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c30:	e7e3      	b.n	8005bfa <_printf_i+0x176>
 8005c32:	065e      	lsls	r6, r3, #25
 8005c34:	bf48      	it	mi
 8005c36:	b2ad      	uxthmi	r5, r5
 8005c38:	e7e6      	b.n	8005c08 <_printf_i+0x184>
 8005c3a:	4616      	mov	r6, r2
 8005c3c:	e7bb      	b.n	8005bb6 <_printf_i+0x132>
 8005c3e:	680b      	ldr	r3, [r1, #0]
 8005c40:	6826      	ldr	r6, [r4, #0]
 8005c42:	1d1d      	adds	r5, r3, #4
 8005c44:	6960      	ldr	r0, [r4, #20]
 8005c46:	600d      	str	r5, [r1, #0]
 8005c48:	0635      	lsls	r5, r6, #24
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	d501      	bpl.n	8005c52 <_printf_i+0x1ce>
 8005c4e:	6018      	str	r0, [r3, #0]
 8005c50:	e002      	b.n	8005c58 <_printf_i+0x1d4>
 8005c52:	0671      	lsls	r1, r6, #25
 8005c54:	d5fb      	bpl.n	8005c4e <_printf_i+0x1ca>
 8005c56:	8018      	strh	r0, [r3, #0]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4616      	mov	r6, r2
 8005c5c:	6123      	str	r3, [r4, #16]
 8005c5e:	e7ba      	b.n	8005bd6 <_printf_i+0x152>
 8005c60:	680b      	ldr	r3, [r1, #0]
 8005c62:	1d1a      	adds	r2, r3, #4
 8005c64:	600a      	str	r2, [r1, #0]
 8005c66:	681e      	ldr	r6, [r3, #0]
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	6862      	ldr	r2, [r4, #4]
 8005c6e:	f000 f82f 	bl	8005cd0 <memchr>
 8005c72:	b108      	cbz	r0, 8005c78 <_printf_i+0x1f4>
 8005c74:	1b80      	subs	r0, r0, r6
 8005c76:	6060      	str	r0, [r4, #4]
 8005c78:	6863      	ldr	r3, [r4, #4]
 8005c7a:	6123      	str	r3, [r4, #16]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c82:	e7a8      	b.n	8005bd6 <_printf_i+0x152>
 8005c84:	4632      	mov	r2, r6
 8005c86:	4649      	mov	r1, r9
 8005c88:	4640      	mov	r0, r8
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	47d0      	blx	sl
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d0ab      	beq.n	8005bea <_printf_i+0x166>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	079b      	lsls	r3, r3, #30
 8005c96:	d413      	bmi.n	8005cc0 <_printf_i+0x23c>
 8005c98:	68e0      	ldr	r0, [r4, #12]
 8005c9a:	9b03      	ldr	r3, [sp, #12]
 8005c9c:	4298      	cmp	r0, r3
 8005c9e:	bfb8      	it	lt
 8005ca0:	4618      	movlt	r0, r3
 8005ca2:	e7a4      	b.n	8005bee <_printf_i+0x16a>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	4632      	mov	r2, r6
 8005ca8:	4649      	mov	r1, r9
 8005caa:	4640      	mov	r0, r8
 8005cac:	47d0      	blx	sl
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d09b      	beq.n	8005bea <_printf_i+0x166>
 8005cb2:	3501      	adds	r5, #1
 8005cb4:	68e3      	ldr	r3, [r4, #12]
 8005cb6:	9903      	ldr	r1, [sp, #12]
 8005cb8:	1a5b      	subs	r3, r3, r1
 8005cba:	42ab      	cmp	r3, r5
 8005cbc:	dcf2      	bgt.n	8005ca4 <_printf_i+0x220>
 8005cbe:	e7eb      	b.n	8005c98 <_printf_i+0x214>
 8005cc0:	2500      	movs	r5, #0
 8005cc2:	f104 0619 	add.w	r6, r4, #25
 8005cc6:	e7f5      	b.n	8005cb4 <_printf_i+0x230>
 8005cc8:	08005f95 	.word	0x08005f95
 8005ccc:	08005fa6 	.word	0x08005fa6

08005cd0 <memchr>:
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	b510      	push	{r4, lr}
 8005cd4:	b2c9      	uxtb	r1, r1
 8005cd6:	4402      	add	r2, r0
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	d101      	bne.n	8005ce2 <memchr+0x12>
 8005cde:	2000      	movs	r0, #0
 8005ce0:	e003      	b.n	8005cea <memchr+0x1a>
 8005ce2:	7804      	ldrb	r4, [r0, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	428c      	cmp	r4, r1
 8005ce8:	d1f6      	bne.n	8005cd8 <memchr+0x8>
 8005cea:	bd10      	pop	{r4, pc}

08005cec <memmove>:
 8005cec:	4288      	cmp	r0, r1
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	eb01 0402 	add.w	r4, r1, r2
 8005cf4:	d902      	bls.n	8005cfc <memmove+0x10>
 8005cf6:	4284      	cmp	r4, r0
 8005cf8:	4623      	mov	r3, r4
 8005cfa:	d807      	bhi.n	8005d0c <memmove+0x20>
 8005cfc:	1e43      	subs	r3, r0, #1
 8005cfe:	42a1      	cmp	r1, r4
 8005d00:	d008      	beq.n	8005d14 <memmove+0x28>
 8005d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d0a:	e7f8      	b.n	8005cfe <memmove+0x12>
 8005d0c:	4601      	mov	r1, r0
 8005d0e:	4402      	add	r2, r0
 8005d10:	428a      	cmp	r2, r1
 8005d12:	d100      	bne.n	8005d16 <memmove+0x2a>
 8005d14:	bd10      	pop	{r4, pc}
 8005d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d1e:	e7f7      	b.n	8005d10 <memmove+0x24>

08005d20 <_free_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4605      	mov	r5, r0
 8005d24:	2900      	cmp	r1, #0
 8005d26:	d043      	beq.n	8005db0 <_free_r+0x90>
 8005d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d2c:	1f0c      	subs	r4, r1, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bfb8      	it	lt
 8005d32:	18e4      	addlt	r4, r4, r3
 8005d34:	f000 f8d0 	bl	8005ed8 <__malloc_lock>
 8005d38:	4a1e      	ldr	r2, [pc, #120]	; (8005db4 <_free_r+0x94>)
 8005d3a:	6813      	ldr	r3, [r2, #0]
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	b933      	cbnz	r3, 8005d4e <_free_r+0x2e>
 8005d40:	6063      	str	r3, [r4, #4]
 8005d42:	6014      	str	r4, [r2, #0]
 8005d44:	4628      	mov	r0, r5
 8005d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d4a:	f000 b8cb 	b.w	8005ee4 <__malloc_unlock>
 8005d4e:	42a3      	cmp	r3, r4
 8005d50:	d90a      	bls.n	8005d68 <_free_r+0x48>
 8005d52:	6821      	ldr	r1, [r4, #0]
 8005d54:	1862      	adds	r2, r4, r1
 8005d56:	4293      	cmp	r3, r2
 8005d58:	bf01      	itttt	eq
 8005d5a:	681a      	ldreq	r2, [r3, #0]
 8005d5c:	685b      	ldreq	r3, [r3, #4]
 8005d5e:	1852      	addeq	r2, r2, r1
 8005d60:	6022      	streq	r2, [r4, #0]
 8005d62:	6063      	str	r3, [r4, #4]
 8005d64:	6004      	str	r4, [r0, #0]
 8005d66:	e7ed      	b.n	8005d44 <_free_r+0x24>
 8005d68:	461a      	mov	r2, r3
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	b10b      	cbz	r3, 8005d72 <_free_r+0x52>
 8005d6e:	42a3      	cmp	r3, r4
 8005d70:	d9fa      	bls.n	8005d68 <_free_r+0x48>
 8005d72:	6811      	ldr	r1, [r2, #0]
 8005d74:	1850      	adds	r0, r2, r1
 8005d76:	42a0      	cmp	r0, r4
 8005d78:	d10b      	bne.n	8005d92 <_free_r+0x72>
 8005d7a:	6820      	ldr	r0, [r4, #0]
 8005d7c:	4401      	add	r1, r0
 8005d7e:	1850      	adds	r0, r2, r1
 8005d80:	4283      	cmp	r3, r0
 8005d82:	6011      	str	r1, [r2, #0]
 8005d84:	d1de      	bne.n	8005d44 <_free_r+0x24>
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4401      	add	r1, r0
 8005d8c:	6011      	str	r1, [r2, #0]
 8005d8e:	6053      	str	r3, [r2, #4]
 8005d90:	e7d8      	b.n	8005d44 <_free_r+0x24>
 8005d92:	d902      	bls.n	8005d9a <_free_r+0x7a>
 8005d94:	230c      	movs	r3, #12
 8005d96:	602b      	str	r3, [r5, #0]
 8005d98:	e7d4      	b.n	8005d44 <_free_r+0x24>
 8005d9a:	6820      	ldr	r0, [r4, #0]
 8005d9c:	1821      	adds	r1, r4, r0
 8005d9e:	428b      	cmp	r3, r1
 8005da0:	bf01      	itttt	eq
 8005da2:	6819      	ldreq	r1, [r3, #0]
 8005da4:	685b      	ldreq	r3, [r3, #4]
 8005da6:	1809      	addeq	r1, r1, r0
 8005da8:	6021      	streq	r1, [r4, #0]
 8005daa:	6063      	str	r3, [r4, #4]
 8005dac:	6054      	str	r4, [r2, #4]
 8005dae:	e7c9      	b.n	8005d44 <_free_r+0x24>
 8005db0:	bd38      	pop	{r3, r4, r5, pc}
 8005db2:	bf00      	nop
 8005db4:	200000c8 	.word	0x200000c8

08005db8 <_malloc_r>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	1ccd      	adds	r5, r1, #3
 8005dbc:	f025 0503 	bic.w	r5, r5, #3
 8005dc0:	3508      	adds	r5, #8
 8005dc2:	2d0c      	cmp	r5, #12
 8005dc4:	bf38      	it	cc
 8005dc6:	250c      	movcc	r5, #12
 8005dc8:	2d00      	cmp	r5, #0
 8005dca:	4606      	mov	r6, r0
 8005dcc:	db01      	blt.n	8005dd2 <_malloc_r+0x1a>
 8005dce:	42a9      	cmp	r1, r5
 8005dd0:	d903      	bls.n	8005dda <_malloc_r+0x22>
 8005dd2:	230c      	movs	r3, #12
 8005dd4:	6033      	str	r3, [r6, #0]
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dda:	f000 f87d 	bl	8005ed8 <__malloc_lock>
 8005dde:	4921      	ldr	r1, [pc, #132]	; (8005e64 <_malloc_r+0xac>)
 8005de0:	680a      	ldr	r2, [r1, #0]
 8005de2:	4614      	mov	r4, r2
 8005de4:	b99c      	cbnz	r4, 8005e0e <_malloc_r+0x56>
 8005de6:	4f20      	ldr	r7, [pc, #128]	; (8005e68 <_malloc_r+0xb0>)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	b923      	cbnz	r3, 8005df6 <_malloc_r+0x3e>
 8005dec:	4621      	mov	r1, r4
 8005dee:	4630      	mov	r0, r6
 8005df0:	f000 f862 	bl	8005eb8 <_sbrk_r>
 8005df4:	6038      	str	r0, [r7, #0]
 8005df6:	4629      	mov	r1, r5
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f000 f85d 	bl	8005eb8 <_sbrk_r>
 8005dfe:	1c43      	adds	r3, r0, #1
 8005e00:	d123      	bne.n	8005e4a <_malloc_r+0x92>
 8005e02:	230c      	movs	r3, #12
 8005e04:	4630      	mov	r0, r6
 8005e06:	6033      	str	r3, [r6, #0]
 8005e08:	f000 f86c 	bl	8005ee4 <__malloc_unlock>
 8005e0c:	e7e3      	b.n	8005dd6 <_malloc_r+0x1e>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	1b5b      	subs	r3, r3, r5
 8005e12:	d417      	bmi.n	8005e44 <_malloc_r+0x8c>
 8005e14:	2b0b      	cmp	r3, #11
 8005e16:	d903      	bls.n	8005e20 <_malloc_r+0x68>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	441c      	add	r4, r3
 8005e1c:	6025      	str	r5, [r4, #0]
 8005e1e:	e004      	b.n	8005e2a <_malloc_r+0x72>
 8005e20:	6863      	ldr	r3, [r4, #4]
 8005e22:	42a2      	cmp	r2, r4
 8005e24:	bf0c      	ite	eq
 8005e26:	600b      	streq	r3, [r1, #0]
 8005e28:	6053      	strne	r3, [r2, #4]
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	f000 f85a 	bl	8005ee4 <__malloc_unlock>
 8005e30:	f104 000b 	add.w	r0, r4, #11
 8005e34:	1d23      	adds	r3, r4, #4
 8005e36:	f020 0007 	bic.w	r0, r0, #7
 8005e3a:	1ac2      	subs	r2, r0, r3
 8005e3c:	d0cc      	beq.n	8005dd8 <_malloc_r+0x20>
 8005e3e:	1a1b      	subs	r3, r3, r0
 8005e40:	50a3      	str	r3, [r4, r2]
 8005e42:	e7c9      	b.n	8005dd8 <_malloc_r+0x20>
 8005e44:	4622      	mov	r2, r4
 8005e46:	6864      	ldr	r4, [r4, #4]
 8005e48:	e7cc      	b.n	8005de4 <_malloc_r+0x2c>
 8005e4a:	1cc4      	adds	r4, r0, #3
 8005e4c:	f024 0403 	bic.w	r4, r4, #3
 8005e50:	42a0      	cmp	r0, r4
 8005e52:	d0e3      	beq.n	8005e1c <_malloc_r+0x64>
 8005e54:	1a21      	subs	r1, r4, r0
 8005e56:	4630      	mov	r0, r6
 8005e58:	f000 f82e 	bl	8005eb8 <_sbrk_r>
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d1dd      	bne.n	8005e1c <_malloc_r+0x64>
 8005e60:	e7cf      	b.n	8005e02 <_malloc_r+0x4a>
 8005e62:	bf00      	nop
 8005e64:	200000c8 	.word	0x200000c8
 8005e68:	200000cc 	.word	0x200000cc

08005e6c <_realloc_r>:
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	4607      	mov	r7, r0
 8005e70:	4614      	mov	r4, r2
 8005e72:	460e      	mov	r6, r1
 8005e74:	b921      	cbnz	r1, 8005e80 <_realloc_r+0x14>
 8005e76:	4611      	mov	r1, r2
 8005e78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e7c:	f7ff bf9c 	b.w	8005db8 <_malloc_r>
 8005e80:	b922      	cbnz	r2, 8005e8c <_realloc_r+0x20>
 8005e82:	f7ff ff4d 	bl	8005d20 <_free_r>
 8005e86:	4625      	mov	r5, r4
 8005e88:	4628      	mov	r0, r5
 8005e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e8c:	f000 f830 	bl	8005ef0 <_malloc_usable_size_r>
 8005e90:	42a0      	cmp	r0, r4
 8005e92:	d20f      	bcs.n	8005eb4 <_realloc_r+0x48>
 8005e94:	4621      	mov	r1, r4
 8005e96:	4638      	mov	r0, r7
 8005e98:	f7ff ff8e 	bl	8005db8 <_malloc_r>
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d0f2      	beq.n	8005e88 <_realloc_r+0x1c>
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	f7ff fbd7 	bl	8005658 <memcpy>
 8005eaa:	4631      	mov	r1, r6
 8005eac:	4638      	mov	r0, r7
 8005eae:	f7ff ff37 	bl	8005d20 <_free_r>
 8005eb2:	e7e9      	b.n	8005e88 <_realloc_r+0x1c>
 8005eb4:	4635      	mov	r5, r6
 8005eb6:	e7e7      	b.n	8005e88 <_realloc_r+0x1c>

08005eb8 <_sbrk_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	2300      	movs	r3, #0
 8005ebc:	4d05      	ldr	r5, [pc, #20]	; (8005ed4 <_sbrk_r+0x1c>)
 8005ebe:	4604      	mov	r4, r0
 8005ec0:	4608      	mov	r0, r1
 8005ec2:	602b      	str	r3, [r5, #0]
 8005ec4:	f7fc f98c 	bl	80021e0 <_sbrk>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d102      	bne.n	8005ed2 <_sbrk_r+0x1a>
 8005ecc:	682b      	ldr	r3, [r5, #0]
 8005ece:	b103      	cbz	r3, 8005ed2 <_sbrk_r+0x1a>
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
 8005ed4:	20000360 	.word	0x20000360

08005ed8 <__malloc_lock>:
 8005ed8:	4801      	ldr	r0, [pc, #4]	; (8005ee0 <__malloc_lock+0x8>)
 8005eda:	f000 b811 	b.w	8005f00 <__retarget_lock_acquire_recursive>
 8005ede:	bf00      	nop
 8005ee0:	20000368 	.word	0x20000368

08005ee4 <__malloc_unlock>:
 8005ee4:	4801      	ldr	r0, [pc, #4]	; (8005eec <__malloc_unlock+0x8>)
 8005ee6:	f000 b80c 	b.w	8005f02 <__retarget_lock_release_recursive>
 8005eea:	bf00      	nop
 8005eec:	20000368 	.word	0x20000368

08005ef0 <_malloc_usable_size_r>:
 8005ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ef4:	1f18      	subs	r0, r3, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bfbc      	itt	lt
 8005efa:	580b      	ldrlt	r3, [r1, r0]
 8005efc:	18c0      	addlt	r0, r0, r3
 8005efe:	4770      	bx	lr

08005f00 <__retarget_lock_acquire_recursive>:
 8005f00:	4770      	bx	lr

08005f02 <__retarget_lock_release_recursive>:
 8005f02:	4770      	bx	lr

08005f04 <_init>:
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	bf00      	nop
 8005f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0a:	bc08      	pop	{r3}
 8005f0c:	469e      	mov	lr, r3
 8005f0e:	4770      	bx	lr

08005f10 <_fini>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	bf00      	nop
 8005f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f16:	bc08      	pop	{r3}
 8005f18:	469e      	mov	lr, r3
 8005f1a:	4770      	bx	lr
